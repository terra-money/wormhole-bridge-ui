{"version":3,"sources":["components/HeaderText.tsx","hooks/useFetchForeignAsset.ts","components/Transfer/WaitingForWalletMessage.tsx","components/Attest/WaitingForWalletMessage.tsx","components/Attest/Create.tsx","components/ShowTx.tsx","components/Attest/CreatePreview.tsx","hooks/useHandleAttest.tsx","components/TransactionProgress.tsx","components/Attest/Send.tsx","components/Attest/SendPreview.tsx","hooks/useTransactionFees.tsx","components/LowBalanceWarning.tsx","components/Attest/Source.tsx","hooks/useCopyToClipboard.tsx","utils/pushToClipboard.ts","components/SmartAddress.tsx","components/Attest/SourcePreview.tsx","components/Attest/Target.tsx","components/Attest/TargetPreview.tsx","components/Attest/index.tsx","icons/Discord.svg","icons/Github.svg","icons/Medium.svg","icons/Telegram.svg","icons/Twitter.svg","icons/wormhole-network.svg","components/Footer.tsx","components/Home/index.tsx","hooks/useMetaplexData.ts","store/tokenSlice.ts","hooks/useSolanaTokenMap.ts","components/NumberTextField.tsx","components/SolanaCreateAssociatedAddress.tsx","components/Migration/SolanaWorkflow.tsx","hooks/useEthereumMigratorInformation.tsx","components/Migration/EvmWorkflow.tsx","components/Migration/index.tsx","components/Migration/EvmQuickMigrate.tsx","hooks/useCheckIfWormholeWrapped.ts","hooks/useFetchTargetAsset.ts","components/StepDescription.tsx","components/NFT/WaitingForWalletMessage.tsx","components/NFT/Redeem.tsx","components/NFT/RedeemPreview.tsx","hooks/useHandleNFTTransfer.tsx","hooks/useNFTTargetAddress.ts","components/NFT/Send.tsx","components/NFT/SendPreview.tsx","icons/bnb.svg","hooks/useGetSourceParsedTokenAccounts.ts","utils/ethereum.ts","hooks/useMarketsMap.ts","components/TokenSelectors/NFTViewer.tsx","components/TokenSelectors/TokenPicker.tsx","components/TokenSelectors/EvmTokenPicker.tsx","components/TokenSelectors/RefreshButtonWrapper.tsx","utils/sort.ts","components/TokenSelectors/SolanaTokenPicker.tsx","hooks/useTerraNativeBalances.ts","components/TokenSelectors/TerraTokenPicker.tsx","components/TokenSelectors/SourceTokenSelector.tsx","components/NFT/Source.tsx","components/NFT/SourcePreview.tsx","hooks/useSyncTargetAddress.ts","components/NFT/Target.tsx","components/NFT/TargetPreview.tsx","components/NFT/index.tsx","components/NFTOriginVerifier.tsx","components/Transfer/Redeem.tsx","components/Transfer/AddToMetamask.tsx","components/Transfer/RedeemPreview.tsx","hooks/useHandleTransfer.tsx","hooks/useTransferTargetAddress.ts","hooks/useEvmMetadata.ts","hooks/useTerraMetadata.ts","hooks/useTerraTokenMap.ts","hooks/useMetadata.ts","hooks/useGetTargetParsedTokenAccounts.ts","components/Transfer/RegisterNowButton.tsx","components/Transfer/Target.tsx","components/Transfer/TokenWarning.tsx","components/Transfer/SendConfirmationDialog.tsx","components/Transfer/Send.tsx","hooks/useAllowance.ts","components/Transfer/SendPreview.tsx","components/Transfer/Source.tsx","components/Transfer/SourcePreview.tsx","components/Transfer/TargetPreview.tsx","components/Transfer/index.tsx","utils/SolanaPriceStore.ts","hooks/useTVL.ts","components/Stats/tableComponents/TablePaginationActions.jsx","components/Stats/tableComponents/MuiReactTable.jsx","components/Stats/CustodyAddresses.tsx","hooks/useNFTTVL.ts","components/Stats/nftLists.ts","components/Stats/NFTStats.tsx","hooks/useTransactionCount.ts","components/Stats/TransactionMetrics.tsx","components/Stats/index.tsx","hooks/useOriginalAsset.ts","components/TokenOriginVerifier.tsx","hooks/useSolanaMigratorInformation.tsx","components/Migration/SolanaQuickMigrate.tsx","App.js","components/BackgroundImage.tsx","ErrorBoundary.js","store/index.ts","index.js","store/selectors.ts","components/ChainSelect.tsx","utils/getSignedVAAWithRetry.ts","contexts/BetaContext.tsx","icons/eth.svg","icons/avax.svg","icons/polygon.svg","components/EthereumSignerKey.tsx","components/SolanaWalletKey.tsx","icons/bsc.svg","icons/solana.svg","utils/metaplex.ts","store/transferSlice.ts","components/ToggleConnectedButton.tsx","contexts/TerraWalletContext.tsx","store/helpers.ts","contexts/EthereumProviderContext.tsx","hooks/useIsWalletReady.ts","store/nftSlice.ts","store/attestSlice.ts","components/ButtonWithLoader.tsx","hooks/useHandleCreateWrapped.tsx","hooks/useAttestSignedVAA.ts","hooks/useHandleNFTRedeem.tsx","hooks/useNFTSignedVAA.ts","components/Recovery.tsx","hooks/useHandleRedeem.tsx","hooks/useTransferSignedVAA.ts","utils/solana.ts","muiTheme.js","icons/oasis-network-rose-logo.svg","icons/terra.svg","utils/consts.ts","contexts/SolanaWalletContext.tsx","components/TerraWalletKey.tsx","components/KeyAndBalance.tsx","utils/parseError.ts","utils/terra.ts"],"names":["useStyles","makeStyles","theme","centeredContainer","textAlign","width","header","marginTop","spacing","marginBottom","breakpoints","down","linearGradient","background","COLORS","blue","green","WebkitBackgroundClip","backgroundClip","WebkitTextFillColor","MozBackgroundClip","MozTextFillColor","HeaderText","children","white","small","classes","className","Typography","variant","component","clsx","useFetchForeignAsset","originChain","originAsset","foreignChain","useEthereumProvider","provider","evmChainId","chainId","isReady","useIsWalletReady","hasCorrectEvmNetwork","getEvmChainId","useState","assetAddress","setAssetAddress","doesExist","setDoesExist","error","setError","isLoading","setIsLoading","originAssetHex","useMemo","nativeToHexString","e","previousArgs","setPreviousArgs","argsEqual","setArgs","useCallback","argumentError","isEVMChain","useEffect","getForeignAssetEth","getTokenBridgeAddressForChain","hexToUint8Array","CHAIN_ID_TERRA","lcd","LCDClient","TERRA_HOST","getForeignAssetTerra","TERRA_TOKEN_BRIDGE_ADDRESS","connection","Connection","SOLANA_HOST","getForeignAssetSolana","SOL_TOKEN_BRIDGE_ADDRESS","then","result","ethers","constants","AddressZero","catch","compoundError","isFetching","data","undefined","address","receivedAt","message","color","palette","warning","light","WAITING_FOR_WALLET_AND_CONF","WaitingForWalletMessage","isApproving","useSelector","selectTransferIsApproving","isSending","selectTransferIsSending","transferTx","selectTransferTransferTx","targetChain","selectTransferTargetChain","isRedeeming","selectTransferIsRedeeming","redeemTx","selectTransferRedeemTx","CHAIN_ID_SOLANA","selectAttestIsSending","attestTx","selectAttestAttestTx","selectAttestTargetChain","isCreating","selectAttestIsCreating","createTx","selectAttestCreateTx","alignCenter","margin","display","spacer","height","Create","selectAttestSourceAsset","selectAttestSourceChain","statusMessage","foreignAssetInfo","shouldUpdate","useHandleCreateWrapped","handleClick","disabled","showLoader","console","log","KeyAndBalance","CircularProgress","ButtonWithLoader","onClick","tx","viewButton","ShowTx","showExplorerLink","CLUSTER","explorerAddress","CHAIN_ID_ETH","id","CHAIN_ID_ETHEREUM_ROPSTEN","CHAIN_ID_BSC","CHAIN_ID_POLYGON","CHAIN_ID_AVAX","explorerName","getExplorerName","noWrap","Button","href","target","rel","size","description","CreatePreview","push","useHistory","dispatch","useDispatch","handleResetClick","reset","handleReturnClick","enqueueSnackbar","signer","sourceAsset","a","setIsSending","attestFromEth","receipt","setAttestTx","transactionHash","block","blockNumber","content","Alert","severity","sequence","parseSequenceFromLogEth","getBridgeAddressForChain","emitterAddress","getEmitterAddressEth","getSignedVAAWithRetry","vaaBytes","setSignedVAAHex","uint8ArrayToHex","parseError","solPK","wallet","attestFromSolana","SOL_BRIDGE_ADDRESS","toString","transaction","signSendAndConfirm","txid","getTransaction","info","Error","slot","parseSequenceFromLogSolana","getEmitterAddressSolana","asset","attestFromTerra","terraAddress","msg","postWithFees","waitForTerraExecution","txhash","parseSequenceFromLogTerra","getEmitterAddressTerra","useHandleAttest","useSnackbar","sourceChain","isTargetComplete","selectAttestIsTargetComplete","isSendComplete","selectAttestIsSendComplete","solanaWallet","useSolanaWallet","publicKey","terraWallet","useConnectedWallet","handleAttestClick","evm","solana","terra","root","TransactionProgress","currentBlock","setCurrentBlock","cancelled","Promise","resolve","setTimeout","getBlockNumber","newBlock","sub","onSlotChange","slotInfo","removeSlotChangeListener","blockDiff","expectedBlocks","LinearProgress","value","CHAINS_BY_ID","name","Send","SendPreview","SOLANA_THRESHOLD_LAMPORTS","BigInt","ETHEREUM_THRESHOLD_WEI","TERRA_THRESHOLD_ULUNA","isSufficientBalance","balance","getBalanceSolana","walletAddress","getMultipleAccountsRPC","PublicKey","results","length","lamports","getBalanceEvm","getBalance","toBigInt","getBalanceTerra","bank","coins","targetCoin","map","amount","denom","find","coin","reject","toBalanceString","formatUnits","NATIVE_TERRA_DECIMALS","useEthereumGasPrice","contract","estimateResults","setEstimateResults","getGasEstimates","EthGasEstimateSummary","methodType","estimate","style","alignItems","flexWrap","LocalGasStation","fontSize","currentGasPrice","lowEstimate","highEstimate","getDefaultNativeCurrencySymbol","terraEstimatesByContract","transfer","lowGasEstimate","highGasEstimate","evmEstimatesByContract","nft","createWrapped","lowEstimateGasAmount","highEstimateGasAmount","getGasPrice","priceInWei","parseFloat","toFixed","output","TerraGasEstimateSummary","GasEstimateSummary","alert","LowBalanceWarning","transactionFeeWarning","setBalance","loadStart","adjustedresult","balanceString","useTransactionFees","displayWarning","warningMessage","transferField","Source","isSourceComplete","selectAttestIsSourceComplete","shouldLockFields","selectAttestShouldLockFields","handleSourceChange","event","setSourceChain","handleAssetChange","setSourceAsset","handleNextClick","incrementStep","ChainSelect","select","fullWidth","onChange","chains","CHAINS","TextField","label","useCopyToClipboard","navigator","clipboard","writeText","pushToClipboard","mainTypog","marginLeft","marginRight","textDecoration","textUnderlineOffset","noGutter","noUnderline","buttons","StyledTooltip","withStyles","tooltip","minWidth","Tooltip","SmartAddress","parsedTokenAccount","symbol","tokenName","extraContent","isNativeTerra","isNativeDenom","useableAddress","mintKey","useableSymbol","formatNativeDenom","isNative","isNativeAsset","addressShort","shortenAddress","useableName","copyToClipboard","explorerButton","endIcon","OpenInNew","copyButton","FileCopy","tooltipContent","title","interactive","SourcePreview","explainerContent","Target","filter","c","handleTargetChange","setTargetChain","TargetPreview","explainerString","Attest","activeStep","selectAttestActiveStep","isCreateComplete","selectAttestIsCreateComplete","preventNavigation","window","onbeforeunload","Container","maxWidth","Stepper","orientation","Step","expanded","StepButton","setStep","StepContent","footer","socialIcon","builtWithContainer","justifyContent","opacity","wormholeIcon","transition","verticalAlign","Footer","IconButton","src","Discord","alt","Github","Medium","Telegram","Twitter","Wormhole","button","overview","mainCard","padding","backgroundColor","nearBlackWithMinorTransparency","chainList","chainCard","borderRadius","flexDirection","minHeight","chainLogoWrapper","position","chainLogo","chainName","flex","chip","blueWithTransparency","top","right","transform","Home","BETA_CHAINS","includes","chain","logo","COMING_SOON_CHAINS","item","Chip","Card","Link","RouterLink","to","getMetaplexData","mintAddresses","promises","getMetadataAddress","all","metaAddresses","pair","account","decodeMetadata","useMetaplexData","addresses","setResults","setReceivedAt","useLayoutEffect","metadatas","Map","forEach","metadata","x","mint","set","createResultMap","Date","toISOString","initialState","solanaTokenMap","getEmptyDataWrapper","terraTokenMap","marketsMap","tokenSlice","createSlice","reducers","receiveSolanaTokenMap","state","action","receiveDataWrapper","payload","fetchSolanaTokenMap","fetchDataWrapper","errorSolanaTokenMap","errorDataWrapper","receiveTerraTokenMap","fetchTerraTokenMap","errorTerraTokenMap","receiveMarketsMap","fetchMarketsMap","errorMarketsMap","actions","environment","ENV","Testnet","MainnetBeta","getSolanaTokenMap","TokenListProvider","tokens","tokenList","filterByChainId","getList","useSolanaTokenMap","tokenMap","selectSolanaTokenMap","shouldFire","NumberTextField","onMaxClick","props","type","InputProps","endAdornment","InputAdornment","useAssociatedAccountExistsState","mintAddress","readableTargetAddress","associatedAccountExists","setAssociatedAccountExists","mintPublicKey","payerPublicKey","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","associatedAddress","getAccountInfo","SolanaCreateAssociatedAddress","setIsCreating","Transaction","createAssociatedTokenAccountInstruction","add","getRecentBlockhash","blockhash","recentBlockhash","feePayer","SolanaCreateAssociatedAddressAlternate","selectTransferOriginChain","selectTransferOriginAsset","addressHex","selectTransferTargetAddressHex","base58TargetAddress","hexToNativeString","base58OriginAddress","targetAsset","setTargetAsset","handleForceCreateClick","mainPaper","divider","getDecimals","setter","pk","getParsedAccountInfo","decimals","parsed","tokenAmount","uiAmountString","Workflow","fromMint","toMint","fromTokenAccount","metaplexArray","metaplexData","poolAddress","setPoolAddress","poolExists","setPoolExists","fromTokenAccountBalance","setFromTokenAccountBalance","toTokenAccount","setToTokenAccount","toTokenAccountBalance","setToTokenAccountBalance","fromMintDecimals","setFromMintDecimals","fromTokenAccountExists","toTokenAccountExists","setToTokenAccountExists","toCustodyAddress","setToCustodyAddress","toCustodyBalance","setToCustodyBalance","migrationAmount","setMigrationAmount","migrationIsProcessing","setMigrationIsProcessing","setTransaction","getPoolAddress","MIGRATION_PROGRAM_ADDRESS","key","getMultipleAccounts","getToCustodyAddress","migrateTokens","migrateTokensTx","parseUnits","instruction","fromParse","hasRequisiteData","accountsReady","amountGreaterThanZero","sufficientFromTokens","sufficientPoolBalance","isReadyToTransfer","handleAmountChange","handleMaxClick","getMetadata","tokenMapItem","metaplexItem","get","logoURI","uri","toMetadata","fromMetadata","toMintPretty","fromMintPretty","SolanaWalletKey","getRequisiteData","migrator","signerAddress","fromAsset","fromAddress","toAsset","toAddress","fromToken","TokenImplementation__factory","connect","toToken","fromSymbol","toSymbol","fromDecimals","toNumber","toDecimals","sharesDecimals","balanceOf","fromWalletBalance","toWalletBalance","fromPoolBalance","toPoolBalance","walletSharesBalance","useEthereumMigratorInformation","migratorAddress","toggleRefresh","Migrator__factory","setData","containerDiv","EvmWorkflow","setToggleRefresh","forceRefresh","prevState","poolInfo","approve","migrate","wait","hash","toTokenPretty","fromTokenPretty","poolPretty","fatalError","mainWorkflow","EthereumSignerKey","SolanaRoot","legacyAsset","match","params","MIGRATION_ASSET_MAP","fromTokenAcct","EthereumRoot","targetPool","getMigrationAssetMap","getAddress","withRouter","Paper","Divider","lineItem","alignSelf","flexGrow","flewGrow","hidden","convertButton","EvmMigrationLineItem","onLoadComplete","loaded","setLoaded","valueA","decimalsA","valueB","decimalsB","decimalsBasis","normalizedA","normalizedB","compareWithDecimalOffset","migrationAmountAbs","getAddressBalances","factory","EvmQuickMigrate","migrationMap","eligibleTokens","Array","from","keys","migrators","setMigrators","migratorsError","setMigratorsError","migratorsLoading","setMigratorsLoading","migratorsFinishedLoading","setMigratorsFinishedLoading","reportLoadComplete","migratorAddresses","tokenAddress","gt","hasEligibleAssets","makeStateSafe","useCheckIfWormholeWrapped","selectNFTSourceChain","selectTransferSourceChain","selectNFTSourceAsset","selectTransferSourceAsset","nftSourceParsedTokenAccount","selectNFTSourceParsedTokenAccount","tokenId","setSourceWormholeWrappedInfo","setNFTSourceWormholeWrappedInfo","setTransferSourceWormholeWrappedInfo","isRecovery","selectNFTIsRecovery","selectTransferIsRecovery","getOriginalAssetEthNFT","getNFTBridgeAddressForChain","getOriginalAssetEth","wrappedInfo","getOriginalAssetSolNFT","SOL_NFT_BRIDGE_ADDRESS","getOriginalAssetSol","getOriginalAssetTerra","useFetchTargetAsset","isSourceAssetWormholeWrapped","selectNFTIsSourceAssetWormholeWrapped","selectTransferIsSourceAssetWormholeWrapped","selectNFTOriginChain","selectNFTOriginAsset","selectNFTOriginTokenId","selectNFTTargetChain","setNFTTargetAsset","setTransferTargetAsset","lastSuccessfulArgs","setLastSuccessfulArgs","argsMatchLastSuccess","getForeignAssetEthNFT","getForeignAssetSolNFT","arrayify","BigNumber","StepDescription","selectNFTIsSending","selectNFTTransferTx","selectNFTIsRedeeming","selectNFTRedeemTx","Redeem","useHandleNFTRedeem","RedeemPreview","recipientChain","recipientAddress","transferFromEth","setTransferTx","payerAddress","targetAddress","originAddressStr","originTokenId","originAddress","zeroPad","transferFromSolana","useHandleNFTTransfer","sourceTokenId","targetAddressHex","selectNFTTargetAddressHex","useNFTTargetAddressHex","selectNFTIsTargetComplete","selectNFTIsSendComplete","sourceParsedTokenAccount","sourceTokenPublicKey","handleTransferClick","selectNFTTargetError","sourceWalletAddress","selectNFTSourceWalletAddress","isWrongWallet","isDisabled","errorMessage","createParsedTokenAccount","uiAmount","createNFTParsedTokenAccount","animation_url","external_url","image","image_256","nftName","createParsedTokenAccountFromInfo","pubkey","createParsedTokenAccountFromCovalent","covalent","contract_address","contract_decimals","Number","contract_ticker_symbol","contract_name","logoOverrides","logo_url","createNativeSolParsedTokenAccount","fetchAccounts","WSOL_ADDRESS","WSOL_DECIMALS","createNativeEthParsedTokenAccount","balanceInWei","balanceInEth","utils","formatEther","WETH_ADDRESS","WETH_DECIMALS","ethIcon","createNativeEthRopstenParsedTokenAccount","ROPSTEN_WETH_ADDRESS","ROPSTEN_WETH_DECIMALS","createNativeBscParsedTokenAccount","WBNB_ADDRESS","WBNB_DECIMALS","bnbIcon","createNativePolygonParsedTokenAccount","WMATIC_ADDRESS","WMATIC_DECIMALS","polygonIcon","createNativeAvaxParsedTokenAccount","WAVAX_ADDRESS","WAVAX_DECIMALS","avaxIcon","createNFTParsedTokenAccountFromCovalent","nft_data","token_balance","token_id","token_url","external_data","getEthereumAccountsCovalent","url","COVALENT_GET_TOKENS_URL","axios","response","items","supports_erc","getSolanaParsedTokenAccounts","fetchSourceParsedTokenAccountsNFT","fetchSourceParsedTokenAccounts","getParsedTokenAccountsByOwner","programId","splParsedTokenAccounts","receiveSourceParsedTokenAccountsNFT","nativeAccount","unshift","receiveSourceParsedTokenAccounts","errorSourceParsedTokenAccountsNFT","errorSourceParsedTokenAccounts","useGetAvailableTokens","tokenAccounts","selectNFTSourceParsedTokenAccounts","selectTransferSourceParsedTokenAccounts","lookupChain","setCovalent","covalentLoading","setCovalentLoading","covalentError","setCovalentError","ethNativeAccount","setEthNativeAccount","ethNativeAccountLoading","setEthNativeAccountLoading","ethNativeAccountError","setEthNativeAccountError","solanaMintAccounts","setSolanaMintAccounts","solanaMintAccountsLoading","setSolanaMintAccountsLoading","solanaMintAccountsError","setSolanaMintAccountsError","selectedSourceWalletAddress","selectSourceWalletAddress","currentSourceWalletAddress","resetSourceAccounts","setSourceWalletAddressNFT","setSourceWalletAddress","setSourceParsedTokenAccountNFT","setSourceParsedTokenAccount","setSourceParsedTokenAccountsNFT","setSourceParsedTokenAccounts","setAmount","index","extractMintInfo","accounts","reduce","arr","current","ethAccounts","slice","mintAccounts","resetAccounts","getEthereumToken","token","ethTokenToParsedTokenAccount","getEthereumNFT","NFTImplementation__factory","isNFT","erc721metadata","supportsInterface","supportsErc721","supportsErc721Metadata","ethNFTToNFTParsedTokenAccount","ownerOf","tokenURI","isValidEthereumAddress","isAddress","getMarketsMap","FEATURED_MARKETS_JSON_URL","useMarketsMap","selectMarketsMap","internalShouldFire","safeIPFS","startsWith","replace","LogoIcon","Avatar","solanaIcon","bscIcon","card","zIndex","backgroundPosition","backgroundSize","silverBorder","cardInset","textContent","paddingTop","paddingBottom","detailsContent","mediaContent","border","silverMediaBorder","borderColor","eth","bsc","polygon","skeleton","placeItems","wormholePositioner","ViewerLoader","Skeleton","animation","NFTViewer","setMetadata","isMediaLoading","setIsMediaLoading","onLoad","m","image_url","big_image","small_image","animLower","toLowerCase","hasVideo","endsWith","hasAudio","hasImage","copyTokenId","videoSrc","imageSrc","audioSrc","onError","media","autoPlay","controls","loop","onLoadedData","elevation","CardContent","CardMedia","align","arrow","substr","createStyles","optionContainer","optionContent","maxHeight","overflow","dialogContent","overflowX","selectionButtonContainer","selectionButton","values","sm","tokenOverviewContainer","flexBasis","flexShrink","tokenImageContainer","tokenImage","tokenMarketsList","order","migrationAlert","flexTitle","grower","balancePretty","uiString","numberString","split","gte","substring","noClickThrough","stopPropagation","BasicAccountRender","isMigrationEligible","displayBalance","marketsData","mintPrettyString","shouldDisplayBalance","nftContent","wordBreak","tokenContent","markets","market","Launch","link","migrationRender","TokenPicker","options","RenderOption","isValidAddress","useTokenId","holderString","setHolderString","tokenIdHolderString","setTokenIdHolderString","loadingError","setLoadingError","isLocalLoading","setLocalLoading","dialogIsOpen","setDialogIsOpen","selectionError","setSelectionError","openDialog","closeDialog","handleSelectOption","option","newOption","resetAccountsWrapper","searchFilter","optionString","searchString","marketChainTokens","featuredMarkets","tokenMarkets","featuredOptions","ownedMarketTokens","Object","nonFeaturedOptions","localFind","localLoader","displayLocalError","dialog","Dialog","onClose","open","DialogTitle","DialogContent","AVAILABLE_MARKETS_URL","List","gutterBottom","InfoOutlined","ListItem","selectionChip","isWormholev1","WormholeAbi__factory","WORMHOLE_V1_ETH_ADDRESS","isWrappedAsset","EvmTokenPicker","selectedTokenAccount","selectTransferSourceParsedTokenAccount","tokenAccount","selectedMintMatch","selectedTokenIdMatch","getEthAddress","onChangeWrapper","v1","migration","RenderComp","inlineContentWrapper","flexWrapper","RefreshButtonWrapper","callback","sortParsedTokenAccounts","b","localeCompare","SolanaSourceTokenSelector","mintAuth","metaplex","memoizedTokenMap","getLogo","getSymbol","getName","filteredOptions","is721CompatibleNFT","supply","sort","accountsWithMetadata","mintAuthority","WORMHOLE_V1_MINT_AUTHORITY","newValue","useTerraNativeBalances","refreshRef","balances","setBalances","refresh","setRefresh","obj","returnsFalse","TerraTokenPicker","nativeRefresh","useRef","nativeIsLoading","resetAccountWrapper","terraTokenArray","getNativeTerraIcon","SUPPORTED_TERRA_TOKENS","lookupTerraAddress","lookupAsset","wasm","contractQuery","token_info","isSearchableAddress","isValidTerraAddress","TokenSelector","walletIsReady","setNFTSourceParsedTokenAccount","setTransferSourceParsedTokenAccount","setNFTSourceWalletAddress","setTransferSourceWalletAddress","handleOnChange","newTokenAccount","maps","useGetSourceParsedTokens","placeholder","selectNFTSourceBalanceString","selectNFTSourceError","selectNFTIsSourceComplete","selectNFTShouldLockFields","VerifiedUser","CHAINS_WITH_NFT_SUPPORT","useSyncTargetAddress","selectNFTTargetAsset","selectTransferTargetAsset","targetParsedTokenAccount","selectTransferTargetParsedTokenAccount","targetTokenAccountPublicKey","setTargetAddressHex","setNFTTargetAddressHex","setTransferTargetAddressHex","toBytes","associatedTokenAccount","canonicalAddress","targetAddressNative","NFT","selectNFTActiveStep","isRedeemComplete","selectNFTIsRedeemComplete","originHeader","viewButtonWrapper","loaderWrapper","NFTOriginVerifier","isBeta","useBetaContext","setLookupChain","setLookupAsset","lookupTokenId","setLookupTokenId","lookupError","setLookupError","setParsedTokenAccount","originInfo","setOriginInfo","handleChainChange","handleTokenIdChange","newParsedTokenAccount","readableAddress","displayError","MenuItem","useHandleRedeem","handleNativeClick","isEthNative","isEthRopstenNative","isBscNative","isPolygonNative","isAvaxNative","isSolNative","isNativeEligible","useNativeRedeem","setUseNativeRedeem","toggleNativeRedeem","FormControlLabel","control","Checkbox","checked","addButton","AddToMetamask","detectEthereumProvider","request","method","amountParsed","transferFromEthNative","promise","transferNativeSol","transferFromTerra","msgs","useHandleTransfer","selectTransferAmount","useTransferTargetAddressHex","selectTransferIsTargetComplete","selectTransferIsSendComplete","ERC20_BASIC_ABI","handleError","fetchSingleMetadata","Contract","fetchEthMetadata","resultsArray","useEvmMetadata","setIsFetching","fetchTerraMetadata","useTerraMetadata","getTerraTokenMap","TERRA_TOKEN_METADATA_URL","useTerraTokenMap","selectTerraTokenMap","useMetadata","solanaAddresses","terraAddresses","ethereumAddresses","terraMetadata","ethMetadata","tokenInfo","raw","constructSolanaMetadata","metadataMap","meta","constructEthMetadata","mainnet","icon","constructTerraMetadata","useGetTargetParsedTokenAccounts","targetAssetArrayed","hasResolvedMetadata","setTargetParsedTokenAccount","n","RegisterNowButtonCore","history","signedVAAHex","selectAttestSignedVAAHex","canSwitch","nativeAsset","RegisterNowButton","useTargetInfo","selectTransferTargetAssetWrapper","targetAssetError","selectTransferTargetBalanceString","transferAmount","selectTransferTargetError","selectTransferShouldLockFields","container","line","WormholeWrappedWarning","Box","fontWeight","MultichainWarning","RewardsWarning","TokenWarning","searchableAddress","isWormholeWrapped","multichainSymbol","MULTI_CHAIN_TOKENS","isMultiChain","showMultiChainWarning","showWrappedWarning","showRewardsWarning","SendConfirmationContent","deservesTimeout","countdown","setCountdown","setInterval","ArrowDownward","DialogActions","SendConfirmationDialog","isConfirmOpen","setIsConfirmOpen","handleConfirmClick","handleConfirmClose","sourceAmount","sourceDecimals","sourceIsNative","sourceAmountParsed","oneParsed","allowanceError","setAllowanceError","shouldApproveUnlimited","setShouldApproveUnlimited","toggleShouldApproveUnlimited","allowance","setAllowance","isAllowanceFetching","setIsAllowanceFetching","isApproveProcessing","sufficientAllowance","getAllowanceEth","approveAmount","setIsApproving","approveEth","useAllowance","approveButtonNeeded","notOne","approveExactAmount","approveUnlimited","MaxUint256","chainSelectWrapper","chainSelectContainer","chainSelectArrow","targetChainOptions","hasParsedTokenAccount","isSolanaMigration","isEthereumMigration","ETH_MIGRATION_ASSET_MAP","isBscMigration","BSC_MIGRATION_ASSET_MAP","isMigrationAsset","selectTransferSourceBalanceString","selectTransferSourceError","selectTransferIsSourceComplete","handleMigrationClick","ArrowForward","Transfer","selectTransferActiveStep","selectTransferIsRedeemComplete","serumMarkets","MARKETS","deprecated","join","PriceStore","cache","this","marketName","fetch","resp","json","asks","bids","price","mid","priceStore","BAD_PRICES_BY_CHAIN","calcEvmTVL","covalentReport","hasUnreliablePrice","quote_rate","totalValue","quote","quotePrice","originChainId","useTVL","ethCovalentData","setEthCovalentData","ethCovalentIsLoading","setEthCovalentIsLoading","ethCovalentError","setEthCovalentError","bscCovalentData","setBscCovalentData","bscCovalentIsLoading","setBscCovalentIsLoading","bscCovalentError","setBscCovalentError","polygonCovalentData","setPolygonCovalentData","polygonCovalentIsLoading","setPolygonCovalentIsLoading","polygonCovalentError","setPolygonCovalentError","solanaCustodyTokens","setSolanaCustodyTokens","solanaCustodyTokensLoading","setSolanaCustodyTokensLoading","solanaCustodyTokensError","setSolanaCustodyTokensError","solanaMetadata","solanaPrices","priceMap","setPriceMap","relevantMarkets","relevantMarket","getPrice","useSolanaPrices","isTerraNativeLoading","terraNativeBalances","terraSwaprates","setTerraSwaprates","TERRA_SWAPRATE_URL","terraTVL","matchingSwap","swap","swaprate","useTerraTVL","isTerraLoading","solanaTVL","metaData","genericMetadata","calcSolanaTVL","ethTVL","bscTVL","polygonTVL","ETH_TOKEN_BRIDGE_ADDRESS","BSC_TOKEN_BRIDGE_ADDRESS","POLYGON_TOKEN_BRIDGE_ADDRESS","SOL_CUSTODY_ADDRESS","tvlArray","TablePaginationActions","useTheme","count","page","rowsPerPage","onPageChange","direction","Math","ceil","max","stopProp","EnhancedTable","columns","skipPageReset","useTable","autoResetPage","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","getTableProps","headerGroups","prepareRow","gotoPage","setPageSize","rows","pageIndex","pageSize","TableContainer","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","getSortByToggleProps","Header","TableSortLabel","active","isSorted","isSortedDesc","render","canGroupBy","getGroupByToggleProps","isGrouped","RemoveCircleOutline","AddCircleOutline","TableBody","row","i","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","KeyboardArrowRight","subRows","isAggregated","isPlaceholder","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onRowsPerPageChange","ActionsComponent","flexBox","explainerContainer","CustodyAddresses","nftAddress","SOL_NFT_CUSTODY_ADDRESS","tvlColumns","accessor","disableGroupBy","Cell","original","table","MuiReactTable","nftData","useNFTTVL","ETH_NFT_BRIDGE_ADDRESS","BSC_NFT_BRIDGE_ADDRESS","POLYGON_NFT_BRIDGE_ADDRESS","ALLOW_LIST","logoPositioner","tokenContainer","totalContainer","tableBox","randomButton","randomNftContainer","tableContainer","NFTStats","nftTVL","randomNumber","setRandomNumber","randomNft","genRandomNumber","found","nextNumber","floor","random","nfts","contractAddress","numeral","format","sortBy","desc","randomNFTContent","useTransactionCount","totals","setTotals","recents","setRecents","loadingTotals","setLoadingTotals","loadingRecents","setLoadingRecents","totalsError","setTotalsError","recentsError","setRecentsError","TOTAL_TRANSACTIONS_WORMHOLE","RECENT_TRANSACTIONS_WORMHOLE","totalAllTime","total24h","VAA_EMITTER_ADDRESSES","totalAll","TotalCount","total24","LastDayCount","mostRecent","mergeResults","totalsBox","typog","TransactionMetrics","transactionCount","networkExplorer","WORMHOLE_EXPLORER_BASE","StatsRoot","tvl","sortTokens","rowA","rowB","sortType","aggregate","leafValues","Aggregated","p","v","tvlString","sum","val","toUpperCase","getOriginalAssetToken","foreignNativeStringAddress","getOriginalAssetNFT","uint8ArrayToNative","SOLANA_SYSTEM_PROGRAM_ADDRESS","useOriginalAsset","foreignAddress","setOriginAddress","setOriginTokenId","setOriginChain","getOriginalAsset","centered","arrowIcon","resultContainer","PrimaryAssetInfomation","nativeContent","wrapped","SecondaryAssetInformation","originAssetInfo","tokenArray","TokenOriginVerifier","primaryLookupChain","setPrimaryLookupChain","primaryLookupAsset","setPrimaryLookupAsset","secondaryLookupChain","setSecondaryLookupChain","primaryLookupChainOptions","secondaryLookupChainOptions","handlePrimaryLookupChainChange","handleSecondaryLookupChainChange","handlePrimaryLookupAssetChange","primaryWalletIsActive","secondaryWalletIsActive","primaryWallet","secondaryWallet","primaryWalletError","originError","primaryError","secondaryWalletError","foreignError","secondaryError","primaryContent","secondaryContent","SolanaMigrationLineItem","migratorInfo","getNotReadyCause","fromAssociatedTokenAccountExists","toAssociatedTokenAccountExists","fromAssociatedTokenAccount","toAssociatedTokenAccount","fromAssociatedTokenAccountBalance","toAssociatedTokenAccountBalance","fromName","fromLogo","toName","toLogo","useSolanaMigratorInformation","fromMintKey","toMintKey","defaultFromTokenAccount","migrationError","setMigrationError","handleMigrateClick","precheckError","getTokenBalances","fromAccountInfo","SolanaQuickMigrate","appBar","typography","body1","text","primary","bg","up","brandLink","brandText","h5","iconButton","gradientButton","backgroundImage","nearBlack","boxShadow","betaBanner","App","isHomepage","useRouteMatch","path","exact","pathname","useLocation","handleTabChange","AppBar","Toolbar","Hidden","implementation","xsDown","NavLink","BarChart","HelpOutline","smUp","Tabs","indicatorColor","Tab","Recovery","Migration","Stats","holeOuterContainer","holeInnerContainer","left","holeImage","blurred","BackgroundImage","ErrorBoundary","hasError","errorInfo","React","Component","store","configureStore","reducer","attest","attestReducer","nftReducer","transferReducer","tokenReducer","ReactDOM","ThemeProvider","CssBaseline","maxSnack","BetaContext","document","getElementById","sourceParsedTokenAccounts","selectNFTSignedVAAHex","lte","indexOf","sourceError","UNREGISTERED_ERROR_MESSAGE","selectTransferSignedVAAHex","listItemIcon","rest","filteredChains","createChainMenuItem","CURRENT_WORMHOLE_RPC_HOST","getNextRpcHost","WORMHOLE_RPC_HOSTS","emitterChain","retryAttempts","attempts","getSignedVAA","createContext","BetaContextProvider","isBetaEnabled","setIsBetaEnabled","userEntered","secretSequence","secretListener","k","keyCode","prev","addEventListener","removeEventListener","Provider","useContext","disconnect","providerError","connected","disconnectButton","startIcon","STORE","MetadataKey","base58","require","METADATA_REPLACE","RegExp","METADATA_PREFIX","EDITION","PubKeysInternedMap","toPublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","METADATA_PROGRAM_ID","METAPLEX_ID","SYSTEM","programIds","associatedToken","bpf_upgrade_loader","system","memo","vault","auction","findProgramAddress","seeds","agg","cached","localStorage","getItem","JSON","parse","parseInt","nonce","setItem","stringify","toBase58","getEdition","tokenMint","PROGRAM_IDS","Buffer","toBuffer","Creator","args","verified","share","Data","sellerFeeBasisPoints","creators","Metadata","updateAuthority","primarySaleHappened","isMutable","editionNonce","masterEdition","edition","MetadataV1","METADATA_SCHEMA","kind","fields","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","MasterEditionV2","parent","EditionV1","ledger","EditionMarker","editionOffset","indexOffset","positionInBitsetFromRight","mask","pow","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","encode","writePubkeyAsString","decode","buffer","deserializeUnchecked","transferSlice","decrementStep","prevSourceChain","isWrapped","prevTargetChain","setIsRedeeming","setRedeemTx","setRecoveryVaa","vaa","parsedPayload","ToggleConnectedButton","is0x","localnet","chainID","URL","walletConnectChainIds","TerraWalletContext","TerraWalletWrapper","useWallet","setWallet","setConnected","availableConnectTypes","contextValue","TerraWalletProvider","defaultNetwork","useTerraWallet","EthereumProviderContext","EthereumProviderProvider","setProviderError","setProvider","setChainId","setSigner","setSignerAddress","detectedProvider","providers","Web3Provider","send","getNetwork","network","getSigner","on","createWalletStatus","forceNetworkSwitch","enableNetworkAutoswitch","autoSwitch","hasTerraWallet","hasEthInfo","correctEvmNetwork","hexStripZeros","hexlify","nftSlice","attestSlice","setCreateTx","textTransform","loader","bottom","signedVAA","updateWrappedOnEth","createWrappedOnEth","signTransaction","postVaaSolana","updateWrappedOnSolana","createWrappedOnSolana","updateWrappedOnTerra","createWrappedOnTerra","useAttestSignedVAA","handleCreateClick","redeemOnEth","getClaimAddressSolana","claimAddress","redeemOnSolana","isNFTVAASolanaNative","parse_vaa","parsedVAA","parseNFTPayload","Uint8Array","getForeignAssetSol","metadataAddress","createMetaOnSolana","useNFTSignedVAA","handleRedeemClick","advancedContainer","getTransactionReceipt","txInfo","setType","recoverySourceChain","setRecoverySourceChain","recoverySourceTx","setRecoverySourceTx","recoverySourceTxIsLoading","setRecoverySourceTxIsLoading","recoverySourceTxError","setRecoverySourceTxError","recoverySignedVAA","setRecoverySignedVAA","recoveryParsedVAA","setRecoveryParsedVAA","walletConnectError","parseTransferPayload","handleTypeChange","prevChain","handleSourceChainChange","handleSourceTxChange","trim","handleSignedVAAChange","parsedPayloadTargetChain","enableRecovery","handleRecoverClick","setRecoveryNFTVaa","helperText","expandIcon","my","emitter_chain","emitter_address","timestamp","toLocaleString","redeemOnEthNative","redeemAndUnwrapOnSolana","redeemOnTerra","useTransferSignedVAA","handleRedeemNativeClick","signed","sendRawTransaction","serialize","confirmTransaction","mintInfo","MintLayout","uintArray","reverse","pubkeys","commitment","chunks","chunk","getMultipleAccountsInfo","flat","apply","_","gray","greenWithTransparency","lightGreen","lightBlue","red","darkRed","responsiveFontSizes","createTheme","default","paper","main","secondary","fontFamily","h1","h2","h4","overrides","MuiCssBaseline","scrollbarWidth","scrollbarColor","MuiAccordion","rounded","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","MuiAlert","MuiButton","MuiLink","MuiPaper","MuiStepper","MuiStep","MuiStepConnector","lineVertical","borderLeftWidth","MuiStepContent","MuiStepLabel","MuiTab","terraIcon","oasisIcon","ETH_NETWORK_CHAIN_ID","ROPSTEN_ETH_NETWORK_CHAIN_ID","BSC_NETWORK_CHAIN_ID","POLYGON_NETWORK_CHAIN_ID","AVAX_NETWORK_CHAIN_ID","process","ETH_BRIDGE_ADDRESS","BSC_BRIDGE_ADDRESS","POLYGON_BRIDGE_ADDRESS","AVAX_BRIDGE_ADDRESS","AVAX_NFT_BRIDGE_ADDRESS","AVAX_TOKEN_BRIDGE_ADDRESS","ROPSTEN_ETH_BRIDGE_ADDRESS","ROPSTEN_ETH_NFT_BRIDGE_ADDRESS","ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS","TERRA_BRIDGE_ADDRESS","COVALENT_BSC","COVALENT_POLYGON","COVALENT_AVAX","noNftMetadata","chainNum","TERRA_GAS_PRICES_URL","EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v","Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB","SolanaWalletProvider","wallets","getPhantomWallet","getSolflareWallet","getMathWallet","getSolletWallet","TerraWalletKey","MM_ERR_WITH_INFO_START","unit","isValidTerra","code","raw_log","startsWithTerra","isParseable","isLength20","gasPrices","estimateFee","feeDenoms","feeEstimate","post","fee"],"mappings":"ijBAKMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,kBAAmB,CACjBC,UAAW,SACXC,MAAO,QAETC,OAAO,aACLC,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,IAC3BN,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BF,aAAcP,EAAMM,QAAQ,KAGhCI,eAAgB,CACdC,WAAW,4BAAD,OAA8BC,IAAOC,KAArC,aAA8CD,IAAOE,MAArD,MACVC,qBAAsB,OACtBC,eAAgB,OAChBC,oBAAqB,cACrBC,kBAAmB,OACnBC,iBAAkB,mBAIP,SAASC,EAAT,GAQX,IAPFC,EAOC,EAPDA,SACAC,EAMC,EANDA,MACAC,EAKC,EALDA,MAMMC,EAAU1B,IAChB,OACE,qBAAK2B,UAAWD,EAAQvB,kBAAxB,SACE,cAACyB,EAAA,EAAD,CACEC,QAASJ,EAAQ,KAAO,KACxBK,UAAU,KACVH,UAAWI,YAAKL,EAAQpB,OAAT,eAAoBoB,EAAQd,gBAAkBY,IAH/D,SAKGD,M,mECuJMS,MApKf,SACEC,EACAC,EACAC,GAEA,MAA0CC,cAAlCC,EAAR,EAAQA,SAAmBC,EAA3B,EAAkBC,QACVC,EAAYC,YAAiBN,GAAc,GAA3CK,QAEFE,EAAuBJ,IADHK,aAAcR,GAGxC,EAAwCS,mBAAwB,MAAhE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,mBAAyB,MAA3D,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACMC,EAAiBC,mBAAQ,WAC7B,IACE,OAAOC,YAAkBrB,EAAaD,GACtC,MAAOuB,GACP,OAAO,QAER,CAACtB,EAAaD,IACjB,EAAwCW,mBAI9B,MAJV,mBAAOa,EAAP,KAAqBC,EAArB,KAKMC,IACFF,GACFA,EAAaxB,cAAgBA,GAC7BwB,EAAavB,cAAgBA,GAC7BuB,EAAatB,eAAiBA,EAC1ByB,EAAUC,uBAAY,WAC1BH,EAAgB,CAAEvB,eAAcF,cAAaC,kBAC5C,CAACC,EAAcF,EAAaC,IAEzB4B,EAAgBR,mBACpB,kBACGrB,IACAC,IACAC,IACAkB,GACDlB,IAAiBF,GAChB8B,YAAW5B,KAAkBK,GAC7BuB,YAAW5B,KAAkBO,GAC9BiB,IACF,CACEnB,EACAL,EACAD,EACAD,EACAS,EACAW,EACAM,IAIJK,qBAAU,WAOR,GANKL,IACHb,EAAgB,MAChBI,EAAS,IACTF,EAAa,MACbU,EAAgB,QAEdI,GAAkBT,EAAtB,CAKAD,GAAa,GACb,KACmDW,YAAW5B,GACxD,kBACE8B,YACEC,aAA8B/B,GAC9BE,EACAJ,EACAkC,YAAgBd,KAEpBlB,IAAiBiC,IACjB,WACE,IAAMC,EAAM,IAAIC,YAAUC,KAC1B,OAAOC,YACLC,IACAJ,EACApC,EACAkC,YAAgBd,KAGpB,WACE,IAAMqB,EAAa,IAAIC,aAAWC,IAAa,aAC/C,OAAOC,YACLH,EACAI,IACA7C,EACAkC,YAAgBd,QAKrB0B,MAAK,SAACC,IAGDA,GAEEjB,YAAW5B,IACX6C,IAAWC,IAAOC,UAAUC,aAQ9BvB,IACAZ,GAAa,GACbI,GAAa,GACbN,EAAgB,QARhBc,IACAZ,GAAa,GACbI,GAAa,GACbN,EAAgBkC,OASrBI,OAAM,SAAC5B,GAEJN,EAAS,yCACTE,GAAa,MAGnB,MAAOI,GAGLN,EAAS,yCACTE,GAAa,OAGhB,CACDU,EACA3B,EACAkB,EACApB,EACAI,EACAuB,EACAD,IAGF,IAAM0B,EAAgB/B,mBAAQ,WAC5B,OAAOL,GAAgB,KACtB,CAACA,IAgBJ,OAd8CK,mBAC5C,iBAAO,CACLL,MAAOoC,EACPC,WAAYnC,EACZoC,KACoB,OAAjB1C,QAA0C2C,IAAjB3C,GACX,OAAdE,QAAoCyC,IAAdzC,EACnB,CAAE0C,QAAS5C,EAAcE,YAAaA,GACtC,KACN2C,WAAY,QAEd,CAACL,EAAelC,EAAWN,EAAcE,K,0BCjLvC/C,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyF,QAAS,CACPC,MAAO1F,EAAM2F,QAAQC,QAAQC,MAC7BxF,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,cAIF4F,GACX,sEAEa,SAASC,KACtB,IAAMvE,EAAU1B,KACVkG,EAAcC,YAAYC,KAC1BC,EAAYF,YAAYG,MACxBC,EAAaJ,YAAYK,MACzBC,EAAcN,YAAYO,MAC1BC,EAAcR,YAAYS,KAC1BC,EAAWV,YAAYW,MAG7B,OADEZ,GAAgBG,IAAcE,GAAgBI,IAAgBE,EAE9D,eAACjF,EAAA,EAAD,CAAYD,UAAWD,EAAQiE,QAAS9D,QAAQ,QAAhD,UACGmE,GAA6B,IAC7BS,IAAgBM,KAAmBJ,EAChC,2CACA,QAEJ,KC5BN,IAAM3G,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyF,QAAS,CACPC,MAAO1F,EAAM2F,QAAQC,QAAQC,MAC7BxF,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,cAIA,SAAS6F,KACtB,IAAMvE,EAAU1B,KACVqG,EAAYF,YAAYa,KACxBC,EAAWd,YAAYe,KACvBT,EAAcN,YAAYgB,KAC1BC,EAAajB,YAAYkB,KACzBC,EAAWnB,YAAYoB,KAE7B,OADqBlB,IAAcY,GAAcG,IAAeE,EAE9D,eAAC1F,EAAA,EAAD,CAAYD,UAAWD,EAAQiE,QAAS9D,QAAQ,QAAhD,UACGmE,GAA6B,IAC7BS,IAAgBM,KAAmBK,EAChC,2CACA,QAEJ,KCrBN,IAAMpH,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCsH,YAAa,CACXC,OAAQ,SACRC,QAAS,QACTtH,UAAW,UAEbuH,OAAQ,CACNC,OAAQ1H,EAAMM,QAAQ,QAiDXqH,OA7Cf,WAAmB,IAAD,EACVnG,EAAU1B,KACVyG,EAAcN,YAAYgB,KAC1BjF,EAAciE,YAAY2B,KAC1B7F,EAAckE,YAAY4B,KAChC,EAAmCtF,YAAiBgE,GAA5CjE,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cACXC,EAAmBjG,EACvBC,EACAC,EACAuE,GAEIyB,EAAY,UAAGD,EAAiB1C,YAApB,aAAG,EAAuBxC,UACtCE,EAAQgF,EAAiBhF,OAAS+E,EACxC,EAA8CG,YAC5CD,IAAgB,GADVE,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WAM/B,OAFAC,QAAQC,IAAI,qBAAsBP,GAGhC,qCACE,cAACQ,GAAA,EAAD,CAAelG,QAASkE,IAEvBwB,EAAiB3C,WAChB,qCACE,qBAAK3D,UAAWD,EAAQiG,SACxB,cAACe,EAAA,EAAD,CAAkB/G,UAAWD,EAAQ8F,iBAGvC,qCACE,cAACmB,EAAA,EAAD,CACEN,UAAW7F,GAAW6F,EACtBO,QAASR,EACTE,WAAYA,EACZrF,MAAOA,EAJT,SAMGiF,EAAe,SAAW,WAE7B,cAAC,GAAD,WCjDJlI,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2I,GAAI,CACFtI,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,UAEb0I,WAAY,CACVvI,UAAWL,EAAMM,QAAQ,QAId,SAASuI,GAAT,GAMX,IALFxG,EAKC,EALDA,QACAsG,EAIC,EAJDA,GAKMnH,EAAU1B,KACVgJ,EACQ,YAAZC,KACY,YAAZA,KACa,WAAZA,MACE1G,IAAYwE,KAAmBxE,IAAY6B,KAC1C8E,EACJ3G,IAAY4G,IAAZ,kBAC2B,YAAZF,IAAwB,UAAY,GADnD,kCAEMJ,QAFN,IAEMA,OAFN,EAEMA,EAAIO,IAEN7G,IAAY8G,IAAZ,kBACuB,YAAZJ,IAAwB,WAAa,GADhD,kCAEEJ,QAFF,IAEEA,OAFF,EAEEA,EAAIO,IAEN7G,IAAY+G,IAAZ,kBACuB,YAAZL,IAAwB,WAAa,GADhD,iCAEEJ,QAFF,IAEEA,OAFF,EAEEA,EAAIO,IAEN7G,IAAYgH,IAAZ,kBACuB,YAAZN,IAAwB,UAAY,GAD/C,qCAEEJ,QAFF,IAEEA,OAFF,EAEEA,EAAIO,IAEN7G,IAAYiH,IAAZ,kBACuB,YAAZP,IAAwB,WAAa,GADhD,kCAEEJ,QAFF,IAEEA,OAFF,EAEEA,EAAIO,IAEN7G,IAAYwE,IAAZ,gDACkC8B,QADlC,IACkCA,OADlC,EACkCA,EAAIO,IADtC,OAEc,YAAZH,IACI,kBACY,WAAZA,IACA,0DACA,IAEN1G,IAAY6B,IAAZ,qCAEc,WAAZ6E,IACI,aACY,YAAZA,IACA,YACA,aANN,sBAOOJ,QAPP,IAOOA,OAPP,EAOOA,EAAIO,SACX5D,EACAiE,EAAeC,aAAgBnH,GAErC,OACE,sBAAKZ,UAAWD,EAAQmH,GAAxB,UACE,cAACjH,EAAA,EAAD,CAAY+H,QAAM,EAAC7H,UAAU,MAAMD,QAAQ,QAA3C,SACGgH,EAAGO,KAELJ,GAAoBE,EACnB,eAACU,EAAA,EAAD,CACEC,KAAMX,EACNY,OAAO,SACPC,IAAI,sBACJC,KAAK,QACLnI,QAAQ,WACRF,UAAWD,EAAQoH,WANrB,qBAQWW,KAET,QCjFV,IAAMzJ,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAAS8J,KACtB,IAAQC,EAASC,cAATD,KACFzI,EAAU1B,KACVqK,EAAWC,cACX7D,EAAcN,YAAYgB,KAC1BG,EAAWnB,YAAYoB,KACvBgD,EAAmB1G,uBAAY,WACnCwG,EAASG,iBACR,CAACH,IACEI,EAAoB5G,uBAAY,WACpCwG,EAASG,eACTL,EAAK,eACJ,CAACE,EAAUF,IAKd,OACE,qCACE,cAACvI,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAJF,2DAWG3C,EAAW,cAACyB,GAAD,CAAQxG,QAASkE,EAAaoC,GAAIvB,IAAe,KAC7D,cAACqB,EAAA,EAAD,CAAkBC,QAAS2B,EAA3B,mCAGA,cAAC5B,EAAA,EAAD,CAAkBC,QAAS6B,EAA3B,mC,uICMN,WACEJ,EACAK,EACAC,EACAC,EACArI,GALF,wBAAAsI,EAAA,6DAOER,EAASS,aAAa,IAPxB,kBAS0BC,YACpB7G,aAA8B3B,GAC9BoI,EACAC,GAZN,cASUI,EATV,OAcIX,EACEY,YAAY,CAAE7B,GAAI4B,EAAQE,gBAAiBC,MAAOH,EAAQI,eAE5DV,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,qCAELC,EAAWC,YACfT,EACAU,YAAyBnJ,IAErBoJ,EAAiBC,YACrB1H,aAA8B3B,IAEhCmI,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAhB,4BA5Bf,UA8B+BM,aACzBtJ,EACAoJ,EACAH,GAjCN,iBA8BYM,EA9BZ,EA8BYA,SAKRzB,EAAS0B,YAAgBC,aAAgBF,KACzCpB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,kCArCf,kDAwCIhD,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QAE9C5B,EAASS,aAAa,IA5C1B,2D,sEAgDA,WACET,EACAK,EACAwB,EACAtB,EACAuB,GALF,8BAAAtB,EAAA,6DAOER,EAASS,aAAa,IAPxB,SASUpG,EAAa,IAAIC,aAAWC,IAAa,aATnD,SAU8BwH,YACxB1H,EACA2H,IACAvH,IACAoH,EAAMI,WACN1B,GAfN,cAUU2B,EAVV,gBAiBuBC,aAAmBL,EAAQzH,EAAY6H,GAjB9D,cAiBUE,EAjBV,OAkBI/B,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,qCAnBf,UAqBuB7G,EAAWgI,eAAeD,GArBjD,WAqBUE,EArBV,8BAwBY,IAAIC,MAAM,yDAxBtB,eA0BIvC,EAASY,YAAY,CAAE7B,GAAIqD,EAAMtB,MAAOwB,EAAKE,QACvCrB,EAAWsB,YAA2BH,GA3BhD,UA4BiCI,YAC3BjI,KA7BN,eA4BU6G,EA5BV,OA+BIjB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAhB,4BAhCf,UAkC+BM,aACzB9E,IACA4E,EACAH,GArCN,iBAkCYM,EAlCZ,EAkCYA,SAKRzB,EAAS0B,YAAgBC,aAAgBF,KACzCpB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,kCAzCf,kDA4CIhD,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QAE9C5B,EAASS,aAAa,IAhD1B,2D,sEAoDA,WACET,EACAK,EACAyB,EACAa,GAJF,4BAAAnC,EAAA,6DAMER,EAASS,aAAa,IANxB,kBAQsBmC,YAChBxI,IACA0H,EAAOe,aACPF,GAXN,cAQUG,EARV,gBAayBC,aAAajB,EAAQ,CAACgB,GAAM,kBAbrD,cAaUnI,EAbV,iBAcuBqI,aAAsBrI,GAd7C,WAcU2H,EAdV,OAeItC,EAASY,YAAY,CAAE7B,GAAIuD,EAAKW,OAAQnC,MAAOwB,EAAK/E,UACpD8C,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,qCAELC,EAAW+B,YAA0BZ,GAnB/C,uBAqBY,IAAIC,MAAM,sBArBtB,yBAuBiCY,YAC3B/I,KAxBN,eAuBUkH,EAvBV,OA0BIjB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAhB,4BA3Bf,UA6B+BM,aACzBzH,IACAuH,EACAH,GAhCN,iBA6BYM,EA7BZ,EA6BYA,SAKRzB,EAAS0B,YAAgBC,aAAgBF,KACzCpB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,kCApCf,kDAuCIhD,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QAE9C5B,EAASS,aAAa,IA3C1B,2D,sBA+CO,SAAS2C,KACd,IAAMpD,EAAWC,cACTI,EAAoBgD,cAApBhD,gBACFiD,EAAcxH,YAAY4B,KAC1B6C,EAAczE,YAAY2B,KAC1B8F,EAAmBzH,YAAY0H,KAC/BxH,EAAYF,YAAYa,KACxB8G,EAAiB3H,YAAY4H,KAC3BpD,EAAWvI,cAAXuI,OACFqD,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtBC,EAAcC,eACd/F,GAAYuF,GAAoBvH,GAAayH,EAC7CO,EAAoBxK,uBAAY,WAChCE,YAAW4J,IAAkBhD,E,6CAC/B2D,CAAIjE,EAAUK,EAAiBC,EAAQC,EAAa+C,GAC3CA,IAAgB5G,KAAqBiH,GAAkB9B,E,6CAChEqC,CAAOlE,EAAUK,EAAiBwB,EAAOtB,EAAaoD,GAC7CL,IAAgBvJ,KAAoB+J,G,2CAC7CK,CAAMnE,EAAUK,EAAiByD,EAAavD,KAG/C,CACDP,EACAK,EACAiD,EACAhD,EACAqD,EACA9B,EACAiC,EACAvD,IAEF,OAAOtH,mBACL,iBAAO,CACL8E,YAAaiG,EACbhG,WACAC,WAAYjC,KAEd,CAACgI,EAAmBhG,EAAUhC,I,eCvO5BrG,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuO,KAAM,CACJlO,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,UAEbuF,QAAS,CACPpF,UAAWL,EAAMM,QAAQ,QAId,SAASkO,GAAT,GAQX,IAPFnM,EAOC,EAPDA,QACAsG,EAMC,EANDA,GACAiF,EAKC,EALDA,eAMMpM,EAAU1B,KACRqC,EAAaD,cAAbC,SACR,EAAwCO,mBAAS,GAAjD,mBAAO+L,EAAP,KAAqBC,EAArB,KACA5K,qBAAU,WACR,IAAI8J,GAAmBjF,EAAvB,CACA,GAAI9E,YAAWxB,IAAYF,EAAU,CACnC,IAAIwM,GAAY,EAchB,OAbA,wBAAC,6BAAAhE,EAAA,yDACSgE,EADT,iCAES,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAFtD,gCAI4B1M,EAAS4M,iBAJrC,OAIWC,EAJX,OAKUL,GACHD,EAAgBM,GANvB,kDASK3G,QAAQtF,MAAR,MATL,gFAAD,GAaO,WACL4L,GAAY,GAGhB,GAAItM,IAAYwE,IAAiB,CAC/B,IAAI8H,GAAY,EACVnK,EAAa,IAAIC,aAAWC,IAAa,aACzCuK,EAAMzK,EAAW0K,cAAa,SAACC,GAC9BR,GACHD,EAAgBS,EAASxC,SAG7B,OAAO,WACLgC,GAAY,EACZnK,EAAW4K,yBAAyBH,QAGvC,CAACrB,EAAgBvL,EAASF,EAAUwG,IACvC,IAAM0G,EACJ1G,GAAMA,EAAGsC,OAASwD,EAAeA,EAAe9F,EAAGsC,WAAQ3F,EACvDgK,EACJjN,IAAYwE,IAAkB,GAAKhD,YAAWxB,GAAW,GAAK,EAChE,OACGuL,GACAvL,IAAYwE,MAAmBhD,YAAWxB,SAC7BiD,IAAd+J,EAkBK,KAfH,sBAAK5N,UAAWD,EAAQ+M,KAAxB,UACE,cAACgB,GAAA,EAAD,CACEC,MACEH,EAAYC,EAAkBD,EAAYC,EAAkB,GAAK,GAEnE3N,QAAQ,gBAEV,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAAQF,UAAWD,EAAQiE,QAA/C,SACG4J,EAAYC,EAAZ,sBACkBD,EADlB,cACiCC,EADjC,6BACoEG,IAAapN,GAASqN,KAD1F,wDC1CIC,OA5Bf,WACE,MAA8CpC,KAAtCrF,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WACzBqF,EAAcxH,YAAY4B,KAC1Bd,EAAWd,YAAYe,KACvB4G,EAAiB3H,YAAY4H,KACnC,EAAmCtL,YAAiBkL,GAA5CnL,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cAEjB,OACE,qCACE,cAACS,GAAA,EAAD,CAAelG,QAASoL,IACxB,cAAChF,EAAA,EAAD,CACEN,UAAW7F,GAAW6F,EACtBO,QAASR,EACTE,WAAYA,EACZrF,MAAO+E,EAJT,oBAQA,cAAC,GAAD,IACA,cAAC0G,GAAD,CACEnM,QAASoL,EACT9E,GAAI5B,EACJ6G,eAAgBA,QC3BlB9N,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,UAEbyI,GAAI,CACFtI,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,UAEb0I,WAAY,CACVvI,UAAWL,EAAMM,QAAQ,QAId,SAASsP,KACtB,IAAMpO,EAAU1B,KACV2N,EAAcxH,YAAY4B,KAC1Bd,EAAWd,YAAYe,KAI7B,OACE,qCACE,cAACtF,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAJoB,iCAWnBhD,EAAW,cAAC8B,GAAD,CAAQxG,QAASoL,EAAa9E,GAAI5B,IAAe,Q,4CCA7D8I,GAAoCC,OAAO,KAC3CC,GAAiCD,OAAO,OACxCE,GAAgCF,OAAO,KAEvCG,GAAsB,SAAC5N,EAAkB6N,GAC7C,YAAgB5K,IAAZ4K,IAA0B7N,IAG1BwE,MAAoBxE,EACf6N,EAAUL,GAEfhM,YAAWxB,GACN6N,EAAUH,GAEf7L,MAAmB7B,GACd6N,EAAUF,KAOfG,GAAgB,yCAAG,WAAOC,GAAP,gBAAAzF,EAAA,6DACjBnG,EAAa,IAAIC,aAAWC,KADX,kBAEhB2L,aAAuB7L,EAAY,CACxC,IAAI8L,YAAUF,KACbvL,MACD,SAAC0L,GACC,GAAIA,EAAQC,QAAUD,EAAQ,GAC5B,OAAOT,OAAOS,EAAQ,GAAGE,aAG7B,SAAC1N,GACC,OAAO+M,OAAO,OAXK,2CAAH,sDAgBhBY,GAAa,yCAAG,WAAON,EAAuBjO,GAA9B,UAAAwI,EAAA,+EACbxI,EAASwO,WAAWP,GAAevL,MAAK,SAACC,GAAD,OAAYA,EAAO8L,eAD9C,2CAAH,wDAIbC,GAAe,yCAAG,WAAOT,GAAP,gBAAAzF,EAAA,4DACD,QAEfxG,EAAM,IAAIC,YAAUC,KAHJ,kBAIfF,EAAI2M,KACRZ,QAAQE,GACRvL,MAAK,SAACkM,GAEL,IACMC,EADeD,EAAME,KAAI,gBAAGC,EAAH,EAAGA,OAAH,MAAuB,CAAvB,EAAWC,MAAoBD,MAC9BE,MAAK,SAACC,GAAD,MARpB,UAQ8BA,EAAK,MACpD,OAAIL,EACKlB,OAAOkB,EAAW,GAAG5E,YAErBwC,QAAQ0C,YAGlBpM,OAAM,SAAC5B,GACN,OAAOsL,QAAQ0C,aAjBG,2CAAH,sDAqBfC,GAAkB,SAACrB,EAA6B7N,GACpD,OAAKA,QAAuBiD,IAAZ4K,EAGZrM,YAAWxB,GACNmP,uBAAYtB,EAAS,IACnB7N,IAAYwE,IACd2K,uBAAYtB,EAAS,GACnB7N,IAAY6B,IACdsN,uBAAYtB,EAASuB,WADvB,EANE,IAqFJ,SAASC,GAAoBC,EAAsBtP,GACxD,IAAQF,EAAaD,cAAbC,SACAG,EAAYC,YAAiBF,GAA7BC,QACR,EAA8CI,mBAC5C,MADF,mBAAOkP,EAAP,KAAwBC,EAAxB,KAkBA,OAdA/N,qBAAU,WACJ3B,GAAYG,IAAYsP,GAyEzB,SAAP,qCAxEME,CAAgB3P,EAAUwP,GAAU9M,MAClC,SAAC0L,GACCsB,EAAmBtB,MAErB,SAACxN,GACCsF,QAAQC,IAAIvF,QAIjB,CAACZ,EAAUG,EAASsP,EAAiBD,IAExBvO,mBAAQ,kBAAMwO,IAAiB,CAACA,IAIlD,SAASG,GAAT,GAMI,IALFC,EAKC,EALDA,WACA3P,EAIC,EAJDA,QAKM4P,EAAWP,GAAoBM,EAAY3P,GACjD,OAAK4P,EAKH,eAACvQ,EAAA,EAAD,CACEE,UAAU,MACVsQ,MAAO,CACL1K,QAAS,OACT2K,WAAY,SACZ9R,UAAW,EACX+R,SAAU,QANd,UASE,sBAAKF,MAAO,CAAE1K,QAAS,OAAQ2K,WAAY,UAA3C,UACE,cAACE,GAAA,EAAD,CAAiBC,SAAS,YAD5B,OAESL,EAASM,mBAElB,+CACA,8CACcN,EAASO,YADvB,MACuCP,EAASQ,aAAc,IAC3DC,YAA+BrQ,SApB7B,KA0BX,IAAMsQ,GAA2B,CAC/BC,SAAU,CACRC,eAAgB/C,OAAO,KACvBgD,gBAAiBhD,OAAO,OAItBiD,GAAyB,CAC7BH,SAAU,CACRC,eAAgB/C,OAAO,KACvBgD,gBAAiBhD,OAAO,OAE1BkD,IAAK,CACHH,eAAgB/C,OAAO,MACvBgD,gBAAiBhD,OAAO,MAE1BmD,cAAe,CACbJ,eAAgB/C,OAAO,MACvBgD,gBAAiBhD,OAAO,O,gDAIrB,WACL3N,EACAwP,GAFK,4BAAAhH,EAAA,yDAICuI,EAAuBH,GAAuBpB,GAAUkB,eACxDM,EACJJ,GAAuBpB,GAAUmB,iBAK/B3Q,EAXC,gCAYsBA,EAASiR,cAZ/B,QAYGC,EAZH,UAcDb,EAAcc,WACZ9B,uBAAY0B,EAAuBG,EAAWzC,WAAY,UAC1D2C,QAAQ,GACVd,EAAea,WACb9B,uBAAY2B,EAAwBE,EAAWzC,WAAY,UAC3D2C,QAAQ,GACVhB,EAAkBe,WAAW9B,uBAAY6B,EAAY,SAASE,QAAQ,IApBrE,cAwBCC,EACJjB,GAAmBE,GAAgBD,EAC/B,CACED,kBACAC,cACAC,gBAEF,KA/BD,kBAiCEe,GAjCF,4C,sBAoCP,SAASC,GAAT,GAMI,IALFzB,EAKC,EALDA,WACA3P,EAIC,EAJDA,QAKA,GAAmB,aAAf2P,EAA2B,CAC7B,IAAMQ,EAAchB,uBAClBmB,GAAyBC,SAASC,eAClCpB,MAEIgB,EAAejB,uBACnBmB,GAAyBC,SAASE,gBAClCrB,MAEF,OACE,cAAC/P,EAAA,EAAD,CACEE,UAAU,MACVsQ,MAAO,CACL1K,QAAS,OACT2K,WAAY,SACZ9R,UAAW,EACX+R,SAAU,QANd,SASE,8CACcI,EADd,MAC8BC,EAAc,IACzCC,YAA+BrQ,QAKtC,OAAO,KAIJ,SAASqR,GAAT,GAMH,IALF1B,EAKC,EALDA,WACA3P,EAIC,EAJDA,QAKA,OAAIwB,YAAWxB,GACN,cAAC0P,GAAD,CAAuB1P,QAASA,EAAS2P,WAAYA,IACnD3P,IAAY6B,IAEnB,cAACuP,GAAD,CAAyBpR,QAASA,EAAS2P,WAAYA,IAGlD,KC5VX,IAAMlS,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2T,MAAO,CACLtT,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,QA4BjBsT,OAxBf,YAA+D,IAAlCvR,EAAiC,EAAjCA,QACrBb,EAAU1B,KACRwC,EAAYC,YAAiBF,GAA7BC,QACFuR,EDgGO,SAA4BxR,GACzC,MAAmCE,YAAiBF,GAA5C+N,EAAR,EAAQA,cAAe9N,EAAvB,EAAuBA,QACfH,EAAaD,cAAbC,SACR,EAA8BO,wBAA6B4C,GAA3D,mBAAO4K,EAAP,KAAgB4D,EAAhB,KACA,EAAkCpR,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA0BR,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEM+Q,EAAYpQ,uBAAY,WAC5BmQ,OAAWxO,GACXpC,GAAa,GACbF,EAAS,MACR,IA4DH,OA1DAc,qBAAU,WACJzB,IAAYwE,KAAmBvE,GAAW8N,GAC5C2D,IACA5D,GAAiBC,GAAevL,MAC9B,SAACC,GACC,IAAMkP,OACO1O,IAAXR,GAAmC,OAAXA,EAAkBgL,OAAO,GAAKhL,EACxD5B,GAAa,GACb4Q,EAAWE,MAEb,SAACjR,GACCG,GAAa,GACbF,EAAS,kCAGJa,YAAWxB,IAAYC,GAAW8N,EACvCjO,IACF4R,IACArD,GAAcN,EAAejO,GAAU0C,MACrC,SAACC,GACC,IAAMkP,OACO1O,IAAXR,GAAmC,OAAXA,EAAkBgL,OAAO,GAAKhL,EACxD5B,GAAa,GACb4Q,EAAWE,MAEb,SAACjR,GACCG,GAAa,GACbF,EAAS,kCAINX,IAAY6B,KAAkB5B,GAAW8N,IAClD2D,IACAlD,GAAgBT,GAAevL,MAC7B,SAACC,GACC,IAAMkP,OACO1O,IAAXR,GAAmC,OAAXA,EAAkBgL,OAAO,GAAKhL,EACxD5B,GAAa,GACb4Q,EAAWE,MAEb,SAACjR,GACCG,GAAa,GACbF,EAAS,oCAId,CAACb,EAAUiO,EAAe9N,EAASD,EAAS0R,IAE/B3Q,mBAAQ,WACtB,MAAO,CACL6M,oBAAqBA,GAAoB5N,EAAS6N,GAClDA,UACA+D,cAAe1C,GAAgBrB,EAAS7N,GACxCY,YACAF,WAED,CAACmN,EAAS7N,EAASY,EAAWF,ICrKHmR,CAAmB7R,GAC3C8R,EACJ7R,GACAuR,EAAsBI,gBACwB,IAA9CJ,EAAsB5D,oBAClBmE,EAAc,qCAAiC1B,YACnDrQ,GADkB,0EAId8I,EACJ,eAACC,EAAA,EAAD,CAAOC,SAAS,UAAU1J,QAAQ,WAAWF,UAAWD,EAAQmS,MAAhE,UACE,cAACjS,EAAA,EAAD,CAAYC,QAAQ,QAApB,SAA6ByS,IAC7B,cAAC1S,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACG,oBAAsBkS,EAAsBI,mBAKnD,OAAOE,EAAiBhJ,EAAU,MCf9BrL,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqU,cAAe,CACbhU,UAAWL,EAAMM,QAAQ,QA2DdgU,OAvDf,WACE,IAAM9S,EAAU1B,KACVqK,EAAWC,cACXqD,EAAcxH,YAAY4B,KAC1B6C,EAAczE,YAAY2B,KAC1B2M,EAAmBtO,YAAYuO,KAC/BC,EAAmBxO,YAAYyO,KAC/BC,EAAqBhR,uBACzB,SAACiR,GACCzK,EAAS0K,YAAeD,EAAMhL,OAAO4F,UAEvC,CAACrF,IAEG2K,EAAoBnR,uBACxB,SAACiR,GACCzK,EAAS4K,YAAeH,EAAMhL,OAAO4F,UAEvC,CAACrF,IAEG6K,EAAkBrR,uBAAY,WAClCwG,EAAS8K,iBACR,CAAC9K,IACJ,OACE,qCACE,cAAC+K,GAAA,EAAD,CACEC,QAAM,EACNxT,QAAQ,WACRyT,WAAS,EACT5F,MAAO/B,EACP4H,SAAUV,EACVxM,SAAUsM,EACVa,OAAQC,MAEV,cAAChN,GAAA,EAAD,CAAelG,QAASoL,IACxB,cAAC+H,GAAA,EAAD,CACEC,MAAM,QACN9T,QAAQ,WACRyT,WAAS,EACT3T,UAAWD,EAAQ6S,cACnB7E,MAAO9E,EACP2K,SAAUP,EACV3M,SAAUsM,IAEZ,cAAC,GAAD,CAAmBpS,QAASoL,IAC5B,cAAChF,EAAA,EAAD,CACEN,UAAWoM,EACX7L,QAASsM,EACT5M,YAAY,EAHd,sB,iCCjES,SAASsN,GAAmBvK,GACzC,IAAQX,EAAoBgD,cAApBhD,gBACR,OAAO7G,uBAAY,WAAO,IAAD,EACvB,UCRW,SAAyBwH,GACtC,GAAKwK,UAAUC,UAIf,OAAOD,UAAUC,UAAUC,UAAU1K,GDGnC2K,CAAgB3K,UAAhB,SAA0BtG,MAAK,WAC7B2F,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,4BAGZ,CAACF,EAASX,IESf,IAAM1K,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+V,UAAW,CACTvO,QAAS,eACTwO,WAAYhW,EAAMM,QAAQ,GAC1B2V,YAAajW,EAAMM,QAAQ,GAC3B4V,eAAgB,YAChBC,oBAAqB,OAEvBC,SAAU,CACRJ,WAAY,EACZC,YAAa,GAEfI,YAAa,CACXH,eAAgB,QAElBI,QAAS,CACPN,WAAY,QACZC,YAAa,aAeXM,GAAgBC,aAXA,CACpBC,QAAS,CACPC,SAAU,cACVxW,UAAW,SACX,QAAS,CACPqH,OAAQ,YAMQiP,CAA0BG,KAEjC,SAASC,GAAT,GAqBX,IAAD,EApBDvU,EAoBC,EApBDA,QACAwU,EAmBC,EAnBDA,mBACAtR,EAkBC,EAlBDA,QACAuR,EAiBC,EAjBDA,OACAC,EAgBC,EAhBDA,UACApV,EAeC,EAfDA,QACAyU,EAcC,EAdDA,SACAC,EAaC,EAbDA,YACAW,EAYC,EAZDA,aAaMxV,EAAU1B,KACVmX,EAAgB5U,IAAY6B,KAAkBgT,YAAc3R,GAC5D4R,GAAmC,OAAlBN,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBO,UAAW7R,GAAW,GAC3D8R,EAAgBJ,EAClBK,aAAkB/R,IACA,OAAlBsR,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBC,SAAUA,GAAU,GAEtCS,GAA6B,OAAlBV,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBW,gBAAiBP,IAAiB,EACjEQ,EAAeC,aAAeP,IAAmB,GAEjDQ,EAAcJ,EAChB,mBACkB,OAAlBV,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBnH,MACpBmH,EAAmBnH,KACnBqH,GAEA,GACE/N,EAAkBuO,EACpB,KACAlV,IAAY4G,IAAZ,kBAEc,YAAZF,IAAwB,UAAY,GAFtC,gCAGwBoO,GACxB9U,IAAY8G,IAAZ,kBAEc,YAAZJ,IAAwB,WAAa,GAFvC,gCAGwBoO,GACxB9U,IAAY+G,IAAZ,kBAEc,YAAZL,IAAwB,WAAa,GAFvC,+BAGuBoO,GACvB9U,IAAYgH,IAAZ,kBAEc,YAAZN,IAAwB,UAAY,GAFtC,mCAG2BoO,GAC3B9U,IAAYiH,IAAZ,kBAEc,YAAZP,IAAwB,WAAa,GAFvC,gCAGwBoO,GACxB9U,IAAYwE,IAAZ,8CACuCsQ,GADvC,OAEc,YAAZpO,IACI,kBACY,WAAZA,IACA,0DACA,IAEN1G,IAAY6B,IAAZ,qCAEc,WAAZ6E,IACI,aACY,YAAZA,IACA,YACA,aANN,oBAOYoO,QACZ7R,EACEiE,EAAeC,aAAgBnH,GAE/BuV,EAAkBlC,GAAmByB,GAErCU,EAAkB7O,EACtB,cAACU,EAAA,EAAD,CACEI,KAAK,QACLnI,QAAQ,WACRmW,QAAS,cAACC,GAAA,EAAD,IACTtW,UAAWD,EAAQ8U,QACnB3M,KAAMX,EACNY,OAAO,SACPC,IAAI,sBAPN,SASG,WAAaN,IAVwB,KAcpCyO,EAAaT,EAAW,KAC5B,cAAC7N,EAAA,EAAD,CACEI,KAAK,QACLnI,QAAQ,WACRmW,QAAS,cAACG,GAAA,EAAD,IACTvP,QAASkP,EACTnW,UAAWD,EAAQ8U,QALrB,kBAWI4B,EACJ,qCACGP,GAAe,cAACjW,EAAA,EAAD,UAAaiW,IAC5BN,IAAkBE,GACjB,cAAC7V,EAAA,EAAD,CAAY+H,QAAM,EAAC9H,QAAQ,QAA3B,SACG8V,IAGL,gCACGI,EACAG,KAEFhB,GAA8B,QAInC,OACE,cAACT,GAAD,CACE4B,MAAOD,EACPE,aAAa,EACb3W,UAAWD,EAAQuU,UAHrB,SAKE,cAACrU,EAAA,EAAD,CACEC,QAASA,GAAW,QACpBF,UAAWI,YAAKL,EAAQuU,WAAT,mBACZvU,EAAQ4U,SAAWA,GADP,cAEZ5U,EAAQ6U,YAAcA,GAFV,IAIfzU,UAAU,MANZ,SAQGyV,GAAiBI,MCzL1B,IAAM3X,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAASmY,KACtB,IAAM7W,EAAU1B,KACV2N,EAAcxH,YAAY4B,KAC1B6C,EAAczE,YAAY2B,KAE1B0Q,EACJ7K,GAAe/C,EACb,qCACE,mDACA,cAACkM,GAAD,CAAcvU,QAASoL,EAAalI,QAASmF,IAC7C,uCAAU+E,IAAahC,GAAaiC,WAGtC,GAGJ,OACE,cAAChO,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAKGuO,IClBP,IAAMxY,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2T,MAAO,CACLtT,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,QA4DjBiY,OAxDf,WACE,IAAM/W,EAAU1B,KACVqK,EAAWC,cACXqD,EAAcxH,YAAY4B,KAC1ByN,EAASlS,mBACb,kBAAMmS,IAAOiD,QAAO,SAACC,GAAD,OAAOA,EAAEvP,KAAOuE,OACpC,CAACA,IAEGlH,EAAcN,YAAYgB,KAC1ByG,EAAmBzH,YAAY0H,KAC/B8G,EAAmBxO,YAAYyO,KAC/BgE,EAAqB/U,uBACzB,SAACiR,GACCzK,EAASwO,YAAe/D,EAAMhL,OAAO4F,UAEvC,CAACrF,IAEG6K,EAAkBrR,uBAAY,WAClCwG,EAAS8K,iBACR,CAAC9K,IACJ,OACE,qCACE,cAAC+K,GAAA,EAAD,CACEC,QAAM,EACNxT,QAAQ,WACRyT,WAAS,EACT5F,MAAOjJ,EACP8O,SAAUqD,EACVvQ,SAAUsM,EACVa,OAAQA,IAEV,cAAC/M,GAAA,EAAD,CAAelG,QAASkE,IACxB,eAAC6E,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAAWF,UAAWD,EAAQmS,MAA7D,UACE,eAACjS,EAAA,EAAD,sDAC2C,IACxC+N,IAAalJ,GAAamJ,KAF7B,yBAEyD,OAExD7L,YAAW0C,IACV,cAACmN,GAAD,CACE1B,WAAW,gBACX3P,QAASkE,OAIf,cAAC,GAAD,CAAmBlE,QAASkE,IAC5B,cAACkC,EAAA,EAAD,CACEN,UAAWuF,EACXhF,QAASsM,EACT5M,YAAY,EAHd,sBClEAtI,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAAS0Y,KACtB,IAAMpX,EAAU1B,KACVyG,EAAcN,YAAYgB,KAE1B4R,EAAe,aAASpJ,IAAalJ,GAAamJ,MAExD,OACE,cAAChO,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAKG8O,IC0EQC,OArEf,WACE,IAAM3O,EAAWC,cACX2O,EAAa9S,YAAY+S,KACzB7S,EAAYF,YAAYa,KACxB8G,EAAiB3H,YAAY4H,KAC7B3G,EAAajB,YAAYkB,KACzB8R,EAAmBhT,YAAYiT,KAC/BC,GACHhT,GAAayH,GAAkB1G,KAAgB+R,EASlD,OARAnV,qBAAU,WACR,GAAIqV,EAEF,OADAC,OAAOC,eAAiB,kBAAM,GACvB,WACLD,OAAOC,eAAiB,QAG3B,CAACF,IAEF,eAACG,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACnY,EAAD,CAAYE,OAAK,EAACC,OAAK,EAAvB,gCAGA,cAAC6J,EAAA,EAAD,CAAOC,SAAS,OAAhB,wIAIA,eAACmO,EAAA,EAAD,CAAST,WAAYA,EAAYU,YAAY,WAA7C,UACE,eAACC,EAAA,EAAD,CACEC,SAAUZ,GAAc,EACxB5Q,SAAUgR,GAAqBF,EAFjC,UAIE,cAACW,EAAA,EAAD,CAAYlR,QAAS,kBAAMyB,EAAS0P,YAAQ,KAA5C,oBACA,cAACC,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAa,cAACV,GAAD,SAGrC,eAACqB,EAAA,EAAD,CACEC,SAAUZ,GAAc,EACxB5Q,SAAUgR,GAAqBF,EAFjC,UAIE,cAACW,EAAA,EAAD,CAAYlR,QAAS,kBAAMyB,EAAS0P,YAAQ,KAA5C,oBACA,cAACC,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAa,cAACH,GAAD,SAGrC,eAACc,EAAA,EAAD,CAAMC,SAAUZ,GAAc,EAAG5Q,SAAUyF,EAA3C,UACE,cAACgM,EAAA,EAAD,CAAYlR,QAAS,kBAAMyB,EAAS0P,YAAQ,KAA5C,8BAGA,cAACC,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAW,cAACnJ,GAAD,SAGnC,eAAC8J,EAAA,EAAD,CAAMC,SAAUZ,GAAc,EAA9B,UACE,cAACa,EAAA,EAAD,CACElR,QAAS,kBAAMyB,EAAS0P,YAAQ,KAChC1R,UAAWyF,EAFb,kCAMA,cAACkM,EAAA,EAAD,UACGb,EAAmB,cAACjP,GAAD,IAAoB,cAAC,GAAD,gBCzFrC,OAA0B,oCCA1B,OAA0B,mCCA1B,OAA0B,mCCA1B,OAA0B,qCCA1B,OAA0B,oCCA1B,OAA0B,6CCQnClK,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+Z,OAAQ,CACNxS,OAAQvH,EAAMM,QAAQ,EAAG,EAAG,GAC5BJ,UAAW,UAEb8Z,WAAY,CACV,QAAS,CACPtS,OAAQ,GACRvH,MAAO,KAGX8Z,mBAAoB,CAClBzS,QAAS,OACT2K,WAAY,SACZ+H,eAAgB,SAChBC,QAAS,GACT9Z,UAAWL,EAAMM,QAAQ,IAE3B8Z,aAAc,CACZ1S,OAAQ,GACRvH,MAAO,GACPqY,OAAQ,cACR6B,WAAY,cACZ,UAAW,CACT7B,OAAQ,eAEV8B,cAAe,SACfrE,YAAajW,EAAMM,QAAQ,QAIhB,SAASia,KACtB,IAAM/Y,EAAU1B,KAChB,OACE,yBAAQ2B,UAAWD,EAAQuY,OAA3B,UACE,gCACE,cAACS,EAAA,EAAD,CACE7Q,KAAK,gCACLC,OAAO,SACPC,IAAI,sBACJpI,UAAWD,EAAQwY,WAJrB,SAME,qBAAKS,IAAKC,GAASC,IAAI,cAEzB,cAACH,EAAA,EAAD,CACE7Q,KAAK,wCACLC,OAAO,SACPC,IAAI,sBACJpI,UAAWD,EAAQwY,WAJrB,SAME,qBAAKS,IAAKG,GAAQD,IAAI,aAExB,cAACH,EAAA,EAAD,CACE7Q,KAAK,mCACLC,OAAO,SACPC,IAAI,sBACJpI,UAAWD,EAAQwY,WAJrB,SAME,qBAAKS,IAAKI,GAAQF,IAAI,aAExB,cAACH,EAAA,EAAD,CACE7Q,KAAK,8BACLC,OAAO,SACPC,IAAI,sBACJpI,UAAWD,EAAQwY,WAJrB,SAME,qBAAKS,IAAKK,GAAUH,IAAI,eAE1B,cAACH,EAAA,EAAD,CACE7Q,KAAK,qCACLC,OAAO,SACPC,IAAI,sBACJpI,UAAWD,EAAQwY,WAJrB,SAME,qBAAKS,IAAKM,GAASJ,IAAI,iBAG3B,sBAAKlZ,UAAWD,EAAQyY,mBAAxB,UACE,8BACE,mBACEtQ,KAAK,+BACLC,OAAO,SACPC,IAAI,sBAHN,SAKE,qBACE4Q,IAAKO,GACLL,IAAI,WACJlZ,UAAWD,EAAQ4Y,mBAIzB,gCACE,cAAC1Y,EAAA,EAAD,CAAYC,QAAQ,QAApB,yBACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,wC,0BCxFJ7B,GAAYC,aAAW,SAACC,GAAD,YAAY,CACvCI,OAAO,aACLC,UAAWL,EAAMM,QAAQ,IACzBC,aAAcP,EAAMM,QAAQ,IAC3BN,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BF,aAAcP,EAAMM,QAAQ,KAGhCyJ,YAAa,CACXxJ,aAAcP,EAAMM,QAAQ,IAE9B2a,OAAQ,CACN1a,aAAcP,EAAMM,QAAQ,IAE9B4a,UAAQ,GACN7a,UAAWL,EAAMM,QAAQ,IADnB,cAELN,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BJ,UAAWL,EAAMM,QAAQ,KAHrB,yBAKI,QALJ,GAOR6a,SAAU,CACRC,QAASpb,EAAMM,QAAQ,GACvB+a,gBAAiBza,IAAO0a,gCAE1B7T,OAAQ,CACNC,OAAQ1H,EAAMM,QAAQ,IAExBib,UAAU,aACR/T,QAAS,OACT4K,SAAU,OACV8H,eAAgB,SAChB3S,OAAQvH,EAAMM,SAAS,GAAI,EAAG,IAC7BN,EAAMQ,YAAYC,KAAK,MAAQ,CAC9B8G,OAAQvH,EAAMM,SAAS,GAAI,EAAG,KAGlCkb,UAAU,aACRH,gBAAiBza,IAAO0a,+BACxBG,aAAc,EACdjU,QAAS,OACTkU,cAAe,SACfnU,OAAQvH,EAAMM,QAAQ,GACtBqb,UAAW,OACXP,QAASpb,EAAMM,QAAQ,GACvBH,MAAO,IACPoZ,SAAU,KACTvZ,EAAMQ,YAAYC,KAAK,MAAQ,CAC9B2a,QAASpb,EAAMM,QAAQ,KACvBH,MAAO,IACPoZ,SAAU,MAGdqC,iBAAkB,CAChBC,SAAU,WACV3b,UAAW,UAEb4b,UAAW,CACTpU,OAAQ,GACR6R,SAAU,IAEZwC,UAAW,CACT1b,UAAWL,EAAMM,QAAQ,GACzB0b,KAAM,IACNxU,QAAS,OACT2K,WAAY,SACZ+H,eAAgB,SAChBha,UAAW,SACXyb,UAAW,IAEbM,KAAM,CACJZ,gBAAiBza,IAAOsb,qBACxBL,SAAU,WACVM,IAAK,MACLC,MAAO,MACPC,UAAW,4BA+FAC,OA3Ff,WACE,IAAM9a,EAAU1B,KAChB,OACE,gCACE,cAACwZ,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,qBAAK9X,UAAWD,EAAQpB,OAAxB,SACE,cAACgB,EAAD,qCAGJ,cAACkY,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,sBAAK9X,UAAWD,EAAQ+Z,UAAxB,UACGhG,IAAOiD,QAAO,gBAAGtP,EAAH,EAAGA,GAAH,OAAaqT,IAAYC,SAAStT,MAAK+H,KAAI,SAACwL,GAAD,OACxD,sBAAoBhb,UAAWD,EAAQga,UAAvC,UACE,qBAAK/Z,UAAWD,EAAQoa,iBAAxB,SACE,qBACEnB,IAAKgC,EAAMC,KACX/B,IAAK8B,EAAM/M,KACXjO,UAAWD,EAAQsa,cAGvB,cAACpa,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,MACVH,UAAWD,EAAQua,UAHrB,SAKE,8BAAMU,EAAM/M,WAbN+M,EAAMvT,OAiBjByT,IAAmB1L,KAAI,SAAC2L,GAAD,OACtB,sBAAKnb,UAAWD,EAAQga,UAAxB,UACE,sBAAK/Z,UAAWD,EAAQoa,iBAAxB,UACE,qBACEnB,IAAKmC,EAAKF,KACV/B,IAAKiC,EAAKlN,KACVjO,UAAWD,EAAQsa,YAErB,cAACe,GAAA,EAAD,CACEpH,MAAM,cACN3L,KAAK,QACLrI,UAAWD,EAAQya,UAGvB,cAACva,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,MACVH,UAAWD,EAAQua,UAHrB,SAKE,8BAAMa,EAAKlN,oBAMrB,cAAC4J,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACuD,GAAA,EAAD,CAAMrb,UAAWD,EAAQ2Z,SAAzB,UACE,cAACzZ,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWD,EAAQuI,YAA5C,kCAGA,cAACrI,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWD,EAAQuI,YAA5C,4IAIA,qBAAKtI,UAAWD,EAAQiG,SACxB,eAAC/F,EAAA,EAAD,CAAYC,QAAQ,YAAYF,UAAWD,EAAQuI,YAAnD,uHAE2C,IACzC,cAACgT,EAAA,EAAD,CAAMnb,UAAWob,IAAYC,GAAG,YAAYxT,QAAM,EAAlD,2BAHF,OAQA,eAAC/H,EAAA,EAAD,CAAYC,QAAQ,YAAYF,UAAWD,EAAQuI,YAAnD,mFAEK,IACH,cAACgT,EAAA,EAAD,CAAMpT,KAAK,gCAAX,sCAIF,eAACjI,EAAA,EAAD,CAAYC,QAAQ,YAAYF,UAAWD,EAAQuI,YAAnD,4EACkE,IAChE,cAACgT,EAAA,EAAD,CAAMpT,KAAK,kCAAX,6C,uFClKCuT,GAAe,yCAAG,WAAOC,GAAP,8BAAAxS,EAAA,sDACvByS,EAAW,GADY,eAEPD,GAFO,IAE7B,2BAAW5X,EAA0B,QACnC6X,EAASnT,KAAKoT,aAAmB9X,IAHN,8CAKDqJ,QAAQ0O,IAAIF,GALX,cAKvBG,EALuB,OAMvB/Y,EAAa,IAAIC,aAAWC,IAAa,aANlB,SAOP2L,aACpB7L,EACA+Y,EAActM,KAAI,SAACuM,GAAD,OAAUA,GAAQA,EAAK,OATd,cAOvBjN,EAPuB,OAYvBiD,EAASjD,EAAQU,KAAI,SAACwM,GAC1B,GAAgB,OAAZA,GAGEA,EAAQpY,KACV,IAEE,OADuBqY,aAAeD,EAAQpY,MAE9C,MAAO/B,GAEP,YADA+E,QAAQtF,MAAMO,OArBO,kBA8BtBkQ,GA9BsB,4CAAH,sDAoGbmK,GAjDS,SACtBC,GAEA,MAA8Blb,wBAE5B4C,GAFF,mBAAOiL,EAAP,KAAgBsN,EAAhB,KAGA,EAAkCnb,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA0BR,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAoCN,mBAAwB,MAA5D,mBAAO8C,EAAP,KAAmBsY,EAAnB,KAsCA,OApCAC,2BAAgB,WACd,IAAIpP,GAAY,EAqBhB,OApBAzL,GAAa,GACbga,GAAgBU,GAAW/Y,MACzB,SAAC0L,GACM5B,IACHkP,EAlCc,SACtBD,EACAI,GAEA,IAAMxK,EAAS,IAAIyK,IAWnB,OATAL,EAAUM,SAAQ,SAAC3Y,GACjB,IAAM4Y,EAAWH,EAAU5M,MAAK,SAACgN,GAAD,OAAQ,OAADA,QAAC,IAADA,OAAA,EAAAA,EAAGC,QAAS9Y,KAC/C4Y,EACF3K,EAAO8K,IAAI/Y,EAAS4Y,GAEpB3K,EAAO8K,IAAI/Y,OAASD,MAIjBkO,EAmBY+K,CAAgBX,EAAWrN,IACtCrN,GAAa,GACbF,EAAS,IACT8a,GAAc,IAAIU,MAAOC,mBAG7B,SAAC1b,GACM4L,IACHkP,OAAWvY,GACXpC,GAAa,GACbF,EAAS,kCACT8a,GAAc,IAAIU,MAAOC,mBAKxB,WACL9P,GAAY,KAEb,CAACiP,EAAWC,EAAY3a,EAAcF,IAE1BI,mBACb,iBAAO,CACLiC,KAAMkL,EACNnL,WAAYnC,EACZF,QACAyC,gBAEF,CAAC+K,EAAStN,EAAWF,EAAOyC,K,6BCxF1BkZ,GAAmC,CACvCC,eAAgBC,eAChBC,cAAeD,eACfE,WAAYF,gBAGDG,GAAaC,aAAY,CACpCtP,KAAM,aACNgP,gBACAO,SAAU,CACRC,sBAAuB,SAACC,EAAOC,GAC7BD,EAAMR,eAAiBU,aAAmBD,EAAOE,UAEnDC,oBAAqB,SAACJ,GACpBA,EAAMR,eAAiBa,gBAEzBC,oBAAqB,SAACN,EAAOC,GAC3BD,EAAMR,eAAiBe,aAAiBN,EAAOE,UAGjDK,qBAAsB,SAACR,EAAOC,GAC5BD,EAAMN,cAAgBQ,aAAmBD,EAAOE,UAElDM,mBAAoB,SAACT,GACnBA,EAAMN,cAAgBW,gBAExBK,mBAAoB,SAACV,EAAOC,GAC1BD,EAAMN,cAAgBa,aAAiBN,EAAOE,UAGhDQ,kBAAmB,SAACX,EAAOC,GACzBD,EAAML,WAAaO,aAAmBD,EAAOE,UAE/CS,gBAAiB,SAACZ,GAChBA,EAAML,WAAaU,gBAErBQ,gBAAiB,SAACb,EAAOC,GACvBD,EAAML,WAAaY,aAAiBN,EAAOE,UAG7ChV,MAAO,kBAAMoU,OAIV,GAWHK,GAAWkB,QAVbf,GADK,GACLA,sBACAK,GAFK,GAELA,oBACAE,GAHK,GAGLA,oBACAE,GAJK,GAILA,qBACAC,GALK,GAKLA,mBACAC,GANK,GAMLA,mBACAC,GAPK,GAOLA,kBACAC,GARK,GAQLA,gBACAC,GATK,GASLA,gBAIajB,IAbR,GAULzU,MAGayU,GAAf,SC9DMmB,GAA0B,YAAZnX,IAAwBoX,KAAIC,QAAUD,KAAIE,YAkBxDC,GAAoB,SAACnW,GACzBA,EAASoV,OAET,IAAIgB,MAAoB1R,UAAUhK,MAChC,SAAC2b,GACC,IAAMC,EAAYD,EAAOE,gBAAgBR,IAAaS,UACtDxW,EAAS+U,GAAsBuB,OAEjC,SAAC1d,GACCsF,QAAQtF,MAAMA,GACdoH,EAASsV,GAAoB,iDAKpBmB,GA/BW,WACxB,IAAMC,EAAW5a,YAAY6a,KACvB3W,EAAWC,cACX2W,OACczb,IAAlBub,EAASxb,MACU,OAAlBwb,EAASxb,OAAkBwb,EAASzb,WAQvC,OANAtB,qBAAU,WACJid,GACFT,GAAkBnW,KAEnB,CAACA,EAAU4W,IAEPF,G,uCCrBM,SAASG,GAAT,GAGmC,IAFhDC,EAE+C,EAF/CA,WACGC,EAC4C,mBAC/C,OACE,cAAC1L,GAAA,EAAD,yBACE2L,KAAK,UACDD,GAFN,IAGEE,WAAU,aACRC,aAAcJ,EACZ,cAACK,GAAA,EAAD,CAAgBzF,SAAS,MAAzB,SACE,cAACnS,EAAA,EAAD,CACEhB,QAASuY,EACT9Y,SAAU+Y,EAAM/Y,SAChBxG,QAAQ,WAHV,wBAQA2D,IACK,OAAL4b,QAAK,IAALA,OAAA,EAAAA,EAAOE,aAAc,OCG1B,SAASG,GACdhb,EACAib,EACAC,GAEA,MAA8D/e,oBAAS,GAAvE,mBAAOgf,EAAP,KAAgCC,EAAhC,KACM7T,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UAqC5B,OApCAlK,qBAAU,WAER,GADA6d,GAA2B,GAEzBpb,IAAgBM,KACf2a,GACAC,GACAzV,EAJH,CAOA,IAAI2C,GAAY,EAuBhB,OAtBA,wBAAC,mCAAAhE,EAAA,6DACOnG,EAAa,IAAIC,aAAWC,IAAa,aACzCkd,EAAgB,IAAItR,YAAUkR,GAC9BK,EAAiB,IAAIvR,YAAUtE,GAHtC,SAIiC8V,KAAMC,0BACpCC,KACAC,KACAL,EACAC,GARH,UAIOK,EAJP,SAUeA,EAAkB9V,aAAeqV,GAVhD,kCAYuCjd,EAAW2d,eAC7CD,GAbL,gBAgBUvT,GACHgT,GAA2B,GAjBlC,2CAAD,GAsBO,WACLhT,GAAY,MAEb,CAACpI,EAAaib,EAAaC,EAAuBzV,IAC9C5I,mBACL,iBAAO,CAAEse,0BAAyBC,gCAClC,CAACD,IAIU,SAASU,GAAT,GAUX,IATFZ,EASC,EATDA,YACAC,EAQC,EARDA,sBACAC,EAOC,EAPDA,wBACAC,EAMC,EANDA,2BAOA,EAAoCjf,oBAAS,GAA7C,mBAAOwE,EAAP,KAAmBmb,EAAnB,KACMvU,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtB9F,EAAcvE,uBAAY,YAE5B+d,GACCF,GACAC,GACAzV,GAGH,wBAAC,yCAAArB,EAAA,6DACOnG,EAAa,IAAIC,aAAWC,IAAa,aACzCkd,EAAgB,IAAItR,YAAUkR,GAC9BK,EAAiB,IAAIvR,YAAUtE,GAHtC,SAIiC8V,KAAMC,0BACpCC,KACAC,KACAL,EACAC,GARH,UAIOK,EAJP,SAUeA,EAAkB9V,aAAeqV,GAVhD,kCAYuCjd,EAAW2d,eAC7CD,GAbL,0CAgBKG,GAAc,GAhBnB,KAiByB,IAAIC,cAjB7B,UAkBaR,KAAMS,wCACVP,KACAC,KACAL,EACAM,EACAL,EACAA,GAxBT,2BAiBWxV,EAjBX,KAiB2CmW,IAjB3C,0BA2BiChe,EAAWie,qBA3B5C,wBA2BaC,EA3Bb,EA2BaA,UACRrW,EAAYsW,gBAAkBD,EAC9BrW,EAAYuW,SAAW,IAAItS,YAAUuR,GA7B1C,UA8BWvV,aAAmBwB,EAActJ,EAAY6H,GA9BxD,QA+BKgW,GAAc,GACdV,GAA2B,GAhChC,wBAkCKtZ,QAAQC,IAAI,2BAlCjB,2CAAD,KAsCC,CACDoZ,EACAC,EACAH,EACAxV,EACAyV,EACA3T,IAEF,OAAI4T,EAAgC,KAElC,qCACE,cAAChgB,EAAA,EAAD,CAAYgE,MAAM,QAAQ/D,QAAQ,QAAlC,0DAGA,cAAC8G,EAAA,EAAD,CACEN,UACGqZ,IAAgBC,IAA0BzV,GAAS9E,EAEtDwB,QAASR,EACTE,WAAYlB,EALd,gDAaC,SAAS2b,KACd,IAAQrY,EAAoBgD,cAApBhD,gBACFzI,EAAckE,YAAY6c,MAC1B9gB,EAAciE,YAAY8c,MAC1BC,EAAa/c,YAAYgd,MACzBC,EAAsB9f,mBAC1B,kBAAM+f,YAAkBH,EAAYnc,MAAoB,KACxD,CAACmc,IAEGI,EAAsBhgB,mBAC1B,kBAAM+f,YAAkBnhB,EAAa6E,MAAoB,KACzD,CAAC7E,IAEGwC,EAAapB,mBAAQ,kBAAM,IAAIqB,aAAWC,OAAc,IAC9D,EAAsChC,mBAAwB,MAA9D,mBAAO2gB,EAAP,KAAoBC,EAApB,KAEAxf,qBAAU,WACR,IAAI6K,GAAY,EAkBhB,OAjBM5M,GAAeC,GAAeghB,GAAcE,EAEvCnhB,IAAgB8E,KAAmBuc,EAC5CE,EAAeF,GAEfze,YACEH,EACAI,IACA7C,EACAkC,YAAgBjC,IAChB6C,MAAK,SAACC,GACD6J,GACH2U,EAAexe,MAXnBwe,EAAe,MAgBV,WACL3U,GAAY,KAEb,CACD5M,EACAC,EACAghB,EACAE,EACA1e,EACA4e,IAGF,MACE7B,GACE1a,IACAwc,EACAH,GAJIxB,EAAR,EAAQA,wBAAyBC,EAAjC,EAAiCA,2BAO3B7T,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtBuV,EAAyB5f,uBAAY,WACpC0f,GAAgBH,GAAwBlX,GAC7C,wBAAC,yCAAArB,EAAA,6DACOnG,EAAa,IAAIC,aAAWC,IAAa,aACzCkd,EAAgB,IAAItR,YAAU+S,GAC9BxB,EAAiB,IAAIvR,YAAUtE,GAHtC,SAIiC8V,KAAMC,0BACpCC,KACAC,KACAL,EACAC,GARH,UAIOK,EAJP,SAUeA,EAAkB9V,aAAe8W,GAVhD,sCAayB,IAAIZ,cAb7B,UAcaR,KAAMS,wCACVP,KACAC,KACAL,EACAM,EACAL,EACAA,GApBT,2BAaWxV,EAbX,KAa2CmW,IAb3C,0BAuBiChe,EAAWie,qBAvB5C,wBAuBaC,EAvBb,EAuBaA,UACRrW,EAAYsW,gBAAkBD,EAC9BrW,EAAYuW,SAAW,IAAItS,YAAUuR,GAzB1C,UA0BWvV,aAAmBwB,EAActJ,EAAY6H,GA1BxD,QA2BKsV,GAA2B,GAC3BnX,EAAgB,KAAM,CACpBW,QACE,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,6DA9BT,kDAoCKb,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QArCnD,gCAyCGvB,EAAgB,KAAM,CACpBW,QACE,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,yGA3CP,yDAAD,KAmDC,CACDsW,EACA0B,EACArX,EACAkX,EACApV,EACAtD,IAGF,OAAO6Y,EACL,sBAAKnR,MAAO,CAAEhS,UAAW,UAAzB,UACE,cAACwB,EAAA,EAAD,CAAYC,QAAQ,YAApB,gCACA,cAACD,EAAA,EAAD,CAAYE,UAAU,MAAtB,SACE,cAACgV,GAAD,CACEvU,QAASwE,IACTtB,QAAS2d,EACTvhB,QAAQ,KACRqV,aACE,cAACtN,EAAA,EAAD,CACEI,KAAK,QACLnI,QAAQ,WACR+G,QAAS6a,EACTpb,UAAWkb,IAAgBH,IAAwBlX,EAJrD,sCAWL0V,EAA0B,KACzB,cAACU,GAAD,CACEZ,YAAa6B,EACb5B,sBAAuByB,EACvBxB,wBAAyBA,EACzBC,2BAA4BA,OAIhC,K,cC7RA7hB,GAAYC,aAAW,iBAAO,CAClCyjB,UAAW,CACTnI,gBAAiBza,IAAO0a,+BACxBpb,UAAW,SACXkb,QAAS,OACT,YAAa,CACX7T,OAAQ,UAGZkc,QAAS,CACPlc,OAAQ,uBAEVE,OAAQ,CACNC,OAAQ,YAKNgc,GAAW,yCAAG,WAClBlf,EACA6Z,EACAsF,GAHkB,sBAAAhZ,EAAA,yDAKlBgZ,OAAOre,IACH+Y,EANc,iCAQRuF,EAAK,IAAItT,YAAU+N,GARX,SASK7Z,EAAWqf,qBAAqBD,GATrC,OASRnX,EATQ,OAWRqX,EAXQ,UAWGrX,EAAK+C,aAXR,aAWG,EAAYnK,KAAK0e,OAAOtX,KAAKqX,SAC9CH,EAAOG,GAZO,kDAcdzb,QAAQC,IAAR,0CAA+C+V,IAdjC,0DAAH,0DAoBX1N,GAAU,yCAAG,WACjBnM,EACAe,EACAoe,GAHiB,sBAAAhZ,EAAA,yDAKjBgZ,OAAOre,IACHC,EANa,iCAQPqe,EAAK,IAAItT,YAAU/K,GARZ,SASMf,EAAWqf,qBAAqBD,GATtC,OASPnX,EATO,OAWPyD,EAXO,UAWGzD,EAAK+C,aAXR,aAWG,EAAYnK,KAAK0e,OAAOtX,KAAKuX,YAAYC,eACzDN,EAAOzT,GAZM,kDAcb7H,QAAQC,IAAR,yCAA8C/C,IAdjC,0DAAH,0DAmBD,SAAS2e,GAAT,GAQX,IAPFC,EAOC,EAPDA,SACAC,EAMC,EANDA,OACAC,EAKC,EALDA,iBAMM7iB,EAAU1B,KAEV0E,EAAapB,mBACjB,kBAAM,IAAIqB,aAAWC,IAAa,eAClC,IAEIuH,EAAS8B,eACPzL,EAAYC,YAAiBsE,KAA7BvE,QACFqc,EAAiBiC,KACjB0D,EAAgBlhB,mBAAQ,iBAAM,CAAC+gB,EAAUC,KAAS,CAACD,EAAUC,IAC7DG,EAAe5G,GAAgB2G,GAErC,EAAsC5hB,mBAAS,IAA/C,mBAAO8hB,EAAP,KAAoBC,EAApB,KACA,EAAoC/hB,wBAA8B4C,GAAlE,mBAAOof,EAAP,KAAmBC,EAAnB,KACA,EAA8DjiB,wBAE5D4C,GAFF,mBAAOsf,EAAP,KAAgCC,EAAhC,KAGA,EAA4CniB,wBAC1C4C,GADF,mBAAOwf,EAAP,KAAuBC,EAAvB,KAGA,EAA0DriB,wBAExD4C,GAFF,mBAAO0f,EAAP,KAA8BC,EAA9B,KAGA,EAAgDviB,wBAC9C4C,GADF,mBAAO4f,EAAP,KAAyBC,EAAzB,KAK2BC,EAEvB7D,GACF1a,IACAsd,EACAE,GALA3C,wBAOF,EAGIH,GAAgC1a,IAAiBud,EAAQU,GAFlCO,EAD3B,EACE3D,wBAC4B4D,EAF9B,EAEE3D,2BAGF,EAAgDjf,wBAC9C4C,GADF,mBAAOigB,EAAP,KAAyBC,EAAzB,KAGA,EAAgD9iB,wBAC9C4C,GADF,mBAAOmgB,GAAP,KAAyBC,GAAzB,KAIA,GAA8ChjB,mBAAS,IAAvD,qBAAOijB,GAAP,MAAwBC,GAAxB,MACA,GAA0DljB,oBAAS,GAAnE,qBAAOmjB,GAAP,MAA8BC,GAA9B,MACA,GAA0BpjB,mBAAS,IAAnC,qBAAOK,GAAP,MAAcC,GAAd,MACA,GAAsCN,mBAAwB,MAA9D,qBAAO2J,GAAP,MAAoB0Z,GAApB,MAIAjiB,qBAAU,WACR4f,GAAYlf,EAAY2f,EAAUgB,KACjC,CAAC3gB,EAAY2f,IAGhBrgB,qBAAU,WAEJugB,GAAoBe,EACtBzU,GAAWnM,EAAY6f,EAAkBQ,GAEzCA,OAA2Bvf,KAE5B,CACDd,EACA4gB,EACAf,EACAQ,IAGF/gB,qBAAU,WAEJghB,GAAkBO,EACpB1U,GAAWnM,EAAYsgB,EAAgBG,GAEvCA,OAAyB3f,KAE1B,CACDd,EACA6gB,EACAP,EACAD,IAGF/gB,qBAAU,WAEJyhB,EACF5U,GAAWnM,EAAY+gB,EAAkBG,IAEzCA,QAAoBpgB,KAErB,CAACd,EAAY+gB,EAAkBG,KAGlC5hB,qBAAU,WACJsgB,GAAUD,IACZM,EAAe,IACfE,OAAcrf,GACd0gB,aAAeC,IAA2B9B,EAAUC,GAAQvf,MAC1D,SAACC,GACC,IAAMohB,EAAM,IAAI5V,YAAUxL,GAAQsH,WAClCqY,EAAeyB,MAEjB,SAACnjB,GAAD,OAAWsF,QAAQC,IAAI,2CAG1B,CAAC8b,EAAQD,EAAUM,IAGtB3gB,qBAAU,WACR,GAAI0gB,EAAa,CACfG,OAAcrf,GACd,IACE6gB,aACE3hB,EACA,CAAC,IAAI8L,YAAUkU,IACf,aACA3f,MAAK,SAACC,GACFA,EAAO0L,QAAwB,OAAd1L,EAAO,GAC1B6f,GAAc,GACL7f,EAAO0L,QAAwB,OAAd1L,EAAO,IACjC6f,GAAc,GACd3hB,GAAS,0CAETA,GACE,6EAIN,MAAOM,GACPN,GAAS,oCAGZ,CAACwB,EAAYggB,IAGhB1gB,qBAAU,WACJ0gB,EACF4B,aAAoBH,IAA2BzB,GAC5C3f,MAAK,SAACC,GAAD,OACJ0gB,EAAoB,IAAIlV,YAAUxL,GAAQsH,eAE3ClH,OAAM,SAAC5B,GACNkiB,OAAoBlgB,MAGxBkgB,OAAoBlgB,KAErB,CAACkf,IAEJ1gB,qBAAU,YACE,OAANmI,QAAM,IAANA,OAAA,EAAAA,EAAQ+B,YAAaoW,GACvBtC,KAAMC,0BACJC,KACAC,KACA,IAAI3R,YAAU8T,IACR,OAANnY,QAAM,IAANA,OAAA,EAAAA,EAAQ+B,YAAa,IAAIsC,YAAU,KACnCzL,MACA,SAACC,GACCigB,EAAkBjgB,EAAOsH,eAE3B,SAACrJ,SAGJ,CAACqhB,EAAD,OAASnY,QAAT,IAASA,OAAT,EAASA,EAAQ+B,YAKpB,IAAMqY,GAAgB1iB,sBAAW,wBAAC,+BAAAgH,EAAA,sEAE9B3H,GAAS,IAFqB,SAGJsjB,aACxB9hB,GACM,OAANyH,QAAM,IAANA,GAAA,UAAAA,EAAQ+B,iBAAR,eAAmB5B,aAAc,GACjC6Z,IACA9B,EACAC,EACAC,GAAoB,GACpBS,GAAkB,GAClByB,sBAAWZ,GAAiBT,GAAkBtU,YAXlB,OAGxB4V,EAHwB,OAa9BV,IAAyB,GACzBxZ,aAAmBL,EAAQzH,EAAYgiB,GAAa3hB,MAClD,SAACwH,GACCyZ,IAAyB,GACzBC,GAAe1Z,MAEjB,SAACtJ,GACCsF,QAAQC,IAAIvF,GACZC,GAAS,qDACT8iB,IAAyB,MAtBC,gDA0B9Bzd,QAAQC,IAAR,MACAtF,GAAS,qDACT8iB,IAAyB,GA5BK,yDA8B/B,CACDthB,EACA2f,EACAE,EACAsB,GACAvB,EACAU,EACA7Y,EACAiZ,IAGIuB,GAAY,SAACvV,GACjB,IACE,OAAOqV,sBAAWrV,EAAQgU,GAAkBtU,WAC5C,MAAOtN,GACP,OAAOwM,OAAO,KAIZ4W,GAAmBvC,GAAYC,GAAUI,GAAeE,EACxDiC,GACJvB,GAA0BC,GAAwBX,EAC9CkC,GAAwBH,GAAUd,IAAmB7V,OAAO,GAC5D+W,GACJjC,GACAe,IACAc,GAAUd,KAAoBc,GAAU7B,GACpCkC,GACJrB,IACAE,IACArS,WAAWqS,KAAoBrS,WAAWmS,IAEtCsB,GACJzkB,GACAskB,IACAC,IACAC,IACAH,IACAD,GAsBIM,GAAqBrjB,uBACzB,SAACiR,GAAD,OAAWgR,GAAmBhR,EAAMhL,OAAO4F,SAC3C,CAACoW,KAEGqB,GAAiBtjB,uBAAY,WAC7BihB,GACFgB,GAAmBhB,KAEpB,CAACA,IAEEsC,GAAc,SAAC3hB,GAAqB,IAAD,UACjC4hB,EAAY,UAAGxI,EAAetZ,YAAlB,aAAG,EAAqB+L,MACxC,SAACgN,GAAD,OAAOA,EAAE7Y,UAAYA,KAEjB6hB,EAAY,UAAG7C,EAAalf,YAAhB,aAAG,EAAmBgiB,IAAI9hB,GAE5C,MAAO,CACLuR,QAAoB,OAAZqQ,QAAY,IAAZA,OAAA,EAAAA,EAAcrQ,UAAd,OAAwBsQ,QAAxB,IAAwBA,GAAxB,UAAwBA,EAAc/hB,YAAtC,aAAwB,EAAoByR,cAAUxR,EAC9DoK,MAAkB,OAAZyX,QAAY,IAAZA,OAAA,EAAAA,EAAczX,QAAd,OAAsB0X,QAAtB,IAAsBA,GAAtB,UAAsBA,EAAc/hB,YAApC,aAAsB,EAAoBqK,YAAQpK,EACxDoX,MAAkB,OAAZyK,QAAY,IAAZA,OAAA,EAAAA,EAAcG,WAAd,OAAyBF,QAAzB,IAAyBA,GAAzB,UAAyBA,EAAc/hB,YAAvC,aAAyB,EAAoBkiB,WAAOjiB,IAIxDkiB,GAAaN,GAAY9C,GACzBqD,GAAeP,GAAY/C,GAE3BuD,GACJ,cAAC9Q,GAAD,CACEvU,QAASwE,IACTtB,QAAS6e,EACTtN,OAAM,OAAE0Q,SAAF,IAAEA,QAAF,EAAEA,GAAY1Q,OACpBC,UAAS,OAAEyQ,SAAF,IAAEA,QAAF,EAAEA,GAAY9X,OAGrBiY,GACJ,cAAC/Q,GAAD,CACEvU,QAASwE,IACTtB,QAAS4e,EACTrN,OAAM,OAAE2Q,SAAF,IAAEA,QAAF,EAAEA,GAAc3Q,OACtBC,UAAS,OAAE0Q,SAAF,IAAEA,QAAF,EAAEA,GAAc/X,OAI7B,OACE,gCACE,cAACkY,GAAA,EAAD,IACA,qBAAKnmB,UAAWD,EAAQiG,SACvB4c,GAAoBS,EACnB,qCACE,eAACpjB,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,MAAtC,UACE,qDACC+lB,GACD,8DAEF,eAACjmB,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACE,cAACiV,GAAD,CACErR,QAAS8e,EACThiB,QAASwE,MAHb,oBAKgB+d,GALhB,OAMI6C,GAAa3Q,QAAU,IAAM2Q,GAAa3Q,OAN9C,QASA,qBAAKrV,UAAWD,EAAQiG,SACxB,eAAC/F,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,MAAtC,UACE,yCACC8lB,GACD,+DAEF,eAAChmB,EAAA,EAAD,CACEC,QAAQ,KACR+D,MAAO2f,EAAuB,cAAgB,gBAFhD,UAIE,cAACzO,GAAD,CAAcrR,QAASuf,EAAgBziB,QAASwE,MAChD,+BACGwe,EAAoB,qBACHL,GADG,OAEdwC,GAAW1Q,QAAU,IAAM0Q,GAAW1Q,QAAW,GAFnC,KAIjB,0BAGR,cAACsL,GAAD,CACEZ,YAAa4C,EACb3C,sBAAuBqD,EACvBpD,wBAAyB2D,EACzB1D,2BAA4B2D,IAE7Bd,GAAee,GAAoBE,GAClC,qCACE,qBAAKhkB,UAAWD,EAAQiG,SACxB,eAAC/F,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,MAAtC,UACE,+CACA,cAACgV,GAAD,CAAcrR,QAASif,EAAaniB,QAASwE,MAC7C,uEAEF,eAACnF,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACE,cAACiV,GAAD,CACErR,QAASggB,EACTljB,QAASwE,MAEX,oDAAqB4e,IAArB,OACE+B,GAAW1Q,QAAU,IAAM0Q,GAAW1Q,OADxC,aAKF,QAEJ,KACJ,qBAAKrV,UAAWD,EAAQiG,SACxB,cAACuZ,GAAD,CACErf,QAAQ,WACR6N,MAAOmW,GACPtQ,SAAU2R,GACVvR,MAAO,SACPtN,WAAY0d,MAA2BxZ,GACvC4U,WAAY2D,EAA0BqC,QAAiB3hB,KAGvD+G,IACA,cAAC5D,EAAA,EAAD,CACEN,UAAW4e,IAAqBlB,GAChCzd,WAAYyd,GACZnd,QAAS2d,GAHX,SAKGV,IAAmBoB,GAChB,WAAapB,GAAkB,UAC/B,aAGN5iB,KAAUgkB,KACV,cAACrlB,EAAA,EAAD,CAAYgE,MAAM,QAAlB,SAA2B3C,KAtJ1BohB,GAAaC,GAAWI,GAAgBE,EAEjCpiB,EAEA+iB,GAAyBD,EAEzBO,GAEAiB,GAEAC,GAEAC,GAGH,GAFA,gEAFA,mEAFA,qCAFA,+BAFA,qDAFA,2BAFA,kCAuJNza,GACC,qCACE,cAAC3K,EAAA,EAAD,wGAIA,cAACmH,GAAD,CACEF,GAAI,CAAEO,GAAImD,GAAapB,MAAO,GAC9B5I,QAASwE,SAGX,QCldV,IAAMghB,GAAgB,yCAAG,WACvBC,EACArd,EACAsd,GAHuB,4CAAApd,EAAA,sEAMf6Z,EAAcsD,EAASviB,QANR,SAOKuiB,EAASE,YAPd,cAOfC,EAPe,gBAQGH,EAASI,UARZ,cAQfC,EARe,OAUfC,EAAYC,IAA6BC,QAAQL,EAAaxd,GAC9D8d,EAAUF,IAA6BC,QAAQH,EAAW1d,GAX3C,UAaI2d,EAAUtR,SAbd,eAaf0R,EAbe,iBAcED,EAAQzR,SAdV,eAcf2R,EAde,iBAgBaX,EAASY,eAhBtB,gCAgBsCC,WAhBtC,eAgBfD,EAhBe,iBAiBWZ,EAASc,aAjBpB,gCAiBkCD,WAjBlC,eAiBfC,EAjBe,iBAkBQd,EAAShE,WAlBjB,eAkBf+E,EAlBe,YAoBKrX,eApBL,UAqBb4W,EAAUU,UAAUf,GArBP,gCAsBnBW,EAFIK,GApBe,wBAwBGvX,eAxBH,UAyBb+W,EAAQO,UAAUf,GAzBL,gCA0BnBa,EAFII,GAxBe,wBA6BGxX,eA7BH,UA8Bb4W,EAAUU,UAAUtE,GA9BP,gCA+BnBkE,EAFIO,GA7Be,wBAiCCzX,eAjCD,UAkCb+W,EAAQO,UAAUtE,GAlCL,kCAmCnBoE,EAFIM,GAjCe,2BAsCO1X,eAtCP,UAuCbsW,EAASgB,UAAUf,GAvCN,kCAwCnBc,EAFIM,GAtCe,wCA2Cd,CACL3E,cACAyD,cACAE,YACAC,YACAG,UACAT,WACAU,aACAC,WACAC,eACAE,aACAG,oBACAC,kBACAC,kBACAC,gBACAC,sBACAN,mBA3DmB,4DA8Ddja,QAAQ0C,OAAO,sCA9DD,0DAAH,0DAoIP8X,OAlEf,SACEC,EACA5e,EACAsd,EACAuB,GAEA,IAAMxB,EAAW1kB,mBACf,kBACEimB,GACA5e,GACA8e,IAAkBjB,QAAQe,EAAiB5e,KAC7C,CAAC4e,EAAiB5e,IAEpB,EAAwB/H,mBAAqB,MAA7C,mBAAO2C,EAAP,KAAamkB,EAAb,KACA,EAAkC9mB,oBAAkB,GAApD,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA0BR,mBAAiB,IAA3C,mBAAOK,EAAP,KAAcC,EAAd,KA6BA,OA3BAc,qBAAU,WACR,GAAK2G,GAAWqd,GAAaC,EAA7B,CAGA,IAAIpZ,GAAY,EAiBhB,OAhBAzL,GAAa,GACb2kB,GAAiBC,EAAUrd,EAAQsd,GAAeljB,MAChD,SAACC,GACM6J,IACH6a,EAAQ1kB,GACR5B,GAAa,OAGjB,SAACH,GACM4L,IACHzL,GAAa,GACbF,EAAS,0CAKR,WACL2L,GAAY,MAGb,CAACmZ,EAAUrd,EAAQsd,EAAeuB,IAE9BlmB,mBAAQ,WACb,OAAKimB,GAAoB5e,GAAWsd,EAY3B,CACL9kB,YACAF,QACAsC,QAdK,CACLpC,WAAW,EACXF,MACG0H,GAAWsd,EAEPsB,EAED,QADA,sBAFA,uBAINhkB,KAAM,QAST,CAACpC,EAAWF,EAAOsC,EAAMgkB,EAAiB5e,EAAQsd,K,UCrJjDjoB,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyH,OAAQ,CACNC,OAAQ,QAEV+hB,aAAc,CACZvpB,UAAW,SACXkb,QAASpb,EAAMM,QAAQ,QAIZ,SAASopB,GAAT,GAMX,IAAD,kBALDrnB,EAKC,EALDA,QACAgnB,EAIC,EAJDA,gBAKM7nB,EAAU1B,KACR0K,EAAoBgD,cAApBhD,gBACR,EAAkCtI,cAA1BuI,EAAR,EAAQA,OAAQsd,EAAhB,EAAgBA,cACRzlB,EAAYC,YAAiBF,GAA7BC,QACR,EAA0CI,oBAAS,GAAnD,mBAAO4mB,EAAP,KAAsBK,EAAtB,KACMC,EAAejmB,uBACnB,kBAAMgmB,GAAiB,SAACE,GAAD,OAAgBA,OACvC,IAEIC,EAAWV,GACfC,EACA5e,EACAsd,EACAuB,GAEIP,EAAiB,UAAGe,EAASzkB,YAAZ,aAAG,EAAe0jB,kBAEzC,EAA8CrmB,mBAAS,IAAvD,mBAAOijB,EAAP,KAAwBC,EAAxB,KACA,EAA0DljB,oBAAS,GAAnE,mBAAOmjB,EAAP,KAA8BC,EAA9B,KACA,EAA0BpjB,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAsCN,mBAAwB,MAA9D,mBAAO2J,EAAP,KAAoB0Z,EAApB,KAEMU,EAAY,SAACvV,GACjB,IAAK,IAAD,EACF,OAAI,UAAC4Y,EAASzkB,YAAV,aAAC,EAAeqjB,eAAiB/C,EAG9BY,sBAAWrV,EAAQ4Y,EAASzkB,KAAKqjB,cAAc9X,WAF7Cd,OAAO,GAGhB,MAAOxM,GACP,OAAOwM,OAAO,KAIZ4W,EAAmBoD,EAASzkB,KAC5BuhB,EAAwBH,EAAUd,GAAmB7V,OAAO,GAC5D+W,GACJkC,GACApD,GACAc,EAAUd,IAAoBc,EAAUsC,GACpCjC,IACJ,UAAAgD,EAASzkB,YAAT,eAAe6jB,gBACfvD,GACArS,WAAWqS,IAAoBrS,WAAWwW,EAASzkB,KAAK6jB,eAEpDnC,GACJzkB,GACAskB,GACAC,IACAC,IACAJ,EAoBIM,GAAqBrjB,uBACzB,SAACiR,GAAD,OAAWgR,EAAmBhR,EAAMhL,OAAO4F,SAC3C,CAACoW,IAEGqB,GAAiBtjB,uBAAY,WAC7BolB,GACFnD,EAAmBmD,KAEpB,CAACA,IAEE1C,GAAgB1iB,sBAAW,wBAAC,6BAAAgH,EAAA,yDAC3Bmf,EAASzkB,KADkB,uBAE9BmF,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,6CAHmB,0CAQ9Bya,GAAyB,GACzB9iB,EAAS,IATqB,SAUxB8mB,EAASzkB,KAAK+iB,UAAU2B,QAC5BD,EAASzkB,KAAKyiB,SAASviB,QACvBghB,sBAAWZ,EAAiBmE,EAASzkB,KAAKqjB,eAZd,wBAcJoB,EAASzkB,KAAKyiB,SAASkC,QAC/CzD,sBAAWZ,EAAiBmE,EAASzkB,KAAKqjB,eAfd,eAcxBrc,EAdwB,iBAiBxBA,EAAY4d,OAjBY,QAkB9BlE,EAAe1Z,EAAY6d,MAC3BN,IACApf,EAAgB,KAAM,CACpBW,QACE,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,iDAGJya,GAAyB,GAzBK,kDA2B9Bzd,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,6CAEXya,GAAyB,GACzB9iB,EAAS,mCAhCqB,0DAkC/B,CAAC8mB,EAASzkB,KAAMsgB,EAAiBnb,EAAiBof,IAG/CO,GACJ,cAACvT,GAAD,CACEvU,QAASA,EACTkD,QAAO,UAAEukB,EAASzkB,YAAX,aAAE,EAAe8iB,UACxBrR,OAAM,UAAEgT,EAASzkB,YAAX,aAAE,EAAeojB,WAGrB2B,GACJ,cAACxT,GAAD,CACEvU,QAASA,EACTkD,QAAO,UAAEukB,EAASzkB,YAAX,aAAE,EAAe4iB,YACxBnR,OAAM,UAAEgT,EAASzkB,YAAX,aAAE,EAAemjB,aAGrB6B,GACJ,cAACzT,GAAD,CAAcvU,QAASA,EAASkD,QAAO,UAAEukB,EAASzkB,YAAX,aAAE,EAAemf,cAGpD8F,GAAaR,EAAS/mB,MACxB,6EACA,KAEEuV,GACJ,gCACE,cAAC5W,EAAA,EAAD,uCACA,eAACA,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACGyoB,GADH,wBACkCrB,GAAqB,GADvD,QAGA,qBAAKtnB,UAAWD,EAAQiG,SACxB,cAAC/F,EAAA,EAAD,iBACA,eAACA,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACGwoB,GADH,yBACgC,UAAAL,EAASzkB,YAAT,eAAe2jB,kBAAmB,GADlE,QAGA,qBAAKvnB,UAAWD,EAAQiG,SACxB,cAAC/F,EAAA,EAAD,kCACA,eAACA,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACG0oB,GADH,yBAC6B,UAAAP,EAASzkB,YAAT,eAAe6jB,gBAAiB,GAD7D,WAMEqB,GACJ,qCACGjS,GACD,qBAAK7W,UAAWD,EAAQiG,SACxB,cAACuZ,GAAD,CACErf,QAAQ,WACR6N,MAAOmW,EACPtQ,SAAU2R,GACVvR,MAAO,SACPtN,WAAY0d,KAA2BxZ,EACvC4U,WAAY8H,EAAoB9B,QAAiB3hB,KAGjD+G,GACA,cAAC5D,EAAA,EAAD,CACEN,UAAW4e,IAAqBlB,EAChCzd,WAAYyd,EACZnd,QAAS2d,GAHX,SAKGV,GAAmBoB,GAChB,WAAapB,EAAkB,UAC/B,aAIN5iB,IAAUgkB,KACV,cAACrlB,EAAA,EAAD,CAAYgE,MAAM,QAAlB,SAA2B3C,IAnI1BT,EAEMwnB,EAAS/mB,MACX,6EACG4iB,EAEAiB,EAEAC,GAEAC,GAGH,GAFA,gEAFA,mEAFA,iDAFA,+BAJA,qCAoINza,EACC,qCACE,cAAC3K,EAAA,EAAD,wGAIA,cAACmH,GAAD,CAAQF,GAAI,CAAEO,GAAImD,EAAapB,MAAO,GAAK5I,QAASA,OAEpD,QAIR,OACE,sBAAKZ,UAAWD,EAAQioB,aAAxB,UACE,cAACe,GAAA,EAAD,IACEloB,EAEEwnB,EAAS7mB,UACX,cAACuF,EAAA,EAAD,IACE8hB,GACF,cAAC5oB,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0B2oB,KAE1BC,GANA,cAAC7oB,EAAA,EAAD,CAAYC,QAAQ,QAApB,4C,aCnNF7B,GAAYC,aAAW,iBAAO,CAClCyjB,UAAW,CACTnI,gBAAiBza,IAAO0a,+BACxBpb,UAAW,SACXkb,QAAS,OACT,YAAa,CACX7T,OAAQ,UAGZkc,QAAS,CACPlc,OAAQ,uBAEVE,OAAQ,CACNC,OAAQ,YAaN+iB,GAAkC,SAACvJ,GACvC,IAAMwJ,EAAsBxJ,EAAMyJ,MAAMC,OAAOF,YACzCrG,EAA2BnD,EAAMyJ,MAAMC,OAAOvG,iBAC9ChB,EAAkCwH,IAAoBxD,IAAIqD,GAE5DvG,EAA+B,GAC/BC,EAA6B,GAC7B0G,EAAoC,GACxC,IACE3G,EAAWuG,GAAe,IAAIpa,YAAUoa,GAAate,WACrDgY,EAASf,GAAe,IAAI/S,YAAU+S,GAAajX,WACnD0e,EACEzG,GAAoB,IAAI/T,YAAU+T,GAAkBjY,WACtD,MAAO9I,IA0BT,OAtBK6gB,GAAaC,EAMN0G,EAQR,cAAC,GAAD,CACE3G,SAAUA,EACVC,OAAQA,EACRC,iBAAkByG,IATpB,cAACppB,EAAA,EAAD,CAAYwQ,MAAO,CAAEhS,UAAW,UAAhC,oCANA,cAACwB,EAAA,EAAD,CAAYwQ,MAAO,CAAEhS,UAAW,UAAhC,wDAuBA6qB,GAAoC,SAAC7J,GACzC,IAAMwJ,EAAsBxJ,EAAMyJ,MAAMC,OAAOF,YAEzCM,EADWC,aAAqB/J,EAAM7e,SAChBglB,IAAI6D,sBAAWR,IAe3C,OAZKA,GAAgBM,EAQjB,cAACtB,GAAD,CAAaL,gBAAiB2B,EAAY3oB,QAAS6e,EAAM7e,UANzD,cAACX,EAAA,EAAD,CAAYwQ,MAAO,CAAEhS,UAAW,UAAhC,wDAqCSirB,gBAxB4B,SAACjK,GAC1C,IAAM1f,EAAU1B,KACZqL,EAAU,KAQd,OANI+V,EAAM7e,UAAYwE,IACpBsE,EAAU,cAAC,GAAD,eAAgB+V,IACjBA,EAAM7e,UAAY4G,KAAgBiY,EAAM7e,UAAY+G,MAC7D+B,EAAU,cAAC,GAAD,eAAkB+V,KAI5B,cAAC5H,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAAC6R,GAAA,EAAD,CAAO3pB,UAAWD,EAAQgiB,UAA1B,UACE,cAAC9hB,EAAA,EAAD,CAAYC,QAAQ,KAApB,4BACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,YAApB,qEAGA,cAAC0pB,GAAA,EAAD,CAAS5pB,UAAWD,EAAQiiB,UAC3BtY,U,qBCvGHrL,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyH,OAAQ,CACNC,OAAQ,QAEV+hB,aAAc,CACZvpB,UAAW,SACXkb,QAASpb,EAAMM,QAAQ,IAEzBgrB,SAAU,CACR9jB,QAAS,OACT4K,SAAU,SACV8H,eAAgB,gBAChB,QAAS,CACPqR,UAAW,aACXprB,MAAO,gBAGXqrB,SAAU,CACRC,SAAU,GAEZjI,UAAW,CACTnI,gBAAiBza,IAAO0a,+BACxBpb,UAAW,SACXkb,QAAS,OACT,YAAa,CACX7T,OAAQ,UAGZmkB,OAAQ,CACNlkB,QAAS,QAEXic,QAAS,CACPlc,OAAQ,uBAEV2I,QAAS,CACP1I,QAAS,gBAEXmkB,cAAe,CACbJ,UAAW,gBAyBf,SAASK,GAAT,GAQI,IAAD,IAPDvpB,EAOC,EAPDA,QACAgnB,EAMC,EANDA,gBACAwC,EAKC,EALDA,eAMMrqB,EAAU1B,KACR0K,EAAoBgD,cAApBhD,gBACR,EAAkCtI,cAA1BuI,EAAR,EAAQA,OAAQsd,EAAhB,EAAgBA,cACV+B,EAAWV,GACfC,EACA5e,EACAsd,GACA,GAEF,EAA4BrlB,oBAAS,GAArC,mBAAOopB,EAAP,KAAeC,EAAf,KACA,EAA0DrpB,oBAAS,GAAnE,mBAAOmjB,EAAP,KAA8BC,EAA9B,KACA,EAAsCpjB,mBAAS,IAA/C,mBAAO2J,EAAP,KAAoB0Z,EAApB,KACA,EAA0BrjB,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACMwlB,EAAU,OAAGsB,QAAH,IAAGA,GAAH,UAAGA,EAAUzkB,YAAb,aAAG,EAAgBmjB,WAC7BC,EAAQ,OAAGqB,QAAH,IAAGA,GAAH,UAAGA,EAAUzkB,YAAb,aAAG,EAAgBojB,SAE3B3B,EACJgD,EAASzkB,MAMH,IApD8B,SACtC2mB,EACAC,EACAC,EACAC,GAGA,IAAMC,EAAgBH,EAAYE,EAAYF,EAAYE,EACpDE,EAAc9F,sBAAWyF,EAAQI,GAAexb,WAChD0b,EAAc/F,sBAAW2F,EAAQE,GAAexb,WAEtD,OAAIyb,EAAcC,GACR,EACCD,IAAgBC,EAClB,EAEA,EA+BPC,CACEzC,EAASzkB,KAAK0jB,kBACde,EAASzkB,KAAKqjB,aACdoB,EAASzkB,KAAK6jB,cACdY,EAASzkB,KAAKujB,YAGlB9kB,qBAAU,WACHgoB,IAAWhC,EAASzkB,OAAQykB,EAAS/mB,QACxC8oB,IACAE,GAAU,MAEX,CAACD,EAAQhC,EAAU+B,IAGtB,IAAMxF,EAAgB1iB,sBAAW,wBAAC,+BAAAgH,EAAA,yDAC3Bmf,EAASzkB,KADkB,uBAE9BmF,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,6CAHmB,0CAQxBmhB,EAAqBjG,sBACzBuD,EAASzkB,KAAK0jB,kBACde,EAASzkB,KAAKqjB,cAEhB5C,GAAyB,GAZK,SAaxBgE,EAASzkB,KAAK+iB,UAAU2B,QAC5BD,EAASzkB,KAAKyiB,SAASviB,QACvBinB,GAf4B,wBAiBJ1C,EAASzkB,KAAKyiB,SAASkC,QAC/CwC,GAlB4B,eAiBxBngB,EAjBwB,iBAoBxBA,EAAY4d,OApBY,QAqB9BlE,EAAe1Z,EAAY6d,MAC3B1f,EAAgB,KAAM,CACpBW,QACE,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,iDAGJya,GAAyB,GA3BK,kDA6B9Bzd,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,6CAEXya,GAAyB,GACzB9iB,EAAS,mCAlCqB,0DAoC/B,CAAC8mB,EAASzkB,KAAMmF,IAEnB,OAAKsf,EAASzkB,KAEHgH,EAEP,qBAAK5K,UAAWD,EAAQ8pB,SAAxB,SACE,gCACE,cAAC5pB,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,2GAIA,cAACmD,GAAD,CAAQxG,QAASA,EAASsG,GAAI,CAAEO,GAAImD,EAAapB,MAAO,UAM5D,sBAAKxJ,UAAWD,EAAQ8pB,SAAxB,UACE,gCACE,cAAC5pB,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,2BAGA,cAAChE,EAAA,EAAD,CAAYD,UAAWD,EAAQ0O,QAA/B,SACG4Z,EAASzkB,KAAK0jB,oBAEjB,cAACnS,GAAD,CACEvU,QAASA,EACTkD,QAASukB,EAASzkB,KAAK4iB,YACvBnR,OAAQ0R,QAAcljB,OAG1B,gCACE,cAAC5D,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,yBAGA,cAAC,KAAD,CAAmB4M,SAAS,aAE9B,gCACE,cAAC5Q,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,4BAGA,cAAChE,EAAA,EAAD,CAAYD,UAAWD,EAAQ0O,QAA/B,SACG4Z,EAASzkB,KAAK0jB,oBAEjB,cAACnS,GAAD,CACEvU,QAASA,EACTkD,QAASukB,EAASzkB,KAAK8iB,UACvBrR,OAAQ2R,QAAYnjB,OAGxB,qBAAK7D,UAAWD,EAAQmqB,cAAxB,SACE,cAACljB,EAAA,EAAD,CACEL,WAAYyd,EACZnd,QAAS2d,EACTtjB,MACEA,IAEK+jB,EAED,GADA,yCAGN3e,UAAW2e,GAAyBjB,EAVtC,0BAjDC,KAqEX,IAAM4G,GAAkB,yCAAG,WACzBhiB,EACAsd,EACAnK,GAHyB,kBAAAjT,EAAA,sEAMjByS,EAA2B,GAC3B5J,EAAS,IAAIyK,IACnBL,EAAUM,SAAQ,SAAC3Y,GACjB,IAAMmnB,EAAUrE,IAA6BC,QAAQ/iB,EAASkF,GAC9D2S,EAASnT,KACPyiB,EAAQ5D,UAAUf,GAAeljB,MAC/B,SAACC,GACC0O,EAAO8K,IAAI/Y,EAAST,MAEtB,SAAC/B,GACCyQ,EAAO8K,IAAI/Y,EAAS,aAhBL,SAqBjBqJ,QAAQ0O,IAAIF,GArBK,gCAsBhB5J,GAtBgB,yDAwBhB5E,QAAQ0C,OAAO,uCAxBC,yDAAH,0DA4BT,SAASqb,GAAT,GAA6D,IAAD,EAAjCtqB,EAAiC,EAAjCA,QAClCb,EAAU1B,KAChB,EAAkCoC,cAA1BuI,EAAR,EAAQA,OAAQsd,EAAhB,EAAgBA,cACRzlB,EAAYC,YAAiBF,GAA7BC,QACFsqB,EAAexpB,mBAAQ,kBAAM6nB,aAAqB5oB,KAAU,CAACA,IAC7DwqB,EAAiBzpB,mBACrB,kBAAM0pB,MAAMC,KAAKH,EAAaI,UAC9B,CAACJ,IAEH,EAAkClqB,mBAA0B,MAA5D,mBAAOuqB,EAAP,KAAkBC,EAAlB,KACA,EAA4CxqB,mBAAS,IAArD,mBAAOyqB,EAAP,KAAuBC,EAAvB,KACA,EAAgD1qB,oBAAS,GAAzD,mBAAO2qB,EAAP,KAAyBC,EAAzB,KAKA,EAAgE5qB,mBAAS,GAAzE,mBAAO6qB,EAAP,KAAiCC,EAAjC,KACMC,EAAqB9pB,uBAAY,WACrC6pB,GAA4B,SAAC3D,GAAD,OAAeA,EAAY,OACtD,IACG5mB,EACJoqB,GACCJ,GACCA,EAAUzc,QACV+c,EAA2BN,EAAUzc,OAEzC1M,qBAAU,WACR,GAAIxB,GAAWmI,GAAUsd,EAAe,CACtC,IAAIpZ,GAAY,EAgChB,OA/BA2e,GAAoB,GACpBF,EAAkB,IAClBX,GAAmBhiB,EAAQsd,EAAe8E,GAAgBhoB,MACxD,SAACC,GACC,IAAK6J,EAAW,CACd,IADc,EACR+e,EAAoB,GADZ,eAEa5oB,EAAOkoB,QAFpB,IAEd,2BAA0C,CAAC,IAAD,EAA/BW,EAA+B,QACxC,GAAI7oB,EAAOuiB,IAAIsG,KAAX,UAA4B7oB,EAAOuiB,IAAIsG,UAAvC,aAA4B,EAA0BC,GAAG,IAAI,CAC/D,IAAMvE,EAAkBuD,EAAavF,IACnC6D,sBAAWyC,IAETtE,GACFqE,EAAkBzjB,KAAKof,KARf,8BAYdmE,EAA4B,GAC5BN,EAAaQ,GACbJ,GAAoB,OAGxB,SAACvqB,GACM4L,IACH2e,GAAoB,GACpBF,EACE,uDAMD,WACLze,GAAY,MAGf,CAACrM,EAASmI,EAAQsd,EAAe8E,EAAgBD,IAEpD,IAAMiB,EAAoBZ,GAAaA,EAAUzc,OAAS,EACpDuL,EAAS,UAAGtM,IAAapN,UAAhB,aAAG,EAAuBqN,KAEnCvE,EACJ,sBAAK1J,UAAWD,EAAQioB,aAAxB,UACE,cAAC/nB,EAAA,EAAD,CAAYC,QAAQ,KAApB,0EAEIoa,EAAY,MAAQA,EAAY,GAFpC,wCAMA,cAACyO,GAAA,EAAD,IACEloB,EAEE6qB,EACF,cAACzrB,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BwrB,IAE1B,qCACE,qBAAK1rB,UAAWD,EAAQiG,SACxB,cAACe,EAAA,EAAD,CAAkB/G,UAAWwB,EAAY,GAAKzB,EAAQkqB,SACtD,sBAAKjqB,UAAYwB,EAAiBzB,EAAQkqB,OAAb,GAA7B,UACE,cAAChqB,EAAA,EAAD,UACGmsB,EACG,qHACA,sDAEN,qBAAKpsB,UAAWD,EAAQiG,SAN1B,OAOGwlB,QAPH,IAOGA,OAPH,EAOGA,EAAWhc,KAAI,SAAC1L,GACf,OACE,cAACqmB,GAAD,CAEEvpB,QAASA,EACTgnB,gBAAiB9jB,EACjBsmB,eAAgB4B,GAHXloB,YAjBf,cAAC7D,EAAA,EAAD,CAAYC,QAAQ,QAApB,4CA8BN,OACE,cAAC2X,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAAC6R,GAAA,EAAD,CAAO3pB,UAAWD,EAAQgiB,UAA1B,SAAsCrY,M,+BC3UtC2iB,GAAgB,SACpBrhB,GADoB,mBAAC,eAGlBA,GAHiB,IAIpB9J,aAAcmJ,aAAgBW,EAAK9J,iBAqGtBorB,OA/Ff,SAAmC/a,GACjC,IAAM7I,EAAWC,cACXqD,EAAcxH,YAClB+M,EAAMgb,IAAuBC,MAEzBvjB,EAAczE,YAClB+M,EAAMkb,IAAuBC,MAEzBC,EAA8BnoB,YAClCooB,KAEIC,GAAqC,OAA3BF,QAA2B,IAA3BA,OAAA,EAAAA,EAA6BE,UAAW,GAClDC,EAA+Bvb,EACjCwb,KACAC,KACItsB,EAAaD,cAAbC,SACFusB,EAAazoB,YACjB+M,EAAM2b,IAAsBC,KAE9B9qB,qBAAU,WACR,IAAI4qB,EAAJ,CAIA,IAAI/f,GAAY,EAwDhB,OAvDA,wBAAC,qCAAAhE,EAAA,2DACK9G,YAAW4J,IAAgBtL,GAAYuI,GAD5C,4BAEuBojB,GAFvB,SAGY9a,EACH6b,aACEC,aAA4BrhB,GAC5BtL,EACAuI,EACA4jB,EACA7gB,GAEFshB,YACE/qB,aAA8ByJ,GAC9BtL,EACAuI,EACA+C,GAfX,mBAESuhB,GAFT,cAkBQrgB,GACHxE,EAASokB,EAA6BS,IAnB3C,UAsBKvhB,IAAgB5G,MAAmB6D,EAtBxC,iCAwBWlG,EAAa,IAAIC,aAAWC,IAAa,aAxBpD,KAyByBopB,GAzBzB,UA0Bc9a,EACHic,aACEzqB,EACA0qB,IACAxkB,GAEFykB,YACE3qB,EACAI,IACA8F,GAnCb,oBAyBWskB,GAzBX,cAsCUrgB,GACHxE,EAASokB,EAA6BS,IAvC7C,6DA2CKvhB,IAAgBvJ,MAAkBwG,EA3CvC,kCA6CWvG,EAAM,IAAIC,YAAUC,KA7C/B,KA8CyBypB,GA9CzB,UA+CasB,YAAsBjrB,EAAKuG,GA/CxC,oBA8CWskB,GA9CX,cAiDUrgB,GACHxE,EAASokB,EAA6BS,IAlD7C,oHAAD,GAuDO,WACLrgB,GAAY,MAEb,CACDxE,EACAukB,EACAjhB,EACA/C,EACAvI,EACA6Q,EACAub,EACAD,K,iBCuHWe,OArNf,SAA6Brc,GAC3B,IAAM7I,EAAWC,cACXklB,EAA+BrpB,YACnC+M,EACIuc,IACAC,MAEAztB,EAAckE,YAClB+M,EAAMyc,IAAuB3M,MAEzB9gB,EAAciE,YAClB+M,EAAM0c,IAAuB3M,MAGzBuL,EADgBroB,YAAY0pB,MACD,GAC3BppB,EAAcN,YAClB+M,EAAM4c,IAAuBppB,MAEzB8c,EAAiBtQ,EAAM6c,KAAoBC,KACjD,EAA0C5tB,cAAlCC,EAAR,EAAQA,SAEFK,EAFN,EAAkBH,UACQI,aAAc8D,GAElCmoB,EAAazoB,YACjB+M,EAAM2b,IAAsBC,KAE9B,EAAoDlsB,mBAO1C,MAPV,mBAAOqtB,EAAP,KAA2BC,EAA3B,KAQMC,IACFF,GACFA,EAAmBT,+BACjBA,GACFS,EAAmBhuB,cAAgBA,GACnCguB,EAAmB/tB,cAAgBA,GACnC+tB,EAAmBxpB,cAAgBA,GACnCwpB,EAAmB/c,MAAQA,GAC3B+c,EAAmBzB,UAAYA,EAC3B5qB,EAAUC,uBACd,kBACEqsB,EAAsB,CACpBV,+BACAvtB,cACAC,cACAuE,cACAyM,MACAsb,cAEJ,CACEgB,EACAvtB,EACAC,EACAuE,EACAyM,EACAsb,IAGJxqB,qBAAU,WACR,IAAI4qB,IAAcuB,EAAlB,CAIA,GADAD,EAAsB,MAClBV,GAAgCvtB,IAAgBwE,EAUlD,OATA4D,EACEmZ,EACEjE,aAAmB,CACjBxc,WAAW,EACX0C,QAAS4d,YAAkBnhB,EAAaD,IAAgB,cAI9D2B,IAGF,IAAIiL,GAAY,EAmHhB,OAlHA,wBAAC,qCAAAhE,EAAA,2DAEG9G,YAAW0C,IACXpE,GACAK,GACAT,GACAC,GANH,wBAQGmI,EAASmZ,EAAe9D,iBAR3B,kBAU0BxM,EACjBkd,aACEpB,aAA4BvoB,GAC5BpE,EACAJ,EACAkC,YAAgBjC,IAElB+B,YACEC,aAA8BuC,GAC9BpE,EACAJ,EACAkC,YAAgBjC,IArB3B,OAUW8K,EAVX,OAuBU6B,IACHxE,EACEmZ,EACEjE,aAAmB,CACjBxc,UAAWiK,IAAU/H,IAAOC,UAAUC,YACtCM,QAASuH,MAIfpJ,KAhCP,gDAmCUiL,GACHxE,EACEmZ,EACE5D,aACE,oDAvCb,WA8CKnZ,IAAgBM,MAAmB9E,IAAeC,EA9CvD,wBA+CGmI,EAASmZ,EAAe9D,iBA/C3B,UAiDWhb,EAAa,IAAIC,aAAWC,IAAa,aAjDpD,UAkD0BsO,EACjBmd,aACEjB,IACAntB,EACAkC,YAAgBjC,GAChBouB,oBAASC,KAAUtD,KAAKuB,GAAW,OAErC3pB,YACEH,EACAI,IACA7C,EACAkC,YAAgBjC,IA7D3B,QAkDW8K,EAlDX,OA+DU6B,IACHxE,EACEmZ,EACEjE,aAAmB,CAAExc,YAAaiK,EAAOvH,QAASuH,MAGtDpJ,KArEP,mDAwEUiL,GACHxE,EACEmZ,EACE5D,aACE,oDA5Eb,WAmFKnZ,IAAgBrC,MAAkBnC,IAAeC,EAnFtD,wBAoFGmI,EAASmZ,EAAe9D,iBApF3B,UAsFWrb,EAAM,IAAIC,YAAUC,KAtF/B,UAuFyBC,YAClBC,IACAJ,EACApC,EACAkC,YAAgBjC,IA3FvB,QAuFW8K,EAvFX,OA6FU6B,IACHxE,EACEmZ,EACEjE,aAAmB,CAAExc,YAAaiK,EAAOvH,QAASuH,MAGtDpJ,KAnGP,mDAsGUiL,GACHxE,EACEmZ,EACE5D,aACE,oDA1Gb,wEAAD,GAkHO,WACL/Q,GAAY,MAEb,CACDxE,EACAukB,EACAY,EACAvtB,EACAC,EACAuE,EACApE,EACA6Q,EACAsQ,EACAgL,EACA9rB,EACAytB,EACAvsB,K,UCpQE5D,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACXxJ,aAAcP,EAAMM,QAAQ,QAIjB,SAASgwB,GAAT,GAIX,IAHFjvB,EAGC,EAHDA,SAIMG,EAAU1B,KAChB,OACE,cAAC4B,EAAA,EAAD,CAAYE,UAAU,MAAMD,QAAQ,QAAQF,UAAWD,EAAQuI,YAA/D,SACG1I,ICJP,IAAMvB,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyF,QAAS,CACPC,MAAO1F,EAAM2F,QAAQC,QAAQC,MAC7BxF,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,cAIA,SAAS6F,KACtB,IAAMvE,EAAU1B,KACV2N,EAAcxH,YAAY+nB,KAC1B7nB,EAAYF,YAAYsqB,KACxBlqB,EAAaJ,YAAYuqB,KACzBjqB,EAAcN,YAAY2pB,KAC1BnpB,EAAcR,YAAYwqB,KAC1B9pB,EAAWV,YAAYyqB,KAE7B,OADqBvqB,IAAcE,GAAgBI,IAAgBE,EAEjE,eAACjF,EAAA,EAAD,CAAYD,UAAWD,EAAQiE,QAAS9D,QAAQ,QAAhD,UACGmE,GAA6B,IAC7BS,IAAgBM,KAAmBJ,EAChC,2CACA5C,YAAW4J,IAAgBtH,EAC3B,uCACA,QAEJ,KCTSwqB,OArBf,WACE,MAA8CC,eAAtC1oB,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WACzB7B,EAAcN,YAAY2pB,KAChC,EAAmCrtB,YAAiBgE,GAA5CjE,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cACjB,OACE,qCACE,cAACwoB,GAAD,kDACA,cAAC/nB,GAAA,EAAD,CAAelG,QAASkE,IACxB,cAACkC,EAAA,EAAD,CACEN,UAAW7F,GAAW6F,EACtBO,QAASR,EACTE,WAAYA,EACZrF,MAAO+E,EAJT,oBAQA,cAAC,GAAD,QCjBAhI,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAAS2wB,KACtB,IAAMrvB,EAAU1B,KACVqK,EAAWC,cACX7D,EAAcN,YAAY2pB,KAC1BjpB,EAAWV,YAAYyqB,KACvBrmB,EAAmB1G,uBAAY,WACnCwG,EAASG,kBACR,CAACH,IAKJ,OACE,qCACE,cAACzI,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAJF,gHAWGpD,EAAW,cAACkC,GAAD,CAAQxG,QAASkE,EAAaoC,GAAIhC,IAAe,KAC7D,cAAC8B,EAAA,EAAD,CAAkBC,QAAS2B,EAA3B,sC,gDCkBN,WACEF,EACAK,EACAC,EACAkjB,EACAW,EACAwC,EACAC,EACA1uB,GARF,wBAAAsI,EAAA,6DAUER,EAASS,cAAa,IAVxB,kBAY0BomB,aACpBlC,aAA4BzsB,GAC5BoI,EACAkjB,EACAW,EACAwC,EACAC,GAlBN,cAYUjmB,EAZV,OAoBIX,EACE8mB,aAAc,CAAE/nB,GAAI4B,EAAQE,gBAAiBC,MAAOH,EAAQI,eAE9DV,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,qCAELC,EAAWC,YACfT,EACAU,YAAyBnJ,IAErBoJ,EAAiBC,YACrBojB,aAA4BzsB,IAE9BmI,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAhB,4BAlCf,UAoC+BM,aACzBtJ,EACAoJ,EACAH,EAASc,YAvCf,iBAoCYR,EApCZ,EAoCYA,SAKRzB,EAAS0B,aAAgBC,aAAgBF,KACzCpB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,kCA3Cf,kDA8CIhD,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QAE9C5B,EAASS,cAAa,IAlD1B,2D,sEAsDA,WACET,EACAK,EACAyB,EACAilB,EACAjJ,EACAzG,EACAjb,EACA4qB,EACAC,EACArvB,EACAsvB,GAXF,gCAAA1mB,EAAA,6DAaER,EAASS,cAAa,IAbxB,SAeUpG,EAAa,IAAIC,aAAWC,IAAa,aACzC4sB,EAAgBF,EAClBG,mBAAQttB,YAAgBmtB,GAAmB,SAC3C9rB,EAlBR,SAmB8BksB,aACxBhtB,EACA2H,IACA+iB,IACAgC,EACAjJ,EACAzG,EACA2P,EACA5qB,EACA+qB,EACAvvB,EACAquB,oBAASC,KAAUtD,KAAKsE,GAAiB,OA9B/C,cAmBUhlB,EAnBV,gBAgCuBC,aAAmBL,EAAQzH,EAAY6H,GAhC9D,cAgCUE,EAhCV,OAiCI/B,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,qCAlCf,UAoCuB7G,EAAWgI,eAAeD,GApCjD,WAoCUE,EApCV,8BAsCY,IAAIC,MAAM,yDAtCtB,eAwCIvC,EAAS8mB,aAAc,CAAE/nB,GAAIqD,EAAMtB,MAAOwB,EAAKE,QACzCrB,EAAWsB,YAA2BH,GAzChD,UA0CiCI,YAC3BqiB,KA3CN,eA0CUzjB,EA1CV,OA6CIjB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAhB,4BA9Cf,UAgD+BM,aACzB9E,IACA4E,EACAH,GAnDN,iBAgDYM,EAhDZ,EAgDYA,SAMRzB,EAAS0B,aAAgBC,aAAgBF,KACzCpB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,kCAxDf,kDA2DIhD,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QAE9C5B,EAASS,cAAa,IA/D1B,2D,sBAmEO,SAAS6mB,KACd,IAAMtnB,EAAWC,cACTI,EAAoBgD,cAApBhD,gBACFiD,EAAcxH,YAAY+nB,KAC1BtjB,EAAczE,YAAYioB,KAC1BE,EAA8BnoB,YAClCooB,KAEIqD,GAA2C,OAA3BtD,QAA2B,IAA3BA,OAAA,EAAAA,EAA6BE,UAAW,GACxDvsB,EAAckE,YAAYwpB,KAC1BztB,EAAciE,YAAYypB,KAC1B2B,EAAgBprB,YAAY0pB,KAC5BppB,EAAcN,YAAY2pB,KAC1BuB,ECvLO,WACb,IAAMQ,EAAmB1rB,YAAY2rB,KAKrC,OAJsBxuB,mBACpB,kBAAOuuB,EAAmB1tB,YAAgB0tB,QAAoBrsB,IAC9D,CAACqsB,IDmLmBE,GAChBnkB,EAAmBzH,YAAY6rB,KAC/B3rB,EAAYF,YAAYsqB,KACxB3iB,EAAiB3H,YAAY8rB,KAC3BtnB,EAAWvI,cAAXuI,OACFqD,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtBgkB,EAA2B/rB,YAC/BooB,KAEI4D,EAAoB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAA0BhkB,UACjD7F,GAAYuF,GAAoBvH,GAAayH,EAC7CskB,EAAsBvuB,uBAAY,WAGpCE,YAAW4J,IACThD,GACAC,GACAgnB,GACAP,E,mDAEF/iB,CACEjE,EACAK,EACAC,EACAC,EACAgnB,EACAnrB,EACA4qB,EACA1jB,GAGFA,IAAgB5G,KACdiH,GACA9B,GACAtB,GACAunB,GACAd,G,yDAEF9iB,CACElE,EACAK,EACAsD,EACA9B,EAAMI,WACN6lB,EACAvnB,EACAnE,EACA4qB,EACAnvB,EACAD,EACAsvB,KAIH,CACDlnB,EACAK,EACAiD,EACAhD,EACAqD,EACA9B,EACAimB,EACAvnB,EACAgnB,EACAnrB,EACA4qB,EACAnvB,EACAD,EACAsvB,IAEF,OAAOjuB,mBACL,iBAAO,CACL8E,YAAagqB,EACb/pB,WACAC,WAAYjC,KAEd,CAAC+rB,EAAqB/pB,EAAUhC,IEpMrBwJ,OAjDf,WACE,MAA8C8hB,KAAtCvpB,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WACzBqF,EAAcxH,YAAY+nB,KAC1BjrB,EAAQkD,YAAYksB,KAC1B,EACE5vB,YAAiBkL,GADXnL,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cAAesI,EAAhC,EAAgCA,cAE1BgiB,EAAsBnsB,YAAYosB,KAClChsB,EAAaJ,YAAYuqB,KACzB5iB,EAAiB3H,YAAY8rB,KAE7BO,EACJF,GACAhiB,GACAgiB,IAAwBhiB,EACpBmiB,GAAcjwB,GAAWgwB,GAAiBnqB,EAC1CqqB,EAAeF,EACjB,kDACAxqB,GAAiB/E,QAASuC,EAC9B,OACE,qCACE,cAACgrB,GAAD,6DAGA,cAAC/nB,GAAA,EAAD,CAAelG,QAASoL,IACxB,eAACrC,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAA/B,gDACsC8N,IAAahC,GAAaiC,KADhE,wKAMA,cAACjH,EAAA,EAAD,CACEN,SAAUoqB,EACV7pB,QAASR,EACTE,WAAYA,EACZrF,MAAOyvB,EAJT,sBAQA,cAAC,GAAD,IACCnsB,EAAa,cAACwC,GAAD,CAAQxG,QAASoL,EAAa9E,GAAItC,IAAiB,KACjE,cAACmI,GAAD,CACEnM,QAASoL,EACT9E,GAAItC,EACJuH,eAAgBA,QCtDlB9N,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,UAEbyI,GAAI,CACFtI,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,UAEb0I,WAAY,CACVvI,UAAWL,EAAMM,QAAQ,QAId,SAASsP,KACtB,IAAMpO,EAAU1B,KACV2N,EAAcxH,YAAY+nB,KAC1B3nB,EAAaJ,YAAYuqB,KAI/B,OACE,qCACE,cAAC9uB,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAJoB,2BAWnB1D,EAAa,cAACwC,GAAD,CAAQxG,QAASoL,EAAa9E,GAAItC,IAAiB,Q,6CCrCxD,OAA0B,gC,oBCmFlC,SAASosB,GACdzkB,EACAoJ,EACAlG,EACA4S,EACA4O,EACAzO,EACAnN,EACApH,EACAgN,EACAlF,GAEA,MAAO,CACLxJ,UAAWA,EACXoJ,QAASA,EACTlG,SACA4S,WACA4O,WACAzO,iBACAnN,SACApH,OACAgN,OACAlF,iBAIG,SAASmb,GACd3kB,EACAoJ,EACAlG,EACA4S,EACA4O,EACAzO,EACAqK,EACAxX,EACApH,EACA6X,EACAqL,EACAC,EACAC,EACAC,EACAC,EACAjpB,GAEA,MAAO,CACLiE,YACAoJ,UACAlG,SACA4S,WACA4O,WACAzO,iBACAqK,UACA/G,MACAqL,gBACAC,eACAC,QACAC,YACAjc,SACApH,OACAsjB,UACAjpB,eAIJ,IAAMkpB,GAAmC,SACvCC,EACAtW,GACwB,IAAD,8BACvB,MAAO,CACL5O,UAAS,OAAEklB,QAAF,IAAEA,OAAF,EAAEA,EAAQ9mB,WACnBgL,QAAO,UAAEwF,EAAKvX,KAAK0e,cAAZ,iBAAE,EAAkBtX,YAApB,iBAAE,EAAwB4R,YAA1B,aAAE,EAA8BjS,WACvC8E,OAAM,UAAE0L,EAAKvX,KAAK0e,cAAZ,iBAAE,EAAkBtX,YAApB,iBAAE,EAAwBuX,mBAA1B,aAAE,EAAqC9S,OAC7C4S,SAAQ,UAAElH,EAAKvX,KAAK0e,cAAZ,iBAAE,EAAkBtX,YAApB,iBAAE,EAAwBuX,mBAA1B,aAAE,EAAqCF,SAC/C4O,SAAQ,UAAE9V,EAAKvX,KAAK0e,cAAZ,iBAAE,EAAkBtX,YAApB,iBAAE,EAAwBuX,mBAA1B,aAAE,EAAqC0O,SAC/CzO,eAAc,UAAErH,EAAKvX,KAAK0e,cAAZ,iBAAE,EAAkBtX,YAApB,iBAAE,EAAwBuX,mBAA1B,aAAE,EAAqCC,iBAInDkP,GAAuC,SAC3C/iB,EACAgjB,GAEA,MAAO,CACLplB,UAAWoC,EACXgH,QAASgc,EAASC,iBAClBniB,OAAQkiB,EAASljB,QACjB4T,SAAUsP,EAASE,kBACnBZ,SAAUa,OAAO/hB,uBAAY4hB,EAASljB,QAASkjB,EAASE,oBACxDrP,eAAgBzS,uBAAY4hB,EAASljB,QAASkjB,EAASE,mBACvDxc,OAAQsc,EAASI,uBACjB9jB,KAAM0jB,EAASK,cACf/W,KAAMgX,KAAcrM,IAAI+L,EAASC,mBAAqBD,EAASO,WAI7DC,GAAiC,yCAAG,WACxCpvB,EACA4L,GAFwC,gBAAAzF,EAAA,sEAKZ0F,aAAuB7L,EAAY,CAC7D,IAAI8L,YAAUF,KANwB,WAKlCyjB,EALkC,SAQjBA,EAAcrjB,QAAWqjB,EAAc,GARtB,yCAS/B,MAT+B,gCAW/BpB,GACLriB,EACA0jB,IACAD,EAAc,GAAGpjB,SAASrE,WAC1B2nB,IACAzgB,WAAW9B,uBAAYqiB,EAAc,GAAGpjB,SAAUsjB,MAClDviB,uBAAYqiB,EAAc,GAAGpjB,SAAUsjB,KAAe3nB,WACtD,MACA,cACA9G,GACA,IArBoC,2CAAH,wDA0BjC0uB,GAAoC,SACxC7xB,EACA4lB,GAEA,OAAS5lB,GAAY4lB,EAEjB5lB,EAASwO,WAAWoX,GAAeljB,MAAK,SAACovB,GACvC,IAAMC,EAAenvB,IAAOovB,MAAMC,YAAYH,GAC9C,OAAOxB,GACL1K,EACAsM,IACAJ,EAAa7nB,WACbkoB,IACAhhB,WAAW4gB,GACXA,EAAa9nB,WACb,MACA,WACAmoB,MACA,MAbJ3lB,QAAQ0C,UAkBRkjB,GAA2C,SAC/CryB,EACA4lB,GAEA,OAAS5lB,GAAY4lB,EAEjB5lB,EAASwO,WAAWoX,GAAeljB,MAAK,SAACovB,GACvC,IAAMC,EAAenvB,IAAOovB,MAAMC,YAAYH,GAC9C,OAAOxB,GACL1K,EACA0M,IACAR,EAAa7nB,WACbsoB,IACAphB,WAAW4gB,GACXA,EAAa9nB,WACb,MACA,WACAmoB,MACA,MAbJ3lB,QAAQ0C,UAkBRqjB,GAAoC,SACxCxyB,EACA4lB,GAEA,OAAS5lB,GAAY4lB,EAEjB5lB,EAASwO,WAAWoX,GAAeljB,MAAK,SAACovB,GACvC,IAAMC,EAAenvB,IAAOovB,MAAMC,YAAYH,GAC9C,OAAOxB,GACL1K,EACA6M,IACAX,EAAa7nB,WACbyoB,IACAvhB,WAAW4gB,GACXA,EAAa9nB,WACb,MACA,eACA0oB,IACA,MAbJlmB,QAAQ0C,UAkBRyjB,GAAwC,SAC5C5yB,EACA4lB,GAEA,OAAS5lB,GAAY4lB,EAEjB5lB,EAASwO,WAAWoX,GAAeljB,MAAK,SAACovB,GACvC,IAAMC,EAAenvB,IAAOovB,MAAMC,YAAYH,GAC9C,OAAOxB,GACL1K,EACAiN,IACAf,EAAa7nB,WACb6oB,IACA3hB,WAAW4gB,GACXA,EAAa9nB,WACb,QACA,QACA8oB,MACA,MAbJtmB,QAAQ0C,UAkBR6jB,GAAqC,SACzChzB,EACA4lB,GAEA,OAAS5lB,GAAY4lB,EAEjB5lB,EAASwO,WAAWoX,GAAeljB,MAAK,SAACovB,GACvC,IAAMC,EAAenvB,IAAOovB,MAAMC,YAAYH,GAC9C,OAAOxB,GACL1K,EACAqN,IACAnB,EAAa7nB,WACbipB,IACA/hB,WAAW4gB,GACXA,EAAa9nB,WACb,OACA,YACAkpB,MACA,MAbJ1mB,QAAQ0C,UAkBRikB,GAA0C,SAC9CnlB,EACAgjB,EACAoC,GAEA,MAAO,CACLxnB,UAAWoC,EACXgH,QAASgc,EAASC,iBAClBniB,OAAQskB,EAASC,cACjB3R,SAAUsP,EAASE,kBACnBZ,SAAUa,OACR/hB,uBAAYgkB,EAASC,cAAerC,EAASE,oBAE/CrP,eAAgBzS,uBACdgkB,EAASC,cACTrC,EAASE,mBAEXxc,OAAQsc,EAASI,uBACjB9jB,KAAM0jB,EAASK,cACf/W,KAAM0W,EAASO,SACfrF,QAASkH,EAASE,SAClBnO,IAAKiO,EAASG,UACd/C,cAAe4C,EAASI,cAAchD,cACtCC,aAAc2C,EAASI,cAAc/C,aACrCC,MAAO0C,EAASI,cAAc9C,MAC9BC,UAAWyC,EAASI,cAAc7C,UAClCC,QAASwC,EAASI,cAAclmB,KAChC3F,YAAayrB,EAASI,cAAc7rB,cAgClC8rB,GAA2B,yCAAG,WAClCzlB,EACA4C,EACA3Q,GAHkC,gCAAAsI,EAAA,6DAK5BmrB,EAAMC,YAAwB1zB,EAAS+N,EAAe4C,GAL1B,SAQ1BQ,EAAS,GARiB,SASTwiB,KAAM3O,IAAIyO,GATD,OAYhC,GAHMG,EAT0B,QAU1BzV,EAASyV,EAAS5wB,KAAKA,KAAK6wB,iBAEZpJ,OAAStM,EAAOhQ,OAAQ,CAAC,EAAD,aACzBgQ,GADyB,IAC5C,gCAG+Blb,KAHpBsX,EAAgB,SAGlB0W,mBACL1W,EAAKyW,kBACLzW,EAAK1M,SACY,MAAjB0M,EAAK1M,UACJ8C,EAAG,UACA4J,EAAKuZ,oBADL,aACA,EAAmB3Z,SAAS,UAD5B,UAEAI,EAAKuZ,oBAFL,aAEA,EAAmB3Z,SAAS,WAEhChJ,EAAOvJ,KAAP,eAAiB2S,IAZuB,+BAZd,yBA6BzBpJ,GA7ByB,2DA+BzB5E,QAAQ0C,OAAO,6CA/BU,0DAAH,0DAmC3B8kB,GAA4B,yCAAG,WACnChmB,EACAjG,EACA6I,GAHmC,oBAAArI,EAAA,6DAK7BnG,EAAa,IAAIC,aAAWC,IAAa,aAC/CyF,EACE6I,EAAMqjB,eAAsCC,gBAPX,kBAWE9xB,EAChC+xB,8BAA8B,IAAIjmB,YAAUF,GAAgB,CAC3DomB,UAAW,IAAIlmB,YAAU2R,QAE1Bpd,MAAK,SAACC,GACL,OAAOA,EAAO0K,MAAMyB,KAAI,SAAC2L,GAAD,OACtBqW,GAAiCrW,EAAKsW,OAAQtW,EAAKa,eAjBxB,UAW7BgZ,EAX6B,QAgC7BzjB,EAhC6B,iBAkC/B7I,EAASusB,aAAoCD,IAlCd,yCAqCH7C,GAC1BpvB,EACA4L,GAvC6B,QAyCT,QAJhBumB,EArCyB,SA0C7BF,EAAuBG,QAAQD,GAEjCxsB,EAAS0sB,aAAiCJ,IA5CX,0DA+CjCpuB,QAAQtF,MAAR,MACAoH,EACE6I,EACI8jB,aAAkC,+BAClCC,aAA+B,mCAnDJ,0DAAH,0DA2fnBC,OA/bf,WAAsD,IAAvBhkB,EAAsB,wDAC7C7I,EAAWC,cAEX6sB,EAAgBhxB,YACpB+M,EACIkkB,IACAC,MAGAC,EAAcnxB,YAClB+M,EAAMgb,IAAuBC,MAEzBngB,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UAC5B,EAAoC9L,cAA5BC,EAAR,EAAQA,SAAU4lB,EAAlB,EAAkBA,cAElB,EAAgCrlB,wBAAc4C,GAA9C,mBAAO8tB,EAAP,KAAiBiE,EAAjB,KACA,EAA8C30B,oBAAS,GAAvD,mBAAO40B,EAAP,KAAwBC,EAAxB,KACA,EAA0C70B,wBACxC4C,GADF,mBAAOkyB,EAAP,KAAsBC,EAAtB,KAIA,EAAgD/0B,wBAAc4C,GAA9D,mBAAOoyB,EAAP,KAAyBC,EAAzB,KACA,EAA8Dj1B,oBAAS,GAAvE,mBAAOk1B,EAAP,KAAgCC,EAAhC,KACA,EAA0Dn1B,wBAExD4C,GAFF,mBAAOwyB,EAAP,KAA8BC,EAA9B,KAIA,EAAoDr1B,wBAElD4C,GAFF,mBAAO0yB,EAAP,KAA2BC,EAA3B,KAGA,EACEv1B,oBAAS,GADX,mBAAOw1B,EAAP,KAAkCC,EAAlC,KAEA,EAA8Dz1B,wBAE5D4C,GAFF,mBAAO8yB,EAAP,KAAgCC,EAAhC,KAIMC,GAA8BryB,YAClC+M,EAAMqf,IAA+BkG,KAEjCC,GAAiD30B,YAAWuzB,GAC9DrP,EACAqP,IAAgBvwB,IAAhB,OACAmF,QADA,IACAA,OADA,EACAA,EAAOI,gBACP9G,EAEEmzB,GAAsB90B,uBAAY,WACtCwG,EACE6I,EACI0lB,kBAA0BpzB,GAC1BqzB,kBAAuBrzB,IAE7B6E,EACE6I,EACI4lB,kBAA+BtzB,GAC/BuzB,kBAA4BvzB,IAElC6E,EACE6I,EACI8lB,kBAAgCxzB,GAChCyzB,kBAA6BzzB,KAElC0N,GAAO7I,EAAS6uB,aAAU,KAC3B3B,OAAY/xB,GACZiyB,GAAmB,GACnBE,EAAiB,IAEjBE,OAAoBryB,GACpBuyB,GAA2B,GAC3BE,EAAyB,MACxB,CAACV,EAAaltB,EAAU6I,IAI3BlP,qBAAU,gBAE0BwB,IAAhCgzB,SAC+BhzB,IAA/BkzB,IACAA,KAA+BF,IAE/BG,OAID,CACDH,GACAE,GACAruB,EACAsuB,KAIF30B,qBAAU,WASR,OARIszB,IAAgBvwB,KAAmBmF,IAEjCirB,EAAc5xB,MAAQ4xB,EAAc7xB,YAAc6xB,EAAcl0B,OAElEqzB,GAA6BpqB,EAAMI,WAAYjC,EAAU6I,IAItD,eACN,CAAC7I,EAAU2D,EAAcspB,EAAaprB,EAAOirB,EAAejkB,IAG/DlP,qBAAU,WAAO,IAAD,EACd,GAAIszB,IAAgBvwB,OAAmB,UAACowB,EAAc5xB,YAAf,aAAC,EAAoBmL,QAC1D,OAAO,aAGT,IAAI7B,GAAY,EAChBwpB,GAA6B,GAC7BE,OAA2B/yB,GAC3B,IAAM6X,EAAgB8Z,EAAc5xB,KAAK4L,KAAI,SAACmN,GAAD,OAAOA,EAAEhH,WAUhD5S,EAAa,IAAIC,aAAWC,IAAa,aA+B/C,OA9BA2L,aACE7L,EACA2Y,EAAclM,KAAI,SAACmN,GAAD,OAAO,IAAI9N,YAAU8N,OACvCvZ,MACA,SAAC0L,GACC,IAAK5B,EAAW,CACd,IAAM6E,EAAS,IAAIyK,IAEnB1N,EAAQ2N,SAAQ,SAACpZ,EAAQm0B,GAAT,OACdzlB,EAAO8K,IACLnB,EAAc8b,GACbn0B,GAAUo0B,aAAgBp0B,IAAY,SAI3CmzB,EAAsBzkB,GACtB2kB,GAA6B,OAGjC,SAACp1B,GACM4L,IACHspB,OAAsB3yB,GACtB6yB,GAA6B,GAC7BE,EACE,gDAMD,kBAAO1pB,GAAY,KACzB,CAACsoB,EAAc5xB,KAAM+xB,IAGxBtzB,qBAAU,WACR,IAAI6K,GAAY,EA2BhB,OAzBEoZ,GACAqP,IAAgBnuB,KACfyuB,GACA1kB,IAED6kB,GAA2B,GAC3B7D,GAAkC7xB,EAAU4lB,GAAeljB,MACzD,SAACC,GACCuD,QAAQC,IAAI,4CAA6CxD,GACpD6J,IACHgpB,EAAoB7yB,GACpB+yB,GAA2B,GAC3BE,EAAyB,QAG7B,SAACh1B,GACM4L,IACHgpB,OAAoBryB,GACpBuyB,GAA2B,GAC3BE,EAAyB,6CAM1B,WACLppB,GAAY,KAEb,CAACyoB,EAAaj1B,EAAU4lB,EAAe/U,EAAK0kB,IAG/C5zB,qBAAU,WACR,IAAI6K,GAAY,EA2BhB,OAzBEoZ,GACAqP,IAAgBjuB,KACfuuB,GACA1kB,IAED6kB,GAA2B,GAC3BrD,GAAyCryB,EAAU4lB,GAAeljB,MAChE,SAACC,GACCuD,QAAQC,IAAI,4CAA6CxD,GACpD6J,IACHgpB,EAAoB7yB,GACpB+yB,GAA2B,GAC3BE,EAAyB,QAG7B,SAACh1B,GACM4L,IACHgpB,OAAoBryB,GACpBuyB,GAA2B,GAC3BE,EAAyB,6CAM1B,WACLppB,GAAY,KAEb,CAACyoB,EAAaj1B,EAAU4lB,EAAe/U,EAAK0kB,IAG/C5zB,qBAAU,WACR,IAAI6K,GAAY,EA2BhB,OAzBEoZ,GACAqP,IAAgBhuB,KACfsuB,GACA1kB,IAED6kB,GAA2B,GAC3BlD,GAAkCxyB,EAAU4lB,GAAeljB,MACzD,SAACC,GACCuD,QAAQC,IAAI,4CAA6CxD,GACpD6J,IACHgpB,EAAoB7yB,GACpB+yB,GAA2B,GAC3BE,EAAyB,QAG7B,SAACh1B,GACM4L,IACHgpB,OAAoBryB,GACpBuyB,GAA2B,GAC3BE,EAAyB,6CAM1B,WACLppB,GAAY,KAEb,CAACyoB,EAAaj1B,EAAU4lB,EAAe/U,EAAK0kB,IAG/C5zB,qBAAU,WACR,IAAI6K,GAAY,EA2BhB,OAzBEoZ,GACAqP,IAAgB/tB,KACfquB,GACA1kB,IAED6kB,GAA2B,GAC3B9C,GAAsC5yB,EAAU4lB,GAAeljB,MAC7D,SAACC,GACCuD,QAAQC,IAAI,4CAA6CxD,GACpD6J,IACHgpB,EAAoB7yB,GACpB+yB,GAA2B,GAC3BE,EAAyB,QAG7B,SAACh1B,GACM4L,IACHgpB,OAAoBryB,GACpBuyB,GAA2B,GAC3BE,EAAyB,+CAM1B,WACLppB,GAAY,KAEb,CAACyoB,EAAaj1B,EAAU4lB,EAAe/U,EAAK0kB,IAI/C5zB,qBAAU,WACR,IAAI6K,GAAY,EA2BhB,OAzBEoZ,GACAqP,IAAgB9tB,KACfouB,GACA1kB,IAED6kB,GAA2B,GAC3B1C,GAAmChzB,EAAU4lB,GAAeljB,MAC1D,SAACC,GACCuD,QAAQC,IAAI,4CAA6CxD,GACpD6J,IACHgpB,EAAoB7yB,GACpB+yB,GAA2B,GAC3BE,EAAyB,QAG7B,SAACh1B,GACM4L,IACHgpB,OAAoBryB,GACpBuyB,GAA2B,GAC3BE,EAAyB,8CAM1B,WACLppB,GAAY,KAEb,CAACyoB,EAAaj1B,EAAU4lB,EAAe/U,EAAK0kB,IAG/C5zB,qBAAU,WAMR,IAAI6K,GAAY,EACVyB,EAAgB2X,EACtB,GAAI3X,GAAiBvM,YAAWuzB,KAAiBhE,EAyD/C,OAvDCzkB,GAAa4oB,GAAmB,IAChC5oB,GACCxE,EACE6I,EACIqjB,eACAC,gBAERT,GAA4BzlB,EAAe4C,EAAKokB,GAAavyB,MAC3D,SAACs0B,IACExqB,GAAa4oB,GAAmB,IAChC5oB,GAAa8oB,OAAiBnyB,IAC9BqJ,GAAa0oB,EAAY8B,IACzBxqB,GACCxE,EACE6I,EACI0jB,aACEyC,EAASC,QAAO,SAACC,EAAKC,GAYpB,OAXIA,EAAQ9D,UACV8D,EAAQ9D,SAAStX,SAAQ,SAACE,GAAD,OACvBib,EAAIpvB,KACFsrB,GACEnlB,EACAkpB,EACAlb,OAKDib,IACN,KAELxC,aACEsC,EAASloB,KAAI,SAACmN,GAAD,OACX+U,GAAqC/iB,EAAegO,WAKlE,YACGzP,GACCxE,EACE6I,EACI8jB,aACE,iDAEFC,aACE,qDAGTpoB,GACC8oB,EAAiB,oDAClB9oB,GAAa4oB,GAAmB,MAI9B,WACL5oB,GAAY,KAGf,CAACyoB,EAAaj1B,EAAU4lB,EAAe5d,EAAU6I,EAAKogB,IAIzDtvB,qBAAU,cAAU,IAEpB,IAAMy1B,GAAcn2B,mBAAQ,WAAO,IAAD,EAC1BoQ,EAAM,eAAQyjB,GAKpB,OAJAzjB,EAAOnO,MAAO,UAAAmO,EAAOnO,YAAP,eAAam0B,UAAW,GACtChmB,EAAOpO,WAAaoO,EAAOpO,YAAcwyB,EACzCpkB,EAAOzQ,MAAQyQ,EAAOzQ,OAAS+0B,EAC/BJ,GAAoBlkB,EAAOnO,MAAQmO,EAAOnO,KAAKuxB,QAAQc,GAChDlkB,IACN,CACDkkB,EACAE,EACAE,EACAb,IAGF,OAAOG,IAAgBvwB,IACnB,CACEowB,cAAeA,EACfwC,aAAc,CACZp0B,KAAM2yB,EACN5yB,WAAY8yB,EACZn1B,MAAOq1B,EACP5yB,WAAY,MAEdk0B,cAAejB,IAEjB50B,YAAWuzB,GACX,CACEH,cAAesC,GACfnG,SAAU,CACR/tB,KAAM+tB,EACNhuB,WAAYkyB,EACZv0B,MAAOy0B,EACPhyB,WAAY,MAEdk0B,cAAejB,IAEjBrB,IAAgBlzB,IAChB,CACEw1B,cAAejB,SAEjBnzB,G,UCv4BC,SAAeq0B,GAAtB,qC,gDAAO,WACLhM,EACAxrB,GAFK,gBAAAwI,EAAA,6DAICivB,EAAQvR,IAA6BC,QAAQqF,EAAcxrB,GAJ5D,kBAKEy3B,GALF,4C,sBAQA,SAAeC,GAAtB,qC,gDAAO,WACLD,EACA7R,GAFK,sBAAApd,EAAA,sEAIkBivB,EAAM9V,WAJxB,cAICA,EAJD,gBAKiB8V,EAAM9Q,UAAUf,GALjC,cAKC7X,EALD,gBAMgB0pB,EAAM9iB,SANtB,cAMCA,EAND,iBAOc8iB,EAAMlqB,OAPpB,eAOCA,EAPD,yBAQE+iB,GACL1K,EACA6R,EAAMr0B,QACN2K,EAAQ9D,WACR0X,EACAyP,OAAO/hB,uBAAYtB,EAAS4T,IAC5BtS,uBAAYtB,EAAS4T,GACrBhN,EACApH,IAhBG,6C,sBAqBA,SAAeoqB,GAAtB,qC,gDAAO,WACLnM,EACAxrB,GAFK,gBAAAwI,EAAA,6DAICivB,EAAQG,IAA2BzR,QAAQqF,EAAcxrB,GAJ1D,kBAKEy3B,GALF,4C,sBAQA,SAAeI,GAAtB,mC,gDAAO,WAAqBJ,GAArB,oBAAAjvB,EAAA,4DACU,aACTsvB,EAAiB,aAFlB,SAGwBL,EAAMM,kBAAkB9J,oBAFtC,eADV,cAGC+J,EAHD,gBAIgCP,EAAMM,kBACzC9J,oBAAS6J,IALN,cAICG,EAJD,yBAOED,GAAkBC,GAPpB,4C,sBAUA,SAAeC,GAAtB,uC,gDAAO,WACLT,EACAtL,EACAvG,GAHK,wBAAApd,EAAA,6DAKCmZ,EAAW,EALZ,SAMkB8V,EAAMU,QAAQhM,GANhC,2BAM8CvG,EAN9C,iCAM8D,EAN9D,4BAMkE,EANlE,eAMC7X,EAND,eAOgB0pB,EAAM9iB,SAPtB,eAOCA,EAPD,iBAQc8iB,EAAMlqB,OARpB,eAQCA,EARD,iBASakqB,EAAMW,SAASjM,GAT5B,eASC/G,EATD,yBAUEoL,GACL5K,EACA6R,EAAMr0B,QACN2K,EAAQ9D,WACR0X,EACAyP,OAAO/hB,uBAAYtB,EAAS4T,IAC5BtS,uBAAYtB,EAAS4T,GACrBwK,EACAxX,EACApH,EACA6X,IApBG,6C,sBAwBA,SAASiT,GAAuBj1B,GACrC,OAAOR,IAAOovB,MAAMsG,UAAUl1B,G,+IC3B1Bm1B,GAAgB,SAACvwB,GACrBA,EAAS4V,MACTiW,KAAM3O,IAAIsT,KAA2B91B,MACnC,SAACoxB,GACC9rB,EAAS2V,GAAkBmW,EAAS5wB,UAEtC,SAACtC,GACCoH,EAAS6V,GAAgB,iDAKhB4a,GA7BO,SAAC7Z,GACrB,IAAMjC,EAAa7Y,YAAY40B,KACzB1wB,EAAWC,cACX0wB,EACJ/Z,SACqBzb,IAApBwZ,EAAWzZ,MACW,OAApByZ,EAAWzZ,OAAkByZ,EAAW1Z,YAQ7C,OANAtB,qBAAU,WACJg3B,GACFJ,GAAcvwB,KAEf,CAAC2wB,EAAoB3wB,IAEjB2U,G,gECxBHic,GAAW,SAACxT,GAAD,OACfA,EAAIyT,WAAW,gBACXzT,EAAI0T,QAAQ,UAAW,oBACvB1T,EAAIyT,WAAW,WACfzT,EAAI0T,QAAQ,UAAW,yBACvB1T,EAAIyT,WAAW,qCACfzT,EAAI0T,QAAQ,oCAAqC,yBACjD1T,GAEA2T,GAAW,SAAC,GAAD,IAAG74B,EAAH,EAAGA,QAAH,OACfA,IAAYwE,IACV,cAACs0B,GAAA,EAAD,CACEjpB,MAAO,CACLmJ,gBAAiB,QACjB3T,OAAQ,MACRvH,MAAO,MACP6V,WAAY,MACZoF,QAAS,OAEXX,IAAK2gB,KACLzgB,IAAI,WAEJtY,IAAY4G,KAAgB5G,IAAY8G,IAC1C,cAACgyB,GAAA,EAAD,CACEjpB,MAAO,CACLmJ,gBAAiB,QACjB3T,OAAQ,MACRvH,MAAO,MACP6V,WAAY,OAEdyE,IAAK8Z,KACL5Z,IAAI,aAEJtY,IAAY+G,IACd,cAAC+xB,GAAA,EAAD,CACEjpB,MAAO,CACLmJ,gBAAiB,kBACjB3T,OAAQ,MACRvH,MAAO,MACP6V,WAAY,MACZoF,QAAS,OAEXX,IAAK4gB,KACL1gB,IAAI,wBAEJtY,IAAYgH,IACd,cAAC8xB,GAAA,EAAD,CACEjpB,MAAO,CACLmJ,gBAAiB,QACjB3T,OAAQ,MACRvH,MAAO,MACP6V,WAAY,MACZoF,QAAS,OAEXX,IAAKya,KACLva,IAAI,YAEJtY,IAAYiH,IACd,cAAC6xB,GAAA,EAAD,CACEjpB,MAAO,CACLmJ,gBAAiB,QACjB3T,OAAQ,MACRvH,MAAO,MACP6V,WAAY,MACZoF,QAAS,OAEXX,IAAK6a,KACL3a,IAAI,cAEJ,MAEA7a,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCs7B,KAAM,CACJ7f,aAAc,EACdlC,SAAU,OACVpZ,MAAO,IACPoH,OAAO,GAAD,OAAKvH,EAAMM,QAAQ,GAAnB,WACN8a,QAAS,EACTS,SAAU,WACV0f,OAAQ,EACRlhB,WAAY,0CACZ,UAAW,CACTmhB,mBAAoB,eACpBnf,UAAW,eAEbof,eAAgB,YAChBpgB,gBAAiB,UACjB1a,WACE,sEAEJ+6B,aAAc,CACZrgB,gBAAiB,UACjBogB,eAAgB,YAChB96B,WACE,4EACF,UAAW,CACT66B,mBAAoB,iBAGxBG,UAAW,GACXC,YAAa,CACXj7B,WAAY,cACZk7B,WAAY,EACZC,cAAe,EACft0B,QAAS,QAEXu0B,eAAgB,CACdp7B,WAAY,cACZk7B,WAAY,EACZC,cAAe,EACf,eAAgB,CAEdA,cAAe,IAGnB3jB,MAAO,CACL6D,KAAM,GAERjS,YAAa,CACXqR,QAASpb,EAAMM,QAAQ,GAAK,EAAG,IAEjCguB,QAAS,CACPhc,SAAU,OAEZ0pB,aAAc,CACZx0B,QAAS,OACTkU,cAAe,SACfvJ,WAAY,SACZ+H,eAAgB,SAChBvZ,WAAY,cACZ4G,OAAQvH,EAAMM,QAAQ,EAAG,GACzB,qBAAsB,CACpB27B,OAAQ,sBAGZC,kBAAmB,CACjB,qBAAsB,CACpBC,YAAa,YAIjBC,IAAK,CAEH/gB,gBAAiB,iBACjB1a,WACE,0HAEJ07B,IAAK,CAEHhhB,gBAAiB,UACjB1a,WACE,+FAEJ27B,QAAS,CAEPjhB,gBAAiB,UACjB1a,WACE,+EAEJ0N,OAAQ,CAENgN,gBAAiB,kBACjB1a,WACE,iGAEJ+qB,OAAQ,CACNlkB,QAAS,QAEX+0B,SAAU,CACR70B,OAAQ,QACRvH,MAAO,QACPoZ,SAAU,OACVkC,aAAc,EACdjU,QAAS,OACTg1B,WAAY,SACZ3gB,SAAU,YAEZzB,aAAc,CACZ1S,OAAQ,GACRvH,MAAO,GACPqY,OAAQ,cACR6B,WAAY,cACZ,UAAW,CACT7B,OAAQ,eAEV8B,cAAe,SACfrE,YAAajW,EAAMM,QAAQ,GAC3Bi7B,OAAQ,IAEVkB,mBAAoB,CAClBj1B,QAAS,OACTg1B,WAAY,SACZ3gB,SAAU,WACVnU,OAAQ,QACRvH,MAAO,QACPoZ,SAAU,OACVhS,OAAO,GAAD,OAAKvH,EAAMM,QAAQ,GAAnB,gBAIJo8B,GAAe,WACnB,IAAMl7B,EAAU1B,KAEhB,OACE,sBAAK2B,UAAWD,EAAQi7B,mBAAxB,UACE,cAACE,GAAA,EAAD,CAAUh7B,QAAQ,OAAOi7B,UAAU,OAAOn7B,UAAWD,EAAQ+6B,WAC7D,qBAAK9hB,IAAKO,GAAUL,IAAI,WAAWlZ,UAAWD,EAAQ4Y,mBAK7C,SAASyiB,GAAT,GAMX,IAAD,MALDrtB,EAKC,EALDA,MACAnN,EAIC,EAJDA,QAKMklB,EAAMwT,GAASvrB,EAAM+X,KAAO,IAClC,EAAgC7kB,mBAAS,CACvC6kB,MACAuL,MAAOtjB,EAAMsjB,MACbF,cAAepjB,EAAMojB,cACrBI,QAASxjB,EAAMwjB,QACfjpB,YAAayF,EAAMzF,YACnB9G,YAAaskB,IANf,mBAAOpJ,EAAP,KAAiB2e,EAAjB,KAQA,EAA4Cp6B,oBAAS,GAArD,mBAAOq6B,EAAP,KAAuBC,EAAvB,KACMC,EAASt5B,uBAAY,WACzBq5B,GAAkB,KACjB,IACG/5B,EAAY85B,GAAkB5e,EAASlb,UAC7Ca,qBAAU,WACRg5B,GAAY,SAACI,GAAD,OACVA,EAAE3V,MAAQA,EACN2V,EACA,CACE3V,MACAuL,MAAOtjB,EAAMsjB,MACbF,cAAepjB,EAAMojB,cACrBI,QAASxjB,EAAMwjB,QACfjpB,YAAayF,EAAMzF,YACnB9G,YAAaskB,QAGpB,CAAC/X,EAAO+X,IACXzjB,qBAAU,WACR,GAAIyjB,EAAK,CACP,IAAI5Y,GAAY,EA4BhB,OA3BA,wBAAC,iCAAAhE,EAAA,+EAEwBqrB,KAAM3O,IAAIE,GAFlC,OAESziB,EAFT,QAGQ6J,GAAa7J,GAAUA,EAAOO,MAE3BA,GAAO,UAAAP,EAAOO,KAAKP,cAAZ,eAAoBO,OAAQP,EAAOO,KAChDy3B,EAAY,CACVvV,MACAuL,MACEztB,EAAKytB,OACLztB,EAAK83B,WACL93B,EAAK+3B,WACL/3B,EAAKg4B,YACPzK,cAAevtB,EAAKutB,cACpBI,QAAS3tB,EAAKqK,KACd3F,YAAa1E,EAAK0E,YAClB9G,WAAW,KAEH0L,GACVmuB,GAAY,SAACI,GAAD,mBAAC,eAAYA,GAAb,IAAgBj6B,WAAW,OAnB5C,gDAsBQ0L,GACHmuB,GAAY,SAACI,GAAD,mBAAC,eAAYA,GAAb,IAAgBj6B,WAAW,OAvB5C,wDAAD,GA2BO,WACL0L,GAAY,MAGf,CAAC4Y,IAEJ,IAAM/lB,EAAU1B,KACVw9B,EAAS,UAAGnf,EAASyU,qBAAZ,aAAG,EAAwB2K,cAEpCC,IACJ,OAACF,QAAD,IAACA,OAAD,EAACA,EAAWtC,WAAW,eACb,OAATsC,QAAS,IAATA,OAAA,EAAAA,EAAWG,SAAS,WAApB,OACCH,QADD,IACCA,OADD,EACCA,EAAWG,SAAS,UADrB,OAECH,QAFD,IAECA,OAFD,EAECA,EAAWG,SAAS,UAFrB,OAGCH,QAHD,IAGCA,OAHD,EAGCA,EAAWG,SAAS,UAHrB,OAICH,QAJD,IAICA,OAJD,EAICA,EAAWG,SAAS,UAJrB,OAKCH,QALD,IAKCA,OALD,EAKCA,EAAWG,SAAS,SAClBC,GACK,OAATJ,QAAS,IAATA,OAAA,EAAAA,EAAWG,SAAS,UAApB,OACAH,QADA,IACAA,OADA,EACAA,EAAWG,SAAS,WADpB,OAEAH,QAFA,IAEAA,OAFA,EAEAA,EAAWG,SAAS,UAFpB,OAGAH,QAHA,IAGAA,OAHA,EAGAA,EAAWG,SAAS,QAChBE,EAAWxf,EAAS2U,MACpB8K,EAAcloB,GAAmBlG,EAAM8e,SAAW,IAClDuP,EAAWL,GAAYzC,GAAS5c,EAASyU,eAAiB,IAC1DkL,EAAWH,GAAY5C,GAAS5c,EAAS2U,OAAS,IAClDiL,EAAWL,GAAY3C,GAAS5c,EAASyU,eAAiB,IAGhE7U,2BAAgB,WAEZif,KADEa,GAAYC,GAAYC,MAK3B,CAACF,EAAUC,EAAUC,IAExB,IAAMjL,EACJ,qBACErY,IAAKqjB,EACLnjB,IAAKwD,EAAS6U,SAAW,GACzB9gB,MAAO,CAAEqH,SAAU,QACnB0jB,OAAQA,EACRe,QAASf,IAGPgB,EACJ,qCACGT,EACC,wBACEU,UAAQ,EACRC,UAAQ,EACRC,MAAI,EACJlsB,MAAO,CAAEqH,SAAU,QACnB8kB,aAAcpB,EACde,QAASf,EANX,UAQE,wBAAQxiB,IAAKojB,GAAY,KACxB/K,KAED6K,EACF7K,EACE,KACH4K,EACC,uBACES,UAAQ,EACR1jB,IAAKsjB,GAAY,GACjBM,aAAcpB,EACde,QAASf,IAET,QAIR,OACE,qCACE,qBAAKx7B,UAAYwB,EAA6B,GAAjBzB,EAAQkqB,OAArC,SACE,cAAC,GAAD,MAEF,cAAC5O,GAAA,EAAD,CACErb,UAAWI,YAAKL,EAAQ85B,MAAT,mBACZ95B,EAAQk6B,aACPr5B,IAAYwE,KACZxE,IAAYgH,KACZhH,IAAYiH,KAJD,cAKZ9H,EAAQkqB,OAASzoB,GALL,IAOfq7B,UAAW,GARb,SAUE,sBACE78B,UAAWI,YAAKL,EAAQm6B,WAAT,mBACZn6B,EAAQ46B,IACP/5B,IAAY4G,KACZ5G,IAAY8G,KACZ9G,IAAYiH,KAJD,cAKZ9H,EAAQ66B,IAAMh6B,IAAY+G,KALd,cAMZ5H,EAAQ6M,OAAShM,IAAYwE,KANjB,cAOZrF,EAAQ86B,QAAUj6B,IAAYgH,KAPlB,IADjB,UAWE,eAACk1B,GAAA,EAAD,CAAa98B,UAAWD,EAAQo6B,YAAhC,UACGzd,EAAS6U,QACR,cAACtxB,EAAA,EAAD,CAAYD,UAAWD,EAAQ2W,MAA/B,SACGgG,EAAS6U,UAGZ,qBAAKvxB,UAAWD,EAAQ2W,QAE1B,cAACvB,GAAD,CACEvU,QAASA,EACTwU,mBAAoBrH,EACpB4G,UAAQ,EACRC,aAAW,IAEb,cAAC,GAAD,CAAUhU,QAASA,OAErB,cAACm8B,GAAA,EAAD,CACE/8B,UAAWI,YAAKL,EAAQw6B,aAAT,eACZx6B,EAAQ06B,kBACP75B,IAAYwE,KACZxE,IAAYgH,KACZhH,IAAYiH,MALlB,SAQG20B,IAEH,eAACM,GAAA,EAAD,CAAa98B,UAAWD,EAAQu6B,eAAhC,UACG5d,EAASpU,YACR,cAACrI,EAAA,EAAD,CAAYC,QAAQ,QAAQF,UAAWD,EAAQuI,YAA/C,SACGoU,EAASpU,cAEV,KACHyF,EAAM8e,QACL,cAAC5sB,EAAA,EAAD,CAAYD,UAAWD,EAAQ8sB,QAASmQ,MAAM,QAA9C,SACE,cAAC9nB,EAAA,EAAD,CAASwB,MAAM,OAAOumB,OAAK,EAA3B,SACE,sBAAMh2B,QAASk1B,EAAf,SACGpuB,EAAM8e,QAAQ9d,OAAS,GAAvB,WACOhB,EAAM8e,QAAQqQ,OAAO,EAAG,IAD/B,kBAEOnvB,EAAM8e,eAIlB,gBClahB,IAAMxuB,GAAYC,aAAW,SAACC,GAAD,OAC3B4+B,aAAa,CACXt3B,YAAa,CACXpH,UAAW,UAEb2+B,gBAAiB,CACfzjB,QAAS,GAEX0jB,cAAe,CACb1jB,QAASpb,EAAMM,QAAQ,IAEzBmgB,UAAW,CACTse,UAAW/+B,EAAMM,QAAQ,IACzBoH,OAAQ1H,EAAMM,QAAQ,IACtB0+B,SAAU,QAEZC,cAAe,CACbC,UAAW,UAEbC,yBAA0B,CAExBj/B,UAAW,SACXG,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,IAE9B8+B,gBAAiB,CACf7lB,SAAU,OACVpZ,MAAOH,EAAMQ,YAAY6+B,OAAOC,IAElCC,uBAAwB,CACtB/3B,QAAS,OACTrH,MAAO,OACPgS,WAAY,SACZ,QAAS,CACP5K,OAAQvH,EAAMM,QAAQ,GACtBk/B,UAAW,MACX,wBAAyB,CACvBjmB,SAAU,IAEZ,qBAAsB,CACpBlZ,UAAWL,EAAMM,SAAS,IAC1B0V,WAAY,EACZwpB,UAAW,QAEb,eAAgB,CACdt/B,UAAW,SAEbu/B,WAAY,GAEdrtB,SAAU,QAEZstB,oBAAqB,CACnBl4B,QAAS,OACT2K,WAAY,SACZ+H,eAAgB,SAChB/Z,MAAO,IAETw/B,WAAY,CACVZ,UAAW,UAEba,iBAAkB,CAChBC,MAAO,EACP3/B,UAAW,OACXC,MAAO,OACP,sBAAuB,CACrBE,UAAWL,EAAMM,QAAQ,GACzB2V,YAAajW,EAAMM,QAAQ,KAG/Bw/B,eAAgB,CACd3/B,MAAO,OACP,sBAAuB,CACrBA,MAAO,SAGX4/B,UAAW,CACTv4B,QAAS,OACTkU,cAAe,MACfvJ,WAAY,UAEd6tB,OAAQ,CACNxU,SAAU,QAKHyU,GAAgB,SAACC,GAC5B,IAAMC,EAAeD,EAASE,MAAM,KAAK,GAEzC,OADe/P,KAAUtD,KAAKoT,GACnBE,IAAI,KACNF,EAAaG,UAAU,EAAGH,EAAa3vB,OAAS,GAAK,KACnD0vB,EAAS1vB,OAAS,EACpB0vB,EAASvB,OAAO,EAAG,GAEnBuB,GAILK,GAAiB,SAACj9B,GACtBA,EAAEk9B,mBAGSC,GAAqB,SAChChjB,EACAijB,EACA1tB,EACA2tB,GAEA,IAAcC,EAAgBhG,IAAc,GAApCv1B,KACF7D,EAAU1B,KACV+gC,EAAmBnpB,aAAe+F,EAAQrG,SAC1CmQ,EAAMvU,EAAMyK,EAAQsV,UAAYtV,EAAQf,MAAQe,EAAQ8J,IACxDzQ,EAAS2G,EAAQ3G,QAAU,UAC3BpH,EAAO+N,EAAQ/N,MAAQ,UACvB4e,EAAU7Q,EAAQ6Q,QAClBwS,GAAwBH,GAAkBA,EAAeljB,GAEzDsjB,EACJ,sBAAKt/B,UAAWD,EAAQ+9B,uBAAxB,UACE,qBAAK99B,UAAWD,EAAQk+B,oBAAxB,SACGnY,GAAO,qBAAK5M,IAAI,GAAGlZ,UAAWD,EAAQm+B,WAAYllB,IAAK8M,MAE1D,gCACE,cAAC7lB,EAAA,EAAD,UAAaoV,IACb,cAACpV,EAAA,EAAD,UAAagO,OAEf,gCACE,cAAChO,EAAA,EAAD,UAAam/B,IACb,cAACn/B,EAAA,EAAD,CAAYwQ,MAAO,CAAE8uB,UAAW,aAAhC,SAAgD1S,UAKhD2S,EACJ,sBAAKx/B,UAAWD,EAAQ+9B,uBAAxB,UACG9hB,EAAQyjB,QACP,qBAAKz/B,UAAWD,EAAQo+B,iBAAxB,SACGniB,EAAQyjB,QAAQjwB,KAAI,SAACkwB,GAAD,aACR,OAAXP,QAAW,IAAXA,GAAA,UAAAA,EAAaM,eAAb,eAAuBC,IACrB,cAACz3B,EAAA,EAAD,CAEEI,KAAK,QACLnI,QAAQ,WACR+D,MAAM,YACNoS,QAAS,cAACspB,GAAA,EAAD,IACTz3B,KAAMi3B,EAAYM,QAAQC,GAAQE,KAClCz3B,OAAO,SACPC,IAAI,sBACJnB,QAAS63B,GATX,SAWGK,EAAYM,QAAQC,GAAQzxB,MAVxByxB,GAYL,UAGN,KACJ,qBAAK1/B,UAAWD,EAAQk+B,oBAAxB,SACGnY,GAAO,qBAAK5M,IAAI,GAAGlZ,UAAWD,EAAQm+B,WAAYllB,IAAK8M,MAE1D,8BACE,cAAC7lB,EAAA,EAAD,CAAYC,QAAQ,YAApB,SAAiCmV,MAEnC,8BAEI,cAACpV,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACG8b,EAAQjG,cAAgB,SAAWqpB,MAI1C,8BACGC,EACC,qCACE,cAACp/B,EAAA,EAAD,CAAYC,QAAQ,QAApB,SAA6B,YAC7B,cAACD,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACGs+B,GAAcxiB,EAAQwG,qBAI3B,6BAMFqd,EACJ,qBAAK7/B,UAAWD,EAAQs+B,eAAxB,SACE,eAAC10B,EAAA,EAAD,CAAOC,SAAS,UAAhB,UACE,cAAC3J,EAAA,EAAD,CAAYC,QAAQ,QAApB,4DAGA,8BAAMs/B,SAKZ,OAAOjuB,EACH+tB,EACAL,EAAoBjjB,EAAQrG,SAC5BkqB,EACAL,GAOS,SAASM,GAAT,GAmCX,IAAD,MAlCD/xB,EAkCC,EAlCDA,MACAgyB,EAiCC,EAjCDA,QACAC,EAgCC,EAhCDA,aACApsB,EA+BC,EA/BDA,SACAqsB,EA8BC,EA9BDA,eACAxW,EA6BC,EA7BDA,WACA/iB,EA4BC,EA5BDA,SACAuxB,EA2BC,EA3BDA,cACA1mB,EA0BC,EA1BDA,IACA3Q,EAyBC,EAzBDA,QAEA+F,GAuBC,EAxBDrF,MAwBC,EAvBDqF,YACAu5B,EAsBC,EAtBDA,WAuBMngC,EAAU1B,KAChB,EAAwC4C,mBAAS,IAAjD,mBAAOk/B,EAAP,KAAqBC,EAArB,KACA,EAAsDn/B,mBAAS,IAA/D,mBAAOo/B,EAAP,KAA4BC,EAA5B,KACA,EAAwCr/B,mBAAS,IAAjD,mBAAOs/B,EAAP,KAAqBC,EAArB,KACA,EAA0Cv/B,oBAAS,GAAnD,mBAAOw/B,EAAP,KAAuBC,EAAvB,KACA,EAAwCz/B,oBAAS,GAAjD,mBAAO0/B,EAAP,KAAqBC,EAArB,KACA,EAA4C3/B,mBAAS,IAArD,mBAAO4/B,EAAP,KAAuBC,GAAvB,KAEMh8B,GAAcN,YAAYO,MAClBo6B,GAAgBhG,IAAc,GAApCv1B,KAEFm9B,GAAa7+B,uBAAY,WAC7Bk+B,EAAgB,IAChBU,GAAkB,IAClBF,GAAgB,KACf,IAEGI,GAAc9+B,uBAAY,WAC9B0+B,GAAgB,KACf,IAEGK,GAAqB/+B,sBAAW,yCACpC,WAAOg/B,GAAP,gBAAAh4B,EAAA,yDACE43B,GAAkB,IACdK,EAAY,KAFlB,UAKQ1X,GAAeyX,EAAOnrB,cAL9B,iCAMwB0T,EAAWyX,EAAOvrB,QAASurB,EAAOrU,SAN1D,OAMMsU,EANN,OAOMA,EAAS,uCACJD,GACAC,GAFI,IAIPlmB,KAAMimB,EAAOjmB,MAAQkmB,EAAUlmB,KAC/B6K,IAAKob,EAAOpb,KAAOqb,EAAUrb,MAZrC,wBAeMqb,EAAYD,EAflB,yBAiBUttB,EAASutB,GAjBnB,QAkBIH,KAlBJ,kDAoBIp6B,QAAQtF,MAAR,MACAw/B,GACE,qHAtBN,0DADoC,sDA2BpC,CAACrX,EAAY7V,EAAUotB,KAGnBI,GAAuBl/B,uBAAY,WACvCk+B,EAAgB,IAChBE,EAAuB,IACvBQ,GAAkB,IAClB7I,GAAiBA,MAChB,CAACA,IAEEoJ,GAAen/B,uBACnB,SAACg/B,GACC,IAAKf,EACH,OAAO,EAET,IAAMmB,IACHJ,EAAO30B,WAAa,IACrB,KACC20B,EAAOvrB,SAAW,IACnB,KACCurB,EAAO7rB,QAAU,IAClB,KACC6rB,EAAOjzB,MAAQ,MAChB6tB,cACIyF,EAAepB,EAAarE,cAClC,OAAOwF,EAAavmB,SAASwmB,KAE/B,CAACpB,IAGGqB,GAAiB,OAAGrC,SAAH,IAAGA,IAAH,UAAGA,GAAapgB,cAAhB,aAAG,EAAsBne,GAC1C6gC,GAAe,OAAGtC,SAAH,IAAGA,IAAH,UAAGA,GAAauC,oBAAhB,iBAAG,EAA4B9gC,UAA/B,aAAG,EAAuCkE,IAEzD68B,GAAkBhgC,mBAAQ,WAE9B,IAAK4P,GAAOkwB,GAAiB,CAC3B,IAAMG,EAAoB7B,EACvBhpB,QACC,SAACmqB,GAAD,cAAmCO,SAAnC,IAAmCA,QAAnC,EAAmCA,GAAkBP,EAAOvrB,YAE7DnG,KACC,SAAC0xB,GAAD,mBAAC,eAEMA,GAFP,IAGIzB,QAASgC,GAAgBP,EAAOvrB,SAAS8pB,aAGjD,MAAO,uBACFmC,GADE,aAEFC,OAAOtW,KAAKkW,IACZ1qB,QACC,SAACpB,GAAD,OACGisB,EAAkBjyB,MAAK,SAACuxB,GAAD,OAAYA,EAAOvrB,UAAYA,QAE1DnG,KACC,SAACmG,GAAD,cACG,CACClG,OAAQ,IACR4S,SAAU,EACVod,QAASgC,GAAgB9rB,GAAS8pB,QAClC9pB,UACApJ,UAAW,GACX0kB,SAAU,EACVzO,eAAgB,IAChBnN,OAAM,OAAEmsB,SAAF,IAAEA,IAAF,UAAEA,GAAoB7rB,UAAtB,aAAE,EAA8BN,OACtC4F,KAAI,OAAEumB,SAAF,IAAEA,IAAF,UAAEA,GAAoB7rB,UAAtB,aAAE,EAA8BsF,WAG5ClE,OAAOsqB,IAEX,MAAO,KACN,CAAC9vB,EAAKiwB,GAAmBC,GAAiB1B,EAASsB,KAEhDS,GAAqBngC,mBAAQ,WACjC,OAAOo+B,EAAQhpB,QACb,SAACmqB,GAAD,OACEG,GAAaH,KAEZ3vB,KAAO,OAACkwB,SAAD,IAACA,QAAD,EAACA,GAAkBP,EAAOvrB,gBAErC,CAACpE,EAAKwuB,EAAS0B,GAAiBJ,KAE7BU,GAAY7/B,uBAChB,SAAC4B,EAAiBu8B,GAChB,OAAON,EAAQpwB,MACb,SAACgN,GAAD,OACEA,EAAEhH,UAAY7R,KACZu8B,GAAuB1jB,EAAEkQ,UAAYwT,QAG7C,CAACN,IAIH19B,qBAAU,WACR,GAAK49B,GAAmBxW,KAGpByW,GAAeG,GAAnB,CAGAG,EAAgB,IAChB,IAAItzB,GAAY,EAChB,GAAI+yB,EAAeE,GAAe,CAChC,IAAMe,EAASa,GAAU5B,EAAcE,GACvC,GAAIa,EAEF,OADAD,GAAmBC,GACZ,WACLh0B,GAAY,GAGhBwzB,GAAgB,GAChBF,EAAgB,IAChB/W,EACE0W,EACAD,EAAaG,OAAsBx8B,GACnCT,MACA,SAACC,GACM6J,IACHwzB,GAAgB,GACZr9B,GACF49B,GAAmB59B,OAIzB,SAAC/B,GACM4L,IACHwzB,GAAgB,GAChBF,EAAgB,6CAKxB,OAAO,kBAAOtzB,GAAY,MACzB,CACDizB,EACAF,EACAxW,EACAwX,GACAc,GACA1B,EACAH,IAOF,IAAM8B,GACJ,sBAAKhiC,UAAWD,EAAQ8F,YAAxB,UACE,cAACkB,EAAA,EAAD,IACA,cAAC9G,EAAA,EAAD,CAAYC,QAAQ,QAApB,SACGyG,EAAa,2BAA6B,6BAK3Cs7B,GACJ,qBAAKjiC,UAAWD,EAAQ8F,YAAxB,SACE,cAAC5F,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,QAAlC,SACGs8B,GAAgBM,MAKjBqB,GACJ,eAACC,GAAA,EAAD,CACEC,QAASpB,GACT,kBAAgB,sBAChBqB,KAAM1B,EACN7oB,SAAS,KACTnE,WAAS,EALX,UAOE,cAAC2uB,GAAA,EAAD,UACE,sBAAK76B,GAAG,sBAAsBzH,UAAWD,EAAQu+B,UAAjD,UACE,cAACr+B,EAAA,EAAD,CAAYC,QAAQ,KAApB,4BACA,qBAAKF,UAAWD,EAAQw+B,SACxB,cAACrpB,EAAA,EAAD,CAASwB,MAAM,gBAAf,SACE,cAACqC,EAAA,EAAD,CAAY9R,QAASm6B,GAArB,SACE,cAAC,KAAD,aAKR,eAACmB,GAAA,EAAD,CAAeviC,UAAWD,EAAQy9B,cAAlC,UACE,eAAC7zB,EAAA,EAAD,CAAOC,SAAS,OAAhB,qFAEU,IACR,cAAC0R,EAAA,EAAD,CACEpT,KAAMs6B,IACNr6B,OAAO,SACPC,IAAI,sBAHN,wEAQF,cAAC2L,GAAA,EAAD,CACE7T,QAAQ,WACR8T,MAAM,+BACNjG,MAAOoyB,EACPvsB,SAAU,SAACT,GAAD,OAAWitB,EAAgBjtB,EAAMhL,OAAO4F,QAClD4F,WAAS,EACT7N,OAAO,WAERo6B,EACC,cAACnsB,GAAA,EAAD,CACE7T,QAAQ,WACR8T,MAAM,WACNjG,MAAOsyB,EACPzsB,SAAU,SAACT,GAAD,OAAWmtB,EAAuBntB,EAAMhL,OAAO4F,QACzD4F,WAAS,EACT7N,OAAO,WAEP,KACH26B,GAAkB95B,EACjBq7B,GACEzB,GAAgBM,EAClBoB,GAEA,eAACQ,GAAA,EAAD,CAAMtiC,UAAU,MAAMH,UAAWD,EAAQif,UAAzC,UACG2iB,GAAgB5yB,OACf,qCACE,eAAC9O,EAAA,EAAD,CAAYC,QAAQ,YAAYwiC,cAAY,EAA5C,sBACY10B,IAAapN,GAASqN,KADlC,KAC6C,IAC1CD,IAAalJ,IAAamJ,KAF7B,WAE2C,IACzC,cAACiH,EAAA,EAAD,CACEwB,MAAK,4BAAuB1I,IAAapN,GAASqN,KAA7C,yDAAkGD,IAAalJ,IAAamJ,MADnI,SAGE,cAAC00B,GAAA,EAAD,CACE9xB,SAAS,QACTJ,MAAO,CAAEoI,cAAe,sBAI7B8oB,GAAgBnyB,KAAI,SAAC0xB,GACpB,OACE,cAAC0B,GAAA,EAAD,CACEziC,UAAU,MACVqZ,QAAM,EACNvS,QAAS,kBAAMg6B,GAAmBC,IAHpC,SAUE,cAAClB,EAAD,CAAchkB,QAASklB,KALrBA,EAAO30B,UACP20B,EAAOvrB,SACNurB,EAAOrU,SAAW,QAO1BiV,GAAmB/yB,OAClB,qCACE,cAAC6a,GAAA,EAAD,CAASnZ,MAAO,CAAE7R,UAAW,EAAGE,aAAc,MAC9C,cAACmB,EAAA,EAAD,CAAYC,QAAQ,YAAYwiC,cAAY,EAA5C,6BAIA,QAEJ,KACHZ,GAAmBtyB,KAAI,SAAC0xB,GACvB,OACE,cAAC0B,GAAA,EAAD,CACEziC,UAAU,MACVqZ,QAAM,EACNvS,QAAS,kBAAMg6B,GAAmBC,IAHpC,SAQE,cAAClB,EAAD,CAAchkB,QAASklB,KAHrBA,EAAO30B,UAAY20B,EAAOvrB,SAAWurB,EAAOrU,SAAW,QAO9D8U,GAAgB5yB,QAAU+yB,GAAmB/yB,OAAS,KACrD,qBAAK/O,UAAWD,EAAQ8F,YAAxB,SACE,cAAC5F,EAAA,EAAD,0CASR4iC,GACJ,qBAAK7iC,UAAWD,EAAQ29B,yBAAxB,SACE,cAACz1B,EAAA,EAAD,CACEhB,QAAS85B,GACTr6B,SAAUA,EACVxG,QAAQ,WACRmW,QAAS,cAAC,KAAD,IACTrW,UAAWD,EAAQ49B,gBALrB,SAOG5vB,EACC,cAACiyB,EAAD,CAAchkB,QAASjO,IAEvB,cAAC9N,EAAA,EAAD,CAAYgE,MAAM,gBAAlB,gCAMR,OACE,qCACGi+B,GACAn0B,GAASwD,EAAM,cAAC6pB,GAAD,CAAWrtB,MAAOA,EAAOnN,QAASA,IAAc,KAC/DiiC,MCrlBP,IAAMC,GAAe,SAACpiC,EAAeoD,EAAiBlD,GACpD,OAAIA,IAAY4G,IACP2F,QAAQC,SAAQ,GAEN21B,KAAqBlc,QACtCmc,IACAtiC,GAEgBuiC,eAAen/B,IAapB,SAASo/B,GACtBzjB,GAEA,IACE1R,EAOE0R,EAPF1R,MACA6F,EAME6L,EANF7L,SACA4hB,EAKE/V,EALF+V,cACA9uB,EAIE+Y,EAJF/Y,SACAuxB,EAGExY,EAHFwY,cACAr3B,EAEE6e,EAFF7e,QACA2Q,EACEkO,EADFlO,IAEF,EAAoC9Q,cAA5BC,EAAR,EAAQA,SAAU4lB,EAAlB,EAAkBA,cACVzlB,EAAYC,YAAiBF,GAA7BC,QACFsiC,EAA0D3+B,YAC9D+M,EACIqb,IACAwW,MAGA/D,EAAuBn9B,uBAC3B,SAACmhC,GACC,IAAMC,EACJH,GACAA,EAAqBxtB,QAAQmmB,gBAC3BuH,EAAa1tB,QAAQmmB,cAEnByH,EACJJ,GACAA,EAAqBtW,UAAYwW,EAAaxW,QAChD,SACEwW,EAAattB,eACZutB,GAAqBC,KAG1B,CAACJ,IAGGlE,EAAsB/8B,uBAC1B,SAAC4B,GAEC,QADiB0lB,aAAqB5oB,GACpBglB,IAAI4d,sBAAc1/B,MAEtC,CAAClD,IAGG6oB,EAGgCvnB,sBAAW,yCAC/C,WAAO4B,EAAiB+oB,GAAxB,gBAAA3jB,EAAA,2DACMxI,GAAY4lB,GAAiBzlB,GADnC,0CAGkC0Q,EACxB8mB,GAAev0B,EAASpD,GACxBw3B,GAAiBp0B,EAASpD,GALpC,UAGY2iC,EAHZ,gDAOel2B,QAAQ0C,OAAO,wCAP9B,WASU0B,GAAQsb,EATlB,0CAUe1f,QAAQ0C,OAAO,0BAV9B,YAWiB0B,IAAOsb,EAXxB,0CAYe+L,GACLyK,EACAxW,EACAvG,IAfV,iCAkBe8R,GACLiL,EACA/c,IApBV,mFAwBanZ,QAAQ0C,OAAO,0CAxB5B,yDA2BW1C,QAAQ0C,OAAO,CAAEvO,MAAO,8BA3BnC,0DAD+C,wDA+B/C,CAACT,EAAS0Q,EAAK7Q,EAAU4lB,IAGrBmd,EAAkBvhC,sBAAW,yCACjC,WAAO8Z,GAAP,kBAAA9S,EAAA,yDACkB,OAAZ8S,EADN,uBAEIpI,EAAS,MAFb,kBAGWzG,QAAQC,WAHnB,cAKMs2B,GAAK,EALX,kBAOeZ,GAAapiC,EAAUsb,EAAQzP,UAAW3L,GAPzD,OAOI8iC,EAPJ,oEAWQC,EAAY1E,EAAoBjjB,EAAQzP,YACnC,IAAPm3B,GAAgBC,EAZtB,uBAaU,IAAI14B,MACR,8DAdN,eAiBE2I,EAASoI,GAjBX,kBAkBS7O,QAAQC,WAlBjB,0DADiC,sDAqBjC,CAACxM,EAASgT,EAAUlT,EAAUu+B,IAG1B2E,EAAa1hC,uBACjB,YAAsD,IAAnD8Z,EAAkD,EAAlDA,QACD,OAAOgjB,GACLhjB,EACAijB,EACA1tB,IAAO,EACP8tB,KAGJ,CAAC9tB,EAAK0tB,EAAqBI,IAG7B,OACE,cAACS,GAAD,CACE/xB,MAAOA,EACPgyB,SAAsB,OAAbvK,QAAa,IAAbA,OAAA,EAAAA,EAAe5xB,OAAQ,GAChCo8B,aAAc4D,EACd1D,WAAY3uB,EACZqC,SAAU6vB,EACVxD,eAAgBlH,GAChBtP,WAAYA,EACZ/iB,SAAUA,EACVuxB,cAAeA,EACf32B,MAAO,GACPqF,WAAU,OAAE6uB,QAAF,IAAEA,OAAF,EAAEA,EAAe7xB,WAC3B4N,IAAKA,IAAO,EACZ3Q,QAASA,IClLf,IAAMvC,GAAYC,aAAW,kBAC3B6+B,aAAa,CACX0G,qBAAsB,CACpB99B,QAAS,eACTgkB,SAAU,GAEZ+Z,YAAa,CACX,QAAS,CACPh+B,OAAQ,SAEVC,QAAS,OACT2K,WAAY,eAKH,SAASqzB,GAAT,GAMX,IALFnkC,EAKC,EALDA,SACAokC,EAIC,EAJDA,SAKMjkC,EAAU1B,KAahB,OAVE,sBAAK2B,UAAWD,EAAQ+jC,YAAxB,UACE,qBAAK9jC,UAAWD,EAAQ8jC,qBAAxB,SAA+CjkC,IAC/C,cAACsV,EAAA,EAAD,CAASwB,MAAM,gBAAf,SACE,cAACqC,EAAA,EAAD,CAAY9R,QAAS+8B,EAArB,SACE,cAAC,KAAD,WCpCH,IAAMC,GAA0B,SACrC/6B,EACAg7B,GAFqC,OAIrCh7B,EAAE6M,gBAAkBmuB,EAAEnuB,eACjB,GACA7M,EAAE6M,eAAiBmuB,EAAEnuB,cACtB,EACA7M,EAAEmM,QAAU6uB,EAAE7uB,OACdnM,EAAEmM,OAAO8uB,cAAcD,EAAE7uB,QACzBnM,EAAEmM,QACD,EACD6uB,EAAE7uB,OACF,EACA,GCYA4pB,GAAsB,SAACn7B,GAC3B,QAASslB,IAAoBxD,IAAI9hB,IAGpB,SAASsgC,GACtB3kB,GAEA,IACE1R,EAOE0R,EAPF1R,MACA6F,EAME6L,EANF7L,SACAlN,EAKE+Y,EALF/Y,SACAuxB,EAIExY,EAJFwY,cACA1mB,EAGEkO,EAHFlO,IACAmmB,EAEEjY,EAFFiY,SACAM,EACEvY,EADFuY,aAEI5Y,EAAWD,KACXzD,EAAgB/Z,mBAAQ,WAAO,IAAD,EAC5BoQ,EAAmB,GAIzB,OAHY,OAAZimB,QAAY,IAAZA,GAAA,UAAAA,EAAcp0B,YAAd,SAAoB6Y,SAClB,SAAC4nB,EAAUtkB,GAAX,OAA2BA,GAAehO,EAAOvJ,KAAKuX,MAEjDhO,IACN,QAACimB,QAAD,IAACA,OAAD,EAACA,EAAcp0B,OACZ0gC,EAAWpoB,GAAgBR,GAE3B6oB,EAA2C5iC,mBAAQ,WACvD,IAAMoQ,EAAS,IAAIyK,IAEnB,GAAI4C,EAASxb,KAAM,CAAC,IAAD,iBACEwb,EAASxb,MADX,IACjB,2BAAkC,CAAC,IAAxBA,EAAuB,QAC5BA,GAAQA,EAAKE,SACfiO,EAAO8K,IAAIjZ,EAAKE,QAASF,IAHZ,+BAQnB,OAAOmO,IACN,CAACqN,IAEEolB,EAAUtiC,uBACd,SAAC8Z,GAAiC,IAAD,QAC/B,OACGA,EAAQjG,eAAiBiG,EAAQf,OAAlC,UACAspB,EAAiB3e,IAAI5J,EAAQrG,gBAD7B,aACA,EAAuCkQ,WADvC,UAEAye,EAAS1gC,YAFT,iBAEA,EAAegiB,IAAI5J,EAAQrG,gBAF3B,iBAEA,EAAqC/R,YAFrC,aAEA,EAA2CkiB,WAC3CjiB,IAGJ,CAAC0gC,EAAkBD,IAGfG,EAAYviC,uBAChB,SAAC8Z,GAAiC,IAAD,QAC/B,OACGA,EAAQjG,eAAiBiG,EAAQ3G,SAAlC,UACAkvB,EAAiB3e,IAAI5J,EAAQrG,gBAD7B,aACA,EAAuCN,UADvC,UAEAivB,EAAS1gC,YAFT,iBAEA,EAAegiB,IAAI5J,EAAQrG,gBAF3B,iBAEA,EAAqC/R,YAFrC,aAEA,EAA2CyR,cAC3CxR,IAGJ,CAAC0gC,EAAkBD,IAGfI,EAAUxiC,uBACd,SAAC8Z,GAAiC,IAAD,QAC/B,OACGA,EAAQjG,eAAiBiG,EAAQ/N,OAAlC,UACAs2B,EAAiB3e,IAAI5J,EAAQrG,gBAD7B,aACA,EAAuC1H,QADvC,UAEAq2B,EAAS1gC,YAFT,iBAEA,EAAegiB,IAAI5J,EAAQrG,gBAF3B,iBAEA,EAAqC/R,YAFrC,aAEA,EAA2CqK,YAC3CpK,IAGJ,CAAC0gC,EAAkBD,IAKfK,EAAkBhjC,mBAAQ,WAC9B,IACMqd,IADgB,OAAR0Y,QAAQ,IAARA,OAAA,EAAAA,EAAU9zB,OAAQ,IACRmT,QAAO,SAAC4F,GAAO,IAAD,UAEpC,GADiC,MAAbA,EAAElN,OAEpB,OAAO,EAET,IAAM8oB,EACW,IAAf5b,EAAE0F,WAAF,UAAoBiiB,EAAS1gC,YAA7B,iBAAoB,EAAegiB,IAAIjJ,EAAEhH,gBAAzC,iBAAoB,EAA+B/R,YAAnD,aAAoB,EAAqCkiB,KACrD8e,EACJrM,GAAwD,OAAnC,OAAZP,QAAY,IAAZA,GAAA,UAAAA,EAAcp0B,YAAd,mBAAoBgiB,IAAIjJ,EAAEhH,gBAA1B,eAAoCkvB,QAC/C,OAAOtzB,EAAMqzB,GAAsBrM,KAGrC,OADAvZ,EAAU8lB,KAAKb,IACRjlB,IACN,QAACgZ,QAAD,IAACA,OAAD,EAACA,EAAcp0B,KAAM0gC,EAAS1gC,KAAM2N,EAAKmmB,IAEtCqN,EAAuBpjC,mBAAQ,WACnC,OAAOgjC,EAAgBn1B,KAAI,SAACwM,GAC1B,IAAMf,EAAOupB,EAAQxoB,GACf3G,EAASovB,EAAUzoB,GACnB/N,EAAOy2B,EAAQ1oB,GAEf8J,EAAM0e,EAAQxoB,GAEpB,OAAO,2BACFA,GADL,IAEE/N,OACAoH,SACA4F,OACA6K,aAGH,CAAC6e,EAAiBH,EAASE,EAASD,IAEjCjjC,GACI,OAARk2B,QAAQ,IAARA,OAAA,EAAAA,EAAU/zB,aAAc2gC,EAAS3gC,YAAcyb,EAASzb,WAEpDm/B,EAAe5gC,uBACnB,SAAC4B,GAAqB,IAAD,IAInB,KAAI,UAAC2b,EAAMuY,oBAAP,aAAC,EAAoBp0B,MACvB,OAAO,EAET,IAAMohC,EAAa,UAAGvlB,EAAMuY,aAAap0B,KAAKgiB,IAAI9hB,UAA/B,aAAG,EAAsCkhC,cAE5D,OAAKA,GAIDA,IAAkBC,MAMxB,CAACxlB,EAAMuY,eAGHyL,EAAkBvhC,sBAAW,yCACjC,WAAOgjC,GAAP,gBAAAh8B,EAAA,yDACMw6B,GAAK,EACQ,OAAbwB,EAFN,uBAGItxB,EAAS,MAHb,kBAIWzG,QAAQC,WAJnB,OAME,IACEs2B,EAAKZ,EAAaoC,EAASvvB,SAC3B,MAAO9T,IARX,OAYM6hC,GACFv2B,QAAQ0C,OACN,kEAIJ+D,EAASsxB,GAlBX,kBAmBS/3B,QAAQC,WAnBjB,2CADiC,sDAsBjC,CAAC01B,EAAclvB,IAGXgwB,EAAa1hC,uBACjB,YAAsD,IAAnD8Z,EAAkD,EAAlDA,QACD,OAAOgjB,GAAmBhjB,EAASijB,GAAqB1tB,IAAO,KAEjE,CAACA,IAGH,OACE,cAACuuB,GAAD,CACE/xB,MAAOA,EACPgyB,QAASgF,EACT/E,aAAc4D,EACdhwB,SAAU6vB,EACV/8B,SAAUA,EACVuxB,cAAeA,EACf32B,MAAO,GACPqF,WAAYnF,EACZ+P,IAAKA,IAAO,EACZ3Q,QAASwE,MC1MA,SAAS+/B,GACtBx2B,EACAy2B,GAEA,MAAkCnkC,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,mBAA0C,IAA1E,mBAAOokC,EAAP,KAAiBC,EAAjB,KACA,EAA8BrkC,oBAAS,GAAvC,mBAAOskC,EAAP,KAAgBC,EAAhB,KAuCA,OAtCAnjC,qBAAU,WACJ+iC,IACFA,EAAWvN,QAAU,WACnB2N,GAAW,OAGd,CAACJ,IACJ/iC,qBAAU,YACRmjC,GAAW,GACP72B,IACFlN,GAAa,GACb6jC,OAAYzhC,GACA,IAAIlB,YAAUC,KACtByM,KACDZ,QAAQE,GACRvL,MAAK,SAACkM,GAEL,IAIMb,EAJea,EAAME,KAAI,gBAAGC,EAAH,EAAGA,OAAH,MAAuB,CAAvB,EAAWC,MAExCD,MAE2BkoB,QAAO,SAAC8N,EAAK5N,GAExC,OADA4N,EAAI5N,EAAQ,GAAGltB,YAAcktB,EAAQ,GAAGltB,WACjC86B,IACN,IACHhkC,GAAa,GACb6jC,EAAY72B,MAEbhL,OAAM,SAAC5B,GACNJ,GAAa,GACb6jC,OAAYzhC,QAGhBpC,GAAa,GACb6jC,OAAYzhC,MAEb,CAAC8K,EAAe42B,IACL5jC,mBAAQ,iBAAO,CAAEH,YAAW6jC,cAAa,CAAC7jC,EAAW6jC,ICzBrE,IAAMK,GAAe,kBAAM,GAEZ,SAASC,GAAiBlmB,GACvC,IAAQ1R,EAA8B0R,EAA9B1R,MAAO6F,EAAuB6L,EAAvB7L,SAAUlN,EAAa+Y,EAAb/Y,SACjBiI,EAAkB7N,YAAiB2B,KAAnCkM,cACFi3B,EAAgBC,kBAAmB,eACzC,EAAiDV,GAC/Cx2B,EACAi3B,GAFMP,EAAR,EAAQA,SAAqBS,EAA7B,EAAkBtkC,UAKZukC,EAAsB7jC,uBAAY,WAGtC0jC,EAAc/N,YACb,IACGr2B,EAAYskC,EAEZrC,EAAkBvhC,sBAAW,yCACjC,WAAO8Z,GAAP,UAAA9S,EAAA,yDACkB,OAAZ8S,EADN,uBAEIpI,EAAS,MAFb,kBAGWzG,QAAQC,WAHnB,cAKEwG,EAASoI,GALX,kBAMS7O,QAAQC,WANjB,2CADiC,sDASjC,CAACwG,IAGGoyB,EAAkBrkC,mBAAQ,WA4B9B,OA1BE0jC,GAAY12B,EACRkzB,OAAOtW,KAAK8Z,GAAU71B,KAAI,SAACE,GAAD,OAWxBshB,GACEriB,EACAe,EACA21B,EAAS31B,GACTM,KACA,EACAD,uBAAYs1B,EAAS31B,GAAQM,MAC7B6F,aAAkBnG,QAClB7L,EACAoiC,aAAmBpwB,aAAkBnG,KACrC,MAGJ,IACeqH,QAAO,SAAC2F,GAAD,OAC1BwpB,IAAuBnrB,SAAS2B,EAAS/G,cAK1C,CACDhH,EACA02B,IAMIc,EAAqBjkC,uBACzB,SAACkkC,GACC,IAAKz3B,EACH,OAAOxB,QAAQ0C,OAAO,wBAExB,IAAMnN,EAAM,IAAIC,YAAUC,KAC1B,OAAOF,EAAI2jC,KACRC,cAAcF,EAAa,CAC1BG,WAAY,KAEbnjC,MAAK,SAAC4H,GAAD,OACJtI,EAAI2jC,KACDC,cAAcF,EAAa,CAC1B33B,QAAS,CACP3K,QAAS6K,KAGZvL,MAAK,SAACqL,GACL,GAAIA,GAAWzD,EACb,OAAOgmB,GACLriB,EACAy3B,EACA33B,EAAQA,QAAQ9D,WAChBK,EAAKqX,SACLyP,OAAO/hB,uBAAYtB,EAAQA,QAASzD,EAAKqX,WACzCtS,uBAAYtB,EAAQA,QAASzD,EAAKqX,UAClCrX,EAAKqK,OACLrK,EAAKiD,MAGP,MAAM,IAAIhD,MAAM,2CAIvBxH,OAAM,WACL,OAAO0J,QAAQ0C,cAGrB,CAAClB,IAGG63B,EAAsBtkC,uBAAY,SAAC4B,GACvC,OAAO2iC,aAAoB3iC,KAAa2R,YAAc3R,KACrD,IAEG8/B,EAAa1hC,uBACjB,YAAsD,IAAnD8Z,EAAkD,EAAlDA,QACD,OAAOgjB,GAAmBhjB,EAAS0pB,IAAc,KAEnD,IAGF,OACE,cAAC5F,GAAD,CACE/xB,MAAOA,EACPgyB,QAASiG,GAAmB,GAC5BhG,aAAc4D,EACdhwB,SAAU6vB,EACVxD,eAAgBuG,EAChB/c,WAAY0c,EACZz/B,SAAUA,EACVuxB,cAAe8N,EACfzkC,MAAO,GACPqF,WAAYnF,EACZ+P,KAAK,EACL3Q,QAAS6B,MChIR,IAAMikC,GAAgB,SAACjnB,GAA+B,IAAD,EAClD/Y,EAAkB+Y,EAAlB/Y,SAAU6K,EAAQkO,EAARlO,IACZ7I,EAAWC,cAEXgtB,EAAcnxB,YAClB+M,EAAMgb,IAAuBC,MAEzB+D,EAA2B/rB,YAC/B+M,EACIqb,IACAwW,MAEAuD,EAAgB7lC,YAAiB60B,GAEjCyB,EAA8B7lB,EAChCq1B,KACAC,KACE3P,EAAyB3lB,EAC3Bu1B,KACAC,KAEEC,EAAiB9kC,uBACrB,SAAC+kC,GACMA,OAG0BpjC,IAApBojC,GAAiCN,EAAch4B,gBACxDjG,EAAS0uB,EAA4B6P,IACrCv+B,EAASwuB,EAAuByP,EAAch4B,kBAJ9CjG,EAAS0uB,OAA4BvzB,IACrC6E,EAASwuB,OAAuBrzB,OAMpC,CACE6E,EACAi+B,EACAvP,EACAF,IAIEgQ,EAAOC,GAAyB51B,GAChCw0B,GAA0B,OAAJmB,QAAI,IAAJA,OAAA,EAAAA,EAAMjP,gBAAkB,aAG9CpP,EACJzmB,YAAWuzB,IACXA,IAAgBlzB,MADhB,OAEAykC,QAFA,IAEAA,GAFA,UAEAA,EAAM1R,qBAFN,aAEA,EAAqBl0B,OAEjBoI,EAAUmf,EACd,cAACkb,GAAD,CAAsBC,SAAU+B,EAAhC,SACE,cAAC9lC,EAAA,EAAD,UAAa4oB,MAEb8M,IAAgBvwB,IAClB,cAAC,GAAD,CACE2I,MAAOwiB,GAA4B,KACnC3c,SAAUozB,EACVtgC,SAAUA,EACVgxB,SAAQ,OAAEwP,QAAF,IAAEA,OAAF,EAAEA,EAAM1R,cAChBwC,aAAY,OAAEkP,QAAF,IAAEA,OAAF,EAAEA,EAAMlP,aACpBC,cAAa,OAAEiP,QAAF,IAAEA,OAAF,EAAEA,EAAMjP,cACrB1mB,IAAKA,IAELnP,YAAWuzB,GACb,cAACuN,GAAD,CACEn1B,MAAOwiB,GAA4B,KACnC7pB,SAAUA,EACVkN,SAAUozB,EACVxR,cAAa,OAAE0R,QAAF,IAAEA,OAAF,EAAEA,EAAM1R,cACrByC,cAAa,OAAEiP,QAAF,IAAEA,OAAF,EAAEA,EAAMjP,cACrBr3B,QAAS+0B,EACTpkB,IAAKA,IAELokB,IAAgBlzB,IAClB,cAACkjC,GAAD,CACE53B,MAAOwiB,GAA4B,KACnC7pB,SAAUA,EACVkN,SAAUozB,EACV/O,cAAa,OAAEiP,QAAF,IAAEA,OAAF,EAAEA,EAAMjP,cACrBzC,cAAa,OAAE0R,QAAF,IAAEA,OAAF,EAAEA,EAAM1R,gBAGvB,cAACzhB,GAAA,EAAD,CACE7T,QAAQ,WACRknC,YAAY,QACZzzB,WAAS,EACT5F,MAAO,kBACPrH,UAAU,IAId,OAAO,8BAAMgD,KCtGTrL,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqU,cAAe,CACbhU,UAAWL,EAAMM,QAAQ,QA+EdgU,OA3Ef,WACE,IAAM9S,EAAU1B,KACVqK,EAAWC,cACXqD,EAAcxH,YAAY+nB,KAC1B/J,EAAiBhe,YAAY6iC,KAC7B/lC,EAAQkD,YAAY8iC,KACpBx0B,EAAmBtO,YAAY+iC,KAC/Bv0B,EAAmBxO,YAAYgjC,KACrC,EAAmC1mC,YAAiBkL,GAA5CnL,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cACX6M,EAAqBhR,uBACzB,SAACiR,GACCzK,EAAS0K,aAAeD,EAAMhL,OAAO4F,UAEvC,CAACrF,IAEG6K,EAAkBrR,uBAAY,WAClCwG,EAAS8K,kBACR,CAAC9K,IACJ,OACE,qCACE,cAACmmB,GAAD,UACE,sBAAKpe,MAAO,CAAE1K,QAAS,OAAQ2K,WAAY,UAA3C,mEAEE,qBAAKD,MAAO,CAAEsZ,SAAU,KACxB,8BACE,cAAC9hB,EAAA,EAAD,CACE9H,UAAWmb,IACXE,GAAG,uBACHnT,KAAK,QACLnI,QAAQ,WACRmW,QAAS,cAACoxB,GAAA,EAAD,IALX,wCAYN,cAACh0B,GAAA,EAAD,CACEvT,QAAQ,WACRwT,QAAM,EACNC,WAAS,EACT5F,MAAO/B,EACP4H,SAAUV,EACVxM,SAAUsM,EACVa,OAAQ6zB,MAETtlC,YAAW4J,GACV,cAACrC,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAA/B,8DAGE,KACH8L,IAAgB5G,IACf,cAACuE,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAA/B,yDAGE,KACJ,cAAC4G,GAAA,EAAD,CAAelG,QAASoL,IACvBnL,GAAW2hB,EACV,qBAAKxiB,UAAWD,EAAQ6S,cAAxB,SACE,cAAC,GAAD,CAAelM,SAAUsM,EAAkBzB,KAAK,MAEhD,KACJ,cAAC,GAAD,CAAmB3Q,QAASoL,IAC5B,cAAChF,EAAA,EAAD,CACEN,UAAWoM,EACX7L,QAASsM,EACT5M,YAAY,EACZrF,MAAO+E,GAAiB/E,EAJ1B,sBCnFAjD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAASmY,KACtB,IAAM7W,EAAU1B,KACV2N,EAAcxH,YAAY+nB,KAC1BgE,EAA2B/rB,YAC/BooB,KAGI/V,EACJ7K,GAAeukB,EACb,qCACE,8DACA,cAACpb,GAAD,CACEvU,QAASoL,EACToJ,mBAAoBmb,IAEtB,wCACA,cAACpb,GAAD,CACEvU,QAASoL,EACTlI,QAAO,OAAEysB,QAAF,IAAEA,OAAF,EAAEA,EAA0BhkB,YAErC,uCAAUyB,IAAahC,GAAaiC,WAGtC,GAGJ,OACE,qCACE,cAAChO,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAKGuO,IAEF0Z,EACC,cAAC6K,GAAD,CAAWrtB,MAAOwiB,EAA0B3vB,QAASoL,IACnD,QC4EK27B,OApGf,SAA8BroB,EAAqB/N,GACjD,IAAM7I,EAAWC,cACX7D,EAAcN,YAClB+M,EAAM4c,IAAuBppB,MAEvBuhB,EAAkB7lB,cAAlB6lB,cACFja,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtBqV,EAAcpd,YAClB+M,EAAMq2B,IAAuBC,MAEzBC,EAA2BtjC,YAC/BujC,MAEIC,EAA2B,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAA0Bv7B,UACxDC,EAAcC,eACdw7B,EAAsB12B,EACxB22B,KACAC,KACJ9lC,qBAAU,WACR,GAAIid,EAAY,CACd,IAAIpS,GAAY,EA6DhB,OA5DI9K,YAAW0C,IAAgBwhB,EAC7B5d,EACEu/B,EACE59B,aAAgBylB,mBAAQnB,oBAASrI,GAAgB,QAMpD/U,GACDzM,IAAgBM,KAChB4iC,EAGAt/B,EACEu/B,EACE59B,aACEylB,mBAAQ,IAAIjhB,YAAUm5B,GAA6BI,UAAW,OAI3DtjC,IAAgBM,KAAmBmF,GAASqX,EAErD,wBAAC,6BAAA1Y,EAAA,+EAGWmX,KAAMC,0BACVC,KACAC,KACA,IAAI3R,YAAU+S,GACdrX,GAPP,OAES89B,EAFT,OASQn7B,GACHxE,EACEu/B,EACE59B,aAAgBylB,mBAAQuY,EAAuBD,UAAW,OAZnE,gDAiBQl7B,GACHxE,EAASu/B,OAAoBpkC,IAlBlC,wDAAD,GAuBAiB,IAAgBrC,KAChB+J,GACAA,EAAYmC,cAEZjG,EACEu/B,EACE59B,aACEylB,mBAAQwY,YAAiB97B,EAAYmC,eAAgB,OAK3DjG,EAASu/B,OAAoBpkC,IAExB,WACLqJ,GAAY,MAGf,CACDxE,EACA4W,EACAxa,EACAwhB,EACA/b,EACAqX,EACAomB,EACAx7B,EACA+E,EACA02B,KC1FE5pC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqU,cAAe,CACbhU,UAAWL,EAAMM,QAAQ,IAE3BqT,MAAO,CACLtT,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,QA6GjBiY,OAzGf,WACE,IAaI+V,EAbE9sB,EAAU1B,KACVqK,EAAWC,cACXqD,EAAcxH,YAAY+nB,KAC1B1Y,EAASlS,mBACb,kBAAM+lC,IAAwB3wB,QAAO,SAACC,GAAD,OAAOA,EAAEvP,KAAOuE,OACrD,CAACA,IAEGlH,EAAcN,YAAY2pB,KAC1B+B,EAAmB1rB,YAAY2rB,KAC/BvO,EAAcpd,YAAYojC,KAC1BtnC,EAAckE,YAAYwpB,KAC1BztB,EAAciE,YAAYypB,KAC1B2B,EAAgBprB,YAAY0pB,KAElC,IACErB,EACEvsB,IAAgB8E,KAAmB7E,EAC/BquB,KAAUtD,KACR,IAAIzc,YAAUrM,YAAgBjC,IAAc6nC,WAC5Cz9B,WACFilB,EACN,MAAO/tB,GACPgrB,EAAU+C,EAEZ,IAAM5P,EACJ0B,YAAkBwO,EAAkBprB,IAAgB,GAChDxD,EAAQkD,YAAYksB,KACpBzkB,EAAmBzH,YAAY6rB,KAC/Brd,EAAmBxO,YAAYgjC,KAC7BnhC,EAAkBvF,YAAiBgE,GAAnCuB,cACRshC,IAAsB30B,GAAkB,GACxC,IAAMiE,EAAqB/U,uBACzB,SAACiR,GACCzK,EAASwO,aAAe/D,EAAMhL,OAAO4F,UAEvC,CAACrF,IAEG6K,EAAkBrR,uBAAY,WAClCwG,EAAS8K,kBACR,CAAC9K,IACJ,OACE,qCACE,cAACmmB,GAAD,oDACA,cAACpb,GAAA,EAAD,CACEC,QAAM,EACNC,WAAS,EACTzT,QAAQ,WACR6N,MAAOjJ,EACP8O,SAAUqD,EACVpD,OAAQA,IAEV,cAAC/M,GAAA,EAAD,CAAelG,QAASkE,IACxB,cAACiP,GAAA,EAAD,CACEC,MAAM,oBACNL,WAAS,EACTzT,QAAQ,WACRF,UAAWD,EAAQ6S,cACnB7E,MAAOiS,EACPtZ,UAAU,IAEXkb,IAAgBte,IAAOC,UAAUC,YAChC,qCACE,cAACuQ,GAAA,EAAD,CACEC,MAAM,gBACNL,WAAS,EACTzT,QAAQ,WACRF,UAAWD,EAAQ6S,cACnB7E,MAAO6T,GAAe,GACtBlb,UAAU,IAEXtE,YAAW0C,GACV,cAACiP,GAAA,EAAD,CACE7T,QAAQ,WACR8T,MAAM,UACNL,WAAS,EACT3T,UAAWD,EAAQ6S,cACnB7E,MAAO8e,GAAW,GAClBnmB,UAAU,IAEV,QAEJ,KACJ,eAACiD,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAAWF,UAAWD,EAAQmS,MAA7D,UACE,eAACjS,EAAA,EAAD,sDAC2C,IACxC+N,IAAalJ,GAAamJ,KAF7B,0BAIC7L,YAAW0C,IACV,cAACmN,GAAD,CAAoB1B,WAAW,MAAM3P,QAASkE,OAGlD,cAAC,GAAD,CAAmBlE,QAASkE,IAC5B,cAACkC,EAAA,EAAD,CACEN,UAAWuF,EACXhF,QAASsM,EACT5M,YAAY,EACZrF,MAAO+E,GAAiB/E,EAJ1B,sBChIAjD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAAS0Y,KACtB,IAAMpX,EAAU1B,KACVyG,EAAcN,YAAY2pB,KAC1BuB,EAAgBlrB,YAAY2rB,KAC5BoY,EAAsB7mB,YAAkBgO,EAAe5qB,GAEvD+R,EACJ/R,GAAeyjC,EACb,qCACE,sCACA,cAACpzB,GAAD,CAAcvU,QAASkE,EAAahB,QAASykC,IAC7C,uCAAUv6B,IAAalJ,GAAamJ,WAGtC,GAGJ,OACE,cAAChO,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAKGuO,ICmDQ2xB,OA9Df,WACElc,IAA0B,GAC1BsB,IAAoB,GACpB,IAAMllB,EAAWC,cACX2O,EAAa9S,YAAYikC,KACzB/jC,EAAYF,YAAYsqB,KACxB3iB,EAAiB3H,YAAY8rB,KAC7BtrB,EAAcR,YAAYwqB,KAC1B0Z,EAAmBlkC,YAAYmkC,KAC/BjxB,GACHhT,GAAayH,GAAkBnH,KAAiB0jC,EASnD,OARArmC,qBAAU,WACR,GAAIqV,EAEF,OADAC,OAAOC,eAAiB,kBAAM,GACvB,WACLD,OAAOC,eAAiB,QAG3B,CAACF,IAEF,cAACG,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACC,EAAA,EAAD,CAAST,WAAYA,EAAYU,YAAY,WAA7C,UACE,eAACC,EAAA,EAAD,CACEC,SAAUZ,GAAc,EACxB5Q,SAAUgR,GAAqBgxB,EAFjC,UAIE,cAACvwB,EAAA,EAAD,CAAYlR,QAAS,kBAAMyB,EAAS0P,aAAQ,KAA5C,oBACA,cAACC,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAa,cAAC,GAAD,SAGrC,eAACW,EAAA,EAAD,CACEC,SAAUZ,GAAc,EACxB5Q,SAAUgR,GAAqBgxB,GAAmC,IAAfpxB,EAFrD,UAIE,cAACa,EAAA,EAAD,CAAYlR,QAAS,kBAAMyB,EAAS0P,aAAQ,KAA5C,oBACA,cAACC,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAa,cAAC,GAAD,SAGrC,eAACW,EAAA,EAAD,CAAMC,SAAUZ,GAAc,EAAG5Q,SAAUyF,EAA3C,UACE,cAACgM,EAAA,EAAD,CAAYzR,UAAQ,EAApB,sBACA,cAAC2R,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAW,cAAC,GAAD,SAGnC,eAACW,EAAA,EAAD,CAAMC,SAAUZ,GAAc,EAA9B,UACE,cAACa,EAAA,EAAD,CACElR,QAAS,kBAAMyB,EAAS0P,aAAQ,KAChC1R,UAAWyF,EAFb,wBAMA,cAACkM,EAAA,EAAD,UACGqwB,EAAmB,cAACtZ,GAAD,IAAoB,cAAC,GAAD,e,oBC7B9C/wB,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCmb,SAAU,CACRC,QAASpb,EAAMM,QAAQ,GACvB+a,gBAAiBza,IAAO0a,gCAE1B+uB,aAAc,CACZhqC,UAAWL,EAAMM,QAAQ,IAE3BgqC,kBAAmB,CACjBpqC,UAAW,UAEb0I,WAAY,CACVvI,UAAWL,EAAMM,QAAQ,IAE3BiqC,cAAe,CACbhjC,OAAQvH,EAAMM,QAAQ,GACtBJ,UAAW,cAIA,SAASsqC,KACtB,IAAMhpC,EAAU1B,KACV2qC,EAASC,eACf,EAAoCxoC,cAA5BC,EAAR,EAAQA,SAAU4lB,EAAlB,EAAkBA,cAClB,EAAsCrlB,mBAASuG,KAA/C,mBAAOmuB,EAAP,KAAoBuT,EAApB,KACA,EAAmCpoC,YAAiB60B,GAA5C90B,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cACjB,EAAsCpF,mBAAS,IAA/C,mBAAOmlC,EAAP,KAAoB+C,EAApB,KACA,EAA0CloC,mBAAS,IAAnD,mBAAOmoC,EAAP,KAAsBC,EAAtB,KACA,EAAsCpoC,mBAAS,IAA/C,mBAAOqoC,EAAP,KAAoBC,EAApB,KACA,EAAoDtoC,wBAElD4C,GAFF,mBAAOuR,EAAP,KAA2Bo0B,EAA3B,KAGA,EAAoCvoC,wBAElC4C,GAFF,mBAAO4lC,EAAP,KAAmBC,EAAnB,KAGA,EAAkCzoC,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACMkoC,EAAoBznC,uBAAY,SAACiR,GACrC+1B,EAAe/1B,EAAMhL,OAAO4F,SAC3B,IACGsF,EAAoBnR,uBAAY,SAACiR,GACrCg2B,EAAeh2B,EAAMhL,OAAO4F,SAC3B,IACG67B,EAAsB1nC,uBAAY,SAACiR,GACvCk2B,EAAiBl2B,EAAMhL,OAAO4F,SAC7B,IACH1L,qBAAU,WACR,IAAI6K,GAAY,EA+FhB,OA9FAq8B,EAAe,IACfC,OAAsB3lC,GACtB6lC,OAAc7lC,GAEZhD,GACAH,GACA4lB,GACAlkB,YAAWuzB,IACXyQ,GACAgD,EAEIrQ,GAAuBqN,GACzB,wBAAC,iCAAAl9B,EAAA,6DACCzH,GAAa,GADd,kBAGuB42B,GAAe+N,EAAa1lC,GAHnD,cAGSy3B,EAHT,gBAIwBI,GAAMJ,GAJ9B,oDAMyCS,GAClCT,EACAiR,EACA9iB,GATP,eAMWujB,EANX,iBAWwBvc,aACjBD,aAA4BsI,GAC5Bj1B,EACA0lC,EACAgD,EACAzT,GAhBP,QAWW3qB,EAXX,OAkBUkC,IACHzL,GAAa,GACb+nC,EAAsBK,GACtBH,EAAc1+B,IArBrB,wBAuBekC,IACVzL,GAAa,GACb8nC,EACE,uEA1BP,0DA8BG3iC,QAAQtF,MAAR,MACK4L,IACHzL,GAAa,GACb8nC,EACE,uEAlCP,yDAAD,GAwCAA,EAAe,mBAER5T,IAAgBvwB,KAAmBghC,GAC5C,wBAAC,qCAAAl9B,EAAA,sEAEGzH,GAAa,GAFhB,SAG4Bga,GAAgB,CAAC2qB,IAH7C,wCAGU1pB,EAHV,8BAKW3Z,EAAa,IAAIC,aAAWC,IAAa,aALpD,UAMwByqB,aACjB3qB,EACA0qB,IACA2Y,GATP,QAMWp7B,EANX,OAWUkC,IACHzL,GAAa,GACb+nC,EAAsB,CACpB/5B,OAAQ,IACR4S,SAAU,EACV1M,QAASywB,EACT75B,UAAW,GACX0kB,SAAU,EACVzO,eAAgB,IAChBsD,IAAKpJ,EAAS9Y,KAAKkiB,MAErB4jB,EAAc1+B,IAtBrB,wBAyBUkC,IACHzL,GAAa,GACb8nC,EAAe,4BA3BtB,0DA+BG3iC,QAAQtF,MAAR,MACK4L,IACHzL,GAAa,GACb8nC,EAAe,kBAlCpB,yDAAD,GAuCK,WACLr8B,GAAY,KAEb,CACDrM,EACAH,EACA4lB,EACAqP,EACAyQ,EACAgD,IAEF,IAAMU,EACJL,GACAA,EAAW7oC,SACX6oC,EAAWvoC,cACXwgB,YACErX,aAAgBo/B,EAAWvoC,cAC3BuoC,EAAW7oC,SAETmpC,GACH3nC,YAAWuzB,IAAgBtvB,GAAkBijC,EAChD,OACE,gCACE,cAACzxB,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACnY,EAAD,CAAYE,OAAK,EAACC,OAAK,EAAvB,mCAIF,cAAC+X,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACuD,GAAA,EAAD,CAAMrb,UAAWD,EAAQ2Z,SAAzB,UACE,cAAC/P,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAA/B,iIAIA,cAAC6T,GAAA,EAAD,CACEL,QAAM,EACNxT,QAAQ,WACR8T,MAAM,QACNjG,MAAO4nB,EACP/hB,SAAU+1B,EACVh2B,WAAS,EACT7N,OAAO,SAPT,SASG4hC,IAAwB3wB,QAAO,gBAAGtP,EAAH,EAAGA,GAAH,QAC9BuhC,IAAiBluB,IAAYC,SAAStT,MACtC+H,KAAI,gBAAG/H,EAAH,EAAGA,GAAIwG,EAAP,EAAOA,KAAP,OACJ,cAAC+7B,GAAA,EAAD,CAAmBj8B,MAAOtG,EAA1B,SACGwG,GADYxG,QAKlBrF,YAAWuzB,GACV,cAAC7uB,GAAA,EAAD,CAAelG,QAAS+0B,IACtB,KACJ,cAAC5hB,GAAA,EAAD,CACEJ,WAAS,EACTzT,QAAQ,WACR4F,OAAO,SACPkO,MAAM,mBACNjG,MAAOq4B,EACPxyB,SAAUP,IAEXjR,YAAWuzB,GACV,cAAC5hB,GAAA,EAAD,CACEJ,WAAS,EACTzT,QAAQ,WACR4F,OAAO,SACPkO,MAAM,kBACNjG,MAAOq7B,EACPx1B,SAAUg2B,IAEV,KACHG,GACC,cAAC9pC,EAAA,EAAD,CAAY+8B,MAAM,SAAS/4B,MAAM,QAAjC,SACG8lC,KAED,KACHvoC,EACC,qBAAKxB,UAAWD,EAAQ+oC,cAAxB,SACE,cAAC/hC,EAAA,EAAD,MAEA,KACHqO,EACC,cAACgmB,GAAD,CAAWrtB,MAAOqH,EAAoBxU,QAAS+0B,IAC7C,KACH8T,EACC,qCACE,cAACxpC,EAAA,EAAD,CACEC,QAAQ,KACRwiC,cAAY,EACZ1iC,UAAWD,EAAQ6oC,aAHrB,yBAOA,eAAC3oC,EAAA,EAAD,CAAYC,QAAQ,QAAQwiC,cAAY,EAAxC,oBACU10B,IAAay7B,EAAW7oC,SAASqN,QAE3C,eAAChO,EAAA,EAAD,CAAYC,QAAQ,QAAQwiC,cAAY,EAAxC,sBACYoH,KAEXL,EAAW7oC,UAAYwE,IAAkB,KACxC,eAACnF,EAAA,EAAD,CAAYC,QAAQ,QAAQwiC,cAAY,EAAxC,uBACa+G,EAAW5c,WAG1B,qBAAK7sB,UAAWD,EAAQ8oC,kBAAxB,SACGY,EAAW7oC,UAAYwE,IACtB,cAAC6C,EAAA,EAAD,CACEC,KAAI,mCAA8B4hC,GAClC3hC,OAAO,SACPC,IAAI,sBACJiO,QAAS,cAACspB,GAAA,EAAD,IACT3/B,UAAWD,EAAQoH,WACnBjH,QAAQ,WANV,6BAUEupC,EAAW7oC,UAAY+G,IACzB,cAACM,EAAA,EAAD,CACEC,KAAI,oCAA+B4hC,EAA/B,cAAoDL,EAAW5c,SACnE1kB,OAAO,SACPC,IAAI,sBACJiO,QAAS,cAACspB,GAAA,EAAD,IACT3/B,UAAWD,EAAQoH,WACnBjH,QAAQ,WANV,6BAUEupC,EAAW7oC,UAAYgH,IACzB,cAACK,EAAA,EAAD,CACEC,KAAI,0CAAqC4hC,EAArC,YAAwDL,EAAW5c,SACvE1kB,OAAO,SACPC,IAAI,sBACJiO,QAAS,cAACspB,GAAA,EAAD,IACT3/B,UAAWD,EAAQoH,WACnBjH,QAAQ,WANV,6BAUEupC,EAAW7oC,UAAYiH,IACzB,cAACI,EAAA,EAAD,CACEC,KAAI,qCAAgC4hC,EAAhC,cAAqDL,EAAW5c,SACpE1kB,OAAO,SACPC,IAAI,sBACJiO,QAAS,cAACspB,GAAA,EAAD,IACT3/B,UAAWD,EAAQoH,WACnBjH,QAAQ,WANV,+BAWA,cAAC+H,EAAA,EAAD,CACEC,KAAI,oCAA+B4hC,EAA/B,YAAkDL,EAAW5c,SACjE1kB,OAAO,SACPC,IAAI,sBACJiO,QAAS,cAACspB,GAAA,EAAD,IACT3/B,UAAWD,EAAQoH,WACnBjH,QAAQ,WANV,kCAaJ,a,8CCxPCgvB,OA/Ef,WACE,MACE+a,eADMxjC,EAAR,EAAQA,YAAayjC,EAArB,EAAqBA,kBAAmBxjC,EAAxC,EAAwCA,SAAUC,EAAlD,EAAkDA,WAE5C7B,EAAcN,YAAYO,MAC1B6c,EAAcpd,YAAYqjC,MAChC,EAAmC/mC,YAAiBgE,GAA5CjE,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cAEX8jC,EACJrlC,IAAgB0C,KAChBoa,GACAA,EAAYka,gBAAkBlJ,IAAakJ,cACvCsO,EACJtlC,IAAgB4C,KAChBka,GACAA,EAAYka,gBAAkB9I,IAAqB8I,cAC/CuO,EACJvlC,IAAgB6C,KAChBia,GACAA,EAAYka,gBAAkB3I,IAAa2I,cACvCwO,EACJxlC,IAAgB8C,KAChBga,GACAA,EAAYka,gBAAkBvI,IAAeuI,cACzCyO,EACJzlC,IAAgB+C,KAChB+Z,GACAA,EAAYka,gBAAkBnI,IAAcmI,cACxC0O,EACJ1lC,IAAgBM,KAChBwc,GACAA,IAAgByQ,IACZoY,EACJN,GACAC,GACAC,GACAC,GACAC,GACAC,EACF,EAA8CvpC,oBAAS,GAAvD,mBAAOypC,EAAP,KAAwBC,EAAxB,KACMC,EAAqB1oC,uBAAY,WACrCyoC,GAAoBD,KACnB,CAACA,IAEJ,OACE,qCACE,cAAC7b,GAAD,qDACA,cAAC/nB,GAAA,EAAD,CAAelG,QAASkE,IACvB2lC,GACC,cAACI,GAAA,EAAD,CACEC,QACE,cAACC,GAAA,EAAD,CACEC,QAASN,EACT92B,SAAUg3B,EACV3mC,MAAM,YAGV+P,MAAM,4CAGTlP,IAAgBM,IACf,cAACgc,GAAD,IACE,KAEJ,cAACpa,EAAA,EAAD,CAEEN,UAAW7F,GAAW6F,EACtBO,QACEwjC,GAAoBC,EAAkBR,EAAoBzjC,EAE5DE,WAAYA,EACZrF,MAAO+E,EAPT,oBAWA,cAAC/B,GAAD,Q,qBCxFAjG,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC0sC,UAAW,CACTllC,QAAS,QACTD,OAAO,GAAD,OAAKvH,EAAMM,QAAQ,GAAnB,oBAIK,SAASqsC,KACtB,IAAMnrC,EAAU1B,KACVkyB,EAA2B/rB,YAC/B4+B,MAEIt+B,EAAcN,YAAYO,MAC1B6c,EAAcpd,YAAYqjC,MAChC,EAIIpnC,cAHFC,EADF,EACEA,SACA4lB,EAFF,EAEEA,cAGIvlB,EALN,EAGEH,UAE0CI,aAAc8D,GACpD2B,EAAcvE,uBAAY,WAC1BxB,GAAYkhB,GAAe0E,GAAiBvlB,GAC9C,wBAAC,mCAAAmI,EAAA,+EAEuBgvB,GAAiBtW,EAAalhB,GAFrD,cAESy3B,EAFT,gBAGsCC,GACjCD,EACA7R,GALL,uBAGWjR,EAHX,EAGWA,OAAQgN,EAHnB,EAGmBA,SAHnB,UAO2B8oB,OAP3B,eAQYC,QAAQ,CACfC,OAAQ,oBACRliB,OAAQ,CACNzJ,KAAM,QACNqgB,QAAS,CACPj8B,QAAS8d,EACTvM,QACEA,IAAM,OACNkb,QADM,IACNA,OADM,EACNA,EAA0Blb,SAC1B,MACA6nB,OAAO,EAAG,GACZ7a,eAnBT,kDAyBGzb,QAAQtF,MAAR,MAzBH,yDAAD,KA6BD,CACDZ,EACAkhB,EACA0E,EACAvlB,EACAwvB,IAEF,OAAO7vB,GACL4lB,GACA1E,GACAxf,YAAW0C,IACX/D,EACA,cAACkH,EAAA,EAAD,CACEhB,QAASR,EACT4B,KAAK,QACLnI,QAAQ,WACRF,UAAWD,EAAQkrC,UAJrB,6BAQE,KC5EN,IAAM5sC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAAS2wB,KACtB,IAAMrvB,EAAU1B,KACVqK,EAAWC,cACX7D,EAAcN,YAAYO,MAC1BG,EAAWV,YAAYW,MACvByD,EAAmB1G,uBAAY,WACnCwG,EAASG,kBACR,CAACH,IAKJ,OACE,qCACE,cAACzI,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAJF,mHAWGpD,EAAW,cAACkC,GAAD,CAAQxG,QAASkE,EAAaoC,GAAIhC,IAAe,KAC7D,cAACgmC,GAAD,IACA,cAAClkC,EAAA,EAAD,CAAkBC,QAAS2B,EAA3B,sC,gDCuBN,WACEF,EACAK,EACAC,EACAkjB,EACA7J,EACA5S,EACA4f,EACAC,EACAxZ,EACAlV,GAVF,0BAAAsI,EAAA,yDAYER,EAASS,cAAa,IAZxB,SAcUmiC,EAAexmB,sBAAWrV,EAAQ4S,IACxBvM,EAfpB,gCAgBcy1B,YACJhpC,aAA8B3B,GAC9BoI,EACAsiC,EACAjc,EACAC,GArBV,2DAuBcC,YACJhtB,aAA8B3B,GAC9BoI,EACAkjB,EACAof,EACAjc,EACAC,GA7BV,mCAeUjmB,EAfV,KA+BIX,EACE8mB,aAAc,CAAE/nB,GAAI4B,EAAQE,gBAAiBC,MAAOH,EAAQI,eAE9DV,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,qCAELC,EAAWC,YACfT,EACAU,YAAyBnJ,IAErBoJ,EAAiBC,YACrB1H,aAA8B3B,IAEhCmI,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAhB,4BA7Cf,UA+C+BM,aACzBtJ,EACAoJ,EACAH,EAASc,YAlDf,iBA+CYR,EA/CZ,EA+CYA,SAKRzB,EAAS0B,aAAgBC,aAAgBF,KACzCpB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,kCAtDf,kDAyDIhD,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QAE9C5B,EAASS,cAAa,IA7D1B,2D,sEAiEA,WACET,EACAK,EACAyB,EACAilB,EACAjJ,EACAzG,EACAtQ,EACA4S,EACAvd,EACA4qB,EACA5Z,EACA6Z,EACArvB,GAbF,oCAAA4I,EAAA,6DAeER,EAASS,cAAa,IAfxB,SAiBUpG,EAAa,IAAIC,aAAWC,IAAa,aACzCqoC,EAAexmB,sBAAWrV,EAAQ4S,GAAUlT,WAC5C0gB,EAAgBF,EAClBG,mBAAQttB,YAAgBmtB,GAAmB,SAC3C9rB,EACE2nC,EAAU11B,EACZ21B,aACE1oC,EACA2H,IACAvH,IACAssB,EACA6b,EACA5b,EACA5qB,GAEFirB,YACEhtB,EACA2H,IACAvH,IACAssB,EACAjJ,EACAzG,EACAurB,EACA5b,EACA5qB,EACA+qB,EACAvvB,GA3CV,SA6C8BkrC,EA7C9B,cA6CU5gC,EA7CV,iBA8CuBC,aAAmBL,EAAQzH,EAAY6H,GA9C9D,eA8CUE,EA9CV,OA+CI/B,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,qCAhDf,UAkDuB7G,EAAWgI,eAAeD,GAlDjD,WAkDUE,EAlDV,8BAoDY,IAAIC,MAAM,yDApDtB,eAsDIvC,EAAS8mB,aAAc,CAAE/nB,GAAIqD,EAAMtB,MAAOwB,EAAKE,QACzCrB,EAAWsB,YAA2BH,GAvDhD,UAwDiCI,YAC3BjI,KAzDN,eAwDU6G,EAxDV,OA2DIjB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAhB,4BA5Df,UA8D+BM,aACzB9E,IACA4E,EACAH,GAjEN,iBA8DYM,EA9DZ,EA8DYA,SAMRzB,EAAS0B,aAAgBC,aAAgBF,KACzCpB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,kCAtEf,kDAyEIhD,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QAE9C5B,EAASS,cAAa,IA7E1B,2D,sEAiFA,WACET,EACAK,EACAyB,EACAa,EACAoE,EACA4S,EACAvd,EACA4qB,GARF,8BAAAxmB,EAAA,6DAUER,EAASS,cAAa,IAVxB,SAYUmiC,EAAexmB,sBAAWrV,EAAQ4S,GAAU1X,WAZtD,SAauB+gC,aACjBlhC,EAAOe,aACPzI,IACAuI,EACAigC,EACAxmC,EACA4qB,GAnBN,cAaUic,EAbV,gBAsByBlgC,aACnBjB,EACAmhC,EACA,gCAzBN,cAsBUtoC,EAtBV,iBA4BuBqI,aAAsBrI,GA5B7C,WA4BU2H,EA5BV,OA6BItC,EAAS8mB,aAAc,CAAE/nB,GAAIuD,EAAKW,OAAQnC,MAAOwB,EAAK/E,UACtD8C,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,qCAELC,EAAW+B,YAA0BZ,GAjC/C,uBAmCY,IAAIC,MAAM,sBAnCtB,yBAqCiCY,YAC3B/I,KAtCN,eAqCUkH,EArCV,OAwCIjB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAhB,4BAzCf,UA2C+BM,aACzBzH,IACAuH,EACAH,GA9CN,iBA2CYM,EA3CZ,EA2CYA,SAKRpB,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,UAAhB,kCAEXlB,EAAS0B,aAAgBC,aAAgBF,KAnD7C,kDAqDIvD,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBU,aAAW,EAAD,QAE9C5B,EAASS,cAAa,IAzD1B,2D,sBA6DO,SAASyiC,KACd,IAAMljC,EAAWC,cACTI,EAAoBgD,cAApBhD,gBACFiD,EAAcxH,YAAYgoB,MAC1BvjB,EAAczE,YAAYkoB,MAC1BpsB,EAAckE,YAAY6c,MAC1B9gB,EAAciE,YAAY8c,MAC1B7R,EAASjL,YAAYqnC,KACrB/mC,EAAcN,YAAYO,MAC1B2qB,ECnRO,WACb,IAAMQ,EAAmB1rB,YAAYgd,MAKrC,OAJsB7f,mBACpB,kBAAOuuB,EAAmB1tB,YAAgB0tB,QAAoBrsB,IAC9D,CAACqsB,ID+QmB4b,GAChB7/B,EAAmBzH,YAAYunC,MAC/BrnC,EAAYF,YAAYG,MACxBwH,EAAiB3H,YAAYwnC,KAC3BhjC,EAAWvI,cAAXuI,OACFqD,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtBC,EAAcC,eACd8jB,EAA2B/rB,YAC/B4+B,MAEI5S,EAAoB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAA0BhkB,UACjD8V,EAAQ,OAAGkO,QAAH,IAAGA,OAAH,EAAGA,EAA0BlO,SACrCvM,GAAmC,OAAxBya,QAAwB,IAAxBA,OAAA,EAAAA,EAA0Bxa,iBAAiB,EACtDrP,GAAYuF,GAAoBvH,GAAayH,EAC7CskB,EAAsBvuB,uBAAY,WAGpCE,YAAW4J,IACThD,GACAC,QACWpF,IAAbwe,GACEqN,E,uDAEF/iB,CACEjE,EACAK,EACAC,EACAC,EACAoZ,EACA5S,EACA3K,EACA4qB,EACA5Z,EACA9J,GAGFA,IAAgB5G,KACdiH,GACA9B,GACAtB,GACAunB,GACAd,QACW7rB,IAAbwe,E,6DAEAzV,CACElE,EACAK,EACAsD,EACA9B,EAAMI,WACN6lB,EACAvnB,EACAwG,EACA4S,EACAvd,EACA4qB,EACA5Z,EACAvV,EACAD,GAGF0L,IAAgBvJ,KACd+J,GACAvD,QACWpF,IAAbwe,GACEqN,G,mDAEF7iB,CACEnE,EACAK,EACAyD,EACAvD,EACAwG,EACA4S,EACAvd,EACA4qB,KAIH,CACDhnB,EACAK,EACAiD,EACAhD,EACAqD,EACA9B,EACAiC,EACAgkB,EACAvnB,EACAwG,EACA4S,EACAvd,EACA4qB,EACAnvB,EACAD,EACAwV,IAEF,OAAOnU,mBACL,iBAAO,CACL8E,YAAagqB,EACb/pB,WACAC,WAAYjC,KAEd,CAAC+rB,EAAqB/pB,EAAUhC,I,0BE9W9BunC,GAAkB,CACtB,6CACA,iDACA,qDAGIC,GAAc,aAIdC,GAAmB,yCAAG,WAC1BroC,EACApD,GAF0B,0BAAAwI,EAAA,6DAIpBgH,EAAW,IAAI5M,IAAO8oC,SAAStoC,EAASmoC,GAAiBvrC,GAJrC,SAKayM,QAAQ0O,IAAI,CACjD3L,EAASjC,OAAOxK,MAAMyoC,IACtBh8B,EAASmF,SAAS5R,MAAMyoC,IACxBh8B,EAASmS,WAAW5e,MAAMyoC,MARF,0CAKnBj+B,EALmB,KAKboH,EALa,KAKLgN,EALK,uBAUnB,CAAE/M,UAAWrH,EAAMoH,SAAQgN,aAVR,2CAAH,wDAanBgqB,GAAgB,yCAAG,WAAOlwB,EAAqBzb,GAA5B,oBAAAwI,EAAA,6DACjByS,EAAmC,GACzCQ,EAAUM,SAAQ,SAAC3Y,GACjB6X,EAASnT,KAAK2jC,GAAoBroC,EAASpD,OAHtB,SAKIyM,QAAQ0O,IAAIF,GALhB,cAKjB2wB,EALiB,OAMjBv6B,EAAS,IAAIyK,IACnBL,EAAUM,SAAQ,SAAC3Y,EAAS0zB,GAC1BzlB,EAAO8K,IAAI/Y,EAASwoC,EAAa9U,OARZ,kBAWhBzlB,GAXgB,2CAAH,wDA8DPw6B,OAhDf,SACEpwB,EACAvb,GAEA,IAAQC,EAAYC,YAAiBF,GAAS,GAAtCC,QACAH,EAAaD,cAAbC,SAER,EAAoCO,oBAAS,GAA7C,mBAAO0C,EAAP,KAAmB6oC,EAAnB,KACA,EAA0BvrC,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,mBAA0C,MAAlE,mBAAO2C,EAAP,KAAamkB,EAAb,KA4BA,OA1BA1lB,qBAAU,WACR,IAAI6K,GAAY,EAoBhB,OAnBIiP,EAAUpN,QAAUrO,GAAYG,GAAWuB,YAAWxB,KACxD4rC,GAAc,GACdjrC,EAAS,IACTwmB,EAAQ,MACRskB,GAAiBlwB,EAAWzb,GAAU0C,MACpC,SAAC0L,GACM5B,IACH6a,EAAQjZ,GACR09B,GAAc,OAGlB,WACOt/B,IACH3L,EAAS,wCACTirC,GAAc,QAKf,WACLt/B,GAAY,KAEb,CAACiP,EAAWzb,EAAUG,EAASD,IAE3Be,mBACL,iBAAO,CACLiC,OACAD,aACArC,QACAyC,WAAY,QAEd,CAACH,EAAMD,EAAYrC,KCtFjB6qC,GAAmB,yCAAG,WAAOroC,EAAiBpB,GAAxB,UAAAwG,EAAA,+EAC1BxG,EAAI2jC,KACDC,cAAcxiC,EAAS,CACtByiC,WAAY,KAEbnjC,MACC,kBACG,CACCiS,OAFJ,EAAGA,OAGCC,UAHJ,EAAWrH,KAIPoU,SAJJ,EAA4BA,cANN,2CAAH,wDAcnBoqB,GAAkB,yCAAG,WAAOtwB,GAAP,sBAAAjT,EAAA,6DACnBxG,EAAM,IAAIC,YAAUC,KACpB+Y,EAAqC,GAC3CQ,EAAUM,SAAQ,SAAC3Y,GACjB6X,EAASnT,KAAK2jC,GAAoBroC,EAASpB,OAJpB,SAMEyK,QAAQ0O,IAAIF,GANd,cAMnB2wB,EANmB,OAOnBv6B,EAAS,IAAIyK,IACnBL,EAAUM,SAAQ,SAAC3Y,EAAS0zB,GAC1BzlB,EAAO8K,IAAI/Y,EAASwoC,EAAa9U,OATV,kBAYlBzlB,GAZkB,2CAAH,sDA2DT26B,GA5CU,SACvBvwB,GAEA,MAAoClb,oBAAS,GAA7C,mBAAO0C,EAAP,KAAmB6oC,EAAnB,KACA,EAA0BvrC,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,mBAA4C,MAApE,mBAAO2C,EAAP,KAAamkB,EAAb,KA4BA,OA1BAzL,2BAAgB,WACd,IAAIpP,GAAY,EAoBhB,OAnBIiP,EAAUpN,SACZy9B,GAAc,GACdjrC,EAAS,IACTwmB,EAAQ,MACR0kB,GAAmBtwB,GAAW/Y,MAC5B,SAAC0L,GACM5B,IACH6a,EAAQjZ,GACR09B,GAAc,OAGlB,WACOt/B,IACH3L,EAAS,wCACTirC,GAAc,QAKf,WACLt/B,GAAY,KAEb,CAACiP,IAEGxa,mBACL,iBAAO,CACLiC,OACAD,aACArC,QACAyC,WAAY,QAEd,CAACH,EAAMD,EAAYrC,KCpCjBqrC,GAAmB,SAACjkC,GACxBA,EAASyV,MACToW,KAAM3O,IAAIgnB,KAA0BxpC,MAClC,SAACoxB,GACC9rB,EAASwV,GAAqBsW,EAAS5wB,UAEzC,SAACtC,GACCoH,EAAS0V,GAAmB,iDAKnByuB,GA7BU,SAACvtB,GACxB,IAAMlC,EAAgB5Y,YAAYsoC,KAC5BpkC,EAAWC,cACX0wB,EACJ/Z,SACwBzb,IAAvBuZ,EAAcxZ,MACW,OAAvBwZ,EAAcxZ,OAAkBwZ,EAAczZ,YAQnD,OANAtB,qBAAU,WACJg3B,GACFsT,GAAiBjkC,KAElB,CAAC2wB,EAAoB3wB,IAEjB0U,GCuEM,SAAS2vB,GACtBnsC,EACAub,GAEA,IAAMiB,EAAgByvB,GAAiBjsC,IAAY6B,KAC7Cya,EAAiBiC,KAEjB6tB,EAAkBrrC,mBAAQ,WAC9B,OAAOf,IAAYwE,IAAkB+W,EAAY,KAChD,CAACvb,EAASub,IACP8wB,EAAiBtrC,mBAAQ,WAC7B,OAAOf,IAAY6B,IAAiB0Z,EAAY,KAC/C,CAACvb,EAASub,IACP+wB,EAAoBvrC,mBAAQ,WAChC,OAAOS,YAAWxB,GAAWub,EAAY,KACxC,CAACvb,EAASub,IAEP2G,EAAe5G,GAAgB8wB,GAC/BG,EAAgBT,GAAiBO,GACjCG,EAAcb,GAAeW,EAAmBtsC,GAEhDmR,EAAoDpQ,mBACxD,kBACEf,IAAYwE,IA9Gc,SAC9B+W,EACAe,EACA4F,GAEA,IAAMnf,EAAauZ,EAAevZ,aAAf,OAA6Bmf,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcnf,YACxDrC,EAAQ4b,EAAe5b,QAAf,OAAwBwhB,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAcnf,YAC9CI,EAAamZ,EAAenZ,aAAf,OAA6B+e,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAc/e,YACxDH,EAAO,IAAI4Y,IAejB,OAdAL,EAAUM,SAAQ,SAAC3Y,GAAa,IAAD,QACvBwgC,EAAQ,OAAGxhB,QAAH,IAAGA,GAAH,UAAGA,EAAclf,YAAjB,aAAG,EAAoBgiB,IAAI9hB,GACnCupC,EAAS,UAAGnwB,EAAetZ,YAAlB,aAAG,EAAqB+L,MAAK,SAACgN,GAAD,OAAOA,EAAE7Y,UAAYA,KAE3D2hC,EAAM,CACVpwB,QAAgB,OAARivB,QAAQ,IAARA,GAAA,UAAAA,EAAU1gC,YAAV,eAAgByR,UAAhB,OAA0Bg4B,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAWh4B,cAAUxR,EACvDoX,MAAe,OAAToyB,QAAS,IAATA,OAAA,EAAAA,EAAWxnB,eAAWhiB,EAC5ByR,WAAmB,OAARgvB,QAAQ,IAARA,GAAA,UAAAA,EAAU1gC,YAAV,eAAgBqK,QAAhB,OAAwBo/B,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAWp/B,YAAQpK,EACtDwe,UAAmB,OAATgrB,QAAS,IAATA,OAAA,EAAAA,EAAWhrB,gBAAYxe,EACjCypC,IAAKhJ,GAEP1gC,EAAKiZ,IAAI/Y,EAAS2hC,MAGb,CACL9hC,aACArC,QACAyC,aACAH,QAoFM2pC,CAAwBP,EAAiB9vB,EAAgB4F,GACzD1gB,YAAWxB,GApDQ,SAC3Bub,EACAqxB,GAEA,IAAM7pC,EAAa6pC,EAAY7pC,WACzBrC,EAAQksC,EAAYlsC,MACpByC,EAAaypC,EAAYzpC,WACzBH,EAAO,IAAI4Y,IAYjB,OAXAL,EAAUM,SAAQ,SAAC3Y,GAAa,IAAD,EACvB2pC,EAAI,UAAGD,EAAY5pC,YAAf,aAAG,EAAkBgiB,IAAI9hB,GAC7B2hC,EAAM,CACVpwB,QAAY,OAAJo4B,QAAI,IAAJA,OAAA,EAAAA,EAAMp4B,cAAUxR,EACxBoX,KAAMgX,KAAcrM,IAAI9hB,KAAlB,OAA8B2pC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMxyB,YAAQpX,EAClDyR,WAAe,OAAJm4B,QAAI,IAAJA,OAAA,EAAAA,EAAMn4B,iBAAazR,EAC9Bwe,SAAQ,OAAEorB,QAAF,IAAEA,OAAF,EAAEA,EAAMprB,UAElBze,EAAKiZ,IAAI/Y,EAAS2hC,MAGb,CACL9hC,aACArC,QACAyC,aACAH,QA8BM8pC,CAAqBR,EAAmBE,GACxCxsC,IAAY6B,IAnFS,SAC7B0Z,EACAiD,EACA+tB,GAEA,IAAMxpC,EAAayb,EAASzb,YAAcwpC,EAAcxpC,WAClDrC,EAAQ8d,EAAS9d,OAAS6rC,EAAc7rC,MACxCyC,EAAaqb,EAASrb,YAAcopC,EAAcppC,WAClDH,EAAO,IAAI4Y,IAajB,OAZAL,EAAUM,SAAQ,SAAC3Y,GAAa,IAAD,IACvB4Y,EAAQ,UAAGywB,EAAcvpC,YAAjB,aAAG,EAAoBgiB,IAAI9hB,GACnCupC,EAAS,UAAGjuB,EAASxb,YAAZ,aAAG,EAAe+pC,QAAQ7pC,GACnC2hC,EAAM,CACVpwB,QAAiB,OAATg4B,QAAS,IAATA,OAAA,EAAAA,EAAWh4B,UAAX,OAAqBqH,QAArB,IAAqBA,OAArB,EAAqBA,EAAUrH,cAAUxR,EACjDoX,MAAe,OAAToyB,QAAS,IAATA,OAAA,EAAAA,EAAWO,QAAX,OAAmBlxB,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAUzB,YAAQpX,EAC3CyR,WAAoB,OAAT+3B,QAAS,IAATA,OAAA,EAAAA,EAAWp/B,QAAX,OAAmByO,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAUpH,iBAAazR,EACrDwe,UAAkB,OAAR3F,QAAQ,IAARA,OAAA,EAAAA,EAAU2F,gBAAYxe,GAElCD,EAAKiZ,IAAI/Y,EAAS2hC,MAGb,CACL9hC,aACArC,QACAyC,aACAH,QA2DMiqC,CAAuBZ,EAAgB7vB,EAAe+vB,GACtDhwB,iBACN,CACEvc,EACAosC,EACA9vB,EACA4F,EACAoqB,EACAE,EACAH,EACAE,EACA/vB,IAIJ,OAAOrL,EC+BM+7B,OApKf,WAA4C,IAAD,YACnCplC,EAAWC,cACX7D,EAAcN,YAAYO,MAC1B6c,EAAcpd,YAAYqjC,MAC1BkG,EAAqBpsC,mBACzB,kBAAOigB,EAAc,CAACA,GAAe,KACrC,CAACA,IAEGlF,EAAWqwB,GAAYjoC,EAAaipC,GACpCz4B,EACHsM,IAAW,UAAIlF,EAAS9Y,YAAb,iBAAI,EAAegiB,IAAIhE,UAAvB,aAAI,EAAiCtM,iBAAczR,EAC3DwR,EACHuM,IAAW,UAAIlF,EAAS9Y,YAAb,iBAAI,EAAegiB,IAAIhE,UAAvB,aAAI,EAAiCvM,cAAWxR,EACxDoX,EACH2G,IAAW,UAAIlF,EAAS9Y,YAAb,iBAAI,EAAegiB,IAAIhE,UAAvB,aAAI,EAAiC3G,YAASpX,EACtDwI,EAAeC,eACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtBC,EAAcC,eACpB,EAIIhM,cAHFC,EADF,EACEA,SACA4lB,EAFF,EAEEA,cAGIvlB,EALN,EAGEH,UAE0CI,aAAc8D,GACpDkpC,EAAsBtxB,EAAS9Y,MAAQ8Y,EAASpb,MACtDe,qBAAU,WAGR,GADAqG,EAASulC,kBAA4BpqC,IAChC+d,GAAgBosB,EAArB,CAGA,IAAI9gC,GAAY,EAEhB,GAAIpI,IAAgBrC,KAAkB+J,EAAa,CACjD,IAAM9J,EAAM,IAAIC,YAAUC,KAC1BF,EAAI2jC,KACDC,cAAc1kB,EAAa,CAC1B2kB,WAAY,KAEbnjC,MAAK,SAAC4H,GAAD,OACJtI,EAAI2jC,KACDC,cAAc1kB,EAAa,CAC1BnT,QAAS,CACP3K,QAAS0I,EAAYmC,iBAGxBvL,MAAK,SAACqL,GACDA,GAAWzD,GACbtC,EACEulC,aACEjd,GACE,GACA,GACAviB,EAAQA,QAAQ9D,WAChBK,EAAKqX,SACLyP,OAAO/hB,uBAAYtB,EAAQA,QAASzD,EAAKqX,WACzCtS,uBAAYtB,EAAQA,QAASzD,EAAKqX,UAClChN,EACAC,EACA2F,WAQlB,GAAInW,IAAgBM,KAAmBmF,EAAO,CAC5C,IAAIqS,EACJ,IACEA,EAAO,IAAI/N,YAAU+S,GACrB,MAAO/f,GACP,OAEiB,IAAImB,aAAWC,IAAa,aAE5C6xB,8BAA8BvqB,EAAO,CAAEqS,SACvCxZ,MAAK,YAAgB,IAEA,4BAFb2K,EAAY,EAAZA,MACFb,GACCa,EAAMgB,QACRrG,EACEulC,aACEjd,GACEjjB,EAAM,GAAG0jB,OAAO9mB,WADM,UAEtBoD,EAAM,GAAGiO,QAAQpY,KAAK0e,cAFA,iBAEtB,EAA8BtX,YAFR,aAEtB,EAAoC4R,KAFd,UAGtB7O,EAAM,GAAGiO,QAAQpY,KAAK0e,cAHA,iBAGtB,EAA8BtX,YAHR,iBAGtB,EAAoCuX,mBAHd,aAGtB,EAAiD9S,OAH3B,UAItB1B,EAAM,GAAGiO,QAAQpY,KAAK0e,cAJA,iBAItB,EAA8BtX,YAJR,iBAItB,EAAoCuX,mBAJd,aAItB,EAAiDF,SAJ3B,UAKtBtU,EAAM,GAAGiO,QAAQpY,KAAK0e,cALA,iBAKtB,EAA8BtX,YALR,iBAKtB,EAAoCuX,mBALd,aAKtB,EAAiD0O,SAL3B,UAMtBljB,EAAM,GAAGiO,QAAQpY,KAAK0e,cANA,iBAMtB,EAA8BtX,YANR,iBAMtB,EAAoCuX,mBANd,aAMtB,EACIC,eACJnN,EACAC,EACA2F,QASXxX,OAAM,eAMX,GACErB,YAAW0C,IACXpE,GACA4lB,GACAvlB,EACA,CACA,IAAMo3B,EAAQvR,IAA6BC,QAAQjF,EAAalhB,GAChEy3B,EACG9V,WACAjf,MAAK,SAACif,GACL8V,EAAM9Q,UAAUf,GAAeljB,MAAK,SAAC8qC,GAC9BhhC,GACHxE,EACEulC,aAEEjd,GACE1K,EACA6R,EAAMr0B,QACNoqC,EAAEvjC,WACF0X,EACAyP,OAAO/hB,uBAAYm+B,EAAG7rB,IACtBtS,uBAAYm+B,EAAG7rB,GACfhN,EACAC,EACA2F,WAOXxX,OAAM,eAMX,OAAO,WACLyJ,GAAY,MAEb,CACDxE,EACAkZ,EACA9c,EACApE,EACA4lB,EACAja,EACA9B,EACAiC,EACAzL,EACAitC,EACA34B,EACAC,EACA2F,KCrKG,SAASkzB,GAAT,GAQH,IAPF7tC,EAOC,EAPDA,YACAC,EAMC,EANDA,YACAuE,EAKC,EALDA,YAMM4D,EAAWC,cACXylC,EAAU3lC,cAEV4lC,EAAe7pC,YAAY8pC,KAC3BC,EAAYjuC,GAAeC,IAAgB8tC,EAC3C5nC,EAAcvE,uBAAY,WAC9B,IAAMssC,EACJluC,GAAeohB,YAAkBnhB,EAAaD,GAC5CA,GAAeC,GAAeiuC,GAAeD,IAC/C7lC,EAAS0K,YAAe9S,IACxBoI,EAAS4K,YAAek7B,IACxB9lC,EAASwO,YAAepS,IACxB4D,EAAS0P,YAAQ,IACjBg2B,EAAQ5lC,KAAK,gBAEd,CAACE,EAAU6lC,EAAWjuC,EAAaC,EAAauE,EAAaspC,IAChE,OAAKG,EAEH,cAACtmC,EAAA,EAAD,CACE/H,QAAQ,WACRmI,KAAK,QACLoI,MAAO,CAAE1K,QAAS,QAASD,OAAQ,gBACnCmB,QAASR,EAJX,0BAFqB,KAaV,SAASgoC,KACtB,IAAMnuC,EAAckE,YAAY6c,MAC1B9gB,EAAciE,YAAY8c,MAC1Bxc,EAAcN,YAAYO,MAChC,OACE,cAACopC,GAAD,CACE7tC,YAAaA,EACbC,YAAaA,EACbuE,YAAaA,ICxBnB,IAAMzG,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqU,cAAe,CACbhU,UAAWL,EAAMM,QAAQ,IAE3BqT,MAAO,CACLtT,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,QAInB6vC,GAAgB,WAC3B,IAAM5pC,EAAcN,YAAYO,MAC1BmrB,EAAmB1rB,YAAYgd,MAC/BI,EAAcpd,YAAYqjC,MAC1BC,EAA2BtjC,YAC/BujC,MAEIzyB,EAAS,OAAGwyB,QAAH,IAAGA,OAAH,EAAGA,EAA0B75B,KACtCoH,EAAM,OAAGyyB,QAAH,IAAGA,OAAH,EAAGA,EAA0BzyB,OACnC4F,EAAI,OAAG6sB,QAAH,IAAGA,OAAH,EAAGA,EAA0B7sB,KACjC+E,EACJ0B,YAAkBwO,EAAkBprB,IAAgB,GACtD,OAAOnD,mBACL,iBAAO,CACLmD,cACA8c,cACAtM,YACAD,SACA4F,OACA+E,2BAEF,CAAClb,EAAa8c,EAAatM,EAAWD,EAAQ4F,EAAM+E,KA4HzClJ,OAxHf,WACEg3B,KACA,IAAM/tC,EAAU1B,KACVqK,EAAWC,cACXqD,EAAcxH,YAAYgoB,MAC1B3Y,EAASlS,mBACb,kBAAMmS,IAAOiD,QAAO,SAACC,GAAD,OAAOA,EAAEvP,KAAOuE,OACpC,CAACA,IAEH,EAA0CxH,YACxCmqC,MADaC,EAAf,EAAQttC,MAAyBsC,EAAjC,EAAiCA,KAGjC,EAOI8qC,KANF5pC,EADF,EACEA,YACA8c,EAFF,EAEEA,YACAtM,EAHF,EAGEA,UACAD,EAJF,EAIEA,OACA4F,EALF,EAKEA,KACA+E,EANF,EAMEA,sBAEIwC,EAAiBhe,YAAYqqC,MAC7BC,EAAiBtqC,YAAYqnC,KAC7BvqC,EAAQkD,YAAYuqC,MACpB9iC,EAAmBzH,YAAYunC,MAC/B/4B,EAAmBxO,YAAYwqC,MAC7B3oC,EAAkBvF,YAAiBgE,GAAnCuB,cACF7E,GAAa6E,IAAkBuoC,IAAqBhrC,EAC1D,EACEkc,GACEhb,EACA8c,EACA5B,GAJIC,EAAR,EAAQA,wBAAyBC,EAAjC,EAAiCA,2BAMjCynB,IAAsB30B,GACtB,IAAMiE,EAAqB/U,uBACzB,SAACiR,GACCzK,EAASwO,aAAe/D,EAAMhL,OAAO4F,UAEvC,CAACrF,IAEG6K,EAAkBrR,uBAAY,WAClCwG,EAAS8K,kBACR,CAAC9K,IACJ,OACE,qCACE,cAACmmB,GAAD,oDACA,cAACpb,GAAA,EAAD,CACEvT,QAAQ,WACRwT,QAAM,EACNC,WAAS,EACT5F,MAAOjJ,EACP8O,SAAUqD,EACVvQ,UAAU,EACVmN,OAAQA,IAEV,cAAC/M,GAAA,EAAD,CAAelG,QAASkE,IACvBkb,EACC,qCACG4B,EACC,sBAAK5hB,UAAWD,EAAQ6S,cAAxB,UACE,cAAC3S,EAAA,EAAD,CAAYC,QAAQ,YAApB,6BACA,eAACD,EAAA,EAAD,CAAYE,UAAU,MAAtB,UACE,cAACgV,GAAD,CACEvU,QAASkE,EACThB,QAAS8d,EACTvM,OAAQA,EACRC,UAAWA,EACX2F,KAAMA,EACN/a,QAAQ,OAPZ,mBASe4uC,EATf,WAYA,KACJ,sBAAK9uC,UAAWD,EAAQ6S,cAAxB,UACE,cAAC3S,EAAA,EAAD,CAAYC,QAAQ,YAApB,sBACA,eAACD,EAAA,EAAD,CAAYE,UAAU,MAAtB,UACE,cAACgV,GAAD,CACEvU,QAASkE,EACThB,QAASkc,EACT9f,QAAQ,OAJZ,4BAMwBsiB,GAAkB,IAN1C,cAUF,KACH1d,IAAgBM,KAAmBwc,EAClC,cAACjB,GAAD,CACEZ,YAAa6B,EACb5B,sBAAuBA,EACvBC,wBAAyBA,EACzBC,2BAA4BA,IAE5B,KACJ,eAACvW,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAAWF,UAAWD,EAAQmS,MAA7D,UACE,eAACjS,EAAA,EAAD,sDAC2C,IACxC+N,IAAalJ,GAAamJ,KAF7B,8BAIE7L,YAAW0C,IAAgBA,IAAgBrC,MAC3C,cAACwP,GAAD,CAAoB1B,WAAW,WAAW3P,QAASkE,OAGvD,cAAC,GAAD,CAAmBlE,QAASkE,IAC5B,cAACkC,EAAA,EAAD,CACEN,UAAWuF,IAAqBgU,EAChChZ,QAASsM,EACT5M,WAAYnF,EACZF,MACE+E,IAAkB7E,OAAYqC,EAAYvC,GAASstC,GALvD,kBAUEvoC,IAAiBzC,GAASA,EAAKxC,UAAoC,KAAxB,cAACqtC,GAAD,Q,UCrL7CpwC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC0wC,UAAW,CACTrwC,UAAWL,EAAMM,QAAQ,GACzBC,aAAcP,EAAMM,QAAQ,IAE9BqT,MAAO,CACLzT,UAAW,UAEbywC,KAAM,CACJpwC,aAAcP,EAAMM,QAAQ,QAIhC,SAASswC,KACP,IAAMpvC,EAAU1B,KAChB,OACE,eAACsL,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAAWF,UAAWD,EAAQmS,MAA7D,UACE,eAACjS,EAAA,EAAD,CAAYE,UAAU,MAAMH,UAAWD,EAAQmvC,KAA/C,4CACkC,IAChC,cAACE,GAAA,EAAD,CAAKC,WAAY,IAAKtpC,QAAQ,SAA9B,qCAEO,IAJT,sDAOA,cAAC9F,EAAA,EAAD,CAAYE,UAAU,MAAtB,SACE,cAACmb,EAAA,EAAD,CACEpT,KAAMs6B,IACNr6B,OAAO,SACPC,IAAI,sBAHN,0EAYR,SAASknC,GAAT,GAMI,IALFj6B,EAKC,EALDA,OACAvQ,EAIC,EAJDA,YAKM/E,EAAU1B,KAChB,OACE,eAACsL,EAAA,EAAD,CAAOC,SAAS,UAAU1J,QAAQ,WAAWF,UAAWD,EAAQmS,MAAhE,UACE,cAACjS,EAAA,EAAD,CACEC,QAAQ,KACRF,UAAWD,EAAQmvC,KAFrB,+CAGiC75B,EAHjC,eAG8CrH,IAAalJ,GAAamJ,QACxE,cAAChO,EAAA,EAAD,CACED,UAAWD,EAAQmvC,KADrB,qCAEuB75B,EAFvB,2FAGA,cAACpV,EAAA,EAAD,UACE,cAACqb,EAAA,EAAD,CACEpT,KAAMs6B,IACNr6B,OAAO,SACPC,IAAI,sBAHN,0EAYR,SAASmnC,KACP,IAAMxvC,EAAU1B,KAChB,OACE,cAACsL,EAAA,EAAD,CAAOC,SAAS,UAAU1J,QAAQ,WAAWF,UAAWD,EAAQmS,MAAhE,uHAOW,SAASs9B,GAAT,GAYX,IAAD,EAXDxjC,EAWC,EAXDA,YACA/C,EAUC,EAVDA,YACA3I,EASC,EATDA,YACAwE,EAQC,EARDA,YACA8c,EAOC,EAPDA,YAQA,KACIthB,GAAewE,GAAe8c,GAAe5V,GAAe/C,GAE9D,OAAO,KAGT,IAAMwmC,EAAoBrtC,YAAW4J,GACjC/C,EAAY6yB,cACZ7yB,EACEymC,EAAoBpvC,IAAgBwE,EACpC6qC,GACJ,UAAAC,IAAmB5jC,UAAnB,eAAkCyjC,UAAsB5rC,EACpDgsC,IAAiBF,EAKjBG,EAAwBD,GAAgBH,EACxCK,GAAsBF,GAAgBH,EACtCM,EALkB,+CAAtBP,GACAzjC,IAAgBxE,IAMlB,OACE,qCACGsoC,EACC,cAACR,GAAD,CACEj6B,OAAQs6B,GAAoB,SAC5B7qC,YAAaA,IAEb,KACHirC,EAAqB,cAACZ,GAAD,IAA6B,KAClDa,EAAqB,cAACT,GAAD,IAAqB,QC3GjD,SAASU,GAAT,GAQI,IAPF5N,EAOC,EAPDA,KACAD,EAMC,EANDA,QACAn7B,EAKC,EALDA,QAMM+E,EAAcxH,YAAYgoB,MAC1B+D,EAA2B/rB,YAC/B4+B,MAEF,EAA8DsL,KAAtD5pC,EAAR,EAAQA,YAAa8c,EAArB,EAAqBA,YAAavM,EAAlC,EAAkCA,OAAQC,EAA1C,EAA0CA,UAAW2F,EAArD,EAAqDA,KAC/C3a,EAAckE,YAAY6c,MAG1B6uB,EAAkBvuC,mBAAQ,WAC9B,GAAIrB,IAAW,OAAIiwB,QAAJ,IAAIA,OAAJ,EAAIA,EAA0B5a,SAAS,CAAC,IAAD,EAC9C85B,EAAoBrtC,YAAW9B,GACjCiwB,EAAyB5a,QAAQmmB,cACjCvL,EAAyB5a,QAC7B,OACErV,IAAgBwE,MACf,UAAC8qC,IAAmB5jC,UAApB,aAAC,EAAkCyjC,IAGtC,OAAO,IAER,CAACnvC,EAAawE,EAAakH,EAAaukB,IAG3C,EAAkCtvB,mBAChCivC,EAHsB,EAGc,GADtC,mBAAOC,EAAP,KAAkBC,EAAlB,KA0FA,OAtFA/tC,qBAAU,WACR,GAAK6tC,GAAiC,IAAdC,EAAxB,CAGA,IAAIjjC,GAAY,EAQhB,OANAmjC,aAAY,WACLnjC,GACHkjC,GAAa,SAAC1yB,GAAD,OAAWA,EAAQ,OAEjC,KAEI,WACLxQ,GAAY,MAEb,CAACgjC,EAAiBC,IAErB9tC,qBAAU,WACJggC,GAAQ6N,GAEVE,EA1BoB,KA4BrB,CAAC/N,EAAM6N,IAGR,qCACE,cAAC5N,GAAA,EAAD,4BACA,eAACC,GAAA,EAAD,WACG3gB,EACC,sBAAKnR,MAAO,CAAEhS,UAAW,SAAUK,aAAc,IAAjD,UACE,cAACmB,EAAA,EAAD,CAAYC,QAAQ,YAAYuQ,MAAO,CAAE3R,aAAc,GAAvD,qDAGA,cAACqW,GAAD,CACEjV,QAAQ,KACRU,QAASoL,EACToJ,mBAAoBmb,IAEtB,8BACE,cAACtwB,EAAA,EAAD,CAAYC,QAAQ,UAApB,SACG8N,IAAahC,GAAaiC,SAG/B,qBAAKwC,MAAO,CAAE2pB,WAAY,GAA1B,SACE,cAACkW,GAAA,EAAD,CAAez/B,SAAS,cAE1B,cAACsE,GAAD,CACEjV,QAAQ,KACRU,QAASkE,EACThB,QAAS8d,EACTvM,OAAQA,EACRC,UAAWA,EACX2F,KAAMA,IAER,8BACE,cAAChb,EAAA,EAAD,CAAYC,QAAQ,UAApB,SACG8N,IAAalJ,GAAamJ,YAI/B,KACJ,cAACuhC,GAAD,CACEvmC,YAAW,OAAEsnB,QAAF,IAAEA,OAAF,EAAEA,EAA0B5a,QACvC3J,YAAaA,EACb1L,YAAaA,EACbshB,YAAW,OAAEA,QAAF,IAAEA,SAAe/d,EAC5BiB,YAAaA,OAGjB,eAACyrC,GAAA,EAAD,WACE,cAACtoC,EAAA,EAAD,CAAQ/H,QAAQ,WAAW+G,QAASm7B,EAApC,oBAGA,cAACn6B,EAAA,EAAD,CACE/H,QAAQ,YACR+D,MAAM,UACNgD,QAASA,EACToB,KAAM,SACN3B,WAAYypC,EALd,SAOKA,EAAYA,EAAUxlC,WAAa,kBASjC,SAAS6lC,GAAT,GAQX,IAPFnO,EAOC,EAPDA,KACAp7B,EAMC,EANDA,QACAm7B,EAKC,EALDA,QAMA,OACE,cAACD,GAAA,EAAD,CAAQE,KAAMA,EAAMD,QAASA,EAA7B,SACE,cAAC6N,GAAD,CACE5N,KAAMA,EACND,QAASA,EACTn7B,QAASA,MC8BFiH,OAlKf,WACE,MAA8C09B,KAAtCnlC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WAC/B,EAA0C1F,oBAAS,GAAnD,mBAAOwvC,EAAP,KAAsBC,EAAtB,KACMjgB,EAAsBvuB,uBAAY,WACtCwuC,GAAiB,KAChB,IACGC,EAAqBzuC,uBAAY,WACrCuE,IACAiqC,GAAiB,KAChB,CAACjqC,IACEmqC,EAAqB1uC,uBAAY,WACrCwuC,GAAiB,KAChB,IAEG1kC,EAAcxH,YAAYgoB,MAC1BvjB,EAAczE,YAAYkoB,MAC1BmkB,EAAersC,YAAYqnC,KAC3Btb,EAA2B/rB,YAC/B4+B,MAEI0N,EAAc,OAAGvgB,QAAH,IAAGA,OAAH,EAAGA,EAA0BlO,SAC3C0uB,EAAc,OAAGxgB,QAAH,IAAGA,OAAH,EAAGA,EAA0Bxa,cAC3Ci7B,OACentC,IAAnBitC,GACmB,OAAnBA,GACAD,GACA/rB,sBAAW+rB,EAAcC,GAAgB3hC,WACrC8hC,OACeptC,IAAnBitC,GACmB,OAAnBA,GACAhsB,sBAAW,IAAKgsB,GAAgB3hC,WAC5BvK,EAAaJ,YAAYK,MACzBsH,EAAiB3H,YAAYwnC,KAE7B1qC,EAAQkD,YAAYuqC,MAC1B,EAA4C9tC,mBAAS,IAArD,mBAAOiwC,EAAP,KAAuBC,EAAvB,KACA,EACErwC,YAAiBkL,GADXnL,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cAAesI,EAAhC,EAAgCA,cAE1BgiB,EAAsBnsB,YAAYsyB,KAElCjG,EACJF,GACAhiB,GACAgiB,IAAwBhiB,EAC1B,EAA4D1N,oBAAS,GAArE,mBAAOmwC,EAAP,KAA+BC,EAA/B,KACMC,EAA+BpvC,uBACnC,kBAAMmvC,GAA2BD,KACjC,CAACA,IAGH,ECjEa,SACbxwC,EACAsrB,EACA4iB,EACAiC,GAEA,IAAMroC,EAAWC,cACjB,EAAkC1H,mBAAwB,MAA1D,mBAAOswC,EAAP,KAAkBC,EAAlB,KACA,EAAsDvwC,oBAAS,GAA/D,mBAAOwwC,EAAP,KAA4BC,EAA5B,KACMC,EAAsBntC,YAAYC,KAChCuE,EAAWvI,cAAXuI,OACF4oC,GACHxvC,YAAWxB,IACZmwC,GACCQ,GAAazC,GAAkByC,GAAazC,EAE/CzsC,qBAAU,WACR,IAAI6K,GAAY,EAuBhB,OAtBI9K,YAAWxB,IAAYsrB,GAAgBljB,IAAW2oC,IACpDD,GAAuB,GACvBG,YACEtvC,aAA8B3B,GAC9BsrB,EACAljB,GACA5F,MACA,SAACC,GACM6J,IACHwkC,GAAuB,GACvBF,EAAanuC,EAAO8L,gBAGxB,SAAC7N,GACM4L,GACHwkC,GAAuB,OAOxB,WACLxkC,GAAY,KAEb,CAACtM,EAASsrB,EAAcljB,EAAQ2oC,IAEnC,IAAMG,EAAkDnwC,mBAAQ,WAC9D,OAAQS,YAAWxB,IAAasrB,GAAiBljB,EAI7C,SAACyG,GAEC,OADA/G,EAASqpC,cAAe,IACjBC,YACLzvC,aAA8B3B,GAC9BsrB,EACAljB,EACA4lB,KAAUtD,KAAK7b,IACfrM,MACA,WAEE,OADAsF,EAASqpC,cAAe,IACjB5kC,QAAQC,aAEjB,WAEE,OADA1E,EAASqpC,cAAe,IACjB5kC,QAAQ0C,aAjBrB,SAACJ,GACC,OAAOtC,QAAQC,aAoBpB,CAACxM,EAASsrB,EAAcljB,EAAQN,IAEnC,OAAO/G,mBACL,iBAAO,CACLiwC,sBACAE,gBACAL,sBACAE,yBAEF,CACEC,EACAE,EACAL,EACAE,IDXAM,CACFjmC,EACA/C,EACA+nC,QAAsBntC,EACtBktC,GARAa,EADF,EACEA,oBACAH,EAFF,EAEEA,oBACAE,EAHF,EAGEA,oBACAG,EAJF,EAIEA,cAQII,GAAsB9vC,YAAW4J,KAAiB4lC,EAClDO,GAASf,GAA0BJ,IAAuBC,EAC1DngB,IACHjwB,GACDgwB,GACAnqB,GACA+qC,GACAE,EACI5gB,GAAeF,EACjB,kDACAxqB,GAAiB/E,GAAS4vC,QAAkBrtC,EAE1CuuC,GAAqBzwC,mBAAQ,WACjC,OAAO,WACLwvC,EAAkB,IAClBW,EAAczjC,OAAO2iC,IAAqB5tC,MACxC,WACE+tC,EAAkB,OAEpB,SAAC7vC,GAAD,OAAW6vC,EAAkB,+CAGhC,CAACW,EAAed,IACbqB,GAAmB1wC,mBAAQ,WAC/B,OAAO,WACLwvC,EAAkB,IAClBW,EAAcxuC,IAAOC,UAAU+uC,WAAWnjC,YAAY/L,MACpD,WACE+tC,EAAkB,OAEpB,SAAC7vC,GAAD,OAAW6vC,EAAkB,+CAGhC,CAACW,IAEJ,OACE,qCACE,cAACjjB,GAAD,gEAGA,cAAC/nB,GAAA,EAAD,CAAelG,QAASoL,IACxB,eAACrC,EAAA,EAAD,CAAOC,SAAS,OAAO1J,QAAQ,WAA/B,gDACsC8N,IAAahC,GAAaiC,KADhE,wKAMCikC,GACC,qCACE,cAACrH,GAAA,EAAD,CACEC,QACE,cAACC,GAAA,EAAD,CACEC,QAASoG,EACTx9B,SAAU09B,EACVrtC,MAAM,YAGV+P,MAAM,6BAER,cAAChN,EAAA,EAAD,CACEN,SAAUoqB,GACV7pB,QACEmqC,EAAyBiB,GAAmBD,GAE9CzrC,WAAY8qC,GAAuBE,EACnCrwC,MAAOyvB,GANT,SAQG,YACEqgB,EAAyB,YAAcP,GADzC,gBAEUsB,GAAS,IAAM,SAI9B,qCACE,cAACnrC,EAAA,EAAD,CACEN,SAAUoqB,GACV7pB,QAASwpB,EACT9pB,WAAYA,EACZrF,MAAOyvB,GAJT,sBAQA,cAACyf,GAAD,CACEnO,KAAMoO,EACNxpC,QAAS0pC,EACTvO,QAASwO,OAIf,cAACtsC,GAAD,IACCM,EAAa,cAACwC,GAAD,CAAQxG,QAASoL,EAAa9E,GAAItC,IAAiB,KACjE,cAACmI,GAAD,CACEnM,QAASoL,EACT9E,GAAItC,EACJuH,eAAgBA,QEjLlB9N,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,UAEbyI,GAAI,CACFtI,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,UAEb0I,WAAY,CACVvI,UAAWL,EAAMM,QAAQ,QAId,SAASsP,KACtB,IAAMpO,EAAU1B,KACV2N,EAAcxH,YAAYgoB,MAC1B5nB,EAAaJ,YAAYK,MAI/B,OACE,qCACE,cAAC5E,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAJoB,wCAWnB1D,EAAa,cAACwC,GAAD,CAAQxG,QAASoL,EAAa9E,GAAItC,IAAiB,Q,eCMjEvG,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCg0C,mBAAmB,aACjBxsC,QAAS,OACT2K,WAAY,UACXnS,EAAMQ,YAAYC,KAAK,MAAQ,CAC9Bib,cAAe,WAGnBu4B,qBAAqB,aACnBzU,UAAW,QACVx/B,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BN,MAAO,SAGX+zC,iBAAiB,aACfr4B,SAAU,WACVM,IAAK,QACJnc,EAAMQ,YAAYC,KAAK,MAAQ,CAAE4b,UAAW,kBAE/ChI,cAAe,CACbhU,UAAWL,EAAMM,QAAQ,QA2KdgU,OAvKf,WACE,IAAM9S,EAAU1B,KACVqK,EAAWC,cACXylC,EAAU3lC,cACVuD,EAAcxH,YAAYgoB,MAC1B1nB,EAAcN,YAAYO,MAC1B2tC,EAAqB/wC,mBACzB,kBAAMmS,IAAOiD,QAAO,SAACC,GAAD,OAAOA,EAAEvP,KAAOuE,OACpC,CAACA,IAEGoJ,EAAqB5Q,YACzB4+B,MAEIuP,IAA0Bv9B,EAC1Bw9B,EACJ5mC,IAAgB5G,OACdgQ,KACAgU,IAAoBxD,IAAIxQ,EAAmBO,SACzCk9B,EACJ7mC,IAAgBxE,OACd4N,KACA09B,IAAwBltB,IAAI6D,sBAAWrU,EAAmBO,UACxDo9B,EACJ/mC,IAAgBrE,OACdyN,KACA49B,IAAwBptB,IAAI6D,sBAAWrU,EAAmBO,UACxDs9B,EACJL,GAAqBC,GAAuBE,EACxCvwB,EAAiBhe,YAAY0uC,MAC7BzjC,EAASjL,YAAYqnC,KACrBvqC,EAAQkD,YAAY2uC,MACpBrgC,EAAmBtO,YAAY4uC,MAC/BpgC,EAAmBxO,YAAYwqC,MACrC,EAAmCluC,YAAiBkL,GAA5CnL,EAAR,EAAQA,QAASwF,EAAjB,EAAiBA,cACXgtC,EAAuBnxC,uBAAY,WACnC8J,IAAgB5G,IAClBgpC,EAAQ5lC,KAAR,iCACqB4M,QADrB,IACqBA,OADrB,EACqBA,EAAoBO,QADzC,mBACoDP,QADpD,IACoDA,OADpD,EACoDA,EAAoB7I,YAE/DP,IAAgBxE,IACzB4mC,EAAQ5lC,KAAR,mCAAkC4M,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAoBO,UAC7C3J,IAAgBrE,KACzBymC,EAAQ5lC,KAAR,4CAA2C4M,QAA3C,IAA2CA,OAA3C,EAA2CA,EAAoBO,YAEhE,CAACy4B,EAASh5B,EAAoBpJ,IAC3BkH,EAAqBhR,uBACzB,SAACiR,GACCzK,EAAS0K,aAAeD,EAAMhL,OAAO4F,UAEvC,CAACrF,IAEGuO,EAAqB/U,uBACzB,SAACiR,GACCzK,EAASwO,aAAe/D,EAAMhL,OAAO4F,UAEvC,CAACrF,IAEG6c,EAAqBrjB,uBACzB,SAACiR,GACCzK,EAAS6uB,aAAUpkB,EAAMhL,OAAO4F,UAElC,CAACrF,IAEG8c,EAAiBtjB,uBAAY,WAC7BsgB,GACF9Z,EAAS6uB,aAAU/U,MAEpB,CAAC9Z,EAAU8Z,IACRjP,EAAkBrR,uBAAY,WAClCwG,EAAS8K,kBACR,CAAC9K,IACJ,OACE,qCACE,cAACmmB,GAAD,UACE,sBAAKpe,MAAO,CAAE1K,QAAS,OAAQ2K,WAAY,UAA3C,+DAEE,qBAAKD,MAAO,CAAEsZ,SAAU,KACxB,8BACE,cAAC9hB,EAAA,EAAD,CACE9H,UAAWmb,IACXE,GAAG,yBACHnT,KAAK,QACLnI,QAAQ,WACRmW,QAAS,cAACoxB,GAAA,EAAD,IALX,0CAYN,sBAAKznC,UAAWD,EAAQwyC,mBAAxB,UACE,sBAAKvyC,UAAWD,EAAQyyC,qBAAxB,UACE,cAACvyC,EAAA,EAAD,CAAYC,QAAQ,UAApB,oBACA,cAACuT,GAAA,EAAD,CACEC,QAAM,EACNxT,QAAQ,WACRyT,WAAS,EACT5F,MAAO/B,EACP4H,SAAUV,EACVxM,SAAUsM,EACVa,OAAQC,SAGZ,qBAAK9T,UAAWD,EAAQ0yC,iBAAxB,SACE,cAACa,GAAA,EAAD,CAAc7iC,MAAO,CAAE3K,OAAQ,eAEjC,sBAAK9F,UAAWD,EAAQyyC,qBAAxB,UACE,cAACvyC,EAAA,EAAD,CAAYC,QAAQ,UAApB,oBACA,cAACuT,GAAA,EAAD,CACEvT,QAAQ,WACRwT,QAAM,EACNC,WAAS,EACT5F,MAAOjJ,EACP8O,SAAUqD,EACVvQ,SAAUsM,EACVa,OAAQ6+B,UAId,cAAC5rC,GAAA,EAAD,CAAelG,QAASoL,IACvBnL,GAAW2hB,EACV,qBAAKxiB,UAAWD,EAAQ6S,cAAxB,SACE,cAAC,GAAD,CAAelM,SAAUsM,MAEzB,KACHigC,EACC,cAAChrC,EAAA,EAAD,CACE/H,QAAQ,YACR+D,MAAM,UACN0P,WAAS,EACT1M,QAASosC,EAJX,kCASA,qCACE,cAAC,GAAD,CAAmBzyC,QAASoL,IAC3B2mC,EACC,cAACpzB,GAAD,CACErf,QAAQ,WACR8T,MAAM,SACNL,WAAS,EACT3T,UAAWD,EAAQ6S,cACnB7E,MAAO0B,EACPmE,SAAU2R,EACV7e,SAAUsM,EACVwM,WACEgD,IAAmBpN,EAAmBW,cAClCyP,OACA3hB,IAGN,KACJ,cAACmD,EAAA,EAAD,CACEN,UAAWoM,EACX7L,QAASsM,EACT5M,YAAY,EACZrF,MAAO+E,GAAiB/E,EAJ1B,yBCjNJjD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAASmY,KACtB,IAAM7W,EAAU1B,KACV2N,EAAcxH,YAAYgoB,MAC1B+D,EAA2B/rB,YAC/B4+B,MAEIzS,EAAsBnsB,YAAYsyB,KAClC+Z,EAAersC,YAAYqnC,KAE3Bh1B,EACJ7K,GAAeukB,EACb,qCACE,sDAAyBsgB,KACzB,cAAC17B,GAAD,CACEvU,QAASoL,EACToJ,mBAAoBmb,IAErBI,EACC,qCACE,wCACA,cAACxb,GAAD,CAAcvU,QAASoL,EAAalI,QAAS6sB,OAE7C,KACJ,uCAAU3iB,IAAahC,GAAaiC,WAGtC,GAGJ,OACE,mCACE,cAAChO,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAKGuO,MChDT,IAAMxY,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC+J,YAAa,CACX7J,UAAW,cAIA,SAAS0Y,KACtB,IAAMpX,EAAU1B,KAChB,EAOIqwC,KANF5pC,EADF,EACEA,YACAkb,EAFF,EAEEA,sBACA4B,EAHF,EAGEA,YACAvM,EAJF,EAIEA,OACAC,EALF,EAKEA,UACA2F,EANF,EAMEA,KAGIpE,EACJ/R,GAAekb,EACb,qCACG4B,EACC,qCACE,+CACA,cAACzM,GAAD,CACEvU,QAASkE,EACThB,QAAS8d,EACTvM,OAAQA,EACRC,UAAWA,EACX2F,KAAMA,OAGR,KACJ,sCACA,cAAC9F,GAAD,CAAcvU,QAASkE,EAAahB,QAASkc,IAC7C,uCAAUhS,IAAalJ,GAAamJ,WAGtC,GAGJ,OACE,cAAChO,EAAA,EAAD,CACEE,UAAU,MACVD,QAAQ,YACRF,UAAWD,EAAQuI,YAHrB,SAKGuO,IC4CQ08B,I,GAAAA,GAnEf,WACEjnB,KACAsB,KACA,IAAMllB,EAAWC,cACX2O,EAAa9S,YAAYgvC,KACzB9uC,EAAYF,YAAYG,MACxBwH,EAAiB3H,YAAYwnC,KAC7BhnC,EAAcR,YAAYS,KAC1ByjC,EAAmBlkC,YAAYivC,KAC/B/7B,GACHhT,GAAayH,GAAkBnH,KAAiB0jC,EASnD,OARArmC,qBAAU,WACR,GAAIqV,EAEF,OADAC,OAAOC,eAAiB,kBAAM,GACvB,WACLD,OAAOC,eAAiB,QAG3B,CAACF,IAEF,cAACG,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACC,EAAA,EAAD,CAAST,WAAYA,EAAYU,YAAY,WAA7C,UACE,eAACC,EAAA,EAAD,CACEC,SAAUZ,GAAc,EACxB5Q,SAAUgR,GAAqBgxB,EAFjC,UAIE,cAACvwB,EAAA,EAAD,CAAYlR,QAAS,kBAAMyB,EAAS0P,aAAQ,KAA5C,oBACA,cAACC,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAa,cAAC,GAAD,SAGrC,eAACW,EAAA,EAAD,CACEC,SAAUZ,GAAc,EACxB5Q,SAAUgR,GAAqBgxB,EAFjC,UAIE,cAACvwB,EAAA,EAAD,CACEzR,SAAUgR,GAAqBgxB,GAAmC,IAAfpxB,EACnDrQ,QAAS,kBAAMyB,EAAS0P,aAAQ,KAFlC,oBAMA,cAACC,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAa,cAAC,GAAD,SAGrC,eAACW,EAAA,EAAD,CAAMC,SAAUZ,GAAc,EAAG5Q,SAAUyF,EAA3C,UACE,cAACgM,EAAA,EAAD,CAAYzR,UAAQ,EAApB,yBACA,cAAC2R,EAAA,EAAD,UACkB,IAAff,EAAmB,cAAC,GAAD,IAAW,cAAC,GAAD,SAGnC,eAACW,EAAA,EAAD,CAAMC,SAAUZ,GAAc,EAA9B,UACE,cAACa,EAAA,EAAD,CACElR,QAAS,kBAAMyB,EAAS0P,aAAQ,KAChC1R,UAAWyF,EAFb,2BAMA,cAACkM,EAAA,EAAD,UACGqwB,EAAmB,cAAC,GAAD,IAAoB,cAAC,GAAD,e,iDC5EvCgL,GAAgB,WAC3B,IAAMjY,EAAa,GAqBnB,OApBAkY,WAAQl3B,SAAQ,SAACijB,GACf,IAAM9vB,EAAO8vB,EAAOzxB,KAAK0wB,MAAM,KAAK,GAChClD,EAAE7rB,IAEC6rB,EAAEmY,aAOPnY,EAAE7rB,GAAQ,CACRrD,UAAWmzB,EAAO57B,QAClBmK,KAAMyxB,EAAOzxB,KAAK0wB,MAAM,KAAKkV,KAAK,SAKxCpY,EAAC,KAAWA,EAAC,KAENA,EAtBoB,GA0BvBqY,G,WAGJ,aAAe,0BAFfC,WAEc,EACZC,KAAKD,MAAQ,IAAIv3B,I,sFAGnB,WACEzZ,EACAkxC,GAFF,qBAAA/qC,EAAA,+EAIS,IAAIiE,SAAQ,SAACC,EAASyC,GAC3B,QAAmChM,IAA/B,EAAKkwC,MAAMnuB,IAAIquB,GAyBjB,OAAO7mC,EAAQ,EAAK2mC,MAAMnuB,IAAIquB,IAxB9BC,MAAM,4CAAD,OAA6CD,IAAc7wC,MAC9D,SAAC+wC,GACCA,EAAKC,OAAOhxC,MAAK,SAAC+wC,GAChB,GAAuB,OAAnBA,EAAKvwC,KAAKywC,MAAoC,OAAnBF,EAAKvwC,KAAK0wC,KACvClnC,OAAQvJ,QACH,GACqB,IAA1BswC,EAAKvwC,KAAKywC,KAAKtlC,QACW,IAA1BolC,EAAKvwC,KAAK0wC,KAAKvlC,OAEf3B,OAAQvJ,QACH,GAA8B,IAA1BswC,EAAKvwC,KAAKywC,KAAKtlC,OACxB3B,EAAQ+mC,EAAKvwC,KAAK0wC,KAAK,GAAGC,YACrB,GAA8B,IAA1BJ,EAAKvwC,KAAK0wC,KAAKvlC,OACxB3B,EAAQ+mC,EAAKvwC,KAAKywC,KAAK,GAAGE,WACrB,CACL,IAAMC,GACHL,EAAKvwC,KAAKywC,KAAK,GAAGE,MAAQJ,EAAKvwC,KAAK0wC,KAAK,GAAGC,OAAS,EACxD,EAAKR,MAAMl3B,IAAIo3B,EAAYO,GAC3BpnC,EAAQ,EAAK2mC,MAAMnuB,IAAIquB,eAxBrC,2C,gEAoCWQ,GAAa,IAAIX,GCzBxBY,IAAmB,qBACtB/sC,IAAe,CACd,6CACA,6CACA,+CAJqB,eAMtBH,IAAe,CAAC,+CANM,IASnBmtC,GAAa,SAACC,EAAqBh0C,GAA6B,IAAD,IAC7DmR,EAAgB,GACtB,OAAI,OAAC6iC,QAAD,IAACA,GAAD,UAACA,EAAgBhxC,YAAjB,iBAAC,EAAsB6wB,aAAvB,aAAC,EAA6B1lB,SAIlC6lC,EAAehxC,KAAK6wB,MAAMhY,SAAQ,SAACtB,GACjC,GAAIA,EAAK1M,QAAU,GAAK0M,EAAKyW,iBAAkB,CAAC,IAAD,EACvCijB,GACJ,UAAAH,GAAoB9zC,UAApB,eAA8Bma,SAASI,EAAKyW,oBAC5CzW,EAAK25B,WAAa,IACpB/iC,EAAOvJ,KAAK,CACVyS,KACEgX,KAAcrM,IAAIzK,EAAKyW,mBACvBzW,EAAK+W,eACLruB,EACFwR,OAAQ8F,EAAK4W,6BAA0BluB,EACvCoK,KAAMkN,EAAK6W,oBAAiBnuB,EAC5B4L,OAAQM,uBAAYoL,EAAK1M,QAAS0M,EAAK0W,mBACvCkjB,WAAYF,EAAqB,EAAI15B,EAAK65B,MAC1CC,WAAYJ,EAAqB,EAAI15B,EAAK25B,WAC1C5zC,aAAcia,EAAKyW,iBACnBsjB,cAAet0C,EACfN,YAAa0N,IAAapN,GAASqN,KACnCoU,SAAUlH,EAAK0W,wBAKd9f,GA1BE,IA+ZIojC,GAnMA,WACb,MAA8Cl0C,wBAAS4C,GAAvD,mBAAOuxC,EAAP,KAAwBC,EAAxB,KACA,EAAwDp0C,oBAAS,GAAjE,mBAAOq0C,EAAP,KAA6BC,EAA7B,KACA,EAAgDt0C,mBAAS,IAAzD,mBAAOu0C,EAAP,KAAyBC,EAAzB,KAEA,EAA8Cx0C,wBAAS4C,GAAvD,mBAAO6xC,EAAP,KAAwBC,EAAxB,KACA,EAAwD10C,oBAAS,GAAjE,mBAAO20C,EAAP,KAA6BC,EAA7B,KACA,EAAgD50C,mBAAS,IAAzD,mBAAO60C,EAAP,KAAyBC,EAAzB,KAEA,EAAsD90C,wBAAS4C,GAA/D,mBAAOmyC,EAAP,KAA4BC,EAA5B,KACA,EACEh1C,oBAAS,GADX,mBAAOi1C,EAAP,KAAiCC,EAAjC,KAEA,EAAwDl1C,mBAAS,IAAjE,mBAAOm1C,EAAP,KAA6BC,EAA7B,KAEA,EAAsDp1C,wBAEpD4C,GAFF,mBAAOyyC,EAAP,KAA4BC,EAA5B,KAGA,EACEt1C,oBAAS,GADX,mBAAOu1C,EAAP,KAAmCC,EAAnC,KAEA,EAAgEx1C,mBAAS,IAAzE,mBAAOy1C,EAAP,KAAiCC,EAAjC,KACMj7B,GAAgB/Z,mBAAQ,WAC5B,IAAMwa,EAAsB,GAO5B,OANmB,OAAnBm6B,QAAmB,IAAnBA,KAAqB75B,SAAQ,SAACtB,GAAU,IAAD,MAC/BxF,EAAO,UAAGwF,EAAKa,QAAQpY,KAAK0e,cAArB,iBAAG,EAA0BtX,YAA7B,iBAAG,EAAgC4R,YAAnC,aAAG,EAAsCjS,WAClDgL,GACFwG,EAAU3T,KAAKmN,MAGZwG,IACN,CAACm6B,IAEEM,GAAiB7J,GAAY3nC,IAAiBsW,IAE9Cm7B,GA7GgB,SACtBn7B,EACA0D,GAEA,MAAkCne,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,mBAGtB,MAHV,mBAAO61C,EAAP,KAAiBC,EAAjB,KAIA,EAAgB91C,mBAAS,IAAlBK,EAAP,oBAyDA,OAvDAe,qBAAU,WACR,IAAI6K,GAAY,EAEhB,GAAKwO,GAAkBA,EAAc3M,QAAWqQ,EAASxb,KAAzD,CAIA,IAAMozC,EAKA,GACNt7B,EAAce,SAAQ,SAAC3Y,GAAa,IAAD,EAC3BupC,EAAS,UAAGjuB,EAASxb,YAAZ,aAAG,EAAe+L,MAAK,SAACgN,GAAD,OAAOA,EAAE7Y,UAAYA,KACrDmzC,EAAiB5J,GAAaqG,GAAarG,EAAUh4B,QACvD4hC,GACFD,EAAgBxuC,KAAhB,2BAA0ByuC,GAA1B,IAA0Cl3B,YAAajc,QAI3DrC,GAAa,GACb,IAAMq1C,EAA4C,IAAIt6B,IAChDzZ,EAAa,IAAIC,aAAWC,KAC5B0Y,EAA4B,GAyBlC,OAvBAq7B,EAAgBv6B,SAAQ,SAACijB,GACvB,IAAMuU,EAAqBvU,EAAOzxB,KAClC0N,EAASnT,KACPisC,GACGyC,SAASn0C,EAAYkxC,GACrB7wC,MAAK,SAACC,GACLyzC,EAASj6B,IAAI6iB,EAAO3f,YAAa1c,MAElCI,OAAM,SAAC5B,GAEN,OAAOsL,QAAQC,iBAKvBD,QAAQ0O,IAAIF,GAAUvY,MAAK,WAEpB8J,IACH6pC,EAAYD,GACZr1C,GAAa,OAIV,WACLyL,GAAY,MAGb,CAACwO,EAAe0D,EAASxb,OAErBjC,mBAAQ,WACb,MAAO,CACLgC,WAAYnC,EACZoC,KAAMkzC,GAAY,KAClBx1C,MAAOA,EACPyC,WAAY,QAEb,CAACzC,EAAOw1C,EAAUt1C,IAoCA21C,CAAgBz7B,GADdyD,MAGvB,GApLkB,WAClB,MACEgmB,GAAuBriC,KADNs0C,EAAnB,EAAQ51C,UAA2C61C,EAAnD,EAAyChS,SAEzC,EAA4CpkC,mBAAgB,IAA5D,mBAAOq2C,EAAP,KAAuBC,EAAvB,KACAl1C,qBAAU,WACR,IAAI6K,GAAY,EAShB,OARA,wBAAC,6BAAAhE,EAAA,+EAEwBqrB,KAAM3O,IAAI4xB,KAFlC,OAESn0C,EAFT,QAGQ6J,GAAa7J,GAAUA,EAAOO,MACjC2zC,EAAkBl0C,EAAOO,MAJ9B,sGAAD,GAQO,WACLsJ,GAAY,KAEb,IACH,IAAMuqC,EAAW91C,mBAAQ,WACvB,IAAMi2B,EAAa,GA0CnB,OAzCIyf,GACaxV,OAAOtW,KAAK8rB,GACpB56B,SAAQ,SAAC/M,GACd,IAAMD,EAASM,uBACbsnC,EAAoB3nC,GACpBM,MAEIqF,EAASQ,aAAkBnG,GAC7BgoC,OAAe7zC,EACfoxC,EAAa,EACbF,EAAa,EACjB,IACE2C,EAAeJ,EAAe3nC,MAAK,SAACgoC,GAAD,OAAUA,EAAKjoC,QAAUA,KAC5DulC,EACY,SAAVvlC,EACI,EACAgoC,EACA,EAAI5lB,OAAO4lB,EAAaE,UACxB,EACN7C,EACY,SAAVrlC,EACIoiB,OACE/hB,uBAAYsnC,EAAoB3nC,GAAQM,OAE1C0nC,EACA5lB,OAAOriB,GAAUqiB,OAAO4lB,EAAaE,UACrC,EACN,MAAO/1C,IACT+1B,EAAIpvB,KAAK,CACPiH,SACAvO,aAAcwO,EACdpP,YAAa0N,IAAavL,KAAgBwL,KAC1CinC,cAAezyC,IACfwyC,aACAF,aACA95B,KAAMgrB,aAAmB5wB,GACzBA,SACAgN,SAAUrS,UAIT4nB,IACN,CAACyf,EAAqBC,IACzB,OAAO31C,mBACL,iBAAO,CAAE81C,WAAUj2C,UAAW41C,KAC9B,CAACA,EAAsBK,IAmHuBI,GAA7BC,GAAnB,GAAQt2C,UAA2Bi2C,GAAnC,GAAmCA,SAE7BM,GAAYp2C,mBAChB,kBAtOkB,SACpB+1B,EAGAsgB,EACAnB,GAEA,IAAM9kC,EAAgB,GACtB,OACG2lB,GACAA,EAAS3oB,SACVipC,EAASr0C,aACTq0C,EAAS12C,OACR02C,EAASp0C,OACVizC,EAAalzC,YACZkzC,EAAajzC,MAKhB8zB,EAASjb,SAAQ,SAACtB,GAAU,IAAD,kCACnB88B,EAAe,UAAGD,EAASp0C,YAAZ,aAAG,EAAegiB,IAAf,UACtBzK,EAAKa,QAAQpY,KAAK0e,cADI,iBACtB,EAA0BtX,YADJ,iBACtB,EAAgC4R,YADV,aACtB,EAAsCjS,YAElCiS,EAAI,UAAGzB,EAAKa,QAAQpY,KAAK0e,cAArB,iBAAG,EAA0BtX,YAA7B,iBAAG,EAAgC4R,YAAnC,aAAG,EAAsCjS,WAC7C4pC,EAAK,OAAGsC,QAAH,IAAGA,GAAH,UAAGA,EAAcjzC,YAAjB,aAAG,EAAoBgiB,IAAIhJ,GACtC7K,EAAOvJ,KAAK,CACVyS,MAAqB,OAAfg9B,QAAe,IAAfA,OAAA,EAAAA,EAAiBh9B,YAAQpX,EAC/BwR,QAAuB,OAAf4iC,QAAe,IAAfA,OAAA,EAAAA,EAAiB5iC,cAAUxR,EACnCoK,MAAqB,OAAfgqC,QAAe,IAAfA,OAAA,EAAAA,EAAiB3iC,iBAAazR,EACpC4L,QAAQ,UAAA0L,EAAKa,QAAQpY,KAAK0e,cAAlB,mBAA0BtX,YAA1B,mBAAgCuX,mBAAhC,eAA6C0O,WAAY,IACjE8jB,WAAYR,EACR1iC,YACE,UAAAsJ,EAAKa,QAAQpY,KAAK0e,cAAlB,mBAA0BtX,YAA1B,mBAAgCuX,mBAAhC,eAA6C0O,WAAY,KACvDsjB,OACJ1wC,EACJoxC,WAAYV,EACZrzC,aAAc0b,EACds4B,cAAe9vC,IACf9E,YAAa,SACb+hB,SAAQ,UAAElH,EAAKa,QAAQpY,KAAK0e,cAApB,iBAAE,EAA0BtX,YAA5B,iBAAE,EAAgCuX,mBAAlC,aAAE,EAA6CF,cAIpDtQ,GA3BEA,EAqNDmmC,CAAc5B,EAAqBM,GAAgBC,MACzD,CAACP,EAAqBM,GAAgBC,KAElCsB,GAASx2C,mBACb,kBAAMgzC,GAAWS,EAAiB5tC,OAClC,CAAC4tC,IAEGgD,GAASz2C,mBACb,kBAAMgzC,GAAWe,EAAiB/tC,OAClC,CAAC+tC,IAEG2C,GAAa12C,mBACjB,kBAAMgzC,GAAWqB,EAAqBpuC,OACtC,CAACouC,IAsGH,OAnGA3zC,qBAAU,WAERkzC,GAAwB,GACxBhhB,KACG3O,IACC0O,YAAwB9sB,IAAc8wC,KAA0B,IAEjEl1C,MACC,SAAC0L,GAEGumC,EAAmBvmC,EAAQlL,MAC3B2xC,GAAwB,MAG5B,SAACj0C,GAEGm0C,EAAoB,oCACpBF,GAAwB,QAI/B,IAEHlzC,qBAAU,WAERwzC,GAAwB,GACxBthB,KACG3O,IACC0O,YAAwB3sB,IAAc4wC,KAA0B,IAEjEn1C,MACC,SAAC0L,GAEG6mC,EAAmB7mC,EAAQlL,MAC3BiyC,GAAwB,MAG5B,SAACv0C,GAEGy0C,EAAoB,+BACpBF,GAAwB,QAI/B,IAEHxzC,qBAAU,WAER8zC,GAA4B,GAC5B5hB,KACG3O,IACC0O,YACE1sB,IACA4wC,KACA,IAGHp1C,MACC,SAAC0L,GAEGmnC,EAAuBnnC,EAAQlL,MAC/BuyC,GAA4B,MAGhC,SAAC70C,GAEG+0C,EAAwB,mCACxBF,GAA4B,QAInC,IAEH9zC,qBAAU,WACR,IACMU,EAAa,IAAIC,aAAWC,IAAa,aAC/CwzC,GAA8B,GAC9B1zC,EACG+xB,8BAA8B,IAAIjmB,YAAU4pC,KAAsB,CACjE1jB,UAAWvU,OAEZpd,MACC,SAAC0L,GAEGynC,EAAuBznC,EAAQf,OAC/B0oC,GAA8B,MAGlC,SAACn1C,GAEGm1C,GAA8B,GAC9BE,EACE,iDAKT,IAEIh1C,mBAAQ,WACb,IAAM+2C,EAAQ,uBACTP,IADS,aAETC,IAFS,aAGTC,IAHS,aAITN,IAJS,aAKTN,KAGL,MAAO,CACL9zC,WACE2xC,GACAM,GACAM,GACAM,GACAsB,GACFx2C,MACEk0C,GACAM,GACAM,GACAM,EACF3yC,WAAY,KACZH,KAAM80C,KAEP,CACDlD,EACAF,EACAQ,EACAF,EACAQ,EACAF,EACAmC,GACAF,GACAC,GACAL,GACArB,EACAF,EACAsB,GACAL,M,2OCpdEp5C,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuO,KAAM,CACJkxB,WAAY,EACZzpB,WAAYhW,EAAMM,QAAQ,QA0Ef85C,GAtEgB,SAACl5B,GAC9B,IAAM1f,EAAU1B,KACVE,EAAQq6C,eACNC,EAA2Cp5B,EAA3Co5B,MAAOC,EAAoCr5B,EAApCq5B,KAAMC,EAA8Bt5B,EAA9Bs5B,YAAaC,EAAiBv5B,EAAjBu5B,aAkBlC,OACE,sBAAKh5C,UAAWD,EAAQ+M,KAAxB,UACE,cAACiM,EAAA,EAAD,CACE9R,QAnB6B,SAACkM,GAClC6lC,EAAa7lC,EAAO,IAmBhBzM,SAAmB,IAAToyC,EACV,aAAW,aAHb,SAKuB,QAApBv6C,EAAM06C,UAAsB,cAAC,KAAD,IAAmB,cAAC,KAAD,MAElD,cAAClgC,EAAA,EAAD,CACE9R,QAtBwB,SAACkM,GAC7B6lC,EAAa7lC,EAAO2lC,EAAO,IAsBvBpyC,SAAmB,IAAToyC,EACV,aAAW,gBAHb,SAKuB,QAApBv6C,EAAM06C,UACL,cAAC,KAAD,IAEA,cAAC,KAAD,MAGJ,cAAClgC,EAAA,EAAD,CACE9R,QA7BwB,SAACkM,GAC7B6lC,EAAa7lC,EAAO2lC,EAAO,IA6BvBpyC,SAAUoyC,GAAQI,KAAKC,KAAKN,EAAQE,GAAe,EACnD,aAAW,YAHb,SAKuB,QAApBx6C,EAAM06C,UACL,cAAC,KAAD,IAEA,cAAC,KAAD,MAGJ,cAAClgC,EAAA,EAAD,CACE9R,QApC4B,SAACkM,GACjC6lC,EAAa7lC,EAAO+lC,KAAKE,IAAI,EAAGF,KAAKC,KAAKN,EAAQE,GAAe,KAoC7DryC,SAAUoyC,GAAQI,KAAKC,KAAKN,EAAQE,GAAe,EACnD,aAAW,YAHb,SAKuB,QAApBx6C,EAAM06C,UAAsB,cAAC,KAAD,IAAoB,cAAC,KAAD,UChDnDI,GAAW,SAACx3C,GAChBA,EAAEk9B,mBAkJWua,GA/IO,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,QAAS31C,EAA6C,EAA7CA,KAAM41C,EAAuC,EAAvCA,cAAuC,IAAxBv8B,oBAAwB,MAAT,GAAS,EAC7E,EASIw8B,oBACF,CACEF,UACA31C,OACA81C,eAAgBF,EAChBv8B,gBAEF08B,mBACAC,cACAC,aACAC,eACAC,kBAnBAC,EADF,EACEA,cACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,WACApB,EAJF,EAIEA,KACAqB,EALF,EAKEA,SACAC,EANF,EAMEA,YACAC,EAPF,EAOEA,KAPF,IAQE38B,MAAS48B,EARX,EAQWA,UAAWC,EARtB,EAQsBA,SAwBtB,OACE,qCACE,cAACC,GAAA,EAAD,UACE,eAAC,KAAD,2BAAcR,KAAd,cACE,cAACS,GAAA,EAAD,UACGR,EAAazqC,KAAI,SAACkrC,GAAD,OAChB,cAACC,GAAA,EAAD,2BAAcD,EAAYE,uBAA1B,aACGF,EAAYG,QAAQrrC,KAAI,SAACsrC,GAAD,aACvB,eAACC,GAAA,EAAD,2BACqB,cAAdD,EAAOrzC,GACRqzC,EAAOE,iBACPF,EAAOE,eAAeF,EAAOG,yBAHnC,IAIEje,OAEE,UAAAuc,EAAQ5pC,MAAK,SAACqH,GAAD,OAAOA,EAAEkkC,SAAWJ,EAAOI,iBAAxC,eAAiDle,QACjD,OAPJ,UAUiB,cAAd8d,EAAOrzC,GACN,cAAC0zC,GAAA,EAAD,CACEC,OAAQN,EAAOO,SAEfpC,UAAW6B,EAAOQ,aAAe,OAAS,MAH5C,SAKGR,EAAOS,OAAO,YAGjBT,EAAOS,OAAO,UAEfT,EAAOU,WAEN,sBAAMv0C,QAASoyC,GAAf,SACE,cAACtgC,EAAA,EAAD,yBACE1Q,KAAK,SACDyyC,EAAOW,yBAFb,aAIGX,EAAOY,UACN,cAACC,GAAA,EAAD,CAAqB9qC,SAAS,YAE9B,cAAC+qC,GAAA,EAAD,CAAkB/qC,SAAS,iBAI/B,oBAMd,cAACgrC,GAAA,EAAD,UACG/C,EAAKtpC,KAAI,SAACssC,EAAKC,GAEd,OADA7B,EAAW4B,GAET,cAACnB,GAAA,EAAD,2BAAcmB,EAAIE,eAAlB,aACGF,EAAIG,MAAMzsC,KAAI,SAAC0sC,GACd,OACE,cAACnB,GAAA,EAAD,2BACMmB,EAAKC,gBADX,IAEEnf,MAAOkf,EAAKpB,OAAO9d,OAAS,OAF9B,SAIGkf,EAAKR,UAEJ,qCACE,cAAC3iC,EAAA,EAAD,yBACE1Q,KAAK,SACDyzC,EAAIM,6BAFV,aAIGN,EAAIO,WACH,cAAC,KAAD,CAAmBxrC,SAAS,YAE5B,cAACyrC,GAAA,EAAD,CAAoBzrC,SAAS,eAEnB,IACbqrC,EAAKX,OAAO,QAXf,KAW0BO,EAAIS,QAAQxtC,OAXtC,OAaEmtC,EAAKM,aAGPN,EAAKX,OAAO,cACVW,EAAKO,cAAgB,KAEvBP,EAAKX,OAAO,4BAWhC,cAACmB,GAAA,EAAD,CACEv8C,UAAU,MACVw8C,mBAAoB,CAAC,EAAG,GAAI,GAAI,CAAE3oC,MAAO,MAAOjG,MAAOssC,EAAKtrC,SAC5D8pC,MAAOwB,EAAKtrC,OACZgqC,YAAawB,EACbzB,KAAMwB,EACNsC,YAAa,CACXC,WAAY,CAAE,aAAc,iBAC5BC,QAAQ,GAEV9D,aA/GmB,SAAC7lC,EAAO4pC,GAC/B5C,EAAS4C,IA+GLC,oBA5G0B,SAAC7pC,GAC/BinC,EAAYtoB,OAAO3e,EAAMhL,OAAO4F,SA4G5BkvC,iBAAkBtE,SCrJpBt6C,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2+C,QAAQ,aACNn3C,QAAS,OACT2K,WAAY,WACZ5R,aAAcP,EAAMM,QAAQ,GAC5BJ,UAAW,QACVF,EAAMQ,YAAYC,KAAK,MAAQ,CAC9Bib,cAAe,SACfvJ,WAAY,UAGhB6tB,OAAQ,CACNxU,SAAU,GAEZozB,mBAAoB,OA0GPC,GAvGyB,WACtC,IAAMr9C,EAAU1B,KACVuF,EAAOjC,mBAAQ,WACnB,MAAO,CACL,CACE2Y,UAAW,WACX1Z,QAAS4G,IACT0kB,aAAc3pB,aAA8BiF,KAC5C61C,WAAYhwB,aAA4B7lB,MAE1C,CACE8S,UAAW,SACX1Z,QAASwE,IACT8mB,aAAcusB,IACd4E,WAAYC,KAEd,CACEhjC,UAAW,sBACX1Z,QAAS+G,IACTukB,aAAc3pB,aAA8BoF,KAC5C01C,WAAYhwB,aAA4B1lB,MAE1C,CACE2S,UAAW,QACX1Z,QAAS6B,IACTypB,aAAc3pB,aAA8BE,KAC5C46C,WAAY,MAEd,CACE/iC,UAAW,UACX1Z,QAASgH,IACTskB,aAAc3pB,aAA8BqF,KAC5Cy1C,WAAYhwB,aAA4BzlB,SAG3C,IAEG21C,EAAa57C,mBAAQ,WACzB,MAAO,CACL,CAAEu5C,OAAQ,QAASsC,SAAU,YAAaC,gBAAgB,GAC1D,CACEvC,OAAQ,gBACRzzC,GAAI,eACJ+1C,SAAU,UACVC,gBAAgB,EAChBC,KAAM,SAAC3vC,GAAD,2BACJ,UAAAA,EAAM+tC,WAAN,mBAAW6B,gBAAX,eAAqBzxB,gBAArB,UAAqCne,EAAM+tC,WAA3C,iBAAqC,EAAW6B,gBAAhD,aAAqC,EAAqB/8C,SACxD,cAACuU,GAAD,CACEvU,QAAO,UAAEmN,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqB/8C,QAC9BkD,QAAO,UAAEiK,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqBzxB,eAGhC,KAGN,CACEgvB,OAAQ,cACRzzC,GAAI,aACJ+1C,SAAU,UACVC,gBAAgB,EAChBC,KAAM,SAAC3vC,GAAD,2BACJ,UAAAA,EAAM+tC,WAAN,mBAAW6B,gBAAX,eAAqBN,cAArB,UAAmCtvC,EAAM+tC,WAAzC,iBAAmC,EAAW6B,gBAA9C,aAAmC,EAAqB/8C,SACtD,cAACuU,GAAD,CACEvU,QAAO,UAAEmN,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqB/8C,QAC9BkD,QAAO,UAAEiK,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqBN,aAGhC,QAIP,IAEG1+C,EACJ,sBAAKqB,UAAWD,EAAQm9C,QAAxB,UACE,sBAAKl9C,UAAWD,EAAQo9C,mBAAxB,UACE,cAACl9C,EAAA,EAAD,CAAYC,QAAQ,KAApB,+BACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,YAAY+D,MAAM,gBAAtC,uGAKF,qBAAKjE,UAAWD,EAAQw+B,YAItBqf,EACJ,cAACC,GAAD,CACEtE,QAASgE,EACT35C,KAAMA,GAAQ,GACd41C,eAAe,EACfv8B,aAAc,KAIlB,OACE,qCACGte,EACAi/C,MCrGDjJ,GAAa,SAACC,EAAqBh0C,GAAgC,IAAD,IAChEmR,EAAmB,GACzB,OAAI,OAAC6iC,QAAD,IAACA,GAAD,UAACA,EAAgBhxC,YAAjB,iBAAC,EAAsB6wB,aAAvB,aAAC,EAA6B1lB,SAIlC6lC,EAAehxC,KAAK6wB,MAAMhY,SAAQ,SAACtB,GAE7BA,EAAK1M,QAAU,GAAK0M,EAAKyW,kBAAoBzW,EAAK4Y,UACpD5Y,EAAK4Y,SAAStX,SAAQ,SAACqhC,GACE,IAAD,YAAlBA,EAAQ7pB,UACVliB,EAAOvJ,KAAK,CACViH,OAAQ0L,EAAK1M,QACbkH,QAASwF,EAAKyW,iBACd/E,QAASixB,EAAQ7pB,SACjB1nB,UAAW8gB,aAA4BzsB,GACvCyhB,SAAU,EACV4O,SAAU,EACVzO,eAAgBrH,EAAK1M,QAAQ9D,WAC7B/J,QAASA,EACTklB,IAAKg4B,EAAQ5pB,UACb/C,cAAa,UAAE2sB,EAAQ3pB,qBAAV,aAAE,EAAuBhD,cACtCC,aAAY,UAAE0sB,EAAQ3pB,qBAAV,aAAE,EAAuB/C,aACrCC,MAAK,UAAEysB,EAAQ3pB,qBAAV,aAAE,EAAuB9C,MAC9BC,UAAS,UAAEwsB,EAAQ3pB,qBAAV,aAAE,EAAuB7C,UAClCC,QAAO,UAAEusB,EAAQ3pB,qBAAV,aAAE,EAAuBlmB,KAChC3F,YAAW,UAAEw1C,EAAQ3pB,qBAAV,aAAE,EAAuB7rB,oBAOvCyJ,GA9BE,IAoRIgsC,GAlMG,WAChB,MAA8C98C,wBAAS4C,GAAvD,mBAAOuxC,EAAP,KAAwBC,EAAxB,KACA,EAAwDp0C,oBAAS,GAAjE,mBAAOq0C,EAAP,KAA6BC,EAA7B,KACA,EAAgDt0C,mBAAS,IAAzD,mBAAOu0C,EAAP,KAAyBC,EAAzB,KAEA,EAA8Cx0C,wBAAS4C,GAAvD,mBAAO6xC,EAAP,KAAwBC,EAAxB,KACA,EAAwD10C,oBAAS,GAAjE,mBAAO20C,EAAP,KAA6BC,EAA7B,KACA,EAAgD50C,mBAAS,IAAzD,mBAAO60C,EAAP,KAAyBC,EAAzB,KAEA,EAAsD90C,wBAAS4C,GAA/D,mBAAOmyC,EAAP,KAA4BC,EAA5B,KACA,EACEh1C,oBAAS,GADX,mBAAOi1C,EAAP,KAAiCC,EAAjC,KAEA,EAAwDl1C,mBAAS,IAAjE,mBAAOm1C,EAAP,KAA6BC,EAA7B,KAEA,EAAsDp1C,wBAEpD4C,GAFF,mBAAOyyC,EAAP,KAA4BC,EAA5B,KAGA,EACEt1C,oBAAS,GADX,mBAAOu1C,EAAP,KAAmCC,EAAnC,KAEA,EAAgEx1C,mBAAS,IAAzE,mBAAOy1C,EAAP,KAAiCC,EAAjC,KACMj7B,EAAgB/Z,mBAAQ,WAC5B,IAAMwa,EAAsB,GAO5B,OANmB,OAAnBm6B,QAAmB,IAAnBA,KAAqB75B,SAAQ,SAACtB,GAAU,IAAD,MAC/BxF,EAAO,UAAGwF,EAAKa,QAAQpY,KAAK0e,cAArB,iBAAG,EAA0BtX,YAA7B,iBAAG,EAAgC4R,YAAnC,aAAG,EAAsCjS,WAClDgL,GACFwG,EAAU3T,KAAKmN,MAGZwG,IACN,CAACm6B,IAEEM,GAAiB7J,GAAY3nC,IAAiBsW,GAE9Cq8B,GAAYp2C,mBAChB,kBApFkB,SACpB+1B,EAGAsgB,GAEA,IAAMjmC,EAAmB,GACzB,OACG2lB,GACAA,EAAS3oB,SACVipC,EAASr0C,aACTq0C,EAAS12C,OACR02C,EAASp0C,MAKZ8zB,EAASjb,SAAQ,SAACtB,GAAU,IAAD,oBASvB,oBARI88B,EAAe,UAAGD,EAASp0C,YAAZ,aAAG,EAAegiB,IAAf,UACtBzK,EAAKa,QAAQpY,KAAK0e,cADI,iBACtB,EAA0BtX,YADJ,iBACtB,EAAgC4R,YADV,aACtB,EAAsCjS,YAElC2iC,EAAyB,OAAG2K,QAAH,IAAGA,OAAH,EAAGA,EAAiB3K,KAGjD,UAAAnyB,EAAKa,QAAQpY,KAAK0e,cAAlB,mBAA0BtX,YAA1B,mBAAgCuX,mBAAhC,eAA6C0O,UAAW,GACE,KAA1D,UAAA9V,EAAKa,QAAQpY,KAAK0e,cAAlB,mBAA0BtX,YAA1B,mBAAgCuX,mBAAhC,eAA6CF,WAE7CtQ,EAAOvJ,KAAK,CACViH,OAAM,UAAE0L,EAAKa,QAAQpY,KAAK0e,cAApB,iBAAE,EAA0BtX,YAA5B,iBAAE,EAAgCuX,mBAAlC,aAAE,EAA6C9S,OACrDkG,QAAO,UAAEwF,EAAKa,QAAQpY,KAAK0e,cAApB,iBAAE,EAA0BtX,YAA5B,aAAE,EAAgC4R,KACzCrQ,UAAW8gB,aAA4BjoB,KACvCid,SAAU,EACV4O,SAAU,EACVzO,eAAc,UACZrH,EAAKa,QAAQpY,KAAK0e,cADN,iBACZ,EAA0BtX,YADd,iBACZ,EAAgCuX,mBADpB,aACZ,EAA6CC,eAC/C5hB,QAASwE,IACT0gB,IAAG,OAAEwnB,QAAF,IAAEA,GAAF,UAAEA,EAAK1pC,YAAP,aAAE,EAAWkiB,IAChBzQ,OAAM,OAAEi4B,QAAF,IAAEA,GAAF,UAAEA,EAAK1pC,YAAP,aAAE,EAAWyR,YAUlBtD,GAjCEA,EAsEDmmC,CAAc5B,EAAqBM,MACzC,CAACN,EAAqBM,KAElBuB,GAASx2C,mBACb,kBAAMgzC,GAAWS,EAAiB5tC,OAClC,CAAC4tC,IAEGgD,GAASz2C,mBACb,kBAAMgzC,GAAWe,EAAiB/tC,OAClC,CAAC+tC,IAGG2C,GAAa12C,mBACjB,kBAAMgzC,GAAWqB,EAAqBpuC,OACtC,CAACouC,IAiHH,OA9GA3zC,qBAAU,WAERkzC,GAAwB,GACxBhhB,KACG3O,IACC0O,YACE9sB,IACAw2C,KACA,GACA,IAGH56C,MACC,SAAC0L,GAEGumC,EAAmBvmC,EAAQlL,MAC3B2xC,GAAwB,MAG5B,SAACj0C,GAEGm0C,EAAoB,oCACpBF,GAAwB,QAI/B,IAEHlzC,qBAAU,WAERwzC,GAAwB,GACxBthB,KACG3O,IACC0O,YACE3sB,IACAs2C,KACA,GACA,IAGH76C,MACC,SAAC0L,GAEG6mC,EAAmB7mC,EAAQlL,MAC3BiyC,GAAwB,MAG5B,SAACv0C,GAEGy0C,EAAoB,+BACpBF,GAAwB,QAI/B,IAEHxzC,qBAAU,WAER8zC,GAA4B,GAC5B5hB,KACG3O,IACC0O,YACE1sB,IACAs2C,KACA,GACA,IAGH96C,MACC,SAAC0L,GAEGmnC,EAAuBnnC,EAAQlL,MAC/BuyC,GAA4B,MAGhC,SAAC70C,GAEG+0C,EAAwB,mCACxBF,GAA4B,QAInC,IAEH9zC,qBAAU,WACR,IACMU,EAAa,IAAIC,aAAWC,IAAa,aAC/CwzC,GAA8B,GAC9B1zC,EACG+xB,8BAA8B,IAAIjmB,YAAUyuC,KAA0B,CACrEvoB,UAAWvU,OAEZpd,MACC,SAAC0L,GAEGynC,EAAuBznC,EAAQf,OAC/B0oC,GAA8B,MAGlC,SAACn1C,GAEGm1C,GAA8B,GAC9BE,EACE,iDAKT,IAEIh1C,mBAAQ,WACb,IAAM+2C,EAAQ,uBAAOP,IAAP,aAAkBC,IAAlB,aAA6BC,IAA7B,aAA4CN,KAE1D,MAAO,CACLp0C,WACE2xC,GACAM,GACAM,GACAM,EACFl1C,MACEk0C,GACAM,GACAM,GACAM,EACF3yC,WAAY,KACZH,KAAM80C,KAEP,CACDlD,EACAF,EACAQ,EACAF,EACAyC,GACAjC,EACAF,EACAiC,GACAC,GACAL,GACArB,EACAF,KC1SS2H,GAAuB,CAClgDCpQI9/C,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6/C,eAAgB,CACdn4C,OAAQ,OACRvH,MAAO,OACPoZ,SAAU,OACVtD,YAAajW,EAAMM,QAAQ,GAC3BkH,QAAS,OACT2K,WAAY,UAEduK,KAAM,CACJqiB,UAAW,OACXxlB,SAAU,QAEZumC,eAAgB,CACdt4C,QAAS,OACT0S,eAAgB,aAChB/H,WAAY,UAEdwsC,QAAQ,aACNn3C,QAAS,OACT2K,WAAY,WACZ5R,aAAcP,EAAMM,QAAQ,GAC5BJ,UAAW,QACVF,EAAMQ,YAAYC,KAAK,MAAQ,CAC9Bib,cAAe,SACfvJ,WAAY,UAGhB6tB,OAAQ,CACNxU,SAAU,GAEZozB,mBAAoB,GACpBmB,eAAe,aACbv4C,QAAS,OACT2K,WAAY,WACZ2pB,cAAe,GACd97B,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BJ,UAAWL,EAAMM,QAAQ,KAG7Bk2C,WAAY,CACVxgC,WAAYhW,EAAMM,QAAQ,IAC1BC,aAAc,WAEhBy/C,SAAU,CACRx4C,QAAS,OACT0S,eAAgB,SAChB,QAAS,CACP3S,OAAQvH,EAAMM,QAAQ,IAExB8R,SAAU,QAEZ6tC,aAAc,CACZ14C,OAAQ,eACRC,QAAS,SAEX04C,mBAAoB,CAClBvkC,UAAW,QACXpC,SAAU,QAEZjS,YAAa,CACXC,OAAQ,SACRC,QAAS,SAEX24C,eAAgB,CACd30B,SAAU,EACVrrB,MAAO,cACPoZ,SAAU,YA8LC6mC,GA1LiB,WAAO,IAAD,EAC9B5+C,EAAU1B,KACVugD,EAASb,KAMf,EAAwC98C,mBAAwB,MAAhE,mBAAO49C,EAAP,KAAqBC,EAArB,KACMC,EAAYp9C,mBAChB,kBACoB,OAAjBk9C,GAAyBD,EAAOh7C,MAAQg7C,EAAOh7C,KAAKi7C,IACrD,OACF,CAACA,EAAcD,EAAOh7C,OAElBo7C,EAAkB98C,uBAAY,WAAO,IAAD,EACxC,GAAK08C,GAAWA,EAAOh7C,OAAQ,UAACg7C,EAAOh7C,YAAR,aAAC,EAAamL,UAAU6vC,EAAOj7C,WAEvD,CAIL,IAHA,IAAIs7C,GAAQ,EACRC,EAAahG,KAAKiG,MAAMjG,KAAKkG,SAAWR,EAAOh7C,KAAKmL,QAFnD,qBAKH,IAAK6vC,EAAOh7C,KACV,MAAM,CAAN,EAAO,MAET,IAAMuX,GAAa,OAANyjC,QAAM,IAANA,GAAA,UAAAA,EAAQh7C,KAAKs7C,UAAb,mBAA0BvpC,eAA1B,eAAmCmmB,gBAAiB,KAC7DqiB,GAAWxuC,MAAK,SAACgN,GAAD,OAAOA,EAAEmf,gBAAkB3gB,KAC7C8jC,GAAQ,EAERC,EAAahG,KAAKiG,MAAMjG,KAAKkG,SAAWR,EAAOh7C,KAAKmL,UARhDkwC,GAAO,CAAC,IAAD,wCAYfH,EAAgBI,QAjBhBJ,EAAgB,QAmBjB,CAACF,IACJv8C,qBAAU,WACR28C,MACC,CAACJ,EAAOj7C,WAAYq7C,IAEvB,IAAMp7C,EAAOjC,mBAAQ,WACnB,IAAMoQ,EAAgB,GAatB,OAZI6sC,EAAOh7C,OAASg7C,EAAOj7C,YACzB+jC,IAAwBjrB,SAAQ,SAACzB,GAAW,IAAD,EACzCjJ,EAAOvJ,KAAK,CACV62C,KAAI,OAAET,QAAF,IAAEA,GAAF,UAAEA,EAAQh7C,YAAV,aAAE,EAAcmT,QAAO,SAAC4F,GAAD,OAAOA,EAAE/b,UAAYoa,EAAMvT,MACtD6S,UAAWU,EAAM/M,KACjBrN,QAASoa,EAAMvT,GACf4S,UAAWW,EAAMC,KACjBqkC,gBAAiBjyB,aAA4BrS,EAAMvT,SAKlDsK,IACN,CAAC6sC,IAmBErB,EAAa57C,mBAAQ,WACzB,MAAO,CACL,CAAEu5C,OAAQ,QAASsC,SAAU,YAAaC,gBAAgB,GAgB1D,CACEvC,OAAQ,cACRzzC,GAAI,WACJ+1C,SAAU,WACVxgB,MAAO,QACPygB,gBAAgB,EAChBC,KAAM,SAAC3vC,GAAD,4BACkClK,KAAtC,UAAAkK,EAAM+tC,WAAN,mBAAW6B,gBAAX,mBAAqB0B,YAArB,eAA2BtwC,QACvBwwC,KAAO,UAACxxC,EAAM+tC,WAAP,iBAAC,EAAW6B,gBAAZ,iBAAC,EAAqB0B,YAAtB,aAAC,EAA2BtwC,QAAQywC,OAAO,OAClD,QAGT,IAEG7gD,EACJ,sBAAKqB,UAAWD,EAAQm9C,QAAxB,UACE,sBAAKl9C,UAAWD,EAAQo9C,mBAAxB,UACE,cAACl9C,EAAA,EAAD,CAAYC,QAAQ,KAApB,+BACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,YAAY+D,MAAM,gBAAtC,6EAIF,qBAAKjE,UAAWD,EAAQw+B,SACtBqgB,EAAOj7C,WAqBL,KApBF,sBACE3D,UAAWI,YAAKL,EAAQo9C,mBAAoBp9C,EAAQu+C,gBADtD,UAGE,cAACr+C,EAAA,EAAD,CACEC,QAAQ,QACR+D,MAAM,gBACN9D,UAAU,MACV6H,QAAM,EAJR,SAMG,WAEH,cAAC/H,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,MACV6H,QAAM,EACNhI,UAAWD,EAAQg1C,WAJrB,UAMG,UAAA6J,EAAOh7C,YAAP,eAAamL,SAAU,YAO5B6uC,EACJ,cAACC,GAAD,CACEtE,QAASgE,EACT35C,KAAMA,GAAQ,GACd41C,eAAe,EACfv8B,aAAc,CAAEwiC,OAAQ,CAAC,CAAEh4C,GAAI,WAAYi4C,MAAM,OAI/CC,EACeZ,EACjB,sBAAK/+C,UAAWD,EAAQ0+C,mBAAxB,UACE,cAACx2C,EAAA,EAAD,CACEjI,UAAWD,EAAQy+C,aACnBt+C,QAAQ,YACR+G,QAAS+3C,EACT/6C,MAAM,UAJR,sCAQA,cAACm3B,GAAD,CAAWx6B,QAASm+C,EAAUn+C,QAASmN,MAAOgxC,OAE9C,KAON,OACE,qCACGpgD,EACAigD,EAAOj7C,WACN,cAACoD,EAAA,EAAD,CAAkB/G,UAAWD,EAAQ8F,cAErC,sBAAK7F,UAAWD,EAAQw+C,SAAxB,UACE,qBAAKv+C,UAAWD,EAAQ2+C,eAAxB,SAAyCd,IACxC+B,SC3KIC,GAlEa,WAC1B,MAA4B3+C,mBAAS,MAArC,mBAAO4+C,EAAP,KAAeC,EAAf,KACA,EAA8B7+C,mBAAS,MAAvC,mBAAO8+C,EAAP,KAAgBC,EAAhB,KAEA,EAA0C/+C,oBAAS,GAAnD,mBAAOg/C,EAAP,KAAsBC,EAAtB,KACA,EAA4Cj/C,oBAAS,GAArD,mBAAOk/C,EAAP,KAAuBC,EAAvB,KAEA,EAAsCn/C,mBAAS,IAA/C,mBAAOo/C,EAAP,KAAoBC,EAApB,KACA,EAAwCr/C,mBAAS,IAAjD,mBAAOs/C,EAAP,KAAqBC,EAArB,KAwCA,OAtCAn+C,qBAAU,WAER69C,GAAiB,GACjB3rB,KAAM3O,IAAI66B,KAA6Br9C,MACrC,SAAC0L,GAEGgxC,EAAUhxC,EAAQlL,MAClBs8C,GAAiB,MAGrB,SAAC5+C,GAEGg/C,EAAe,0CACfJ,GAAiB,QAItB,IAEH79C,qBAAU,WAER+9C,GAAkB,GAClB7rB,KAAM3O,IAAI86B,KAA8Bt9C,MACtC,SAAC0L,GAEGkxC,EAAWlxC,EAAQlL,MACnBw8C,GAAkB,MAGtB,SAAC9+C,GAEGk/C,EAAgB,2CAChBJ,GAAkB,QAIvB,IAEIz+C,mBAAQ,WACb,IAAMiC,EAnEW,SAACi8C,EAAaE,GACjC,IAAIY,EAAe,EACfC,EAAW,EASf,OARAC,IAAsBpkC,SAAQ,SAAC3Y,GAC7B,IAAIg9C,GAAkB,OAANjB,QAAM,IAANA,OAAA,EAAAA,EAAQkB,aAAclB,EAAOkB,WAAWj9C,IAAa,EACjEk9C,GAAiB,OAANnB,QAAM,IAANA,OAAA,EAAAA,EAAQoB,eAAgBpB,EAAOoB,aAAan9C,IAAa,EAExE68C,GAAgBG,EAChBF,GAAYI,KAGP,CACLL,eACAC,WACAM,WAAY,MAqDCC,CAAatB,GAC1B,MAAO,CACLl8C,WAAYw8C,GAAkBF,EAC9B3+C,MAAO++C,GAAeE,EACtBx8C,WAAY,KACZH,KAAMA,KAEP,CACDi8C,EACAE,EACAI,EACAF,EACAM,EACAF,KCrFEhiD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6/C,eAAgB,CACdn4C,OAAQ,OACRvH,MAAO,OACPoZ,SAAU,OACVtD,YAAajW,EAAMM,QAAQ,GAC3BkH,QAAS,OACT2K,WAAY,UAEduK,KAAM,CACJqiB,UAAW,OACXxlB,SAAU,QAEZumC,eAAgB,CACdt4C,QAAS,OACT0S,eAAgB,aAChB/H,WAAY,UAEdwsC,QAAQ,aACNn3C,QAAS,OACT2K,WAAY,WACZ5R,aAAcP,EAAMM,QAAQ,GAC5BJ,UAAW,QACVF,EAAMQ,YAAYC,KAAK,MAAQ,CAC9Bib,cAAe,SACfvJ,WAAY,UAGhB6tB,OAAQ,CACNxU,SAAU,GAEZlkB,YAAa,CACXC,OAAQ,SACRC,QAAS,QACTtH,UAAW,UAEb2iD,UAAW,CACTr7C,QAAS,OACTrH,MAAO,OACP+Z,eAAgB,eAChB/H,WAAY,UAEd4tC,eAAe,aACbv4C,QAAS,OACT2K,WAAY,WACZ2pB,cAAe,GACd97B,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BJ,UAAWL,EAAMM,QAAQ,KAG7Bk2C,WAAY,CACVxgC,WAAYhW,EAAMM,QAAQ,IAC1BC,aAAc,WAEhBuiD,MAAO,CACLziD,UAAWL,EAAMM,QAAQ,QA0FdyiD,GAtF2B,WAAO,IAAD,IACxCC,EAAmB3B,KACnB7/C,EAAU1B,KACVsF,EAAa49C,EAAiB59C,WAE9BhF,EACJ,sBAAKqB,UAAWD,EAAQm9C,QAAxB,UACE,gCACE,cAACj9C,EAAA,EAAD,CAAYC,QAAQ,KAApB,+BACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,YAAY+D,MAAM,gBAAtC,8EAIF,qBAAKjE,UAAWD,EAAQw+B,YAItB70B,EACJ,sBAAK1J,UAAWD,EAAQqhD,UAAxB,UACE,sBAAKphD,UAAWD,EAAQu+C,eAAxB,UACE,cAACr+C,EAAA,EAAD,CACEC,QAAQ,QACR+D,MAAM,gBACN9D,UAAU,MACV6H,QAAM,EAJR,SAMG,kBAEH,cAAC/H,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,MACV6H,QAAM,EACNhI,UAAWD,EAAQg1C,WAJrB,UAMG,UAAAwM,EAAiB39C,YAAjB,eAAuBg9C,WAAY,SAGxC,sBAAK5gD,UAAWD,EAAQu+C,eAAxB,UACE,cAACr+C,EAAA,EAAD,CACEC,QAAQ,QACR+D,MAAM,gBACN9D,UAAU,MACV6H,QAAM,EAJR,SAMG,aAEH,cAAC/H,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,MACV6H,QAAM,EACNhI,UAAWD,EAAQg1C,WAJrB,UAMG,UAAAwM,EAAiB39C,YAAjB,eAAuB+8C,eAAgB,YAM1Ca,EACJ,eAACvhD,EAAA,EAAD,CACEC,QAAQ,YACRF,UAAWI,YAAKL,EAAQ8F,YAAa9F,EAAQshD,OAF/C,iGAKgB,IACd,cAAC/lC,EAAA,EAAD,CAAMpT,KAAMu5C,IAAwBt5C,OAAO,SAA3C,0CAMJ,OACE,qCACGxJ,EACAgF,EACC,cAACoD,EAAA,EAAD,CAAkB/G,UAAWD,EAAQ8F,cAErC,qCACG6D,EACA83C,SC/HLnjD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6/C,eAAgB,CACdn4C,OAAQ,OACRvH,MAAO,OACPoZ,SAAU,OACVtD,YAAajW,EAAMM,QAAQ,GAC3BkH,QAAS,OACT2K,WAAY,UAEduK,KAAM,CACJqiB,UAAW,OACXxlB,SAAU,QAEZumC,eAAgB,CACdt4C,QAAS,OACT0S,eAAgB,aAChB/H,WAAY,UAEdqR,UAAW,CACTnI,gBAAiBza,IAAO0a,+BACxBF,QAAS,OACT,gBAAiB,CACf7T,OAAQ,SAEVhH,aAAcP,EAAMM,QAAQ,IAE9Bq+C,QAAQ,aACNn3C,QAAS,OACT2K,WAAY,WACZ5R,aAAcP,EAAMM,QAAQ,GAC5BJ,UAAW,QACVF,EAAMQ,YAAYC,KAAK,MAAQ,CAC9Bib,cAAe,SACfvJ,WAAY,UAGhB6tB,OAAQ,CACNxU,SAAU,GAEZozB,mBAAoB,GACpBmB,eAAe,aACbv4C,QAAS,OACT2K,WAAY,WACZ2pB,cAAe,GACd97B,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BJ,UAAWL,EAAMM,QAAQ,KAG7Bk2C,WAAY,CACVxgC,WAAYhW,EAAMM,QAAQ,IAC1BC,aAAc,WAEhB+G,YAAa,CACXC,OAAQ,SACRC,QAAS,aA8LE27C,GA1LkB,WAC/B,IAAM3hD,EAAU1B,KACVsjD,EAAMxM,KAENyM,EAAajgD,mBAAQ,WACzB,OAAO,SAACkgD,EAAWC,GACjB,OAAID,EAAKnG,WAAaoG,EAAKpG,UAClBmG,EAAKjkB,OAAO18B,aAAe4gD,EAAKlkB,OAAO18B,aAAe,GAAK,EACzD2gD,EAAKnG,YAAcoG,EAAKpG,UAC1B,GACGmG,EAAKnG,WAAaoG,EAAKpG,WACzB,EACCmG,EAAKlE,SAAStoC,SAAWysC,EAAKnE,SAAStoC,OACzC,EACEysC,EAAKnE,SAAStoC,SAAWwsC,EAAKlE,SAAStoC,QACxC,EACCwsC,EAAKlE,SAAStoC,QAAUysC,EAAKnE,SAAStoC,OACxCwsC,EAAKlE,SAAStoC,OAASysC,EAAKnE,SAAStoC,OAAS,GAAK,EAEnDwsC,EAAKlE,SAASz8C,aAAe4gD,EAAKnE,SAASz8C,aAAe,GAAK,KAGzE,IACGq8C,EAAa57C,mBAAQ,WACzB,MAAO,CACL,CACEu5C,OAAQ,QACRzzC,GAAI,eACJs6C,SAAUH,EACVnE,gBAAgB,EAChBD,SAAU,SAACzvC,GAAD,MAAiB,CACzBnN,QAASmN,EAAMmnC,cACf7/B,OAAQtH,EAAMsH,OACdpH,KAAMF,EAAME,KACZgN,KAAMlN,EAAMkN,KACZ/Z,aAAc6M,EAAM7M,eAEtB8gD,UAAW,SAACC,GAAD,OAAqBA,EAAWlzC,QAC3CmzC,WAAY,gBAAGn0C,EAAH,EAAGA,MAAH,gBACPA,EADO,iBACiB,IAAVA,EAAc,GAAK,MACtC2vC,KAAM,SAAC3vC,GAAD,mCACJ,sBAAK/N,UAAWD,EAAQs+C,eAAxB,UACE,qBAAKr+C,UAAWD,EAAQq+C,eAAxB,UACG,UAAArwC,EAAM+tC,WAAN,mBAAW6B,gBAAX,eAAqB1iC,MACpB,qBACEjC,IAAG,UAAEjL,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqB1iC,KAC1B/B,IAAI,GACJlZ,UAAWD,EAAQkb,OAEnB,OAEN,cAAC9F,GAAD,CACEvU,QAAO,UAAEmN,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqBzI,cAC9BpxC,QAAO,UAAEiK,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqBz8C,aAC9BmU,OAAM,UAAEtH,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqBtoC,OAC7BC,UAAS,UAAEvH,EAAM+tC,WAAR,iBAAE,EAAW6B,gBAAb,aAAE,EAAqB1vC,YAKxC,CAAEitC,OAAQ,QAASsC,SAAU,eAC7B,CACEtC,OAAQ,SACRsC,SAAU,SACVxgB,MAAO,QACPygB,gBAAgB,EAChBC,KAAM,SAAC3vC,GAAD,wBAC4BlK,KAAhC,UAAAkK,EAAM+tC,WAAN,mBAAW6B,gBAAX,eAAqBluC,QACjB8vC,KAAO,UAACxxC,EAAM+tC,WAAP,iBAAC,EAAW6B,gBAAZ,aAAC,EAAqBluC,QAAQ+vC,OAAO,UAC5C,KAER,CACEtE,OAAQ,oBACRzzC,GAAI,aACJ+1C,SAAU,aACVxgB,MAAO,QACPygB,gBAAgB,EAChBuE,UAAW,SAACC,GAAD,OACTzjB,GACEzuB,uBACEkyC,EAAWtqB,QACT,SAACwqB,EAAcC,GAAf,OACEA,EAAID,EAAEphC,IAAI+D,sBAAWs9B,EAAEtwC,QAAQ,IAAInH,WAAY,KAAOw3C,IACxDvzB,KAAUtD,KAAK,IAEjB,MAGN42B,WAAY,qBAAGn0C,OACf2vC,KAAM,SAAC3vC,GAAD,wBACgClK,KAApC,UAAAkK,EAAM+tC,WAAN,mBAAW6B,gBAAX,eAAqB5I,YACjBwK,KAAO,UAACxxC,EAAM+tC,WAAP,iBAAC,EAAW6B,gBAAZ,aAAC,EAAqB5I,YAAYyK,OAAO,SAChD,KAER,CACEtE,OAAQ,mBACRsC,SAAU,aACVxgB,MAAO,QACPygB,gBAAgB,EAChBC,KAAM,SAAC3vC,GAAD,wBACgClK,KAApC,UAAAkK,EAAM+tC,WAAN,mBAAW6B,gBAAX,eAAqB1I,YACjBsK,KAAO,UAACxxC,EAAM+tC,WAAP,iBAAC,EAAW6B,gBAAZ,aAAC,EAAqB1I,YAAYuK,OAAO,UAChD,QAGT,CACDz/C,EAAQkb,KACRlb,EAAQs+C,eACRt+C,EAAQq+C,eACRwD,IAEIS,EAAY1gD,mBAAQ,WACxB,GAAKggD,EAAI/9C,KAEF,CACL,IAAI0+C,EAAM,EAIV,OAHAX,EAAI/9C,KAAK6Y,SAAQ,SAAC8lC,GACZA,EAAIxN,aAAYuN,GAAOC,EAAIxN,eAE1BwK,KAAQ+C,GAAK9C,OAAO,OAAOgD,cANlC,MAAO,KAQR,CAACb,EAAI/9C,OAER,OACE,eAACiU,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAAC6R,GAAA,EAAD,CAAO3pB,UAAWD,EAAQgiB,UAA1B,SACE,qCACE,sBAAK/hB,UAAWD,EAAQm9C,QAAxB,UACE,sBAAKl9C,UAAWD,EAAQo9C,mBAAxB,UACE,cAACl9C,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,YAAY+D,MAAM,gBAAtC,iFAIF,qBAAKjE,UAAWD,EAAQw+B,SACtBojB,EAAIh+C,WAwBF,KAvBF,sBACE3D,UAAWI,YACTL,EAAQo9C,mBACRp9C,EAAQu+C,gBAHZ,UAME,cAACr+C,EAAA,EAAD,CACEC,QAAQ,QACR+D,MAAM,gBACN9D,UAAU,MACV6H,QAAM,EAJR,SAMG,gBAEH,cAAC/H,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,MACV6H,QAAM,EACNhI,UAAWD,EAAQg1C,WAJrB,SAMGsN,UAKPV,EAAIh+C,WAQJ,cAACoD,EAAA,EAAD,CAAkB/G,UAAWD,EAAQ8F,cAPrC,cAACg4C,GAAD,CACEtE,QAASgE,EACT35C,KAAM+9C,EAAI/9C,KACV41C,eAAe,EACfv8B,aAAc,CAAEwiC,OAAQ,CAAC,CAAEh4C,GAAI,aAAci4C,MAAM,YAO3D,cAAC/1B,GAAA,EAAD,CAAO3pB,UAAWD,EAAQgiB,UAA1B,SACE,cAAC,GAAD,MAEF,cAAC4H,GAAA,EAAD,CAAO3pB,UAAWD,EAAQgiB,UAA1B,SACE,cAAC,GAAD,MAEF,cAAC4H,GAAA,EAAD,CAAO3pB,UAAWD,EAAQgiB,UAA1B,SACE,cAAC,GAAD,U,qBCvND,SAAe0gC,GAAtB,uC,gDAAO,WACLjiD,EACAkiD,EACAhiD,GAHK,oBAAAwI,EAAA,yDAKDsiC,EAAU,KALT,UAOCppC,YAAW5B,KAAiBE,EAP7B,gCAQe4sB,YACd/qB,aAA8B/B,GAC9BE,EACAgiD,EACAliD,GAZD,OAQDgrC,EARC,iCAcQhrC,IAAiB4E,IAdzB,wBAeKrC,EAAa,IAAIC,aAAWC,IAAa,aAf9C,UAgBeyqB,YACd3qB,EACAI,IACAu/C,GAnBD,QAgBDlX,EAhBC,kCAqBQhrC,IAAiBiC,IArBzB,wBAsBKC,EAAM,IAAIC,YAAUC,KAtBzB,UAuBe+qB,YAAsBjrB,EAAKggD,GAvB1C,QAuBDlX,EAvBC,iEA0BHA,EAAUr+B,QAAQ0C,OAAO,8BA1BtB,eA4BA27B,IACHA,EAAUr+B,QAAQ0C,OAAO,+BA7BtB,kBA+BE27B,GA/BF,2D,sBAkCA,SAAemX,GAAtB,yC,gDAAO,WACLniD,EACAkiD,EACA71B,EACAnsB,GAJK,kBAAAwI,EAAA,sDAMDsiC,EAAU,KACd,IACMppC,YAAW5B,IAAiBE,GAAYmsB,EAC1C2e,EAAUpe,aACRC,aAA4B7sB,GAC5BE,EACAgiD,EACA71B,EACArsB,GAEOA,IAAiB4E,MACpBrC,EAAa,IAAIC,aAAWC,IAAa,aAC/CuoC,EAAUhe,aACRzqB,EACA0qB,IACAi1B,IAGJ,MAAO7gD,GACP2pC,EAAUr+B,QAAQ0C,OAAO,8BAzBtB,OA2BA27B,IACHA,EAAUr+B,QAAQ0C,OAAO,+BA5BtB,kBA8BE27B,GA9BF,4C,sEAkCA,WACLhrC,EACAkiD,EACAnxC,EACAsb,EACAnsB,GALK,gBAAAwI,EAAA,0DAOUqI,EAPV,gCAQKoxC,GACJniD,EACAkiD,EACA71B,EACAnsB,GAZD,yDAcK+hD,GACJjiD,EACAkiD,EACAhiD,GAjBD,6BAOC2C,EAPD,MAqBHjB,YAAWiB,EAAOzC,UAClBgiD,aAAmBv/C,EAAOnC,aAAcmC,EAAOzC,WAC7C0C,IAAOC,UAAUC,YAvBhB,uBAyBG,IAAIyH,MAAM,2BAzBb,WA4BH5H,EAAOzC,UAAYwE,KACnBw9C,aAAmBv/C,EAAOnC,aAAcmC,EAAOzC,WAC7CiiD,IA9BC,uBAgCG,IAAI53C,MAAM,2BAhCb,iCAmCE5H,GAnCF,6C,sBA6IQy/C,OAtGf,SACEtiD,EACAuiD,EACAxxC,EACAsb,GAEA,IAAQnsB,EAAaD,cAAbC,SACAG,EAAYC,YAAiBN,GAAc,GAA3CK,QACR,EAA0CI,mBAAwB,MAAlE,mBAAO4uB,EAAP,KAAsBmzB,EAAtB,KACA,EAA0C/hD,mBAAwB,MAAlE,mBAAO2uB,EAAP,KAAsBqzB,EAAtB,KACA,EAAsChiD,mBAAyB,MAA/D,mBAAOX,EAAP,KAAoB4iD,EAApB,KACA,EAA0BjiD,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAwCR,mBAK9B,MALV,mBAAOa,EAAP,KAAqBC,EAArB,KAMMC,IACFF,GACFA,EAAatB,eAAiBA,GAC9BsB,EAAaihD,iBAAmBA,GAChCjhD,EAAayP,MAAQA,GACrBzP,EAAa+qB,UAAYA,EACrB5qB,EAAUC,uBACd,kBAAMH,EAAgB,CAAEvB,eAAcuiD,iBAAgBxxC,MAAKsb,cAC3D,CAACrsB,EAAcuiD,EAAgBxxC,EAAKsb,IAGhC1qB,EAAgBR,mBACpB,kBACGnB,IACAuiD,GACA3gD,YAAW5B,KAAkBK,GAC7BuB,YAAW5B,IAAiB+Q,IAAQsb,GACrC7qB,IACF,CAACnB,EAAS0Q,EAAKsb,EAAS7qB,EAAWxB,EAAcuiD,IA8DnD,OA3DA1gD,qBAAU,WAQR,GAPKL,IACHT,EAAS,IACTyhD,EAAiB,MACjBC,EAAiB,MACjBC,EAAe,MACfnhD,EAAgB,QAEdI,EAAJ,CAIAV,GAAa,GA3FV,SAAP,2CA6FI0hD,CAAiB3iD,EAAcuiD,EAAgBxxC,EAAKsb,EAASnsB,GAC1D0C,MAAK,SAACC,GAEH5B,GAAa,GACbQ,IACA+gD,EACEthC,YACErX,aAAgBhH,EAAOnC,cACvBmC,EAAOzC,UACJ,MAEPqiD,EAAiB5/C,EAAOwpB,SAAW,MACnCq2B,EAAe7/C,EAAOzC,YAGzB6C,OAAM,SAAC5B,GAEJJ,GAAa,GACbF,EAAS,6CAGd,CACDf,EACAuiD,EACAxxC,EACA7Q,EACAuB,EACAE,EACA0qB,EACA7qB,IAG6CL,mBAC7C,iBAAO,CACLL,MAAOA,EACPqC,WAAYnC,EACZoC,KACEtD,GAAeuvB,GAAiBD,EAC5B,CAAEtvB,cAAauvB,gBAAeD,iBAC9B,KACN7rB,WAAY,QAEd,CAACvC,EAAWquB,EAAevvB,EAAasvB,EAAetuB,KCvNrDjD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2+C,QAAS,CACPn3C,QAAS,OACTrH,MAAO,OACP+Z,eAAgB,SAChB,QAAS,CACP3S,OAAQvH,EAAMM,QAAQ,KAG1B6a,SAAU,CACRC,QAASpb,EAAMM,QAAQ,GACvB+a,gBAAiBza,IAAO0a,gCAE1B7T,OAAQ,CACNC,OAAQ1H,EAAMM,QAAQ,IAExBukD,SAAU,CACR3kD,UAAW,UAEb4kD,UAAW,CACTv9C,OAAQ,SACR+K,SAAU,QAEZyyC,gBAAiB,CACfx9C,OAAQvH,EAAMM,QAAQ,QAI1B,SAAS0kD,GAAT,GAYI,IAAD,QAXD5tB,EAWC,EAXDA,YAEAr1B,GASC,EAVD8lC,YAUC,EATD9lC,aACAC,EAQC,EARDA,YASMR,GADL,EAPD4G,WAQgBtI,MAEVqe,EAAWqwB,GAAYzsC,EADVqB,mBAAQ,iBAAM,CAACpB,KAAc,CAACA,KAE3CijD,EACJ,8BACE,cAACvjD,EAAA,EAAD,sDAGEwjD,EACJ,gCACE,cAACxjD,EAAA,EAAD,wEACA,sBAAKD,UAAWD,EAAQm9C,QAAxB,UACE,cAACj9C,EAAA,EAAD,2BAAuB+N,IAAa1N,GAAa2N,QACjD,8BACE,eAAChO,EAAA,EAAD,CAAYE,UAAU,MAAtB,UACG,UACD,cAACgV,GAAD,CACErR,QAASvD,EACTK,QAASN,EACT+U,OAAM,UAAEqH,EAAS9Y,YAAX,iBAAE,EAAegiB,IAAIrlB,UAArB,aAAE,EAAiC8U,OACzCC,UAAS,UAAEoH,EAAS9Y,YAAX,iBAAE,EAAegiB,IAAIrlB,UAArB,aAAE,EAAiC+U,uBAOxD,OAAOqgB,IAAgBr1B,EAAckjD,EAAgBC,EAGvD,SAASC,GAAT,GAQI,IAAD,gBAPD9iD,EAOC,EAPDA,QACA0F,EAMC,EANDA,iBACAq9C,EAKC,EALDA,gBAMM5jD,EAAU1B,KACVulD,EAAuBjiD,mBAAQ,WAEnC,IAAMkuB,EAAa,OAAG8zB,QAAH,IAAGA,OAAH,EAAGA,EAAiB9zB,cACvC,OAAOA,GAAiBjvB,KAAO,OAAK+iD,QAAL,IAAKA,OAAL,EAAKA,EAAiBrjD,aACjD,CAACuvB,IACe,OAAhBvpB,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBxC,SAClB,QAACwC,QAAD,IAACA,OAAD,EAACA,EAAkBxC,SACnB,KACH,CAACwC,EAAkBq9C,EAAiB/iD,IACjC8b,EAAWqwB,GAAYnsC,EAASgjD,GAEtC,OAAQD,EAAyB/iD,IAAY+iD,EAAgBrjD,YAC3D,gCACE,cAACL,EAAA,EAAD,oCAAgC+N,IAAapN,GAASqN,KAAtD,6BACA,qBAAKjO,UAAWD,EAAQujD,gBAAxB,SACE,cAACnuC,GAAD,CACEvU,QAASA,EACTkD,QAAS6/C,EAAgB9zB,oBAAiBhsB,EAC1CwR,QACE,UAAAqH,EAAS9Y,YAAT,mBAAegiB,IAAI+9B,EAAgB9zB,eAAiB,WAApD,eAAyDxa,cACzDxR,EAEFyR,WACE,UAAAoH,EAAS9Y,YAAT,mBAAegiB,IAAI+9B,EAAgB9zB,eAAiB,WAApD,eACIva,iBAAazR,SAKtByC,GAAyD,IAA/BA,EAAiBlF,UAC9C,gCACE,cAACnB,EAAA,EAAD,8DAA0D+N,IAAapN,GAASqN,QAChF,cAACkgC,GAAD,CACE7tC,aAA4B,OAAfqjD,QAAe,IAAfA,OAAA,EAAAA,EAAiBrjD,mBAAeuD,EAC7CtD,YACEqB,aACiB,OAAf+hD,QAAe,IAAfA,OAAA,EAAAA,EAAiB9zB,qBAAiBhsB,GACnB,OAAf8/C,QAAe,IAAfA,OAAA,EAAAA,EAAiBrjD,cAAe8E,WAC7BvB,EAEPiB,YAAalE,OAIjB,gCACE,cAACX,EAAA,EAAD,iDACA,qBAAKD,UAAWD,EAAQujD,gBAAxB,SACE,cAACnuC,GAAD,CACEvU,QAASA,EACTkD,QAASwC,EAAiBxC,cAAWD,EACrCwR,QACE,UAAAqH,EAAS9Y,YAAT,mBAAegiB,IAAItf,EAAiBxC,SAAW,WAA/C,eAAoDuR,cACpDxR,EAEFyR,WACE,UAAAoH,EAAS9Y,YAAT,mBAAegiB,IAAItf,EAAiBxC,SAAW,WAA/C,eAAoDwR,iBACpDzR,SA3Bc,KAlBE,KAqDb,SAASggD,KAAuB,IAAD,YACtC9jD,EAAU1B,KACV2qC,EAASC,eAEf,EAAoDhoC,mBAASmE,KAA7D,mBAAO0+C,EAAP,KAA2BC,EAA3B,KACA,EAAoD9iD,mBAAS,IAA7D,mBAAO+iD,EAAP,KAA2BC,EAA3B,KAEA,EACEhjD,mBAASwB,KADX,mBAAOyhD,EAAP,KAA6BC,EAA7B,KAGMC,EAA4BziD,mBAChC,kBAAOqnC,EAASl1B,IAAOiD,QAAO,SAAC4F,GAAD,OAAQ7B,IAAYC,SAAS4B,EAAElV,OAAOqM,MACpE,CAACk1B,IAEGqb,EAA8B1iD,mBAClC,kBACEqnC,EACIl1B,IAAOiD,QACL,SAAC4F,GAAD,OAAQ7B,IAAYC,SAAS4B,EAAElV,KAAOkV,EAAElV,KAAOq8C,KAEjDhwC,IAAOiD,QAAO,SAAC4F,GAAD,OAAOA,EAAElV,KAAOq8C,OACpC,CAAC9a,EAAQ8a,IAGLQ,EAAiCpiD,uBACrC,SAACL,GACCkiD,EAAsBliD,EAAEsG,OAAO4F,OAC3Bm2C,IAAyBriD,EAAEsG,OAAO4F,OACpCo2C,EACEtiD,EAAEsG,OAAO4F,QAAU3I,IAAkB3C,IAAiB2C,KAG1D6+C,EAAsB,MAExB,CAACC,IAEGK,EAAmCriD,uBAAY,SAACL,GACpDsiD,EAAwBtiD,EAAEsG,OAAO4F,SAChC,IACGy2C,EAAiCtiD,uBAAY,SAACiR,GAClD8wC,EAAsB9wC,EAAMhL,OAAO4F,SAClC,IAEG07B,EAAaqZ,GACjBgB,EACAE,GACA,GAEI19C,EAAmBjG,GACvB,UAAAopC,EAAW7lC,YAAX,eAAiBtD,cAAe,GAChC,UAAAmpC,EAAW7lC,YAAX,eAAiBisB,gBAAiB,GAClCq0B,GAGIO,GAAyBhb,EAAW7lC,KACpC8gD,GAA2BD,EAE3BE,EAAgB7jD,YACpBgjD,EACAW,GAEIG,EAAkB9jD,YACtBojD,EACAQ,GAGIG,EACJziD,YAAW0hD,IACXE,IACCva,EAAW7lC,OACX6lC,EAAWnoC,QACVqjD,EAAc9jD,QAAwC,GAA9B8jD,EAAct+C,eACpCy+C,EAAcrb,EAAWnoC,MACzByjD,EAAeF,GAAsBC,EAErCE,EACJ5iD,YAAW8hD,KAAX,UACAza,EAAW7lC,YADX,aACA,EAAiBisB,iBADjB,UAEA4Z,EAAW7lC,YAFX,aAEA,EAAiBtD,eAChBgG,EAAiB1C,OAChBghD,EAAgB/jD,QAA0C,GAAhC+jD,EAAgBv+C,eACxC4+C,EAAe3+C,EAAiBhF,MAChC4jD,EAAiBF,GAAwBC,EAEzCE,EACJ,qCACE,cAACllD,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,oEAGA,qBAAKjE,UAAWD,EAAQiG,SACxB,cAAC+N,GAAA,EAAD,CACEL,QAAM,EACNxT,QAAQ,WACR8T,MAAM,QACNjG,MAAO+1C,EACPlwC,SAAU0wC,EACV3wC,WAAS,EACT7N,OAAO,SAPT,SASGs+C,EAA0B50C,KAAI,gBAAG/H,EAAH,EAAGA,GAAIwG,EAAP,EAAOA,KAAP,OAC7B,cAAC+7B,GAAA,EAAD,CAAmBj8B,MAAOtG,EAA1B,SACGwG,GADYxG,QAKnB,cAACsM,GAAA,EAAD,CACEJ,WAAS,EACTzT,QAAQ,WACR4F,OAAO,SACPkO,MAAM,mBACNjG,MAAOi2C,EACPpwC,SAAU4wC,IAEZ,sBAAKxkD,UAAWD,EAAQqjD,SAAxB,UACGhhD,YAAW0hD,GACV,cAACh9C,GAAA,EAAD,CAAelG,QAASkjD,IACtB,KACHiB,EACC,cAAC9kD,EAAA,EAAD,CAAYgE,MAAM,QAAlB,SAA2B8gD,IACzB,KACJ,qBAAK/kD,UAAWD,EAAQiG,SACvByjC,EAAW9lC,WACV,cAACoD,EAAA,EAAD,KACE,UAAA0iC,EAAW7lC,YAAX,eAAiBtD,cAAempC,EAAW7lC,KAAKisB,cAClD,cAAC0zB,GAAD,CACEnd,YAAa4d,EACbruB,YAAamuB,EACbxjD,YAAampC,EAAW7lC,KAAKtD,YAC7BC,YAAakpC,EAAW7lC,KAAKisB,cAC7BlpB,WAAY8iC,EAAW9lC,aAEvB,WAKJyhD,EAAmB3b,EAAW7lC,KAClC,qCACE,cAAC3D,EAAA,EAAD,CAAYC,QAAQ,KAApB,4BACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,sEAGA,qBAAKjE,UAAWD,EAAQiG,SACxB,cAAC+N,GAAA,EAAD,CACEL,QAAM,EACNxT,QAAQ,WACR8T,MAAM,cACNjG,MAAOm2C,EACPtwC,SAAU2wC,EACV5wC,WAAS,EACT7N,OAAO,SAPT,SASGu+C,EAA4B70C,KAAI,gBAAG/H,EAAH,EAAGA,GAAIwG,EAAP,EAAOA,KAAP,OAC/B,cAAC+7B,GAAA,EAAD,CAAmBj8B,MAAOtG,EAA1B,SACGwG,GADYxG,QAKnB,sBAAKzH,UAAWD,EAAQqjD,SAAxB,UACGhhD,YAAW8hD,GACV,cAACp9C,GAAA,EAAD,CAAelG,QAASsjD,IACtB,KACHgB,EACC,cAACjlD,EAAA,EAAD,CAAYgE,MAAM,QAAlB,SAA2BihD,IACzB,KACJ,qBAAKllD,UAAWD,EAAQiG,SACvBM,EAAiB3C,WAChB,cAACoD,EAAA,EAAD,KACE,UAAA0iC,EAAW7lC,YAAX,eAAiBtD,cAAempC,EAAW7lC,KAAKisB,cAClD,cAAC6zB,GAAD,CACEp9C,iBAAkBA,EAAiB1C,WAAQC,EAC3C8/C,gBAAiBla,EAAW7lC,WAAQC,EACpCjD,QAASsjD,IAET,WAGN,KAwBJ,OArBE,gCACE,eAACrsC,EAAA,EAAD,CAAWC,SAAS,KAAK9X,UAAWD,EAAQqjD,SAA5C,UACE,cAACzjD,EAAD,CAAYE,OAAK,EAACC,OAAK,EAAvB,mCAGA,qBAAKE,UAAWD,EAAQiG,YAE1B,eAAC6R,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACuD,GAAA,EAAD,CAAMrb,UAAWD,EAAQ2Z,SAAzB,SAAoCyrC,IACnCC,EACC,qCACE,qBAAKplD,UAAWD,EAAQqjD,SAAxB,SACE,cAAC,KAAD,CAAmBpjD,UAAWD,EAAQsjD,cAExC,cAAChoC,GAAA,EAAD,CAAMrb,UAAWD,EAAQ2Z,SAAzB,SAAoC0rC,OAEpC,WCjWZ,IAAMnjC,GAAW,yCAAG,WAClBlf,EACA6Z,EACAsF,GAHkB,sBAAAhZ,EAAA,yDAKlBgZ,OAAOre,IACH+Y,EANc,iCAQRuF,EAAK,IAAItT,YAAU+N,GARX,SASK7Z,EAAWqf,qBAAqBD,GATrC,OASRnX,EATQ,OAWRqX,EAXQ,UAWGrX,EAAK+C,aAXR,aAWG,EAAYnK,KAAK0e,OAAOtX,KAAKqX,SAC9CH,EAAOG,GAZO,kDAcdzb,QAAQC,IAAR,0CAA+C+V,IAdjC,0DAAH,0DAmBX1N,GAAU,yCAAG,WACjBnM,EACAe,EACAoe,GAHiB,sBAAAhZ,EAAA,yDAKjBgZ,OAAOre,IACHC,EANa,iCAQPqe,EAAK,IAAItT,YAAU/K,GARZ,SASMf,EAAWqf,qBAAqBD,GATtC,OASPnX,EATO,OAWPyD,EAXO,UAWGzD,EAAK+C,aAXR,aAWG,EAAYnK,KAAK0e,OAAOtX,KAAKuX,YAAYC,eACzDN,EAAOzT,GAZM,kDAcb7H,QAAQC,IAAR,yCAA8C/C,IAdjC,0DAAH,0DCThB,IAAMzF,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyH,OAAQ,CACNC,OAAQ,QAEV+hB,aAAc,CACZvpB,UAAW,SACXkb,QAASpb,EAAMM,QAAQ,IAEzBukD,SAAU,CACR3kD,UAAW,UAEborB,SAAU,CACR9jB,QAAS,OACT4K,SAAU,SACV8H,eAAgB,gBAChB,QAAS,CACPqR,UAAW,aACXprB,MAAO,gBAGXqrB,SAAU,CACRC,SAAU,GAEZjI,UAAW,CACTnI,gBAAiBza,IAAO0a,+BACxBpb,UAAW,SACXkb,QAAS,OACT,YAAa,CACX7T,OAAQ,UAGZmkB,OAAQ,CACNlkB,QAAS,QAEXic,QAAS,CACPlc,OAAQ,uBAEV2I,QAAS,CACP1I,QAAS,gBAEXmkB,cAAe,CACbJ,UAAW,gBAIf,SAASu7B,GAAT,GAMI,IAuEK,EA5EPC,EAKC,EALDA,aACAl7B,EAIC,EAJDA,eAKMrqB,EAAU1B,KACVgqB,EDIO,SACb3F,EACAC,EACAC,GAEA,IAAM7f,EAAapB,mBACjB,kBAAM,IAAIqB,aAAWC,IAAa,eAClC,IAEIuH,EAAS8B,eACPzL,EAAYC,YAAiBsE,KAAiB,GAA9CvE,QACFqc,EAAiBiC,KACjB0D,EAAgBlhB,mBAAQ,iBAAM,CAAC+gB,EAAUC,KAAS,CAACD,EAAUC,IAC7DG,EAAe5G,GAAgB2G,GAErC,EAAsC5hB,mBAAS,IAA/C,mBAAO8hB,EAAP,KAAoBC,EAApB,KACA,EAAoC/hB,wBAA8B4C,GAAlE,mBAAOof,EAAP,KAAmBC,EAAnB,KACA,EAA8DjiB,wBAE5D4C,GAFF,mBAAOsf,EAAP,KAAgCC,EAAhC,KAGA,EAA4CniB,wBAC1C4C,GADF,mBAAOwf,EAAP,KAAuBC,EAAvB,KAGA,EAA0DriB,wBAExD4C,GAFF,mBAAO0f,EAAP,KAA8BC,EAA9B,KAGA,EAAgDviB,wBAC9C4C,GADF,mBAAO4f,EAAP,KAAyBC,EAAzB,KAK2BC,EAEvB7D,GACF1a,IACAsd,EACAE,GALA3C,wBAOF,EAGIH,GAAgC1a,IAAiBud,EAAQU,GAFlCO,EAD3B,EACE3D,wBAC4B4D,EAF9B,EAEE3D,2BAGF,EAAgDjf,wBAC9C4C,GADF,mBAAOigB,EAAP,KAAyBC,EAAzB,KAGA,EAAgD9iB,wBAC9C4C,GADF,mBAAOmgB,EAAP,KAAyBC,EAAzB,KAIA,EAA0BhjB,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,GAAd,KAIAc,qBAAU,WACR4f,GAAYlf,EAAY2f,EAAUgB,KACjC,CAAC3gB,EAAY2f,IAGhBrgB,qBAAU,WAEJugB,GAAoBe,EACtBzU,GAAWnM,EAAY6f,EAAkBQ,GAEzCA,OAA2Bvf,KAE5B,CACDd,EACA4gB,EACAf,EACAQ,IAGF/gB,qBAAU,WAEJghB,GAAkBO,EACpB1U,GAAWnM,EAAYsgB,EAAgBG,GAEvCA,OAAyB3f,KAE1B,CACDd,EACA6gB,EACAP,EACAD,IAGF/gB,qBAAU,WAEJyhB,EACF5U,GAAWnM,EAAY+gB,EAAkBG,GAEzCA,OAAoBpgB,KAErB,CAACd,EAAY+gB,EAAkBG,IAGlC5hB,qBAAU,WACJsgB,GAAUD,IACZM,EAAe,IACfE,OAAcrf,GACd0gB,aAAeC,IAA2B9B,EAAUC,GAAQvf,MAC1D,SAACC,GACC,IAAMohB,EAAM,IAAI5V,YAAUxL,GAAQsH,WAClCqY,EAAeyB,MAEjB,SAACnjB,GAAD,OAAWsF,QAAQC,IAAI,2CAG1B,CAAC8b,EAAQD,EAAUM,IAGtB3gB,qBAAU,WACR,GAAI0gB,EAAa,CACfG,OAAcrf,GACd,IACE6gB,aACE3hB,EACA,CAAC,IAAI8L,YAAUkU,IACf,aACA3f,MAAK,SAACC,GACFA,EAAO0L,QAAwB,OAAd1L,EAAO,GAC1B6f,GAAc,GACL7f,EAAO0L,QAAwB,OAAd1L,EAAO,IACjC6f,GAAc,GACd3hB,GAAS,0CAETA,GACE,6EAIN,MAAOM,GACPN,GAAS,oCAGZ,CAACwB,EAAYggB,IAGhB1gB,qBAAU,WACJ0gB,EACF4B,aAAoBH,IAA2BzB,GAC5C3f,MAAK,SAACC,GAAD,OACJ0gB,EAAoB,IAAIlV,YAAUxL,GAAQsH,eAE3ClH,OAAM,SAAC5B,GACNkiB,OAAoBlgB,MAGxBkgB,OAAoBlgB,KAErB,CAACkf,IAEJ1gB,qBAAU,WACJmI,GAAUA,EAAO+B,WAAaoW,GAChCtC,KAAMC,0BACJC,KACAC,KACA,IAAI3R,YAAU8T,GACdnY,EAAO+B,WAAa,IAAIsC,YAAU,KAClCzL,MACA,SAACC,GACCigB,EAAkBjgB,EAAOsH,eAE3B,SAACrJ,SAGJ,CAACqhB,EAAQnY,IAKZ,IAAMoa,GAAgB1iB,sBAAW,yCAC/B,WAAOuN,GAAP,kBAAAvG,EAAA,sEAC4B2b,aACxB9hB,GACA,UAAAyH,EAAO+B,iBAAP,eAAkB5B,aAAc,GAChC6Z,IACA9B,EACAC,EACAC,GAAoB,GACpBS,GAAkB,GAClByB,sBAAWrV,EAAQgU,GAAkBtU,YATzC,cACQ4V,EADR,gBAWela,aAAmBL,EAAQzH,EAAYgiB,GAXtD,mFAD+B,sDAc/B,CACEhiB,EACA2f,EACAE,EACAD,EACAU,EACA7Y,EACAiZ,IAIEuB,GAAY9iB,uBAChB,SAACuN,GACC,IACE,OAAOqV,sBAAWrV,EAAQgU,GAAkBtU,WAC5C,MAAOtN,GACP,OAAOwM,OAAO,MAGlB,CAACoV,IAGG8hC,GAAmBrjD,uBACvB,SAACuN,GACC,IAAMwV,EAAmBvC,GAAYC,GAAUI,GAAeE,EACxDiC,EAAgBvB,GAA0BC,EAC1CuB,EAAwBH,GAAUvV,GAAUpB,OAAO,GACnD+W,EACJjC,GACA1T,GACAuV,GAAUvV,IAAWuV,GAAU7B,GAC3BkC,EACJrB,GACAvU,GACAoC,WAAWpC,IAAWoC,WAAWmS,GAEnC,OAAKiB,EAEOpkB,EAEAqkB,EAEAzV,EAEA0V,EAEAC,EAEAC,EAGH,GAFA,gEAFA,mEAFA,qCAFA,+BAFA,qDAFA,2BAFA,iCAiBX,CACE3C,EACAsC,GACA7B,EACAQ,EACA9iB,EACAkiB,EACAE,EACAe,EACArB,EACAiB,IAIE6B,GAAcvjB,uBAClB,SAAC4B,GAAqB,IAAD,UACb4hB,EAAY,UAAGxI,EAAetZ,YAAlB,aAAG,EAAqB+L,MACxC,SAACgN,GAAD,OAAOA,EAAE7Y,UAAYA,KAEjB6hB,EAAY,UAAG7C,EAAalf,YAAhB,aAAG,EAAmBgiB,IAAI9hB,GAE5C,MAAO,CACLuR,QAAoB,OAAZqQ,QAAY,IAAZA,OAAA,EAAAA,EAAcrQ,UAAd,OAAwBsQ,QAAxB,IAAwBA,GAAxB,UAAwBA,EAAc/hB,YAAtC,aAAwB,EAAoByR,cAAUxR,EAC9DoK,MAAkB,OAAZyX,QAAY,IAAZA,OAAA,EAAAA,EAAczX,QAAd,OAAsB0X,QAAtB,IAAsBA,GAAtB,UAAsBA,EAAc/hB,YAApC,aAAsB,EAAoBqK,YAAQpK,EACxDoX,MAAkB,OAAZyK,QAAY,IAAZA,OAAA,EAAAA,EAAcG,WAAd,OAAyBF,QAAzB,IAAyBA,GAAzB,UAAyBA,EAAc/hB,YAAvC,aAAyB,EAAoBkiB,WAAOjiB,KAG9D,CAACif,EAAalf,KAAMsZ,EAAetZ,OAG/BD,GAAauZ,EAAevZ,YAAcmf,EAAanf,WACvDshB,MACiB,OAArBxB,QACqB5f,IAArB4f,GACAJ,GACAF,GACAW,GACAE,GA+DF,OA5DuDriB,mBAAQ,WAC7D,IACsB,YADlBiC,EAAyC,KA+B7C,OA9BIqhB,KACFrhB,EAAO,CACLmf,cACAL,WACAC,SACAc,mBACA+hC,iCAAkC7hC,EAClC8hC,+BAAgC7hC,EAChC8hC,2BAA4B9iC,EAC5B+iC,yBAA0BtiC,EAC1BuiC,kCAAmCziC,EACnC0iC,gCAAiCtiC,GAAyB,KAC1DO,mBACAE,mBAEA8hC,UAAU,UAAArgC,GAAY/C,UAAZ,eAAuBzU,OAAQ,KACzC8Y,YAAY,UAAAtB,GAAY/C,UAAZ,eAAuBrN,SAAU,KAC7C0wC,UAAU,UAAAtgC,GAAY/C,UAAZ,eAAuBzH,OAAQ,KACzC+qC,QAAQ,UAAAvgC,GAAY9C,UAAZ,eAAqB1U,OAAQ,KACrC+Y,UAAU,UAAAvB,GAAY9C,UAAZ,eAAqBtN,SAAU,KACzC4wC,QAAQ,UAAAxgC,GAAY9C,UAAZ,eAAqB1H,OAAQ,KAErC4I,0BAEA0hC,iBAAkBA,GAElB3gC,mBAIG,CACLjhB,WAAYA,GACZrC,MAAOA,IAAU2jB,GACjBlhB,WAAY,KACZH,UAED,CACDtC,EACAqC,GACAshB,GACAlC,EACAL,EACAC,EACAc,EACAE,EACAC,EACAhB,EACAS,EACAF,EACAI,EACAO,EACAE,EACAyB,GACA8/B,GACA3gC,GACAf,ICrVeqiC,CACfZ,EAAaa,YACbb,EAAac,UACbd,EAAae,yBAGf,EAA0DplD,oBAAS,GAAnE,mBAAOmjB,EAAP,KAA8BC,EAA9B,KACA,EAAsCpjB,mBAAS,IAA/C,mBAAO2J,EAAP,KAAoB0Z,EAApB,KACA,EAA4CrjB,mBAAS,IAArD,mBAAOqlD,EAAP,KAAuBC,EAAvB,KAEMC,EAAqBtkD,uBAAY,WAChCmmB,EAASzkB,OAGdygB,GAAyB,GACzBkiC,EAAkB,IAClBl+B,EAASzkB,KACNghB,cAAcyD,EAASzkB,KAAKgiD,mCAC5BxiD,MAAK,SAACC,GACLghB,GAAyB,GACzBC,EAAejhB,MAEhBI,OAAM,SAAC5B,GACN0kD,EAAkB,gCAClBliC,GAAyB,SAE5B,CAACgE,EAASzkB,OAEP6iD,EACJp+B,EAASzkB,MACTykB,EAASzkB,KAAK2hD,iBACZl9B,EAASzkB,KAAKgiD,mCASlB,OANAvjD,qBAAU,YACJgmB,EAASzkB,MAAQykB,EAAS/mB,QAC5B8oB,MAED,CAAC/B,EAAU+B,IAET/B,EAASzkB,KAcHgH,EAEP,qBAAK5K,UAAWD,EAAQqjD,SAAxB,SACE,gCACE,cAACnjD,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,2GAIA,cAACmD,GAAD,CACExG,QAASwE,IACT8B,GAAI,CAAEO,GAAImD,EAAapB,MAAO,UAOpC,sBAAKxJ,UAAWD,EAAQ8pB,SAAxB,UACE,gCACE,cAAC5pB,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,2BAGA,cAAChE,EAAA,EAAD,CAAYD,UAAWD,EAAQ0O,QAA/B,SACG4Z,EAASzkB,KAAKgiD,oCAEjB,cAACzwC,GAAD,CACEvU,QAASwE,IACTtB,QAASukB,EAASzkB,KAAK8hD,2BACvBrwC,OAAQgT,EAASzkB,KAAKmjB,iBAAcljB,EACpCyR,UAAW+S,EAASzkB,KAAKkiD,eAAYjiD,OAGzC,gCACE,cAAC5D,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,yBAGA,cAAC,KAAD,CAAmB4M,SAAS,aAE9B,gCACE,cAAC5Q,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,4BAGA,cAAChE,EAAA,EAAD,CAAYD,UAAWD,EAAQ0O,QAA/B,SACG4Z,EAASzkB,KAAKgiD,oCAEjB,cAACzwC,GAAD,CACEvU,QAASwE,IACTtB,QAASukB,EAASzkB,KAAK+hD,yBACvBtwC,OAAQgT,EAASzkB,KAAKojB,eAAYnjB,EAClCyR,UAAW+S,EAASzkB,KAAKoiD,aAAUniD,OAGrCwkB,EAASzkB,KAAK6hD,+BAYd,qBAAKzlD,UAAWD,EAAQmqB,cAAxB,SACE,cAACljB,EAAA,EAAD,CACEL,WAAYyd,EACZnd,QAASu/C,EACTllD,MACE+mB,EAAS/mB,MACL+mB,EAAS/mB,MACTglD,IAEAG,GAEA,IAEN//C,WACI2hB,EAAS/mB,SAAWmlD,GAAiBriC,EAb3C,uBAZF,qBAAKpkB,UAAWD,EAAQmqB,cAAxB,SACE,cAACvJ,GAAD,CACEZ,YAAaulC,EAAac,UAC1BpmC,sBAAqB,UAAEqI,EAASzkB,YAAX,aAAE,EAAe+hD,yBACtC1lC,wBACEoI,EAASzkB,KAAK6hD,+BAEhBvlC,2BAA4BmI,EAASzkB,KAAKigB,+BAxElD,qBAAK7jB,UAAWD,EAAQqjD,SAAxB,SACE,gCACE,cAACnjD,EAAA,EAAD,CAAYC,QAAQ,QAAQ+D,MAAM,gBAAlC,4DAGA,cAACkR,GAAD,CACEvU,QAASwE,IACTtB,QAASwhD,EAAaa,mBAsGlC,IAAMO,GAAgB,yCAAG,WACvB/3C,EACAwc,GAFuB,kBAAAjiB,EAAA,sEAKfnG,EAAa,IAAIC,aAAWC,KAC5B8O,EAA8C,GAN/B,SAOOhP,EAAW+xB,8BACrC,IAAIjmB,YAAUF,GACd,CAAEomB,UAAWvU,MACb,aAVmB,qBAYPzS,MAAM0O,SAAQ,SAACtB,GAAU,IAAD,cACpC,GACkB,MAAhBA,EAAKa,UAAL,UACAb,EAAKa,QAAQpY,YADb,iBACA,EAAmB0e,cADnB,iBACA,EAA2BtX,YAD3B,iBACA,EAAiCuX,mBADjC,aACA,EAA8CC,iBACU,OAAxD,UAAArH,EAAKa,QAAQpY,YAAb,mBAAmB0e,OAAOtX,YAA1B,mBAAgCuX,mBAAhC,eAA6C9S,QAC7C,CACA,IAAM02C,EAAchrC,EAAKa,QAAQpY,KAAK0e,OAAOtX,KAAK4R,KAC5CwpC,EAAYj7B,EAAavF,IAAIugC,GAC/BC,GACFr0C,EAAOvJ,KAAK,CACV29C,cACAC,UAAWA,EACXC,wBAAyBlrC,EAAKsW,OAAO9mB,WACrCg8C,gBAAiBxrC,EAAKa,cAzBT,kBA+BdjK,GA/Bc,yCAiCrBnL,QAAQtF,MAAR,MAjCqB,kBAkCd6L,QAAQ0C,OAAO,uCAlCD,0DAAH,wDAsCP,SAAS+2C,KAAsB,IAAD,EACrChmD,EAAUwE,IACVrF,EAAU1B,KAChB,EAAmCyC,YAAiBF,GAA5CC,EAAR,EAAQA,QAAS8N,EAAjB,EAAiBA,cACXwc,EAAexpB,mBAAQ,kBAAM6nB,aAAqB5oB,KAAU,CAACA,IACnE,EAAkCK,mBAEhC,MAFF,mBAAOuqB,EAAP,KAAkBC,EAAlB,KAGA,EAA4CxqB,mBAAS,IAArD,mBAAOyqB,EAAP,KAAuBC,EAAvB,KACA,EAAgD1qB,oBAAS,GAAzD,mBAAO2qB,EAAP,KAAyBC,EAAzB,KAKA,EAAgE5qB,mBAAS,GAAzE,mBAAO6qB,EAAP,KAAiCC,EAAjC,KACMC,EAAqB9pB,uBAAY,WACrC6pB,GAA4B,SAAC3D,GAAD,OAAeA,EAAY,OACtD,IACG5mB,EACJoqB,GACCJ,GACCA,EAAUzc,QACV+c,EAA2BN,EAAUzc,OAEzC1M,qBAAU,WACR,GAAIxB,GAAW8N,EAAe,CAC5B,IAAIzB,GAAY,EAqBhB,OApBA2e,GAAoB,GACpBF,EAAkB,IAClB+6B,GAAiB/3C,EAAewc,GAAc/nB,MAC5C,SAACC,GACM6J,IACH6e,EAA4B,GAC5BN,EAAapoB,EAAO0T,QAAO,SAAC4F,GAAD,OAAOA,EAAEgqC,iBAAmBhqC,MACvDkP,GAAoB,OAGxB,SAACvqB,GACM4L,IACH2e,GAAoB,GACpBF,EACE,uDAMD,WACLze,GAAY,MAGf,CAACrM,EAAS8N,EAAewc,IAE5B,IAAMiB,EAAoBZ,GAAaA,EAAUzc,OAAS,EACpDuL,EAAS,UAAGtM,IAAapN,UAAhB,aAAG,EAAuBqN,KAEnCvE,EACJ,sBAAK1J,UAAWD,EAAQioB,aAAxB,UACE,cAAC/nB,EAAA,EAAD,CAAYC,QAAQ,KAApB,0EAEIoa,EAAY,MAAQA,EAAY,GAFpC,wCAMA,cAAC6L,GAAA,EAAD,IACEtlB,EAEE6qB,EACF,cAACzrB,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BwrB,IAE1B,qCACE,qBAAK1rB,UAAWD,EAAQiG,SACxB,cAACe,EAAA,EAAD,CAAkB/G,UAAWwB,EAAY,GAAKzB,EAAQkqB,SACtD,sBAAKjqB,UAAYwB,EAAiBzB,EAAQkqB,OAAb,GAA7B,UACE,cAAChqB,EAAA,EAAD,UACGmsB,EACG,qHACA,sDAEN,qBAAKpsB,UAAWD,EAAQiG,SAN1B,OAOGwlB,QAPH,IAOGA,OAPH,EAOGA,EAAWhc,KAAI,SAACxE,GACf,OACE,cAACq6C,GAAD,CACEC,aAAct6C,EACdof,eAAgB4B,aAlB1B,cAAC/rB,EAAA,EAAD,CAAYC,QAAQ,QAApB,4CA4BN,OACE,cAAC2X,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAAC6R,GAAA,EAAD,CAAO3pB,UAAWD,EAAQgiB,UAA1B,SAAsCrY,MClU5C,IAAMrL,GAAYC,aAAW,SAACC,GAAD,gBAAY,CACvCsoD,OAAQ,CACN3nD,WAAYC,IAAO0a,+BACnB,uBAAwB,CACtB/T,OAAQ,OACRpH,MAAO,OACPoZ,SAAU,OAGd9R,OAAQ,CACNuU,KAAM,EACN7b,MAAO,SAETkhC,KAAK,2BACArhC,EAAMuoD,WAAWC,OADlB,OAEF9iD,MAAO1F,EAAM2F,QAAQ8iD,KAAKC,QAC1B1yC,WAAYhW,EAAMM,QAAQ,IAHxB,cAIDN,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BuV,WAAYhW,EAAMM,QAAQ,OAL1B,cAODN,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BuV,WAAYhW,EAAMM,QAAQ,KAR1B,cAUF,WAAY,CACVoF,MAAO1F,EAAM2F,QAAQ+iD,QAAQ7iD,QAX7B,IAcJ8iD,GAAI,CACFhoD,WACE,+NACF6G,QAAS,OACTkU,cAAe,SACfC,UAAW,SAEbxQ,QAAQ,aACN5D,OAAQvH,EAAMM,QAAQ,EAAG,IACxBN,EAAMQ,YAAYooD,GAAG,MAAQ,CAC5BrhD,OAAQvH,EAAMM,QAAQ,EAAG,KAG7BuoD,UAAW,CACTrhD,QAAS,cACT2K,WAAY,SACZ,UAAW,CACT+D,eAAgB,SAGpB4yC,UAAU,2BACL9oD,EAAMuoD,WAAWQ,IADb,uBAEN/oD,EAAMQ,YAAYC,KAAK,MAAQ,CAC9B6R,SAAU,KAHL,2BAKK,OALL,gJAOe,QAPf,+BAQS,QART,oCASc,eATd,kCAUY,QAVZ,iCAWW,eAXX,8BAYQ,OAZR,wBAaE,gBAbF,2BAcKtS,EAAMM,QAAQ,KAdnB,IAgBT0oD,YAAU,mBACPhpD,EAAMQ,YAAYooD,GAAG,MAAQ,CAC5B3yC,YAAajW,EAAMM,QAAQ,OAFrB,cAIPN,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BwV,YAAajW,EAAMM,QAAQ,OALrB,cAOPN,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BwV,YAAajW,EAAMM,QAAQ,KARrB,GAWV2oD,eAAgB,CACdC,gBAAgB,0BAAD,OAA4BtoD,IAAOC,KAAnC,gBAA+CD,IAAOuoD,UAAtD,oBAA2EvoD,IAAOC,KAAlF,mBAAiGD,IAAOuoD,UAAxG,aACf9uC,WAAY,QACZohB,eAAgB,YAChB2tB,UAAW,gBACX,UAAW,CACT5tB,mBACE,iBAGN6tB,WAAY,CACV1oD,WAAW,4BAAD,OAA8BC,IAAOC,KAArC,eAAgDD,IAAOE,MAAvD,QACVsa,QAASpb,EAAMM,QAAQ,EAAG,IAE5B8Z,aAAc,CACZ1S,OAAQ,GACR8Q,OAAQ,cACR6B,WAAY,cACZ,UAAW,CACT7B,OAAQ,eAEV8B,cAAe,SACfrE,YAAajW,EAAMM,QAAQ,GAC3BkH,QAAS,oBAmME8hD,OA/Lf,WACE,IAAM9nD,EAAU1B,KACV2qC,EAASC,eACT6e,EAAaC,YAAc,CAAEC,KAAM,IAAKC,OAAO,IAC7Cz/C,EAASC,cAATD,KACA0/C,EAAaC,cAAbD,SACFE,EAAkBlmD,uBACtB,SAACiR,EAAOpF,GACNvF,EAAKuF,KAEP,CAACvF,IAEH,OACE,sBAAKxI,UAAWD,EAAQmnD,GAAxB,UACE,cAACmB,EAAA,EAAD,CAAQjuC,SAAS,SAASnW,MAAM,UAAUjE,UAAWD,EAAQ8mD,OAA7D,SACE,eAACyB,EAAA,EAAD,WACE,eAAChtC,EAAA,EAAD,CAAMnb,UAAWob,IAAYC,GAAG,IAAIxb,UAAWD,EAAQqnD,UAAvD,UACE,qBACEpuC,IAAKO,GACLL,IAAI,WACJlZ,UAAWD,EAAQ4Y,eAErB,cAAC1Y,EAAA,EAAD,CAAYD,UAAWI,YAAKL,EAAQ6/B,KAAM7/B,EAAQsnD,WAAlD,yBAIF,qBAAKrnD,UAAWD,EAAQiG,SACxB,cAACuiD,EAAA,EAAD,CAAQC,eAAe,MAAMC,QAAM,EAAnC,SACE,qBAAKh4C,MAAO,CAAE1K,QAAS,OAAQ2K,WAAY,UAA3C,SACGo3C,EACC,qCACE,cAAC5yC,EAAA,EAAD,CAASwB,MAAM,8BAAf,SACE,cAACqC,EAAA,EAAD,CACE5Y,UAAWuoD,IACXltC,GAAG,SACHnT,KAAK,QACLrI,UAAWI,YAAKL,EAAQ6/B,KAAM7/B,EAAQwnD,YAJxC,SAME,cAACoB,EAAA,EAAD,QAGJ,cAAC1gD,EAAA,EAAD,CACE9H,UAAWob,IACXC,GAAG,YACHtb,QAAQ,YACR+D,MAAM,UACNoE,KAAK,QACLrI,UAAWD,EAAQynD,eANrB,gCAYF,cAACtyC,EAAA,EAAD,CAASwB,MAAM,eAAf,SACE,cAACzO,EAAA,EAAD,CACEC,KAAK,iDACLC,OAAO,SACPC,IAAI,sBACJlI,QAAQ,WACRmW,QAAS,cAACuyC,EAAA,EAAD,IALX,uBAaR,cAACL,EAAA,EAAD,CAAQC,eAAe,MAAMK,MAAI,EAAjC,SACGf,EACC,qCACE,cAAC5yC,EAAA,EAAD,CAASwB,MAAM,8BAAf,SACE,cAACqC,EAAA,EAAD,CACE5Y,UAAWuoD,IACXltC,GAAG,SACHnT,KAAK,QACLrI,UAAWD,EAAQ6/B,KAAO,IAAM7/B,EAAQwnD,WAJ1C,SAME,cAACoB,EAAA,EAAD,QAGJ,cAACzzC,EAAA,EAAD,CAASwB,MAAM,wCAAf,SACE,cAACqC,EAAA,EAAD,CACE5Y,UAAWuoD,IACXltC,GAAG,YACHnT,KAAK,QACLrI,UAAWD,EAAQ6/B,KAJrB,SAME,cAAC1xB,EAAA,EAAD,WAKN,cAACgH,EAAA,EAAD,CAASwB,MAAM,eAAf,SACE,cAACqC,EAAA,EAAD,CACE7Q,KAAK,iDACLC,OAAO,SACPC,IAAI,sBACJC,KAAK,QACLrI,UAAWD,EAAQ6/B,KALrB,SAOE,cAACgpB,EAAA,EAAD,eAOC,YAAZthD,IAAwB,KACvB,cAAC+gD,EAAA,EAAD,CAAQjuC,SAAS,SAASpa,UAAWD,EAAQ6nD,WAA7C,SACE,eAAC3nD,EAAA,EAAD,CAAYwQ,MAAO,CAAEhS,UAAW,UAAhC,wCAC8B6I,IAD9B,2BAKH0hC,EACC,cAACqf,EAAA,EAAD,CAAQjuC,SAAS,SAASpa,UAAWD,EAAQ6nD,WAA7C,SACE,cAAC3nD,EAAA,EAAD,CAAYwQ,MAAO,CAAEhS,UAAW,UAAhC,2FAKA,KACJ,sBAAKuB,UAAWD,EAAQ2J,QAAxB,UACG,CAAC,YAAa,OAAQ,WAAWqR,SAASmtC,GACzC,cAACrwC,EAAA,EAAD,CAAWC,SAAS,KAAKrH,MAAO,CAAE4pB,cAAe,IAAjD,SACE,eAACyuB,EAAA,EAAD,CACE/6C,MAAOm6C,EACPhoD,QAAQ,YACR0T,SAAUw0C,EACVW,eAAe,UAJjB,UAME,cAACC,EAAA,EAAD,CAAKh1C,MAAM,SAASjG,MAAM,cAC1B,cAACi7C,EAAA,EAAD,CAAKh1C,MAAM,OAAOjG,MAAM,SACxB,cAACi7C,EAAA,EAAD,CAAKh1C,MAAM,SAASjG,MAAM,UAAUyN,GAAG,iBAGzC,KACJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOysC,OAAK,EAACD,KAAK,YAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,OAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,UAAlB,SACE,cAACiB,GAAA,EAAD,MAEF,cAAC,IAAD,CAAOhB,OAAK,EAACD,KAAK,uBAAlB,SACE,cAACjf,GAAD,MAEF,cAAC,IAAD,CAAOkf,OAAK,EAACD,KAAK,yBAAlB,SACE,cAACnE,GAAD,MAEF,cAAC,IAAD,CAAOoE,OAAK,EAACD,KAAK,YAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,iDAAlB,SACE,cAACkB,GAAD,CAAWtoD,QAASwE,QAEtB,cAAC,IAAD,CAAO6iD,OAAK,EAACD,KAAK,kCAAlB,SACE,cAACkB,GAAD,CAAWtoD,QAAS4G,QAEtB,cAAC,IAAD,CAAOygD,OAAK,EAACD,KAAK,2CAAlB,SACE,cAACkB,GAAD,CAAWtoD,QAAS+G,QAEtB,cAAC,IAAD,CAAOsgD,OAAK,EAACD,KAAK,qBAAlB,SACE,cAAC98B,GAAD,CAAiBtqB,QAAS4G,QAE5B,cAAC,IAAD,CAAOygD,OAAK,EAACD,KAAK,8BAAlB,SACE,cAAC98B,GAAD,CAAiBtqB,QAAS+G,QAE5B,cAAC,IAAD,CAAOsgD,OAAK,EAACD,KAAK,mBAAlB,SACE,cAACpB,GAAD,MAEF,cAAC,IAAD,CAAOqB,OAAK,EAACD,KAAK,SAAlB,SACE,cAACmB,GAAD,MAEF,cAAC,IAAD,CAAOlB,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAUxsC,GAAG,cAInB,qBAAKxb,UAAWD,EAAQiG,SACxB,cAAC8S,GAAD,QC3UAza,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6qD,mBAAoB,CAClBtxC,SAAU,OACVpZ,MAAO,OACP0b,SAAU,YAEZivC,mBAAoB,CAClBjvC,SAAU,WACV0f,QAAS,EACTwvB,KAAM,MACN1uC,UAAW,qBACXlc,MAAO,OACPoZ,SAAU,OACVylB,SAAU,SACVx3B,QAAS,OACT0S,eAAgB,UAElB8wC,UAAW,CACT7qD,MAAO,qBACPoZ,SAAU,UAEZ0xC,QAAS,CACPzyC,OAAQ,YACR2B,QAAS,UAeE+wC,GAXS,WACtB,IAAM1pD,EAAU1B,KAGhB,OACE,qBAAK2B,UAAWD,EAAQqpD,mBAAxB,SACE,qBAAKppD,UAAWD,EAAQspD,wB,4BCjCTK,G,oDACnB,WAAYjqC,GAAQ,IAAD,+BACjB,cAAMA,IACD/B,MAAQ,CAAEisC,UAAU,GAFR,E,sDASnB,SAAkBroD,EAAOsoD,GACvBhjD,QAAQtF,MAAMA,EAAOsoD,K,oBAGvB,WACE,OAAI5V,KAAKt2B,MAAMisC,SAEX,cAAC1pD,EAAA,EAAD,CAAYC,QAAQ,KAAKuQ,MAAO,CAAEhS,UAAW,SAAUG,UAAW,IAAlE,wEAMGo1C,KAAKv0B,MAAM7f,Y,uCAjBpB,SAAgC0B,GAC9B,MAAO,CAAEqoD,UAAU,O,GAPoBE,IAAMC,WCGpCC,GAAQC,aAAe,CAClCC,QAAS,CACPC,OAAQC,IACR54C,IAAK64C,KACLj5C,SAAUk5C,KACVtrC,OAAQurC,MCKZC,IAAShP,OACP,cAAC,GAAD,UACE,cAAC,IAAD,CAAUwO,MAAOA,GAAjB,SACE,eAACS,EAAA,EAAD,CAAejsD,MAAOA,IAAtB,UACE,cAACksD,EAAA,EAAD,IACA,cAAC,GAAD,UACE,cAAC,IAAD,CAAkBC,SAAU,EAA5B,SACE,cAACC,GAAA,EAAD,UACE,cAAC,KAAD,UACE,cAAC,IAAD,UACE,cAAC,KAAD,UACE,eAAC,IAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,0BAWpBC,SAASC,eAAe,U,gCCxC1B,mkFASatzC,EAAyB,SAACmG,GAAD,OACpCA,EAAMwsC,OAAO5yC,YACFlR,EAA0B,SAACsX,GAAD,OACrCA,EAAMwsC,OAAOl+C,aACF7F,EAA0B,SAACuX,GAAD,OACrCA,EAAMwsC,OAAOjhD,aACFzD,EAA0B,SAACkY,GAAD,OACrCA,EAAMwsC,OAAOplD,aACFS,EAAuB,SAACmY,GAAD,OAAsBA,EAAMwsC,OAAO5kD,UAC1DgpC,EAA2B,SAAC5wB,GAAD,OACtCA,EAAMwsC,OAAO7b,cACFhpC,EAAwB,SAACqY,GAAD,OACnCA,EAAMwsC,OAAOxlD,WACFgB,EAAyB,SAACgY,GAAD,OACpCA,EAAMwsC,OAAOzkD,YACFG,EAAuB,SAAC8X,GAAD,OAAsBA,EAAMwsC,OAAOvkD,UAC1DoN,EAA+B,SAAC2K,GAAD,QACxCA,EAAMwsC,OAAOl+C,eAAiB0R,EAAMwsC,OAAOjhD,aAElCiD,EAA+B,SAACwR,GAAD,OAC1C3K,EAA6B2K,MAAYA,EAAMwsC,OAAOplD,aAC3CsH,EAA6B,SAACsR,GAAD,QACtC4wB,EAAyB5wB,IAChBjG,EAA+B,SAACiG,GAAD,QACxC9X,EAAqB8X,IACZzK,EAA+B,SAACyK,GAAD,OAC1CrY,EAAsBqY,IAAUtR,EAA2BsR,IAMhD+qB,EAAsB,SAAC/qB,GAAD,OAAsBA,EAAMnM,IAAI+F,YACtDiV,EAAuB,SAAC7O,GAAD,OAAsBA,EAAMnM,IAAIvF,aACvDygB,EAAuB,SAAC/O,GAAsB,IAAD,EACxD,OAAO,UAAAA,EAAMnM,IAAIgf,gCAAV,eAAoC5a,eAAW9R,GAE3CiqB,EAAwC,SAACpQ,GAAD,OACnDA,EAAMnM,IAAIsc,8BACCG,EAAuB,SAACtQ,GAAD,OAAsBA,EAAMnM,IAAIjR,aACvD2tB,EAAuB,SAACvQ,GAAD,OAAsBA,EAAMnM,IAAIhR,aACvD2tB,EAAyB,SAACxQ,GAAD,OACpCA,EAAMnM,IAAIqe,eACCgB,EAA+B,SAAClT,GAAD,OAC1CA,EAAMnM,IAAIof,qBACC/D,EAAoC,SAAClP,GAAD,OAC/CA,EAAMnM,IAAIgf,0BACCkF,EAAqC,SAAC/X,GAAD,OAChDA,EAAMnM,IAAIu5C,2BACCzjB,EAA+B,SAAC3pB,GAAD,aAC1C,UAAAA,EAAMnM,IAAIgf,gCAAV,eAAoC/N,iBAAkB,IAC3C2L,EAAuB,SAACzQ,GAAD,OAAsBA,EAAMnM,IAAIzM,aACvDqrB,EAA4B,SAACzS,GAAD,OACvCA,EAAMnM,IAAI2e,kBACC0X,EAAuB,SAAClqB,GAAD,uBAClCA,EAAMnM,IAAIqQ,YAAYhe,YADY,aAClC,EAA4BE,SACjBirB,EAAsB,SAACrR,GAAD,OAAsBA,EAAMnM,IAAI3M,YACtDmmD,EAAwB,SAACrtC,GAAD,OACnCA,EAAMnM,IAAI88B,cACCvf,EAAqB,SAACpR,GAAD,OAAsBA,EAAMnM,IAAI7M,WACrDsqB,EAAuB,SAACtR,GAAD,OAAsBA,EAAMnM,IAAIvM,aACvDiqB,EAAoB,SAACvR,GAAD,OAAsBA,EAAMnM,IAAIrM,UACpDoiC,EAAuB,SAAC5pB,GACnC,IAAKA,EAAMnM,IAAIvF,YACb,MAAO,wBAET,IAAK0R,EAAMnM,IAAIgf,yBACb,MAAO,gBAET,GACE7S,EAAMnM,IAAIvF,cAAgB5G,MACzBsY,EAAMnM,IAAIgf,yBAAyBhkB,UAEpC,MAAO,4BAET,IAAKmR,EAAMnM,IAAIgf,yBAAyB/N,eACtC,MAAO,2BAET,GAAoD,IAAhD9E,EAAMnM,IAAIgf,yBAAyBlO,SAErC,MAAO,sCAET,IAEE,GACEyC,qBACEpH,EAAMnM,IAAIgf,yBAAyB/N,eACnC9E,EAAMnM,IAAIgf,yBAAyBlO,UACnC2oC,IAAI,GAEN,MAAO,oCAET,MAAOnpD,GACP,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAGmC,SACEnC,EAAEmC,QAAQ66B,UAAU,EAAGh9B,EAAEmC,QAAQinD,QAAQ,MAE3C,mBAIE1jB,EAA4B,SAAC7pB,GAAD,OACtC4pB,EAAqB5pB,IACXgT,EAAuB,SAAChT,GACnC,IAAMwtC,EAAc5jB,EAAqB5pB,GACzC,OAAIwtC,EACI,oBAAN,OAA2BA,GAExBxtC,EAAMnM,IAAIzM,YAGX4Y,EAAMnM,IAAIvF,cAAgB0R,EAAMnM,IAAIzM,YAC/B,uCAGP4Y,EAAMnM,IAAIzM,cAAgBM,KACzBwiC,EAAqBlqB,GAOnBA,EAAMnM,IAAI2e,sBAAf,EACS,6BAHAi7B,GAZA,yBAkBE96B,EAA4B,SAAC3S,GAAD,OACtCgT,EAAqBhT,IACX4S,EAA0B,SAAC5S,GAAD,QACnCqtC,EAAsBrtC,IACbirB,EAA4B,SAACjrB,GAAD,QACrCuR,EAAkBvR,IACT8pB,EAA4B,SAAC9pB,GAAD,OACvCoR,EAAmBpR,IAAU4S,EAAwB5S,IAC1CwP,EAAsB,SAACxP,GAAD,OAAsBA,EAAMnM,IAAI0b,YAKtDumB,EAA2B,SAAC91B,GAAD,OACtCA,EAAMvM,SAASmG,YACJkV,EAA4B,SAAC9O,GAAD,OACvCA,EAAMvM,SAASnF,aACJ0gB,EAA4B,SAAChP,GAAsB,IAAD,EAC7D,OAAO,UAAAA,EAAMvM,SAASof,gCAAf,eAAyC5a,eAAW9R,GAEhDkqB,EAA6C,SAACrQ,GAAD,OACxDA,EAAMvM,SAAS0c,8BACJxM,EAA4B,SAAC3D,GAAD,OACvCA,EAAMvM,SAAS7Q,aACJghB,EAA4B,SAAC5D,GAAD,OACvCA,EAAMvM,SAAS5Q,aACJu2B,EAA4B,SAACpZ,GAAD,OACvCA,EAAMvM,SAASwf,qBACJyS,GAAyC,SAAC1lB,GAAD,OACpDA,EAAMvM,SAASof,0BACJmF,GAA0C,SAAChY,GAAD,OACrDA,EAAMvM,SAAS25C,2BACJ5X,GAAoC,SAACx1B,GAAD,aAC/C,UAAAA,EAAMvM,SAASof,gCAAf,eAAyC/N,iBAAkB,IAChDqpB,GAAuB,SAACnuB,GAAD,OAAsBA,EAAMvM,SAAS1B,QAC5D1K,GAA4B,SAAC2Y,GAAD,OACvCA,EAAMvM,SAASrM,aACJ0c,GAAiC,SAAC9D,GAAD,OAC5CA,EAAMvM,SAAS+e,kBACJye,GAAmC,SAACjxB,GAAD,OAC9CA,EAAMvM,SAASyQ,aACJimB,GAA4B,SAACnqB,GAAD,uBACvCA,EAAMvM,SAASyQ,YAAYhe,YADY,aACvC,EAAiCE,SACtBikC,GAAyC,SAACrqB,GAAD,OACpDA,EAAMvM,SAAS22B,0BACJ+G,GAAoC,SAACnxB,GAAD,aAC/C,UAAAA,EAAMvM,SAAS22B,gCAAf,eAAyCtlB,iBAAkB,IAChD3d,GAA2B,SAAC6Y,GAAD,OACtCA,EAAMvM,SAASvM,YACJwmD,GAA6B,SAAC1tC,GAAD,OACxCA,EAAMvM,SAASk9B,cACJ1pC,GAA0B,SAAC+Y,GAAD,OACrCA,EAAMvM,SAASzM,WACJO,GAA4B,SAACyY,GAAD,OACvCA,EAAMvM,SAASnM,aACJG,GAAyB,SAACuY,GAAD,OACpCA,EAAMvM,SAASjM,UACJT,GAA4B,SAACiZ,GAAD,OACvCA,EAAMvM,SAAS5M,aACJ4uC,GAA4B,SACvCz1B,GAEA,IAAKA,EAAMvM,SAASnF,YAClB,MAAO,wBAET,IAAK0R,EAAMvM,SAASof,yBAClB,MAAO,iBAET,IAAK7S,EAAMvM,SAAS1B,OAClB,MAAO,kBAET,GACEiO,EAAMvM,SAASnF,cAAgB5G,MAC9BsY,EAAMvM,SAASof,yBAAyBhkB,UAEzC,MAAO,4BAET,IAAKmR,EAAMvM,SAASof,yBAAyB/N,eAC3C,MAAO,2BAGT,IAEE,GACEsC,qBACEpH,EAAMvM,SAAS1B,OACfiO,EAAMvM,SAASof,yBAAyBlO,UACxC2oC,IAAI,GAEN,MAAO,mCAET,GACElmC,qBACEpH,EAAMvM,SAAS1B,OACfiO,EAAMvM,SAASof,yBAAyBlO,UACxC8J,GACArH,qBACEpH,EAAMvM,SAASof,yBAAyB/N,eACxC9E,EAAMvM,SAASof,yBAAyBlO,WAI5C,MAAO,yCAET,MAAOxgB,GACP,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAGmC,SACEnC,EAAEmC,QAAQ66B,UAAU,EAAGh9B,EAAEmC,QAAQinD,QAAQ,MAE3C,mBAIE7X,GAAiC,SAAC11B,GAAD,OAC3Cy1B,GAA0Bz1B,IAChBytC,GACX,qDACWpc,GAA4B,SAACrxB,GACxC,IAAMwtC,EAAc/X,GAA0Bz1B,GAC9C,OAAIwtC,EACI,oBAAN,OAA2BA,GAExBxtC,EAAMvM,SAASrM,YAGhB4Y,EAAMvM,SAASnF,cAAgB0R,EAAMvM,SAASrM,YACzC,uCAEJ+iC,GAA0BnqB,GAI7Btb,YAAWsb,EAAMvM,SAASrM,cAC1B+iC,GAA0BnqB,KAAWpa,IAAOC,UAAUC,YAE/C2nD,GAEJztC,EAAMvM,SAAS+e,sBAApB,EACS,6BATAi7B,GANA,yBAkBEpf,GAAiC,SAACruB,GAAD,OAC3CqxB,GAA0BrxB,IAChBsuB,GAA+B,SAACtuB,GAAD,QACxC0tC,GAA2B1tC,IAClB+1B,GAAiC,SAAC/1B,GAAD,QAC1CvY,GAAuBuY,IACdsxB,GAAiC,SAACtxB,GAAD,OAC5C/Y,GAAwB+Y,IAAUsuB,GAA6BtuB,IACpDyP,GAA2B,SAACzP,GAAD,OACtCA,EAAMvM,SAAS8b,YAEJ5N,GAAuB,SAAC3B,GACnC,OAAOA,EAAMqB,OAAO7B,gBAGT4vB,GAAsB,SAACpvB,GAClC,OAAOA,EAAMqB,OAAO3B,eAGTgc,GAAmB,SAAC1b,GAC/B,OAAOA,EAAMqB,OAAO1B,a,0LC1RhBhf,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCmV,OAAQ,CACN,oBAAqB,CACnB3N,QAAS,OACT2K,WAAY,WAGhB26C,aAAc,CACZp2C,SAAU,IAEZ24B,KAAM,CACJ3nC,OAAQ,GACR6R,SAAU,QAiBC,SAASrE,EAAT,GAA6D,IAAtCI,EAAqC,EAArCA,OAAWy3C,EAA0B,iBACnEvrD,EAAU1B,IACV2qC,EAASC,cACTsiB,EAAiB5pD,mBACrB,kBACEkS,EAAOkD,QAAO,gBAAGtP,EAAH,EAAGA,GAAH,QAAauhC,IAAiBluB,IAAYC,SAAStT,QACnE,CAACoM,EAAQm1B,IAEX,OACE,cAAC,IAAD,2BAAesiB,GAAf,IAAqBtrD,UAAWI,YAAKL,EAAQ2T,OAAQ43C,EAAKtrD,WAA1D,SACGurD,EAAe/7C,KAAI,SAACwL,GAAD,OAvBE,SAAC,EAA+Bjb,GAAhC,IAAG0H,EAAH,EAAGA,GAAIwG,EAAP,EAAOA,KAAMgN,EAAb,EAAaA,KAAb,OAC1B,eAAC,IAAD,CAAmBlN,MAAOtG,EAA1B,UACE,cAAC,IAAD,CAAczH,UAAWD,EAAQsrD,aAAjC,SACE,qBAAKryC,IAAKiC,EAAM/B,IAAKjL,EAAMjO,UAAWD,EAAQ6tC,SAEhD,cAAC,IAAD,UAAe3/B,MAJFxG,GAsBoB+jD,CAAoBxwC,EAAOjb,W,4GCjDrD0rD,GAA6B,EAE3BC,EAAiB,mBAC1BD,EAA4BE,IAAmB58C,QAE5C,SAAe7E,EAAtB,wC,4CAAO,WACL0hD,EACA5hD,EACAH,EACAgiD,GAJK,iBAAA3iD,EAAA,sDAOD4iD,EAAW,EAPV,UAQGzoD,EARH,wBASHyoD,IATG,SAUG,IAAI3+C,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAVhD,gCAYc2+C,YACbJ,IAAmBD,KACnBE,EACA5hD,EACAH,GAhBD,OAYDxG,EAZC,mEAmBqBQ,IAAlBgoD,GAA+BC,EAAWD,GAnB7C,oFAwBExoD,GAxBF,2D,gKCNDsnD,EAAcd,IAAMmC,eAAuB,GAEpCC,EAAsB,SAAC,GAI7B,IAHLrsD,EAGI,EAHJA,SAIA,EAA0CqB,oBAAS,GAAnD,mBAAOirD,EAAP,KAAsBC,EAAtB,KAkCA,OAhCA9pD,qBAAU,WACR,IAAI+pD,EAAc,GACZC,EAAiB,CACrB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAiB,SAACn5C,GACtB,IAAMo5C,EAAIp5C,EAAMq5C,QAAQ7hD,WACpB4hD,IAAMF,EAAeD,EAAYr9C,SACnCq9C,EAAY5jD,KAAK+jD,GACbH,EAAYr9C,SAAWs9C,EAAet9C,SACxCq9C,EAAc,GACdD,GAAiB,SAACM,GAAD,OAAWA,OAG9BL,EAAc,IAIlB,OADAz0C,OAAO+0C,iBAAiB,UAAWJ,GAC5B,WACL30C,OAAOg1C,oBAAoB,UAAWL,MAEvC,IAGD,cAAC3B,EAAYiC,SAAb,CAAsB7+C,MAAOm+C,EAA7B,SACGtsD,KAKMqpC,EAAiB,WAC5B,OAAO4jB,qBAAWlC,K,iCCnDL,QAA0B,iC,iCCA1B,QAA0B,kC,iCCA1B,QAA0B,qC,iCCAzC,qCAwBe5hC,IApBW,WACxB,MACEtoB,cADMomB,EAAR,EAAQA,QAASimC,EAAjB,EAAiBA,WAAYxmC,EAA7B,EAA6BA,cAAeymC,EAA5C,EAA4CA,cAE5C,OACE,qCACE,cAAC,IAAD,CACElmC,QAASA,EACTimC,WAAYA,EACZE,YAAa1mC,EACbnE,GAAImE,GAAiB,KAEtBymC,EACC,cAAC,IAAD,CAAY7sD,QAAQ,QAAQ+D,MAAM,QAAlC,SACG8oD,IAED,U,iCCnBV,uDAQM1uD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuO,KAAM,CACJrO,UAAW,SACXqH,OAAO,GAAD,OAAKvH,EAAMM,QAAQ,GAAnB,WACNH,MAAO,OACPoZ,SAAU,KAEZm1C,iBAAkB,CAChB14C,WAAYhW,EAAMM,QAAQ,QAoBfsnB,IAhBS,WACtB,IAAMpmB,EAAU1B,IACVmM,EAAS8B,cACf,OACE,sBAAKtM,UAAWD,EAAQ+M,KAAxB,UACE,cAAC,IAAD,IACCtC,GACC,cAAC,IAAD,CACE0iD,UAAW,cAAC,IAAD,IACXltD,UAAWD,EAAQktD,wB,iCC7Bd,QAA0B,iC,iCCA1B,QAA0B,oC,sHC0GrCE,EAmDQC,E,uDAzJNC,EAAcC,EAAQ,IAGfC,EAAmB,IAAIC,OAAO,KAAU,KAExCC,EAAkB,WAClBC,EAAU,UAmBjBC,EAAqB,IAAInxC,IAElBoxC,EAAc,SAACnpC,GAC1B,GAAmB,kBAARA,EACT,OAAOA,EAGT,IAAIphB,EAASsqD,EAAmB/nC,IAAInB,GAMpC,OALKphB,IACHA,EAAS,IAAIwL,YAAU4V,GACvBkpC,EAAmB9wC,IAAI4H,EAAKphB,IAGvBA,GAYImd,GAJmB,IAAI3R,YAClC,+CAG8B,IAAIA,YAClC,gDAGWg/C,EAA0C,IAAIh/C,YACzD,gDAGWi/C,EAAwB,IAAIj/C,YACvC,+CAGWk/C,EAAU,IAAIl/C,YACzB,+CAGWm/C,EACX,8CAQWC,EACX,8CAEWC,EAAS,IAAIr/C,YAAU,oCA0BvBs/C,EAAa,WACxB,MAAO,CACLh2B,MAAO3X,EACP4tC,gBAAiBP,EACjBQ,mBAAoBP,EACpBQ,OAAQJ,EACRxxC,SAAUsxC,EACVO,KAAMR,EACNS,MA1CF,8CA2CEC,QAxCF,8CAyCEnqB,SAAU2pB,EACVlE,MAAOoD,IAIEuB,EAAkB,uCAAG,WAChCC,EACA55B,GAFgC,qBAAA7rB,EAAA,yDAI1Bub,EACJ,OACAkqC,EAAMh3B,QAAO,SAACi3B,EAAKzzC,GAAN,OAAeyzC,EAAMzzC,EAAKxQ,SAAS,SAAQ,IACxDoqB,EAAUpqB,aACRkkD,EAASC,aAAaC,QAAQtqC,IARF,uBAUxB1W,EAAQihD,KAAKC,MAAMJ,GAVK,kBAYvB,CAAC9gD,EAAM0W,IAAKyqC,SAASnhD,EAAMohD,SAZJ,uBAeXtgD,YAAU6/C,mBAAmBC,EAAO55B,GAfzB,OAe1B1xB,EAf0B,OAiBhC,IACEyrD,aAAaM,QACX3qC,EACAuqC,KAAKK,UAAU,CACb5qC,IAAKphB,EAAO,GAAGisD,WACfH,MAAO9rD,EAAO,MAGlB,UAzB8B,yBA6BzB,CAACA,EAAO,GAAGisD,WAAYjsD,EAAO,KA7BL,4CAAH,wDA2CxB,SAAeksD,EAAtB,kC,4CAAO,WACLC,GADK,eAAAtmD,EAAA,6DAGCumD,EAActB,IAHf,SAMGO,EACJ,CACEgB,EAAOpkC,KAAKmiC,GACZG,EAAY6B,EAAY/yC,UAAUizC,WAClC/B,EAAY4B,GAAWG,WACvBD,EAAOpkC,KAAKoiC,IAEdE,EAAY6B,EAAY/yC,WAbvB,uCAeH,IAfG,4C,gCATK0wC,O,iCAAAA,I,2BAAAA,I,yBAAAA,I,qCAAAA,I,qCAAAA,I,kCAAAA,M,SAsDCwC,EAKX,WAAYC,GAIR,yBARJ/rD,aAQG,OAPHgsD,cAOG,OANHC,WAMG,EACD/b,KAAKlwC,QAAU+rD,EAAK/rD,QACpBkwC,KAAK8b,SAAWD,EAAKC,SACrB9b,KAAK+b,MAAQF,EAAKE,OAITC,EAMX,WAAYH,GAMR,yBAXJ5hD,UAWG,OAVHoH,YAUG,OATHyQ,SASG,OARHmqC,0BAQG,OAPHC,cAOG,EACDlc,KAAK/lC,KAAO4hD,EAAK5hD,KACjB+lC,KAAK3+B,OAASw6C,EAAKx6C,OACnB2+B,KAAKluB,IAAM+pC,EAAK/pC,IAChBkuB,KAAKic,qBAAuBJ,EAAKI,qBACjCjc,KAAKkc,SAAWL,EAAKK,UAIZC,EAAb,WAaE,WAAYN,GAOR,yBAnBJprC,SAmBG,OAlBH2rC,qBAkBG,OAjBHxzC,UAiBG,OAhBHhZ,UAgBG,OAfHysD,yBAeG,OAdHC,eAcG,OAbHC,kBAaG,OAVHC,mBAUG,OATHC,aASG,EACDzc,KAAKvvB,IAAM2oC,EAAYsD,WACvB1c,KAAKoc,gBAAkBP,EAAKO,gBAC5Bpc,KAAKp3B,KAAOizC,EAAKjzC,KACjBo3B,KAAKpwC,KAAOisD,EAAKjsD,KACjBowC,KAAKqc,oBAAsBR,EAAKQ,oBAChCrc,KAAKsc,UAAYT,EAAKS,UACtBtc,KAAKuc,aAAeV,EAAKU,aA3B7B,+EA8BE,oGACwBhB,EAAWvb,KAAKp3B,MADxC,OACQ6zC,EADR,OAEEzc,KAAKyc,QAAUA,EACfzc,KAAKwc,cAAgBC,EAHvB,gDA9BF,6DAkJaE,EAAkB,IAAIn0C,IAAc,CAC/C,CA9MA,WAAYqzC,GAA2C,yBAJvD9qC,YAAsB,EAIgC,KAHtDnhB,UAGsD,OAFtD0sD,eAEsD,EACpDtc,KAAKpwC,KAAOisD,EAAKjsD,KACjBowC,KAAKsc,UAAYT,EAAKS,WA8MtB,CACEM,KAAM,SACNC,OAAQ,CACN,CAAC,cAAe,MAChB,CAAC,OAAQb,GACT,CAAC,YAAa,SAIpB,CA9MA,WAAYH,GAIR,yBATJ9qC,YAAsB,EASnB,KARHnhB,UAQG,OANHwsD,qBAMG,OALHC,yBAKG,EACDrc,KAAKpwC,KAAOisD,EAAKjsD,KAAOisD,EAAKjsD,KAAO,KACpCowC,KAAKoc,gBAAkBP,EAAKO,gBAAkBP,EAAKO,gBAAkB,KACrEpc,KAAKqc,oBAAsBR,EAAKQ,qBAyMhC,CACEO,KAAM,SACNC,OAAQ,CACN,CAAC,cAAe,MAChB,CAAC,OAAQ,CAAED,KAAM,SAAUlxC,KAAMswC,IACjC,CAAC,kBAAmB,CAAEY,KAAM,SAAUlxC,KAAM,mBAC5C,CAAC,sBAAuB,CAAEkxC,KAAM,SAAUlxC,KAAM,UAKtD,CAnEA,WAAYmwC,GAAiC,yBAF7C9qC,YAAsB,GAEsB,KAD5C+rC,eAC4C,EAC1C9c,KAAK8c,UAAYjB,EAAKiB,WAoEtB,CACEF,KAAM,SACNC,OAAQ,CACN,CAAC,cAAe,MAChB,CAAC,YAAa,CAAED,KAAM,SAAUlxC,KAAM,WAI5C,CApEA,WAAYmwC,GAAuB,yBAHnC9qC,YAAsB,EAGY,KAFlC8f,YAEkC,EAChCmP,KAAKnP,OAASgrB,EAAKhrB,QAqEnB,CACE+rB,KAAM,SACNC,OAAQ,CACN,CAAC,cAAe,MAChB,CAAC,SAAU,UAIjB,CAtHA,WAAYhB,GAMR,yBAvBJprC,SAuBG,OAtBHogB,YAsBG,OArBHisB,eAqBG,OAnBHC,kBAmBG,OARHC,sCAQG,EACDhd,KAAKvvB,IAAM2oC,EAAY6D,gBACvBjd,KAAKnP,OAASgrB,EAAKhrB,OACnBmP,KAAK8c,UAAYjB,EAAKiB,UACtB9c,KAAK+c,aAAelB,EAAKkB,aACzB/c,KAAKgd,iCACHnB,EAAKmB,kCA4GP,CACEJ,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,SAAU,OACX,CAAC,YAAa,CAAED,KAAM,SAAUlxC,KAAM,QACtC,CAAC,eAAgB,kBACjB,CAAC,mCAAoC,qBAI3C,CA9GA,WAAYmwC,GAAyD,yBAJrEprC,SAIoE,OAHpEogB,YAGoE,OAFpEisB,eAEoE,EAClE9c,KAAKvvB,IAAM2oC,EAAY8D,gBACvBld,KAAKnP,OAASgrB,EAAKhrB,OACnBmP,KAAK8c,UAAYjB,EAAKiB,WA6GtB,CACEF,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,SAAU,OACX,CAAC,YAAa,CAAED,KAAM,SAAUlxC,KAAM,WAI5C,CA3KA,WAAYmwC,GAIR,yBAVJprC,SAUG,OARH0sC,YAQG,OANHV,aAMG,EACDzc,KAAKvvB,IAAM2oC,EAAYgE,UACvBpd,KAAKmd,OAAStB,EAAKsB,OACnBnd,KAAKyc,QAAUZ,EAAKY,SAsKpB,CACEG,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,SAAU,kBACX,CAAC,UAAW,UAIlB,CACEb,EACA,CACEY,KAAM,SACNC,OAAQ,CACN,CAAC,OAAQ,UACT,CAAC,SAAU,UACX,CAAC,MAAO,UACR,CAAC,uBAAwB,OACzB,CAAC,WAAY,CAAED,KAAM,SAAUlxC,KAAM,CAACkwC,QAI5C,CACEA,EACA,CACEgB,KAAM,SACNC,OAAQ,CACN,CAAC,UAAW,kBACZ,CAAC,WAAY,MACb,CAAC,QAAS,SAIhB,CACEV,EACA,CACES,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,kBAAmB,kBACpB,CAAC,OAAQ,kBACT,CAAC,OAAQb,GACT,CAAC,sBAAuB,MACxB,CAAC,YAAa,SAIpB,CAlJF,WAIE,WAAYH,GAA+C,yBAH3DprC,SAG0D,OAF1D4sC,YAE0D,EACxDrd,KAAKvvB,IAAM2oC,EAAYkE,cACvBtd,KAAKqd,OAASxB,EAAKwB,OANvB,gDASE,SAAaZ,GACX,IAAMc,EAAgBd,EAhXa,IAiX7Be,EAActY,KAAKiG,MAAMoS,EAAgB,GAE/C,GAAIC,EAAc,GAChB,MAAMvmD,MAAM,yBAGd,IAAMwmD,EAA4B,EAAKF,EAAgB,EAEjDG,EAAOxY,KAAKyY,IAAI,EAAGF,GAKzB,OAAsB,IAHFzd,KAAKqd,OAAOG,GAAeE,OArBnD,KAoJI,CACEd,KAAM,SACNC,OAAQ,CACN,CAAC,MAAO,MACR,CAAC,SAAU,CAAC,UAOjBe,eAAaC,UAAkBC,WAAa,WAC3C,IACMC,EADS/d,KACMge,eAAe,IACpC,OAAO,IAAInjD,YAAUkjD,IAGtBE,eAAaJ,UAAkBK,YAAc,SAAUnkD,GACvCimC,KACRme,gBAAgBpkD,EAAM4hD,aAG9BiC,eAAaC,UAAkBO,mBAAqB,WACnD,IACML,EADS/d,KACMge,eAAe,IACpC,OAAO3E,EAAOgF,OAAON,IAGtBE,eAAaJ,UAAkBS,oBAAsB,SACpDvkD,GAEeimC,KACRme,gBAAgB9E,EAAOkF,OAAOxkD,KAMlC,IAAMkO,EAAiB,SAACu2C,GAC7B,IAAM91C,EAAW+1C,+BACf9B,EACAR,EACAqC,GAKF,OAHA91C,EAAS9Y,KAAKqK,KAAOyO,EAAS9Y,KAAKqK,KAAKurB,QAAQ+zB,EAAkB,IAClE7wC,EAAS9Y,KAAKkiB,IAAMpJ,EAAS9Y,KAAKkiB,IAAI0T,QAAQ+zB,EAAkB,IAChE7wC,EAAS9Y,KAAKyR,OAASqH,EAAS9Y,KAAKyR,OAAOmkB,QAAQ+zB,EAAkB,IAC/D7wC,GAGId,EAAkB,uCAAG,WAChCjG,GADgC,eAAAzM,EAAA,6DAG1BylD,EAAQ,CACZe,EAAOpkC,KAAK,YACZ,IAAIzc,YAAUm/C,GAAqB2B,WACnC,IAAI9gD,YAAU8G,GAASg6C,YANO,kBAQzB9gD,YAAU6/C,mBACfC,EACA,IAAI9/C,YAAUm/C,KAVgB,2CAAH,wD,+3BCvfzB/wC,EAA8B,CAClC3F,WAAY,EACZtL,YAAa5G,IACbyoB,8BAA8B,EAC9B8C,yBAAqB9sB,EACrB0sB,8BAA0B1sB,EAC1BinD,0BAA2B3tC,cAC3B7c,iBAAauD,EACbtD,iBAAasD,EACb4L,OAAQ,GACR3K,YAAa0C,IACb0oB,sBAAkBrsB,EAClB+d,YAAazE,cACb2qB,8BAA0BjkC,EAC1Be,gBAAYf,EACZwqC,kBAAcxqC,EACda,WAAW,EACXM,aAAa,EACbE,cAAUrB,EACVU,aAAa,EACb0oB,YAAY,GAGDylC,EAAgBn1C,YAAY,CACvCtP,KAAM,WACNgP,eACAO,SAAU,CACRhK,cAAe,SAACkK,GACVA,EAAMpG,WAzEE,GAyEsBoG,EAAMpG,cAE1Cq7C,cAAe,SAACj1C,GACVA,EAAMpG,WAAa,GAAGoG,EAAMpG,cAElCc,QAAS,SAACsF,EAAOC,GACfD,EAAMpG,WAAaqG,EAAOE,SAE5BzK,eAAgB,SAACsK,EAAOC,GACtB,IAAMi1C,EAAkBl1C,EAAM1R,YAC9B0R,EAAM1R,YAAc2R,EAAOE,QAC3BH,EAAM6S,8BAA2B1sB,EACjC6Z,EAAMotC,0BAA4B3tC,cAElCO,EAAMkE,YAAczE,cACpBO,EAAMoqB,8BAA2BjkC,EACjC6Z,EAAMwS,sBAAmBrsB,EACzB6Z,EAAMmQ,kCAA+BhqB,EACrC6Z,EAAMpd,iBAAcuD,EACpB6Z,EAAMnd,iBAAcsD,EAChB6Z,EAAM5Y,cAAgB6Y,EAAOE,UAC/BH,EAAM5Y,YAAc8tD,IAGxB9lC,6BAA8B,SAC5BpP,EACAC,GAEAD,EAAMmQ,6BAA+BlQ,EAAOE,QAAQg1C,UACpDn1C,EAAMpd,YAAcqd,EAAOE,QAAQjd,QACnC8c,EAAMnd,YAAcod,EAAOE,QAAQ3c,cAErCg2B,uBAAwB,SACtBxZ,EACAC,GAEAD,EAAMiT,oBAAsBhT,EAAOE,SAErCuZ,4BAA6B,SAC3B1Z,EACAC,GAEAD,EAAM6S,yBAA2B5S,EAAOE,QAExCH,EAAMkE,YAAczE,cACpBO,EAAMoqB,8BAA2BjkC,EACjC6Z,EAAMwS,sBAAmBrsB,EACzB6Z,EAAMmQ,kCAA+BhqB,EACrC6Z,EAAMpd,iBAAcuD,EACpB6Z,EAAMnd,iBAAcsD,GAEtByzB,6BAA8B,SAC5B5Z,EACAC,GAEAD,EAAMotC,0BAA4BntC,EAAOE,QACrCD,YAAmBD,EAAOE,SAC1BV,eAEN0X,+BAAgC,SAACnX,GAC/BA,EAAMotC,0BAA4B/sC,eAEpCuX,+BAAgC,SAC9B5X,EACAC,GAEAD,EAAMotC,0BAA4B7sC,YAChCN,EAAOE,SAAW,+BAGtBuX,iCAAkC,SAChC1X,EACAC,GAEAD,EAAMotC,0BAA4BltC,YAAmBD,EAAOE,UAE9D0Z,UAAW,SAAC7Z,EAAOC,GACjBD,EAAMjO,OAASkO,EAAOE,SAExB3G,eAAgB,SAACwG,EAAOC,GACtB,IAAMm1C,EAAkBp1C,EAAM5Y,YAC9B4Y,EAAM5Y,YAAc6Y,EAAOE,QAC3BH,EAAMwS,sBAAmBrsB,EAEzB6Z,EAAMkE,YAAczE,cACpBO,EAAMoqB,8BAA2BjkC,EAC7B6Z,EAAM1R,cAAgB2R,EAAOE,UAC/BH,EAAM1R,YAAc8mD,EACpBp1C,EAAMpG,WAAa,EACnBoG,EAAM6S,8BAA2B1sB,EACjC6Z,EAAMmQ,kCAA+BhqB,EACrC6Z,EAAMpd,iBAAcuD,EACpB6Z,EAAMnd,iBAAcsD,EACpB6Z,EAAMotC,0BAA4B3tC,gBAGtC8qB,oBAAqB,SAACvqB,EAAOC,GAC3BD,EAAMwS,iBAAmBvS,EAAOE,SAElCgE,eAAgB,SACdnE,EACAC,GAEAD,EAAMkE,YAAcjE,EAAOE,QAC3BH,EAAMoqB,8BAA2BjkC,GAEnCoqC,4BAA6B,SAC3BvwB,EACAC,GAEAD,EAAMoqB,yBAA2BnqB,EAAOE,SAE1C2R,cAAe,SAAC9R,EAAOC,GACrBD,EAAM9Y,WAAa+Y,EAAOE,SAE5BzT,gBAAiB,SAACsT,EAAOC,GACvBD,EAAM2wB,aAAe1wB,EAAOE,QAC5BH,EAAMhZ,WAAY,EAClBgZ,EAAMpG,WAAa,GAErBnO,aAAc,SAACuU,EAAOC,GACpBD,EAAMhZ,UAAYiZ,EAAOE,SAE3Bk1C,eAAgB,SAACr1C,EAAOC,GACtBD,EAAM1Y,YAAc2Y,EAAOE,SAE7Bm1C,YAAa,SAACt1C,EAAOC,GACnBD,EAAMxY,SAAWyY,EAAOE,QACxBH,EAAM1Y,aAAc,GAEtB+sC,eAAgB,SAACr0B,EAAOC,GACtBD,EAAMnZ,YAAcoZ,EAAOE,SAE7BhV,MAAO,SAAC6U,GAAD,mBAAC,eACHT,GADE,IAELjR,YAAa0R,EAAM1R,YACnBlH,YAAa4Y,EAAM5Y,eAErBmuD,eAAgB,SACdv1C,EACAC,GAUA,IAAMm1C,EAAkBp1C,EAAM5Y,YAC9B4Y,EAAM2wB,aAAe1wB,EAAOE,QAAQq1C,IACpCx1C,EAAM5Y,YAAc6Y,EAAOE,QAAQs1C,cAAcruD,YAC7C4Y,EAAM1R,cAAgB2R,EAAOE,QAAQs1C,cAAcruD,cACrD4Y,EAAM1R,YAAc8mD,GAEtBp1C,EAAM6S,8BAA2B1sB,EACjC6Z,EAAMotC,0BAA4B3tC,cAElCO,EAAMkE,YAAczE,cACpBO,EAAMoqB,8BAA2BjkC,EACjC6Z,EAAMmQ,kCAA+BhqB,EACrC6Z,EAAMwS,iBAAmBvS,EAAOE,QAAQs1C,cAAczjC,cACtDhS,EAAMpd,YAAcqd,EAAOE,QAAQs1C,cAAc7yD,YACjDod,EAAMnd,YAAcod,EAAOE,QAAQs1C,cAActjC,cACjDnS,EAAMpG,WAAa,EACnBoG,EAAMuP,YAAa,MAKlB,EAyBHylC,EAAcl0C,QAxBhBhL,EADK,EACLA,cAEA4E,GAHK,EAELu6C,cAFK,EAGLv6C,SACAhF,EAJK,EAILA,eACA0Z,EALK,EAKLA,6BACAoK,EANK,EAMLA,uBACAE,EAPK,EAOLA,4BACAE,EARK,EAQLA,6BACAlC,EATK,EASLA,iCACAE,EAVK,EAULA,+BACAT,EAXK,EAWLA,+BACA0C,EAZK,EAYLA,UACArgB,EAbK,EAaLA,eACA+wB,EAdK,EAcLA,oBACApmB,EAfK,EAeLA,eACAosB,EAhBK,EAgBLA,4BACAze,EAjBK,EAiBLA,cACAplB,EAlBK,EAkBLA,gBACAjB,EAnBK,EAmBLA,aACA4pD,EApBK,EAoBLA,eACAC,EArBK,EAqBLA,YACAjhB,EAtBK,EAsBLA,eACAlpC,EAvBK,EAuBLA,MACAoqD,EAxBK,EAwBLA,eAGaP,MAAf,S,iCC/RA,iDAGMr0D,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCib,OAAQ,CACNzT,QAAS,OACTD,OAAO,GAAD,OAAKvH,EAAMM,QAAQ,GAAnB,WACNH,MAAO,OACPoZ,SAAU,SA4CCs7C,IAxCe,SAAC,GAUxB,IATLvsC,EASI,EATJA,QACAimC,EAQI,EARJA,WACAE,EAOI,EAPJA,UACA7qC,EAMI,EANJA,GAOMpiB,EAAU1B,IACVg1D,EAAOlxC,EAAGoX,WAAW,MAC3B,OAAOyzB,EACL,cAAC,IAAD,CAASt2C,MAAOyL,EAAhB,SACE,eAAC,IAAD,CACEle,MAAM,UACN/D,QAAQ,YACRmI,KAAK,QACLpB,QAAS6lD,EACT9sD,UAAWD,EAAQyZ,OACnB0zC,UAAW,cAAC,IAAD,IANb,wBAQc/qC,EAAG0c,UAAU,EAAGw0B,EAAO,EAAI,GARzC,MASGlxC,EAAG+a,OAAO/a,EAAGpT,QAAUskD,EAAO,EAAI,SAIvC,cAAC,IAAD,CACEpvD,MAAM,UACN/D,QAAQ,YACRmI,KAAK,QACLpB,QAAS4f,EACT7mB,UAAWD,EAAQyZ,OALrB,uB,wJCnBE85C,EAAW,CACfrlD,KAAM,WACNslD,QAAS,WACT7wD,IAAKE,IAAW4wD,KAGZC,EAAqD,CACzD,EAAGH,EACH,EAdc,CACdrlD,KAAM,UACNslD,QAAS,aACT7wD,IAAK,0BAqBDgxD,EAAqB7J,IAAMmC,cAAmC,CAClEnlC,QAAS,aACTimC,WAAY,aACZE,WAAW,EACXxiD,OAAQ,OAGGmpD,EAAqB,SAAC,GAI5B,IAHL/zD,EAGI,EAHJA,SAKM4M,EAAconD,cACpB,EAAsB3yD,wBAA6B4C,GAA1CgwD,EAAT,oBACA,EAAkC5yD,oBAAS,GAA3C,mBAAO+rD,EAAP,KAAkB8G,EAAlB,KAEMjtC,EAAU3kB,uBAAY,WAEtBsK,IACFA,EAAYqa,QAAQra,EAAYunD,sBAFT,IAGvBF,EAAUrnD,GACVsnD,GAAa,MAEd,CAACtnD,IAEEsgD,EAAa5qD,uBAAY,WAC7B4xD,GAAa,GACbD,OAAUhwD,KACT,IAEGmwD,EAAeryD,mBACnB,iBAAO,CACLklB,UACAimC,aACAE,YACAxiD,OAAQgC,KAEV,CAACqa,EAASimC,EAAYE,EAAWxgD,IAGnC,OACE,cAACknD,EAAmB9G,SAApB,CAA6B7+C,MAAOimD,EAApC,SACGp0D,KAKMq0D,EAAsB,SAAC,GAI7B,IAHLr0D,EAGI,EAHJA,SAIA,OACE,cAAC,IAAD,CACEs0D,eAAgBZ,EAChBG,sBAAuBA,EAFzB,SAIE,cAACE,EAAD,UAAqB/zD,OAKdu0D,EAAiB,WAC5B,OAAOtH,qBAAW6G,K,gCC/Fb,SAASv2C,IACd,MAAO,CACLvZ,KAAM,KACNtC,MAAO,KACPqC,YAAY,EACZI,WAAY,MAIT,SAAS6Z,EAAsBha,GACpC,MAAO,CACLA,OACAtC,MAAO,KACPqC,YAAY,EACZI,YAAY,IAAIgZ,MAAOC,eAIpB,SAASiB,EAAoB3c,GAClC,MAAO,CACLsC,KAAM,KACNtC,QACAqC,YAAY,EACZI,WAAY,MAIT,SAASga,IACd,MAAO,CACLna,KAAM,KACNtC,MAAO,KACPqC,YAAY,EACZI,WAAY,MAhChB,yI,yKCeMqwD,EAA0BvK,IAAMmC,cAAwC,CAC5EnlC,QAAS,aACTimC,WAAY,aACZpsD,cAAUmD,EACVjD,aAASiD,EACTmF,YAAQnF,EACRyiB,mBAAeziB,EACfkpD,cAAe,OAEJsH,EAA2B,SAAC,GAIlC,IAHLz0D,EAGI,EAHJA,SAIA,EAA0CqB,mBAAwB,MAAlE,mBAAO8rD,EAAP,KAAsBuH,EAAtB,KACA,EAAgCrzD,wBAAmB4C,GAAnD,mBAAOnD,EAAP,KAAiB6zD,EAAjB,KACA,EAA8BtzD,wBAA6B4C,GAA3D,mBAAOjD,EAAP,KAAgB4zD,EAAhB,KACA,EAA4BvzD,wBAAiB4C,GAA7C,mBAAOmF,EAAP,KAAeyrD,EAAf,KACA,EAA0CxzD,wBACxC4C,GADF,mBAAOyiB,EAAP,KAAsBouC,EAAtB,KAGM7tC,EAAU3kB,uBAAY,WAC1BoyD,EAAiB,MACjBnpB,MACG/nC,MAAK,SAACuxD,GACL,GAAIA,EAAkB,CACpB,IAAMj0D,EAAW,IAAI4C,IAAOsxD,UAAUC,aAEpCF,EACA,OAEFj0D,EACGo0D,KAAK,sBAAuB,IAC5B1xD,MAAK,WACJkxD,EAAiB,MACjBC,EAAY7zD,GACZA,EACGq0D,aACA3xD,MAAK,SAAC4xD,GACLR,EAAWQ,EAAQp0D,YAEpB6C,OAAM,WACL6wD,EACE,kDAGN,IAAMtrD,EAAStI,EAASu0D,YACxBR,EAAUzrD,GACVA,EACGygB,aACArmB,MAAK,SAACU,GACL4wD,EAAiB5wD,MAElBL,OAAM,WACL6wD,EACE,yDAKFK,GAAoBA,EAAiBO,KAEvCP,EAAiBO,GAAG,gBAAgB,SAACt0D,GACnC,IACE4zD,EAAW5lC,IAAUtD,KAAK1qB,GAASsmB,YACnC,MAAOrlB,QAGX8yD,EAAiBO,GAAG,mBAAmB,SAACx9B,GACtC,IACE,IAAM1uB,EAAStI,EAASu0D,YACxBR,EAAUzrD,GACVA,EACGygB,aACArmB,MAAK,SAACU,GACL4wD,EAAiB5wD,MAElBL,OAAM,WACL6wD,EACE,yDAGN,MAAOzyD,YAId4B,OAAM,WACL6wD,EACE,2DAINA,EAAiB,8BAGpB7wD,OAAM,WACL6wD,EAAiB,gCAEpB,IACGxH,EAAa5qD,uBAAY,WAC7BoyD,EAAiB,MACjBC,OAAY1wD,GACZ2wD,OAAW3wD,GACX4wD,OAAU5wD,GACV6wD,OAAiB7wD,KAChB,IACGmwD,EAAeryD,mBACnB,iBAAO,CACLklB,UACAimC,aACApsD,WACAE,UACAoI,SACAsd,gBACAymC,mBAEF,CACElmC,EACAimC,EACApsD,EACAE,EACAoI,EACAsd,EACAymC,IAGJ,OACE,cAACqH,EAAwBxH,SAAzB,CAAkC7+C,MAAOimD,EAAzC,SACGp0D,KAIMa,EAAsB,WACjC,OAAOosD,qBAAWuH,K,gCC5JpB,yDAaMe,EAAqB,SACzBt0D,GADyB,IAEzBwF,EAFyB,uDAED,GACxB+uD,EAHyB,uCAIzBzmD,EAJyB,6CAKrB,CACJ9N,UACAwF,gBACA+uD,qBACAzmD,kBAuGa7N,IApGf,SACEF,GAOC,IANDy0D,IAMA,yDACMC,EAAaD,EACbhpD,EAAeC,cACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtBC,EAAcC,cACd8oD,IAAmB/oD,EACzB,EAII/L,cAHFC,EADF,EACEA,SACA4lB,EAFF,EAEEA,cACS3lB,EAHX,EAGEC,QAEI40D,IAAe90D,KAAc4lB,EAC7BmvC,EAAoBz0D,aAAcJ,GAClCG,EAAuBJ,IAAe80D,EAEtCL,EAAqBlzD,uBAAY,WACrC,GAAIxB,GAAY+0D,EAAmB,CACjC,IAAKrzD,YAAWxB,GACd,OAEF,IACEF,EAASo0D,KAAK,6BAA8B,CAC1C,CAAEl0D,QAAS80D,wBAAcC,kBAAQF,OAEnC,MAAO5zD,QAEV,CAACnB,EAAU+0D,EAAmB70D,IAEjC,OAAOe,mBAAQ,WACb,OACEf,IAAY6B,KACZ8yD,IADA,OAEA/oD,QAFA,IAEAA,OAFA,EAEAA,EAAamC,eAGNwmD,GACL,OACAtxD,EACAuxD,EACA5oD,EAAYmC,eAGZ/N,IAAYwE,KAAmBmF,EAC1B4qD,GACL,OACAtxD,EACAuxD,EACA7qD,EAAMI,YAGNvI,YAAWxB,IAAY40D,GAAclvC,EACnCvlB,EACKo0D,GACL,OACAtxD,EACAuxD,EACA9uC,IAGE5lB,GAAY+0D,GAAqBH,GACnCF,IAEKD,GACL,EADuB,qCAEO7tD,IAFP,gCAEsCmuD,GAC7DL,OACAvxD,IAKCsxD,GACL,EACA,uBACAC,OACAvxD,KAED,CACDjD,EACA00D,EACAF,EACAG,EACAhrD,EACAirD,EACAC,EACA10D,EACAL,EACA4lB,EACA9Z,M,4uBCnEEyQ,EAAyB,CAC7B3F,WAAY,EACZtL,YAAa5G,IACbyoB,8BAA8B,EAC9B8C,yBAAqB9sB,EACrB0sB,8BAA0B1sB,EAC1BinD,0BAA2B3tC,cAC3B7c,iBAAauD,EACbtD,iBAAasD,EACb+rB,mBAAe/rB,EACfiB,YAAa0C,IACb0oB,sBAAkBrsB,EAClB+d,YAAazE,cACbvY,gBAAYf,EACZwqC,kBAAcxqC,EACda,WAAW,EACXM,aAAa,EACbE,cAAUrB,EACVopB,YAAY,GAGD2oC,EAAWr4C,YAAY,CAClCtP,KAAM,MACNgP,eACAO,SAAU,CACRhK,cAAe,SAACkK,GACVA,EAAMpG,WA/DE,GA+DsBoG,EAAMpG,cAE1Cq7C,cAAe,SAACj1C,GACVA,EAAMpG,WAAa,GAAGoG,EAAMpG,cAElCc,QAAS,SAACsF,EAAOC,GACfD,EAAMpG,WAAaqG,EAAOE,SAE5BzK,eAAgB,SAACsK,EAAOC,GACtB,IAAMi1C,EAAkBl1C,EAAM1R,YAC9B0R,EAAM1R,YAAc2R,EAAOE,QAC3BH,EAAM6S,8BAA2B1sB,EACjC6Z,EAAMotC,0BAA4B3tC,cAElCO,EAAMkE,YAAczE,cACpBO,EAAMwS,sBAAmBrsB,EACzB6Z,EAAMmQ,kCAA+BhqB,EACrC6Z,EAAMpd,iBAAcuD,EACpB6Z,EAAMnd,iBAAcsD,EACpB6Z,EAAMkS,mBAAgB/rB,EAClB6Z,EAAM5Y,cAAgB6Y,EAAOE,UAC/BH,EAAM5Y,YAAc8tD,IAGxB9lC,6BAA8B,SAC5BpP,EACAC,GAEAD,EAAMmQ,6BAA+BlQ,EAAOE,QAAQg1C,UACpDn1C,EAAMpd,YAAcqd,EAAOE,QAAQjd,QACnC8c,EAAMnd,YAAcod,EAAOE,QAAQ3c,aACnCwc,EAAMkS,cAAgBjS,EAAOE,QAAQgP,SAEvCqK,uBAAwB,SACtBxZ,EACAC,GAEAD,EAAMiT,oBAAsBhT,EAAOE,SAErCuZ,4BAA6B,SAC3B1Z,EACAC,GAEAD,EAAM6S,yBAA2B5S,EAAOE,QAExCH,EAAMkE,YAAczE,cACpBO,EAAMwS,sBAAmBrsB,EACzB6Z,EAAMmQ,kCAA+BhqB,EACrC6Z,EAAMpd,iBAAcuD,EACpB6Z,EAAMnd,iBAAcsD,EACpB6Z,EAAMkS,mBAAgB/rB,GAExByzB,6BAA8B,SAC5B5Z,EACAC,GAEAD,EAAMotC,0BAA4BntC,EAAOE,QACrCD,YAAmBD,EAAOE,SAC1BV,eAEN0X,+BAAgC,SAACnX,GAC/BA,EAAMotC,0BAA4B/sC,eAEpCuX,+BAAgC,SAC9B5X,EACAC,GAEAD,EAAMotC,0BAA4B7sC,YAChCN,EAAOE,SAAW,+BAGtBuX,iCAAkC,SAChC1X,EACAC,GAEAD,EAAMotC,0BAA4BltC,YAAmBD,EAAOE,UAE9D3G,eAAgB,SAACwG,EAAOC,GACtB,IAAMm1C,EAAkBp1C,EAAM5Y,YAC9B4Y,EAAM5Y,YAAc6Y,EAAOE,QAC3BH,EAAMwS,sBAAmBrsB,EAEzB6Z,EAAMkE,YAAczE,cAChBO,EAAM1R,cAAgB2R,EAAOE,UAC/BH,EAAM1R,YAAc8mD,EACpBp1C,EAAMpG,WAAa,EACnBoG,EAAM6S,8BAA2B1sB,EACjC6Z,EAAMmQ,kCAA+BhqB,EACrC6Z,EAAMpd,iBAAcuD,EACpB6Z,EAAMnd,iBAAcsD,EACpB6Z,EAAMkS,mBAAgB/rB,EACtB6Z,EAAMotC,0BAA4B3tC,gBAGtC8qB,oBAAqB,SAACvqB,EAAOC,GAC3BD,EAAMwS,iBAAmBvS,EAAOE,SAElCgE,eAAgB,SACdnE,EACAC,GAEAD,EAAMkE,YAAcjE,EAAOE,SAE7B2R,cAAe,SAAC9R,EAAOC,GACrBD,EAAM9Y,WAAa+Y,EAAOE,SAE5BzT,gBAAiB,SAACsT,EAAOC,GACvBD,EAAM2wB,aAAe1wB,EAAOE,QAC5BH,EAAMhZ,WAAY,EAClBgZ,EAAMpG,WAAa,GAErBnO,aAAc,SAACuU,EAAOC,GACpBD,EAAMhZ,UAAYiZ,EAAOE,SAE3Bk1C,eAAgB,SAACr1C,EAAOC,GACtBD,EAAM1Y,YAAc2Y,EAAOE,SAE7Bm1C,YAAa,SAACt1C,EAAOC,GACnBD,EAAMxY,SAAWyY,EAAOE,QACxBH,EAAM1Y,aAAc,GAEtB6D,MAAO,SAAC6U,GAAD,mBAAC,eACHT,GADE,IAELjR,YAAa0R,EAAM1R,YACnBlH,YAAa4Y,EAAM5Y,eAErBmuD,eAAgB,SACdv1C,EACAC,GAUA,IAAMm1C,EAAkBp1C,EAAM5Y,YAC9B4Y,EAAM2wB,aAAe1wB,EAAOE,QAAQq1C,IACpCx1C,EAAM5Y,YAAc6Y,EAAOE,QAAQs1C,cAAcruD,YAC7C4Y,EAAM1R,cAAgB2R,EAAOE,QAAQs1C,cAAcruD,cACrD4Y,EAAM1R,YAAc8mD,GAEtBp1C,EAAM6S,8BAA2B1sB,EACjC6Z,EAAMotC,0BAA4B3tC,cAClCO,EAAMkE,YAAczE,cACpBO,EAAMmQ,kCAA+BhqB,EACrC6Z,EAAMwS,iBAAmBvS,EAAOE,QAAQs1C,cAAczjC,cACtDhS,EAAMpd,YAAcqd,EAAOE,QAAQs1C,cAAc7yD,YACjDod,EAAMnd,YAAcod,EAAOE,QAAQs1C,cAActjC,cACjDnS,EAAMkS,mBAAgB/rB,EACtB6Z,EAAMpG,WAAa,EACnBoG,EAAMuP,YAAa,MAKlB,EAsBH2oC,EAASp3C,QArBXhL,EADK,EACLA,cAEA4E,GAHK,EAELu6C,cAFK,EAGLv6C,SACAhF,EAJK,EAILA,eACA0Z,EALK,EAKLA,6BACAoK,EANK,EAMLA,uBACAE,EAPK,EAOLA,4BACAE,EARK,EAQLA,6BACAlC,EATK,EASLA,iCACAE,EAVK,EAULA,+BACAT,EAXK,EAWLA,+BACA3d,EAZK,EAYLA,eACA+wB,EAbK,EAaLA,oBACApmB,EAdK,EAcLA,eACA2N,EAfK,EAeLA,cACAplB,EAhBK,EAgBLA,gBACAjB,EAjBK,EAiBLA,aACA4pD,EAlBK,EAkBLA,eACAC,EAnBK,EAmBLA,YACAnqD,EApBK,EAoBLA,MACAoqD,EArBK,EAqBLA,eAGa2C,MAAf,S,kbC9OM34C,EAA4B,CAChC3F,WAAY,EACZtL,YAAa5G,IACb6D,YAAa,GACbnE,YAAa0C,IACblC,cAAUzB,EACVwqC,kBAAcxqC,EACda,WAAW,EACXe,YAAY,EACZE,cAAU9B,GAGCgyD,EAAct4C,YAAY,CACrCtP,KAAM,SACNgP,eACAO,SAAU,CACRhK,cAAe,SAACkK,GACVA,EAAMpG,WAjCE,GAiCsBoG,EAAMpG,cAE1Cq7C,cAAe,SAACj1C,GACVA,EAAMpG,WAAa,GAAGoG,EAAMpG,cAElCc,QAAS,SAACsF,EAAOC,GACfD,EAAMpG,WAAaqG,EAAOE,SAE5BzK,eAAgB,SAACsK,EAAOC,GACtB,IAAMi1C,EAAkBl1C,EAAM1R,YAC9B0R,EAAM1R,YAAc2R,EAAOE,QAC3BH,EAAMzU,YAAc,GAChByU,EAAM5Y,cAAgB6Y,EAAOE,UAC/BH,EAAM5Y,YAAc8tD,IAGxBt/C,eAAgB,SAACoK,EAAOC,GACtBD,EAAMzU,YAAc0U,EAAOE,SAE7B3G,eAAgB,SAACwG,EAAOC,GACtB,IAAMm1C,EAAkBp1C,EAAM5Y,YAC9B4Y,EAAM5Y,YAAc6Y,EAAOE,QACvBH,EAAM1R,cAAgB2R,EAAOE,UAC/BH,EAAM1R,YAAc8mD,EACpBp1C,EAAMpG,WAAa,EACnBoG,EAAMzU,YAAc,KAGxBK,YAAa,SAACoU,EAAOC,GACnBD,EAAMpY,SAAWqY,EAAOE,SAE1BzT,gBAAiB,SAACsT,EAAOC,GACvBD,EAAM2wB,aAAe1wB,EAAOE,QAC5BH,EAAMhZ,WAAY,EAClBgZ,EAAMpG,WAAa,GAErBnO,aAAc,SAACuU,EAAOC,GACpBD,EAAMhZ,UAAYiZ,EAAOE,SAE3B+C,cAAe,SAAClD,EAAOC,GACrBD,EAAMjY,WAAakY,EAAOE,SAE5Bi4C,YAAa,SAACp4C,EAAOC,GACnBD,EAAM/X,SAAWgY,EAAOE,QACxBH,EAAMjY,YAAa,GAErBoD,MAAO,SAAC6U,GAAD,mBAAC,eACHT,GADE,IAELjR,YAAa0R,EAAM1R,YACnBlH,YAAa4Y,EAAM5Y,kBAKlB,EAaH+wD,EAAYr3C,QAZdhL,EADK,EACLA,cAEA4E,GAHK,EAELu6C,cAFK,EAGLv6C,SACAhF,EAJK,EAILA,eACAE,EALK,EAKLA,eACA4D,EANK,EAMLA,eACA5N,EAPK,EAOLA,YACAc,EARK,EAQLA,gBACAjB,EATK,EASLA,aACAyX,EAVK,EAULA,cACAk1C,EAXK,EAWLA,YACAjtD,EAZK,EAYLA,MAGagtD,MAAf,S,gCC9GA,iFAQMx3D,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCuO,KAAM,CACJsN,SAAU,YAEZZ,OAAQ,CACN5a,UAAWL,EAAMM,QAAQ,GACzBk3D,cAAe,OACfr3D,MAAO,QAETs3D,OAAQ,CACN57C,SAAU,WACV67C,OAAQ,EACR3M,KAAM,MACN/0C,YAAa,GACbzV,aAAc,GAEhBwC,MAAO,CACL1C,UAAWL,EAAMM,QAAQ,GACzBJ,UAAW,cAIA,SAASuI,EAAT,GAYX,IAXFN,EAWC,EAXDA,SACAO,EAUC,EAVDA,QACAN,EASC,EATDA,WACArF,EAQC,EARDA,MACA1B,EAOC,EAPDA,SAQMG,EAAU1B,IAChB,OACE,qCACE,sBAAK2B,UAAWD,EAAQ+M,KAAxB,UACE,cAAC,IAAD,CACE7I,MAAM,UACN/D,QAAQ,YACRF,UAAWD,EAAQyZ,OACnB9S,SAAUA,EACVO,QAASA,EALX,SAOGrH,IAEF+G,EACC,cAAC,IAAD,CACE0B,KAAM,GACNpE,MAAM,UACNjE,UAAWD,EAAQi2D,SAEnB,QAEL10D,EACC,cAAC,IAAD,CAAYpB,QAAQ,QAAQ+D,MAAM,QAAQjE,UAAWD,EAAQuB,MAA7D,SACGA,IAED,U,6RCzBV,WACEoH,EACAK,EACAC,EACAktD,EACAt1D,EACA2F,GANF,eAAA2C,EAAA,yDAQER,EAASkY,aAAc,IARzB,UAUoBra,EAVpB,gCAWc4vD,aACJ5zD,aAA8B3B,GAC9BoI,EACAktD,GAdV,2DAgBcE,YACJ7zD,aAA8B3B,GAC9BoI,EACAktD,GAnBV,4BAUU7sD,EAVV,KAqBIX,EACEotD,YAAY,CAAEruD,GAAI4B,EAAQE,gBAAiBC,MAAOH,EAAQI,eAE5DV,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,UAAhB,qCAzBf,kDA4BIb,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QAE9C5B,EAASkY,aAAc,IA/B3B,2D,kEAmCA,WACElY,EACAK,EACAyB,EACAilB,EACAymC,EACA3vD,GANF,mBAAA2C,EAAA,yDAQER,EAASkY,aAAc,IARzB,SAUSpW,EAAO6rD,gBAVhB,sBAWY,IAAIprD,MAAM,uCAXtB,cAaUlI,EAAa,IAAIC,aAAWC,IAAa,aAbnD,SAcUqzD,YACJvzD,EACAyH,EAAO6rD,gBACP3rD,IACA+kB,EACAigC,EAAOpkC,KAAK4qC,IAnBlB,WAqBwB3vD,EArBxB,kCAsBcgwD,aACJxzD,EACA2H,IACAvH,IACAssB,EACAymC,GA3BV,6DA6BcM,YACJzzD,EACA2H,IACAvH,IACAssB,EACAymC,GAlCV,mCAqBUtrD,EArBV,eAoCuBC,YAAmBL,EAAQzH,EAAY6H,GApC9D,QAoCUE,EApCV,OAsCIpC,EAASotD,YAAY,CAAEruD,GAAIqD,EAAMtB,MAAO,KACxCT,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,UAAhB,qCAxCf,kDA2CIb,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QAE9C5B,EAASkY,aAAc,IA9C3B,2D,kEAkDA,WACElY,EACAK,EACAyB,EACA0rD,EACA3vD,GALF,iBAAA2C,EAAA,yDAOER,EAASkY,aAAc,IAPzB,UASgBra,EAThB,gCAUckwD,aACJ3zD,IACA0H,EAAOe,aACP2qD,GAbV,2DAecQ,YACJ5zD,IACA0H,EAAOe,aACP2qD,GAlBV,mCASU1qD,EATV,eAoByBC,YACnBjB,EACA,CAACgB,GACD,6BAvBN,QAoBUnI,EApBV,OAyBIqF,EACEotD,YAAY,CAAEruD,GAAIpE,EAAOA,OAAOsI,OAAQnC,MAAOnG,EAAOA,OAAO4C,UAE/D8C,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,UAAhB,qCA7Bf,kDAgCIb,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QAE9C5B,EAASkY,aAAc,IAnC3B,2D,sBAuCO,SAASpa,EAAuBD,GACrC,IAAMmC,EAAWC,cACTI,EAAoBgD,cAApBhD,gBACFjE,EAAcN,YAAYgB,KAC1B6G,EAAeC,cACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACtB2pD,EAAYS,cACZlxD,EAAajB,YAAYkB,KACvBsD,EAAWvI,cAAXuI,OACFwD,EAAcC,cACdmqD,EAAoB10D,uBAAY,WAChCE,YAAW0C,IAAkBkE,GAAYktD,E,8CAC3CvpD,CACEjE,EACAK,EACAC,EACAktD,EACApxD,EACAyB,GAGFzB,IAAgBM,KACdiH,GACA9B,GACA2rD,E,8CAEFtpD,CACElE,EACAK,EACAsD,EACA9B,EAAMI,WACNurD,EACA3vD,GAEOzB,IAAgBrC,KAAoB+J,GAAiB0pD,G,4CAC9DrpD,CAAMnE,EAAUK,EAAiByD,EAAa0pD,EAAW3vD,KAS1D,CACDmC,EACAK,EACAjE,EACAuH,EACA9B,EACAiC,EACA0pD,EACAltD,EACAzC,IAEF,OAAO5E,mBACL,iBAAO,CACL8E,YAAamwD,EACblwD,WAAYjB,EACZkB,aAAclB,KAEhB,CAACmxD,EAAmBnxD,O,0DCpOxB,oEAKe,SAASkxD,IACtB,IAAMtoB,EAAe7pC,YAAY8pC,KAKjC,OAJkB3sC,mBAChB,kBAAO0sC,EAAe7rC,YAAgB6rC,QAAgBxqC,IACtD,CAACwqC,M,4SC8BL,WACE3lC,EACAK,EACAC,EACAktD,EACAt1D,GALF,eAAAsI,EAAA,6DAOER,EAASqqD,aAAe,IAP1B,kBAS0B8D,YACpBxpC,aAA4BzsB,GAC5BoI,EACAktD,GAZN,OASU7sD,EATV,OAcIX,EACEsqD,YAAY,CAAEvrD,GAAI4B,EAAQE,gBAAiBC,MAAOH,EAAQI,eAE5DV,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,UAAhB,qCAlBf,gDAqBIb,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QAE9C5B,EAASqqD,aAAe,IAxB5B,0D,kEA4BA,WACErqD,EACAK,EACAyB,EACAilB,EACAymC,GALF,6CAAAhtD,EAAA,yDAOER,EAASqqD,aAAe,IAP1B,SASSvoD,EAAO6rD,gBAThB,sBAUY,IAAIprD,MAAM,uCAVtB,cAYUlI,EAAa,IAAIC,aAAWC,IAAa,aAZnD,SAa+B6zD,YACzBrpC,IACAyoC,GAfN,cAaUa,EAbV,iBAiB4Bh0D,EAAW2d,eAAeq2C,GAjBtD,oDAoBYT,YACJvzD,EACAyH,EAAO6rD,gBACP3rD,IACA+kB,EACAigC,EAAOpkC,KAAK4qC,IAzBpB,yBA4BgCc,YACxBj0D,EACA2H,IACA+iB,IACAgC,EACAymC,GAjCR,eA4BYtrD,EA5BZ,iBAmCmBC,YAAmBL,EAAQzH,EAAY6H,GAnC1D,QAmCME,EAnCN,gCAsC2BmsD,YAAqBf,GAtChD,oDAwCkC,8BAxClC,wBAwCcgB,EAxCd,EAwCcA,UAGFC,EAAYD,EAAUhB,GA3ClC,EA4CsDkB,YAC9C1H,EAAOpkC,KAAK,IAAI+rC,WAAWF,EAAUt5C,WAD/Bvd,EA5Cd,EA4CcA,YAAauvB,EA5C3B,EA4C2BA,cAAehD,EA5C1C,EA4C0CA,QA5C1C,UA+CgCyqC,YACxB7pC,IACAntB,EACAkC,YAAgBqtB,GAChBlB,mBAAS9B,IAnDjB,eA+CY9M,EA/CZ,iBAqDsCnE,YAAmBmE,GArDzD,2CAqDaw3C,EArDb,eAsD6Bx0D,EAAW2d,eAAe62C,GAtDvD,oDAwDkCC,YACxBz0D,EACA2H,IACA+iB,IACAgC,EACAymC,GA7DV,eAwDctrD,EAxDd,iBA+DqBC,YAAmBL,EAAQzH,EAAY6H,GA/D5D,QA+DQE,EA/DR,eAkEIpC,EAASsqD,YAAY,CAAEvrD,GAAIqD,GAAQ,GAAItB,MAAO,KAC9CT,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,UAAhB,qCApEf,kDAuEIb,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QAE9C5B,EAASqqD,aAAe,IA1E5B,2D,sBA8EO,SAAS5jC,IACd,IAAMzmB,EAAWC,cACTI,EAAoBgD,cAApBhD,gBACFjE,EAAcN,YAAY2pB,KAC1B9hB,EAAeC,cACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACpBvD,EAAWvI,cAAXuI,OACFktD,EAAYuB,cACZzyD,EAAcR,YAAYwqB,KAC1B0oC,EAAoBx1D,uBAAY,WAChCE,YAAW0C,IAAkBkE,GAAUktD,E,4CACzCvpD,CAAIjE,EAAUK,EAAiBC,EAAQktD,EAAWpxD,GAElDA,IAAgBM,KACdiH,GACA9B,GACF2rD,G,4CAEAtpD,CACElE,EACAK,EACAsD,EACA9B,EAAMI,WACNurD,KAIH,CACDxtD,EACAK,EACAjE,EACAkE,EACAktD,EACA7pD,EACA9B,IAEF,OAAO5I,mBACL,iBAAO,CACL8E,YAAaixD,EACbhxD,WAAY1B,EACZ2B,aAAc3B,KAEhB,CAAC0yD,EAAmB1yD,O,0DC3LxB,oEAKe,SAASyyD,IACtB,IAAMppB,EAAe7pC,YAAYumD,KAKjC,OAJkBppD,mBAChB,kBAAO0sC,EAAe7rC,YAAgB6rC,QAAgBxqC,IACtD,CAACwqC,M,mYCsDChwC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCmb,SAAU,CACRC,QAASpb,EAAMM,QAAQ,GACvB+a,gBAAiBza,IAAO0a,gCAE1B89C,kBAAmB,CACjBh+C,QAASpb,EAAMM,QAAQ,EAAG,Q,SAIf8N,E,sFAAf,WACEjM,EACAwG,EACA6B,EACAnI,EACA2Q,GALF,uBAAArI,EAAA,+EAQ0BxI,EAASk3D,sBAAsB1wD,GARzD,cAQUmC,EARV,OASUQ,EAAWC,YACfT,EACAU,YAAyBnJ,IAErBoJ,EAAiBC,YACrBsH,EACI8b,aAA4BzsB,GAC5B2B,aAA8B3B,IAhBxC,SAkB+BsJ,YACzBtJ,EACAoJ,EACAH,EAASc,WACTghD,IAAmB58C,QAtBzB,uBAkBY5E,EAlBZ,EAkBYA,SAlBZ,kBAwBW,CAAE+oD,IAAK7oD,aAAgBF,GAAW7I,MAAO,OAxBpD,yCA0BIsF,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QA5BlD,kBA8BW,CAAE4oD,IAAK,KAAM5xD,MAAOgJ,YAAW,EAAD,MA9BzC,2D,+BAkCesC,E,kFAAf,WAAsB1F,EAAY6B,EAAsBwI,GAAxD,yBAAArI,EAAA,sEAEUnG,EAAa,IAAIC,aAAWC,IAAa,aAFnD,SAGuBF,EAAWgI,eAAe7D,GAHjD,UAGU8D,EAHV,6BAKY,IAAIC,MAAM,yDALtB,cAOUpB,EAAWsB,YAA2BH,GAPhD,UAQiCI,YAC3BmG,EAAMkc,IAAyBtqB,KATrC,eAQU6G,EARV,iBAW+BE,YACzB9E,IACA4E,EACAH,EAASc,WACTghD,IAAmB58C,QAfzB,wBAWY5E,EAXZ,EAWYA,SAXZ,kBAiBW,CAAE+oD,IAAK7oD,aAAgBF,GAAW7I,MAAO,OAjBpD,yCAmBIsF,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QArBlD,kBAuBW,CAAE4oD,IAAK,KAAM5xD,MAAOgJ,YAAW,EAAD,MAvBzC,2D,+BA2BeuC,E,gFAAf,WAAqB3F,EAAY6B,GAAjC,yBAAAG,EAAA,sEAEUxG,EAAM,IAAIC,YAAUC,KAF9B,SAGuBF,EAAIwE,GAAG2wD,OAAO3wD,GAHrC,UAGU8D,EAHV,OAIUnB,EAAW+B,YAA0BZ,GAJ/C,sBAMY,IAAIC,MAAM,sBANtB,wBAQiCY,YAC3B/I,KATN,eAQUkH,EARV,iBAW+BE,YACzBzH,IACAuH,EACAH,EACA8hD,IAAmB58C,QAfzB,wBAWY5E,EAXZ,EAWYA,SAXZ,kBAiBW,CAAE+oD,IAAK7oD,aAAgBF,GAAW7I,MAAO,OAjBpD,yCAmBIsF,QAAQtF,MAAR,MACAyH,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QArBlD,kBAuBW,CAAE4oD,IAAK,KAAM5xD,MAAOgJ,YAAW,EAAD,MAvBzC,2D,sBA2Be,SAAS2+C,IACtB,IAAMlpD,EAAU1B,IACRmK,EAASC,cAATD,KACAO,EAAoBgD,cAApBhD,gBACFL,EAAWC,cACTjI,EAAaD,cAAbC,SACR,EAAwBO,mBAAS,SAAjC,mBAAOye,EAAP,KAAao4C,EAAb,KACMv/B,EAAiB,QAAT7Y,EACd,EACEze,mBAASmE,KADX,mBAAO2yD,EAAP,KAA4BC,EAA5B,KAEA,EAAgD/2D,mBAAS,IAAzD,mBAAOg3D,EAAP,KAAyBC,EAAzB,KACA,EACEj3D,oBAAS,GADX,oBAAOk3D,GAAP,MAAkCC,GAAlC,MAEA,GAA0Dn3D,mBAAS,IAAnE,qBAAOo3D,GAAP,MAA8BC,GAA9B,MACA,GAAkDr3D,mBAAS,IAA3D,qBAAOs3D,GAAP,MAA0BC,GAA1B,MACA,GAAkDv3D,mBAAc,MAAhE,qBAAOw3D,GAAP,MAA0BC,GAA1B,MACA,GAAmC53D,YAAiBi3D,GAA5Cl3D,GAAR,GAAQA,QAASwF,GAAjB,GAAiBA,cACXsyD,GACJv2D,YAAW21D,KAAyBl3D,GAAUwF,GAAgB,GAC1D8sD,GAAgBxxD,mBAAQ,WAC5B,IACE,OAAwB,OAAjB82D,SAAiB,IAAjBA,QAAA,EAAAA,GAAmB56C,SACtB0a,EACE6+B,YACE1H,EAAOpkC,KAAK,IAAI+rC,WAAWoB,GAAkB56C,WAE/C+6C,YACElJ,EAAOpkC,KAAK,IAAI+rC,WAAWoB,GAAkB56C,WAEjD,KACJ,MAAOhc,GAEP,OADA+E,QAAQtF,MAAMO,GACP,QAER,CAAC42D,GAAmBlgC,IACvBl2B,qBAAU,WACR,GAAI41D,KAAsB71D,YAAW21D,IAAwBl3D,IAAU,CACrE,IAAIqM,GAAY,EAyDhB,OAxDI9K,YAAW21D,IAAwBr3D,GACrC43D,GAAyB,IACzBF,IAA6B,GAC7B,sBAAC,gCAAAlvD,EAAA,sEAC8ByD,EAC3BjM,EACAu3D,EACAlvD,EACAgvD,EACAx/B,GANH,gBACS26B,EADT,EACSA,IAAK5xD,EADd,EACcA,MAOR4L,IACHkrD,IAA6B,GACzBlF,GACFsF,GAAqBtF,GAEnB5xD,GACFg3D,GAAyBh3D,IAd9B,0CAAD,IAkBSy2D,IAAwB3yD,KACjCkzD,GAAyB,IACzBF,IAA6B,GAC7B,sBAAC,gCAAAlvD,EAAA,sEAC8B0D,EAC3BqrD,EACAlvD,EACAwvB,GAJH,gBACS26B,EADT,EACSA,IAAK5xD,EADd,EACcA,MAKR4L,IACHkrD,IAA6B,GACzBlF,GACFsF,GAAqBtF,GAEnB5xD,GACFg3D,GAAyBh3D,IAZ9B,0CAAD,IAgBSy2D,IAAwBt1D,MACjC61D,GAAyB,IACzBF,IAA6B,GAC7B,sBAAC,gCAAAlvD,EAAA,sEAC8B2D,EAAMorD,EAAkBlvD,GADtD,gBACSmqD,EADT,EACSA,IAAK5xD,EADd,EACcA,MACR4L,IACHkrD,IAA6B,GACzBlF,GACFsF,GAAqBtF,GAEnB5xD,GACFg3D,GAAyBh3D,IAR9B,0CAAD,IAaK,WACL4L,GAAY,MAGf,CACD6qD,EACAE,EACAv3D,EACAqI,EACAwvB,EACA13B,KAEF,IAAMg4D,GAAmB32D,uBAAY,SAACiR,GACpC6kD,GAAuB,SAACc,GAAD,MACE,QAAvB3lD,EAAMhL,OAAO4F,OACZ25B,IAAwB/3B,MAAK,SAACqL,GAAD,OAAWA,EAAMvT,KAAOqxD,KAElDA,EADA1zD,OAGN0yD,EAAQ3kD,EAAMhL,OAAO4F,SACpB,IACGgrD,GAA0B72D,uBAAY,SAACiR,GAC3C+kD,EAAoB,IACpBF,EAAuB7kD,EAAMhL,OAAO4F,SACnC,IACGirD,GAAuB92D,uBAAY,SAACiR,GACxC+kD,EAAoB/kD,EAAMhL,OAAO4F,MAAMkrD,UACtC,IACGC,GAAwBh3D,uBAAY,SAACiR,GACzCqlD,GAAqBrlD,EAAMhL,OAAO4F,MAAMkrD,UACvC,IACH52D,qBAAU,WACR,IAAI6K,GAAY,EAmBhB,OAlBIqrD,IACF,sBAAC,gCAAArvD,EAAA,+EAE+B,8BAF/B,gBAEWguD,EAFX,EAEWA,UAGFC,EAAYD,EAAU10D,YAAgB+1D,KACvCrrD,GACHwrD,GAAqBvB,GAP1B,gDAUGvwD,QAAQC,IAAR,MACKqG,GACHwrD,GAAqB,MAZ1B,wDAAD,GAiBK,WACLxrD,GAAY,KAEb,CAACqrD,KACJ,IAAMY,GAAwB,OAAGhG,SAAH,IAAGA,QAAH,EAAGA,GAAeruD,YAC1Cs0D,GAAiBb,IAAqBY,GACtCE,GAAqBn3D,uBAAY,WACjCk3D,IAAkBb,IAAqBY,KAErC5gC,GACF7vB,EACE4wD,YAAkB,CAChBpG,IAAKqF,GACLpF,cAAe,CACbruD,YAAaquD,GAAcruD,YAC3B4qB,cAAeyjC,GAAczjC,cAC7BpvB,YAAa6yD,GAAc7yD,YAC3BuvB,cAAesjC,GAActjC,kBAInCrnB,EAAK,UAELE,EACEuqD,YAAe,CACbC,IAAKqF,GACLpF,cAAe,CACbruD,YAAaquD,GAAcruD,YAC3B4qB,cAAeyjC,GAAczjC,cAC7BpvB,YAAa6yD,GAAc7yD,YAC3BuvB,cAAesjC,GAActjC,kBAInCrnB,EAAK,iBAGR,CACDE,EACA0wD,GACAb,GACAY,GACAhG,GACA56B,EACA/vB,IAEF,OACE,cAAC,IAAD,CAAWsP,SAAS,KAApB,SACE,eAAC,IAAD,CAAM9X,UAAWD,EAAQ2Z,SAAzB,UACE,cAAC,IAAD,CAAO9P,SAAS,OAAO1J,QAAQ,WAA/B,wJAIA,eAAC,IAAD,CACEwT,QAAM,EACNxT,QAAQ,WACR8T,MAAM,OACNtN,WAAY6xD,GACZxqD,MAAO2R,EACP9L,SAAUilD,GACVllD,WAAS,EACT7N,OAAO,SART,UAUE,cAAC,IAAD,CAAUiI,MAAM,QAAhB,mBACA,cAAC,IAAD,CAAUA,MAAM,MAAhB,oBAEF,cAAC,IAAD,CACE2F,QAAM,EACNxT,QAAQ,WACR8T,MAAM,eACNtN,WAAY6xD,GACZxqD,MAAOgqD,EACPnkD,SAAUmlD,GACVplD,WAAS,EACT7N,OAAO,SACP+N,OAAQ0kB,EAAQmP,IAA0B5zB,MAE3C1R,YAAW21D,GACV,cAAC,IAAD,CAAen3D,QAASm3D,IACtB,KACJ,cAAC,IAAD,CACE73D,QAAQ,WACR8T,MAAM,yBACNtN,WACI6xD,IACFJ,MACEQ,GAEJ5qD,MAAOkqD,EACPrkD,SAAUolD,GACV13D,QAAS+2D,MAA2BM,GACpCY,WAAYlB,IAAyBM,GACrChlD,WAAS,EACT7N,OAAO,WAET,cAAC,IAAD,CACEmB,QAASoyD,GACT3yD,UAAW0yD,GACXzyD,WAAYwxD,GAHd,qBAOA,qBAAKn4D,UAAWD,EAAQ43D,kBAAxB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAkB6B,WAAY,cAAC,IAAD,IAA9B,sBAGA,cAAC,IAAD,UACE,gCACE,eAAC,IAAD,CAAKp/C,SAAS,WAAd,UACE,cAAC,IAAD,CACEla,QAAQ,WACR8T,MAAM,mBACNtN,SAAUyxD,GACVpqD,MAAOwqD,IAAqB,GAC5B3kD,SAAUslD,GACVvlD,WAAS,EACT7N,OAAO,WAERqyD,GACC,cAAC,IAAD,CACE/9C,SAAS,WACT3J,MAAO,CACLiK,IAAK,EACLC,MAAO,EACP2uC,KAAM,EACN2M,OAAQ,EACRr8C,gBAAiB,kBACjB7T,QAAS,OACT2K,WAAY,SACZ+H,eAAgB,UAVpB,SAaE,cAAC,IAAD,MAEA,QAEN,cAAC,IAAD,CAAKghD,GAAI,EAAT,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CACEv5D,QAAQ,WACR8T,MAAM,gBACNtN,UAAQ,EACRqH,OAAwB,OAAjB0qD,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBiB,gBAAiB,GAC3C/lD,WAAS,EACT7N,OAAO,WAET,cAAC,IAAD,CACE5F,QAAQ,WACR8T,MAAM,kBACNtN,UAAQ,EACRqH,MACG0qD,IACC/2C,YACE+2C,GAAkBkB,gBAClBlB,GAAkBiB,gBAEtB,GAEF/lD,WAAS,EACT7N,OAAO,WAET,cAAC,IAAD,CACE5F,QAAQ,WACR8T,MAAM,WACNtN,UAAQ,EACRqH,OAAwB,OAAjB0qD,SAAiB,IAAjBA,QAAA,EAAAA,GAAmB5uD,WAAY,GACtC8J,WAAS,EACT7N,OAAO,WAET,cAAC,IAAD,CACE5F,QAAQ,WACR8T,MAAM,YACNtN,UAAQ,EACRqH,MACG0qD,IACC,IAAI17C,KAC4B,IAA9B07C,GAAkBmB,WAClBC,kBACJ,GAEFlmD,WAAS,EACT7N,OAAO,WAET,cAAC,IAAD,CAAK2zD,GAAI,EAAT,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CACEv5D,QAAQ,WACR8T,MAAM,eACNtN,UAAQ,EACRqH,OAAoB,OAAbolD,SAAa,IAAbA,QAAA,EAAAA,GAAe7yD,YAAYqK,aAAc,GAChDgJ,WAAS,EACT7N,OAAO,WAET,cAAC,IAAD,CACE5F,QAAQ,WACR8T,MAAM,uBACNtN,UAAQ,EACRqH,MACGolD,IACCzxC,YACEyxC,GAActjC,cACdsjC,GAAc7yD,cAElB,GAEFqT,WAAS,EACT7N,OAAO,WAERyyB,EACC,cAAC,IAAD,CACEr4B,QAAQ,WACR8T,MAAM,kBACNtN,UAAQ,EAERqH,OAAoB,OAAbolD,SAAa,IAAbA,QAAA,EAAAA,GAAetmC,UAAW,GACjClZ,WAAS,EACT7N,OAAO,WAEP,KACJ,cAAC,IAAD,CACE5F,QAAQ,WACR8T,MAAM,eACNtN,UAAQ,EACRqH,OAAoB,OAAbolD,SAAa,IAAbA,QAAA,EAAAA,GAAeruD,YAAY6F,aAAc,GAChDgJ,WAAS,EACT7N,OAAO,WAET,cAAC,IAAD,CACE5F,QAAQ,WACR8T,MAAM,iBACNtN,UAAQ,EACRqH,MACGolD,IACCzxC,YACEyxC,GAAczjC,cACdyjC,GAAcruD,cAElB,GAEF6O,WAAS,EACT7N,OAAO,WAERyyB,EAAQ,KACP,cAAC,IAAD,CACEr4B,QAAQ,WACR8T,MAAM,SACNtN,UAAQ,EAERqH,OAAoB,OAAbolD,SAAa,IAAbA,QAAA,EAAAA,GAAe1jD,OAAO9E,aAAc,GAC3CgJ,WAAS,EACT7N,OAAO,6B,mRCrgBZ6G,E,wFAAf,WACEjE,EACAK,EACAC,EACAktD,EACApgD,EACAlV,GANF,eAAAsI,EAAA,yDAQER,EAASqqD,aAAe,IAR1B,UAUoBj9C,EAVpB,gCAWcgkD,YACJv3D,aAA8B3B,GAC9BoI,EACAktD,GAdV,2DAgBcW,YACJt0D,aAA8B3B,GAC9BoI,EACAktD,GAnBV,4BAUU7sD,EAVV,KAqBIX,EACEsqD,YAAY,CAAEvrD,GAAI4B,EAAQE,gBAAiBC,MAAOH,EAAQI,eAE5DV,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,UAAhB,qCAzBf,kDA4BIb,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QAE9C5B,EAASqqD,aAAe,IA/B5B,2D,+BAmCenmD,E,wFAAf,WACElE,EACAK,EACAyB,EACAilB,EACAymC,EACApgD,GANF,mBAAA5M,EAAA,yDAQER,EAASqqD,aAAe,IAR1B,SAUSvoD,EAAO6rD,gBAVhB,sBAWY,IAAIprD,MAAM,uCAXtB,cAaUlI,EAAa,IAAIC,aAAWC,IAAa,aAbnD,SAcUqzD,YACJvzD,EACAyH,EAAO6rD,gBACP3rD,IACA+kB,EACAigC,EAAOpkC,KAAK4qC,IAnBlB,WAsBwBpgD,EAtBxB,kCAuBcikD,YACJh3D,EACA2H,IACAvH,IACAssB,EACAymC,GA5BV,6DA8Bcc,YACJj0D,EACA2H,IACAvH,IACAssB,EACAymC,GAnCV,mCAsBUtrD,EAtBV,eAqCuBC,YAAmBL,EAAQzH,EAAY6H,GArC9D,QAqCUE,EArCV,OAuCIpC,EAASsqD,YAAY,CAAEvrD,GAAIqD,EAAMtB,MAAO,KACxCT,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,UAAhB,qCAzCf,kDA4CIb,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QAE9C5B,EAASqqD,aAAe,IA/C5B,2D,+BAmDelmD,E,oFAAf,WACEnE,EACAK,EACAyB,EACA0rD,GAJF,iBAAAhtD,EAAA,6DAMER,EAASqqD,aAAe,IAN1B,kBAQsBiH,YAChBl3D,IACA0H,EAAOe,aACP2qD,GAXN,cAQU1qD,EARV,gBAayBC,YACnBjB,EACA,CAACgB,GACD,gCAhBN,OAaUnI,EAbV,OAkBIqF,EACEsqD,YAAY,CAAEvrD,GAAIpE,EAAOA,OAAOsI,OAAQnC,MAAOnG,EAAOA,OAAO4C,UAE/D8C,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,UAAhB,qCAtBf,kDAyBIb,EAAgB,KAAM,CACpBW,QAAS,cAAC,IAAD,CAAOE,SAAS,QAAhB,SAAyBU,YAAW,EAAD,QAE9C5B,EAASqqD,aAAe,IA5B5B,2D,sBAgCO,SAAS9oB,IACd,IAAMvhC,EAAWC,cACTI,EAAoBgD,cAApBhD,gBACFjE,EAAcN,YAAYO,MAC1BsH,EAAeC,cACf/B,EAAK,OAAG8B,QAAH,IAAGA,OAAH,EAAGA,EAAcE,UACpBvD,EAAWvI,cAAXuI,OACFwD,EAAcC,cACdypD,EAAY+D,cACZj1D,EAAcR,YAAYS,KAC1ByyD,EAAoBx1D,uBAAY,WAChCE,YAAW0C,IAAkBkE,GAAUktD,EACzCvpD,EAAIjE,EAAUK,EAAiBC,EAAQktD,GAAW,EAAOpxD,GAEzDA,IAAgBM,KACdiH,GACA9B,GACF2rD,EAEAtpD,EACElE,EACAK,EACAsD,EACA9B,EAAMI,WACNurD,GACA,GAEOpxD,IAAgBrC,KAAoB+J,GAAe0pD,GAC5DrpD,EAAMnE,EAAUK,EAAiByD,EAAa0pD,KAG/C,CACDxtD,EACAK,EACAjE,EACAkE,EACAktD,EACA7pD,EACA9B,EACAiC,IAGI0tD,EAA0Bh4D,uBAAY,WACtCE,YAAW0C,IAAkBkE,GAAUktD,EACzCvpD,EAAIjE,EAAUK,EAAiBC,EAAQktD,GAAW,EAAMpxD,GAExDA,IAAgBM,KACdiH,GACA9B,GACF2rD,EAEAtpD,EACElE,EACAK,EACAsD,EACA9B,EAAMI,WACNurD,GACA,GAEOpxD,IAAgBrC,KAAoB+J,GAAe0pD,GAC5DrpD,EAAMnE,EAAUK,EAAiByD,EAAa0pD,KAG/C,CACDxtD,EACAK,EACAjE,EACAkE,EACAktD,EACA7pD,EACA9B,EACAiC,IAGF,OAAO7K,mBACL,iBAAO,CACLuoC,kBAAmBgwB,EACnBzzD,YAAaixD,EACbhxD,WAAY1B,EACZ2B,aAAc3B,KAEhB,CAAC0yD,EAAmB1yD,EAAak1D,O,0DCjPrC,oEAKe,SAASD,IACtB,IAAM5rB,EAAe7pC,YAAY4mD,MAKjC,OAJkBzpD,mBAChB,kBAAO0sC,EAAe7rC,YAAgB6rC,QAAgBxqC,IACtD,CAACwqC,M,yQCCE,SAAexjC,EAAtB,sC,4CAAO,WACLL,EACAzH,EACA6H,GAHK,iBAAA1B,EAAA,yDAKAsB,EAAO6rD,gBALP,sBAMG,IAAIprD,MAAM,uCANb,uBAQgBT,EAAO6rD,gBAAgBzrD,GARvC,cAQCuvD,EARD,gBAScp3D,EAAWq3D,mBAAmBD,EAAOE,aATnD,cASCvvD,EATD,iBAUC/H,EAAWu3D,mBAAmBxvD,GAV/B,iCAWEA,GAXF,6C,sBAmBA,SAAS2sB,EACdzb,GAEA,IAAMpY,EAAO8rD,EAAOpkC,KAAKtP,EAAQpY,MAC3B22D,EAAWC,IAAWjI,OAAO3uD,GAE7B62D,EAAS,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAUv1B,cACtBvT,EAAS,IAAI5iB,YAAU4rD,GACvB51B,EAASjW,IAAUtD,KAAV,OAAeivC,QAAf,IAAeA,OAAf,EAAeA,EAAU11B,OAAO61B,WAAW/vD,WAM1D,MALe,CACbq6B,cAAa,OAAEvT,QAAF,IAAEA,OAAF,EAAEA,EAAQ9mB,WACvBk6B,OAAQA,EAAOl6B,YAMZ,SAAeiE,EAAtB,oC,4CAAO,WACL7L,EACA43D,GAFK,SAAAzxD,EAAA,+EAIEwb,EAAoB3hB,EAAY43D,EAAS,cAJ3C,4C,sBAOA,IAAMj2C,EAAmB,uCAAG,WACjC3hB,EACA43D,EACAC,GAHiC,SAAA1xD,EAAA,sEAMzBiE,QAAQ0O,IACZg/C,EAAOF,EAAS,IAAInrD,KAAI,SAACsrD,GAAD,OACtB/3D,EAAWg4D,wBAAwBD,EAAOF,OARf,uCAW/BI,QAX+B,2CAAH,0DAczB,SAASH,EAAU9I,EAAY1pD,GACpC,OAAOgjB,MAAM4vC,MACX,EACA,IAAI5vC,MAAM6tB,KAAKC,KAAK4Y,EAAMhjD,OAAS1G,KACnCmH,KAAI,SAAC0rD,EAAG1jC,GAAJ,OAAcu6B,EAAMh6B,MAAMP,EAAQnvB,GAAOmvB,EAAQ,GAAKnvB,MAGvD,SAAS4N,EAAenS,GAC7B,OAAOA,EAAQiL,OAAS,GAAjB,UACAjL,EAAQi0B,MAAM,EAAG,GADjB,cACyBj0B,EAAQi0B,OAAO,IAC3Cj0B,K,qHC7EN,2FAEa3E,EAAS,CACpBC,KAAM,UACNqb,qBAAsB,0BACtB0gD,KAAM,UACN97D,MAAO,UACP+7D,sBAAuB,0BACvBC,WAAY,wBACZC,UAAW,UACX5T,UAAW,UACX7tC,+BAAgC,kBAChC0hD,IAAK,UACLC,QAAS,WAGEj9D,EAAQk9D,YACnBC,YAAY,CACVx3D,QAAS,CACPwb,KAAM,OACNxgB,WAAY,CACVy8D,QAASx8D,EAAOuoD,UAChBkU,MAAOz8D,EAAOuoD,WAEhB1lC,QAAS7iB,EAAOg8D,KAChBnU,KAAM,CACJC,QAAS,0BAEXA,QAAS,CACP4U,KAAM18D,EAAOsb,qBACbrW,MAAOjF,EAAOm8D,WAEhBQ,UAAW,CACTD,KAAM18D,EAAOi8D,sBACbh3D,MAAOjF,EAAOk8D,YAEhB/5D,MAAO,CACLu6D,KAAM18D,EAAOo8D,MAGjBzU,WAAY,CACViV,WAAY,qBACZC,GAAI,CACF3sB,WAAY,OAEd4sB,GAAI,CACF5sB,WAAY,OAEd6sB,GAAI,CACF7sB,WAAY,QAGhB8sB,UAAW,CACTC,eAAgB,CACd,UAAW,CACT,IAAK,CACHC,eAAgB,OAChBC,eAAe,GAAD,OAAKn9D,EAAOg8D,KAAZ,YAAoBh8D,EAAO0a,iCAE3C,uBAAwB,CACtBnb,MAAO,MACPuH,OAAQ,MACR2T,gBAAiBza,EAAO0a,gCAE1B,6BAA8B,CAC5BD,gBAAiBza,EAAOg8D,KACxBnhD,aAAc,OAEhB,8BAA+B,CAE7BJ,gBAAiB,iBAIvB2iD,aAAc,CACZzvD,KAAM,CACJ8M,gBAAiBza,EAAO0a,+BACxB,WAAY,CACV9T,QAAS,SAGby2D,QAAS,CACP,gBAAiB,CACfC,oBAAqB,OACrBC,qBAAsB,QAExB,eAAgB,CACdC,uBAAwB,OACxBC,wBAAyB,UAI/BC,SAAU,CACR/vD,KAAM,CACJkN,aAAc,MACdwgB,OAAQ,cAGZsiC,UAAW,CACThwD,KAAM,CACJkN,aAAc,MACd+7C,cAAe,SAGnBgH,QAAS,CACPjwD,KAAM,CACJ7I,MAAO9E,EAAOm8D,YAGlB0B,SAAU,CACRR,QAAS,CACPxiD,aAAc,SAGlBijD,WAAY,CACVnwD,KAAM,CACJ8M,gBAAiB,cACjBD,QAAS,IAGbujD,QAAS,CACPpwD,KAAM,CACJ8M,gBAAiBza,EAAO0a,+BACxBG,aAAc,OACdL,QAAS,KAGbwjD,iBAAkB,CAChBC,aAAc,CACZC,gBAAiB,IAGrBC,eAAgB,CACdxwD,KAAM,CACJuwD,gBAAiB,IAGrBE,aAAc,CACZvpD,MAAO,CACLnD,SAAU,GACVw+B,WAAY,MACZ,wBAAyB,CACvBA,WAAY,OAEd,2BAA4B,CAC1BA,WAAY,SAIlBmuB,OAAQ,CACN1wD,KAAM,CACJ+D,SAAU,GACVw+B,WAAY,MACZ11B,QAAS,GACTo8C,cAAe,c,glEC1JV,MAA0B,oD,kBCA1B,MAA0B,kCCqB5BzuD,EAEP,UASOwM,EACC,YAAZxM,EACI,CACE,CACEG,GAAII,IACJoG,KAAM,YACNgN,KAAM4Y,KAER,CACEpsB,GAAIE,IACJsG,KAAM,sBACNgN,KAAM2e,KAER,CACEnyB,GAAID,IACJyG,KAAM,WACNgN,KAAM6X,KAER,CACErrB,GAAIG,IACJqG,KAAM,UACNgN,KAAMwY,KAER,CACEhsB,GAAIrC,IACJ6I,KAAM,SACNgN,KAAM0e,KAER,CACElyB,GAAIhF,IACJwL,KAAM,QACNgN,KAAMwiD,IAGE,YAAZn2D,EACA,CACE,CACEG,GAAII,IACJoG,KAAM,YACNgN,KAAM4Y,KAER,CACEpsB,GAAIE,IACJsG,KAAM,sBACNgN,KAAM2e,KAER,CACEnyB,GAAID,IACJyG,KAAM,oBACNgN,KAAM6X,KAER,CACErrB,GAAIC,IACJuG,KAAM,qBACNgN,KAAM6X,KAER,CACErrB,GAAIG,IACJqG,KAAM,UACNgN,KAAMwY,KAER,CACEhsB,GAAIrC,IACJ6I,KAAM,SACNgN,KAAM0e,KAER,CACElyB,GAAIhF,IACJwL,KAAM,QACNgN,KAAMwiD,IAGV,CACE,CACEh2D,GAAIE,IACJsG,KAAM,sBACNgN,KAAM2e,KAER,CACEnyB,GAAID,IACJyG,KAAM,WACNgN,KAAM6X,KAER,CACErrB,GAAIrC,IACJ6I,KAAM,SACNgN,KAAM0e,KAER,CACElyB,GAAIhF,IACJwL,KAAM,QACNgN,KAAMwiD,IAGH3iD,EACC,YAAZxT,EAAwB,CAACO,KAAiB,GAC/B6/B,EAA0B5zB,EAAOiD,QAC5C,gBAAGtP,EAAH,EAAGA,GAAH,OACEA,IAAOI,KACPJ,IAAOE,KACPF,IAAOD,KACPC,IAAOC,KACPD,IAAOG,KACPH,IAAOrC,OAGE4I,EAA2B8F,EAAO6jB,QAAO,SAAC8N,EAAKzqB,GAE1D,OADAyqB,EAAIzqB,EAAMvT,IAAMuT,EACTyqB,IACN,IAEUvqB,EAAqB,CAChC,CACEzT,GAAI,EACJwG,KAAM,QACNgN,KAAMyiD,GAER,CACEj2D,GAAI,EACJwG,KAAM,YACNgN,KAAM4Y,MAGG5iB,EAAiC,SAACrQ,GAAD,OAC5CA,IAAYwE,IACR,MACAxE,IAAY4G,KAAgB5G,IAAY8G,IACxC,MACA9G,IAAY+G,IACZ,MACA/G,IAAY6B,IACZ,OACA7B,IAAYgH,IACZ,QACAhH,IAAYiH,IACZ,OACA,IACOE,EAAkB,SAACnH,GAAD,OAC7BA,IAAY4G,KAAgB5G,IAAY8G,IACpC,YACA9G,IAAY+G,IACZ,UACA/G,IAAY6B,IACZ,SACA7B,IAAYgH,IACZ,cACAhH,IAAYiH,IACZ,YACA,YACO8jD,EACC,YAAZrkD,EACI,CACE,6CACA,6BACA,4CACA,qDACA,+CACA,0CAEU,YAAZA,EACA,CAAC,8CACD,CAAC,yBACMq2D,EACC,YAAZr2D,EAAwB,EAAgB,YAAZA,EAAwB,EAAI,KAC7Cs2D,EACC,YAAZt2D,EAAwB,EAAgB,YAAZA,EAAwB,EAAI,KAC7Cu2D,EACC,YAAZv2D,EAAwB,GAAiB,YAAZA,EAAwB,GAAK,KAC/Cw2D,EACC,YAAZx2D,EAAwB,IAAkB,YAAZA,EAAwB,MAAQ,KACnDy2D,EACC,YAAZz2D,EAAwB,MAAoB,YAAZA,EAAwB,MAAQ,KACrDtG,EAAgB,SAACJ,GAAD,OAC3BA,IAAY4G,IACRm2D,EACA/8D,IAAY8G,IACZk2D,EACAh9D,IAAY+G,IACZk2D,EACAj9D,IAAYgH,IACZk2D,EACAl9D,IAAYiH,IACZk2D,OACAl6D,GACOZ,EACT+6D,gCAOSp7D,EACC,YAAZ0E,EACI,CACEksD,IAAK,wBACLD,QAAS,aACTtlD,KAAM,WAEI,YAAZ3G,EACA,CACEksD,IAAK,+BACLD,QAAS,YACTtlD,KAAM,WAER,CACEulD,IAAK,wBACLD,QAAS,aACTtlD,KAAM,cAEDgwD,EAAqBx0C,qBACpB,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO02C,EAAyBv0B,qBACxB,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOgxC,EAA2B7uB,qBAC1B,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO42D,EAAqBz0C,qBACpB,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO22C,EAAyBx0B,qBACxB,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOixC,EAA2B9uB,qBAC1B,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO62D,EAAyB10C,qBACxB,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO42C,EAA6Bz0B,qBAC5B,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOkxC,EAA+B/uB,qBAC9B,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO82D,EAAsB30C,qBACrB,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO+2D,EAA0B50C,qBACzB,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOg3D,EAA4B70C,qBAC3B,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOoD,EACC,YAAZpD,EACI,8CACY,YAAZA,EACA,+CACA,8CACOmmB,EACC,YAAZnmB,EACI,8CACY,YAAZA,EACA,+CACA,8CACOnE,EACC,YAAZmE,EACI,8CACY,YAAZA,EACA,+CACA,+CACOi3D,EAA6B90C,qBAC5B,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOk3D,EAAiC/0C,qBAChC,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOm3D,EAAmCh1C,qBAClC,YAAZniB,EACI,6CACY,YAAZA,EACA,6CACA,8CAGOmxC,EACX,+CACW6E,EACX,+CAGWohB,EACC,YAAZp3D,EACI,+CACY,YAAZA,EACA,+CACA,+CACOxE,EACC,YAAZwE,EACI,+CACY,YAAZA,EACA,+CACA,+CAEOyC,GAA2B,SAACnJ,GAAD,OACtCA,IAAYwE,IACRsF,EACA9J,IAAY4G,IACZy2D,EACAr9D,IAAY+G,IACZu2D,EACAt9D,IAAY6B,IACZi8D,EACA99D,IAAYgH,IACZu2D,EACAv9D,IAAY8G,IACZ62D,EACA39D,IAAYiH,IACZu2D,EACA,IACO/wC,GAA8B,SAACzsB,GAAD,OACzCA,IAAYwE,IACRqoB,EACA7sB,IAAY4G,IACZw2C,EACAp9C,IAAY+G,IACZs2C,EACAr9C,IAAYgH,IACZs2C,EACAt9C,IAAY8G,IACZ82D,EACA59D,IAAYiH,IACZw2D,EACA,IACO97D,GAAgC,SAAC3B,GAAD,OAC3CA,IAAYwE,IACRjC,EACAvC,IAAY4G,IACZ8wC,EACA13C,IAAY+G,IACZ4wC,EACA33C,IAAY6B,IACZK,EACAlC,IAAYgH,IACZ4wC,EACA53C,IAAY8G,IACZ+2D,EACA79D,IAAYiH,IACZy2D,EACA,IAOOK,GAA2B,WAAZr3D,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","file":"static/js/main.70a5ca3c.chunk.js","sourcesContent":["import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport { COLORS } from \"../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  centeredContainer: {\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n  header: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(4),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginBottom: theme.spacing(4),\n    },\n  },\n  linearGradient: {\n    background: `linear-gradient(to left, ${COLORS.blue}, ${COLORS.green});`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n  },\n}));\n\nexport default function HeaderText({\n  children,\n  white,\n  small,\n}: {\n  children: ReactChild;\n  white?: boolean;\n  small?: boolean;\n}) {\n  const classes = useStyles();\n  return (\n    <div className={classes.centeredContainer}>\n      <Typography\n        variant={small ? \"h2\" : \"h1\"}\n        component=\"h1\"\n        className={clsx(classes.header, { [classes.linearGradient]: !white })}\n      >\n        {children}\n      </Typography>\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToUint8Array,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type ForeignAssetInfo = {\n  doesExist: boolean;\n  address: string | null;\n};\n\nfunction useFetchForeignAsset(\n  originChain: ChainId,\n  originAsset: string,\n  foreignChain: ChainId\n): DataWrapper<ForeignAssetInfo> {\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const correctEvmNetwork = getEvmChainId(foreignChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const [assetAddress, setAssetAddress] = useState<string | null>(null);\n  const [doesExist, setDoesExist] = useState<boolean | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const originAssetHex = useMemo(() => {\n    try {\n      return nativeToHexString(originAsset, originChain);\n    } catch (e) {\n      return null;\n    }\n  }, [originAsset, originChain]);\n  const [previousArgs, setPreviousArgs] = useState<{\n    originChain: ChainId;\n    originAsset: string;\n    foreignChain: ChainId;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.originChain === originChain &&\n    previousArgs.originAsset === originAsset &&\n    previousArgs.foreignChain === foreignChain;\n  const setArgs = useCallback(() => {\n    setPreviousArgs({ foreignChain, originChain, originAsset });\n  }, [foreignChain, originChain, originAsset]);\n\n  const argumentError = useMemo(\n    () =>\n      !originChain ||\n      !originAsset ||\n      !foreignChain ||\n      !originAssetHex ||\n      foreignChain === originChain ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && !hasCorrectEvmNetwork) ||\n      argsEqual,\n    [\n      isReady,\n      foreignChain,\n      originAsset,\n      originChain,\n      hasCorrectEvmNetwork,\n      originAssetHex,\n      argsEqual,\n    ]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setAssetAddress(null);\n      setError(\"\");\n      setDoesExist(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError || !originAssetHex) {\n      return;\n    }\n\n    let cancelled = false;\n    setIsLoading(true);\n    try {\n      const getterFunc: () => Promise<string | null> = isEVMChain(foreignChain)\n        ? () =>\n            getForeignAssetEth(\n              getTokenBridgeAddressForChain(foreignChain),\n              provider as any, //why does this typecheck work elsewhere?\n              originChain,\n              hexToUint8Array(originAssetHex)\n            )\n        : foreignChain === CHAIN_ID_TERRA\n        ? () => {\n            const lcd = new LCDClient(TERRA_HOST);\n            return getForeignAssetTerra(\n              TERRA_TOKEN_BRIDGE_ADDRESS,\n              lcd,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : () => {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            return getForeignAssetSolana(\n              connection,\n              SOL_TOKEN_BRIDGE_ADDRESS,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          };\n\n      getterFunc()\n        .then((result) => {\n          if (!cancelled) {\n            if (\n              result &&\n              !(\n                isEVMChain(foreignChain) &&\n                result === ethers.constants.AddressZero\n              )\n            ) {\n              setArgs();\n              setDoesExist(true);\n              setIsLoading(false);\n              setAssetAddress(result);\n            } else {\n              setArgs();\n              setDoesExist(false);\n              setIsLoading(false);\n              setAssetAddress(null);\n            }\n          }\n        })\n        .catch((e) => {\n          if (!cancelled) {\n            setError(\"Could not retrieve the foreign asset.\");\n            setIsLoading(false);\n          }\n        });\n    } catch (e) {\n      //This catch mostly just detects poorly formatted addresses\n      if (!cancelled) {\n        setError(\"Could not retrieve the foreign asset.\");\n        setIsLoading(false);\n      }\n    }\n  }, [\n    argumentError,\n    foreignChain,\n    originAssetHex,\n    originChain,\n    provider,\n    setArgs,\n    argsEqual,\n  ]);\n\n  const compoundError = useMemo(() => {\n    return error ? error : \"\";\n  }, [error]); //now swallows wallet errors\n\n  const output: DataWrapper<ForeignAssetInfo> = useMemo(\n    () => ({\n      error: compoundError,\n      isFetching: isLoading,\n      data:\n        (assetAddress !== null && assetAddress !== undefined) ||\n        (doesExist !== null && doesExist !== undefined)\n          ? { address: assetAddress, doesExist: !!doesExist }\n          : null,\n      receivedAt: null,\n    }),\n    [compoundError, isLoading, assetAddress, doesExist]\n  );\n\n  return output;\n}\n\nexport default useFetchForeignAsset;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferIsApproving,\n  selectTransferIsRedeeming,\n  selectTransferIsSending,\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport const WAITING_FOR_WALLET_AND_CONF =\n  \"Waiting for wallet approval (likely in a popup) and confirmation...\";\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isApproving = useSelector(selectTransferIsApproving);\n  const isSending = useSelector(selectTransferIsSending);\n  const transferTx = useSelector(selectTransferTransferTx);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const showWarning =\n    isApproving || (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestAttestTx,\n  selectAttestCreateTx,\n  selectAttestIsCreating,\n  selectAttestIsSending,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isSending = useSelector(selectAttestIsSending);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const createTx = useSelector(selectAttestCreateTx);\n  const showWarning = (isSending && !attestTx) || (isCreating && !createTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isCreating\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport useFetchForeignAsset from \"../../hooks/useFetchForeignAsset\";\nimport { useHandleCreateWrapped } from \"../../hooks/useHandleCreateWrapped\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  spacer: {\n    height: theme.spacing(2),\n  },\n}));\n\nfunction Create() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const originAsset = useSelector(selectAttestSourceAsset);\n  const originChain = useSelector(selectAttestSourceChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  const foreignAssetInfo = useFetchForeignAsset(\n    originChain,\n    originAsset,\n    targetChain\n  );\n  const shouldUpdate = foreignAssetInfo.data?.doesExist;\n  const error = foreignAssetInfo.error || statusMessage;\n  const { handleClick, disabled, showLoader } = useHandleCreateWrapped(\n    shouldUpdate || false\n  );\n\n  console.log(\"foreign asset info\", foreignAssetInfo);\n\n  return (\n    <>\n      <KeyAndBalance chainId={targetChain} />\n\n      {foreignAssetInfo.isFetching ? (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={classes.alignCenter} />\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={!isReady || disabled}\n            onClick={handleClick}\n            showLoader={showLoader}\n            error={error}\n          >\n            {shouldUpdate ? \"Update\" : \"Create\"}\n          </ButtonWithLoader>\n          <WaitingForWalletMessage />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Create;\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function ShowTx({\n  chainId,\n  tx,\n}: {\n  chainId: ChainId;\n  tx: Transaction;\n}) {\n  const classes = useStyles();\n  const showExplorerLink =\n    CLUSTER === \"testnet\" ||\n    CLUSTER === \"mainnet\" ||\n    (CLUSTER === \"devnet\" &&\n      (chainId === CHAIN_ID_SOLANA || chainId === CHAIN_ID_TERRA));\n  const explorerAddress =\n    chainId === CHAIN_ID_ETH\n      ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? `https://${CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_BSC\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}bscscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_POLYGON\n      ? `https://${CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"}polygonscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_AVAX\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}snowtrace.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_SOLANA\n      ? `https://explorer.solana.com/tx/${tx?.id}${\n          CLUSTER === \"testnet\"\n            ? \"?cluster=devnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n            : \"\"\n        }`\n      : chainId === CHAIN_ID_TERRA\n      ? `https://finder.terra.money/${\n          CLUSTER === \"devnet\"\n            ? \"localterra\"\n            : CLUSTER === \"testnet\"\n            ? \"bombay-12\"\n            : \"columbus-5\"\n        }/tx/${tx?.id}`\n      : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  return (\n    <div className={classes.tx}>\n      <Typography noWrap component=\"div\" variant=\"body2\">\n        {tx.id}\n      </Typography>\n      {showExplorerLink && explorerAddress ? (\n        <Button\n          href={explorerAddress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          size=\"small\"\n          variant=\"outlined\"\n          className={classes.viewButton}\n        >\n          View on {explorerName}\n        </Button>\n      ) : null}\n    </div>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectAttestCreateTx,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/attestSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport { useHistory } from \"react-router\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function CreatePreview() {\n  const { push } = useHistory();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const createTx = useSelector(selectAttestCreateTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const handleReturnClick = useCallback(() => {\n    dispatch(reset());\n    push(\"/transfer\");\n  }, [dispatch, push]);\n\n  const explainerString =\n    \"Success! The create wrapped transaction was submitted.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {createTx ? <ShowTx chainId={targetChain} tx={createTx} /> : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Attest Another Token!\n      </ButtonWithLoader>\n      <ButtonWithLoader onClick={handleReturnClick}>\n        Return to Transfer\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  attestFromEth,\n  attestFromSolana,\n  attestFromTerra,\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setAttestTx,\n  setIsSending,\n  setSignedVAAHex,\n} from \"../store/attestSlice\";\nimport {\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n  selectAttestIsTargetComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  sourceAsset: string,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await attestFromEth(\n      getTokenBridgeAddressForChain(chainId),\n      signer,\n      sourceAsset\n    );\n    dispatch(\n      setAttestTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  solPK: PublicKey,\n  sourceAsset: string,\n  wallet: WalletContextState\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const transaction = await attestFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_TOKEN_BRIDGE_ADDRESS,\n      solPK.toString(),\n      sourceAsset\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      // TODO: error state\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setAttestTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const msg = await attestFromTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      asset\n    );\n    const result = await postWithFees(wallet, [msg], \"Create Wrapped\");\n    const info = await waitForTerraExecution(result);\n    dispatch(setAttestTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleAttest() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleAttestClick = useCallback(() => {\n    if (isEVMChain(sourceChain) && !!signer) {\n      evm(dispatch, enqueueSnackbar, signer, sourceAsset, sourceChain);\n    } else if (sourceChain === CHAIN_ID_SOLANA && !!solanaWallet && !!solPK) {\n      solana(dispatch, enqueueSnackbar, solPK, sourceAsset, solanaWallet);\n    } else if (sourceChain === CHAIN_ID_TERRA && !!terraWallet) {\n      terra(dispatch, enqueueSnackbar, terraWallet, sourceAsset);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceAsset,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleAttestClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleAttestClick, disabled, isSending]\n  );\n}\n","import { ChainId, CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { LinearProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CHAINS_BY_ID, SOLANA_HOST } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n    textAlign: \"center\",\n  },\n  message: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function TransactionProgress({\n  chainId,\n  tx,\n  isSendComplete,\n}: {\n  chainId: ChainId;\n  tx: Transaction | undefined;\n  isSendComplete: boolean;\n}) {\n  const classes = useStyles();\n  const { provider } = useEthereumProvider();\n  const [currentBlock, setCurrentBlock] = useState(0);\n  useEffect(() => {\n    if (isSendComplete || !tx) return;\n    if (isEVMChain(chainId) && provider) {\n      let cancelled = false;\n      (async () => {\n        while (!cancelled) {\n          await new Promise((resolve) => setTimeout(resolve, 500));\n          try {\n            const newBlock = await provider.getBlockNumber();\n            if (!cancelled) {\n              setCurrentBlock(newBlock);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n    if (chainId === CHAIN_ID_SOLANA) {\n      let cancelled = false;\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const sub = connection.onSlotChange((slotInfo) => {\n        if (!cancelled) {\n          setCurrentBlock(slotInfo.slot);\n        }\n      });\n      return () => {\n        cancelled = true;\n        connection.removeSlotChangeListener(sub);\n      };\n    }\n  }, [isSendComplete, chainId, provider, tx]);\n  const blockDiff =\n    tx && tx.block && currentBlock ? currentBlock - tx.block : undefined;\n  const expectedBlocks =\n    chainId === CHAIN_ID_SOLANA ? 32 : isEVMChain(chainId) ? 15 : 1;\n  if (\n    !isSendComplete &&\n    (chainId === CHAIN_ID_SOLANA || isEVMChain(chainId)) &&\n    blockDiff !== undefined\n  ) {\n    return (\n      <div className={classes.root}>\n        <LinearProgress\n          value={\n            blockDiff < expectedBlocks ? (blockDiff / expectedBlocks) * 75 : 75\n          }\n          variant=\"determinate\"\n        />\n        <Typography variant=\"body2\" className={classes.message}>\n          {blockDiff < expectedBlocks\n            ? `Waiting for ${blockDiff} / ${expectedBlocks} confirmations on ${CHAINS_BY_ID[chainId].name}...`\n            : `Waiting for Wormhole Network consensus...`}\n        </Typography>\n      </div>\n    );\n  }\n  return null;\n}\n","import { useSelector } from \"react-redux\";\nimport { useHandleAttest } from \"../../hooks/useHandleAttest\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectAttestAttestTx,\n  selectAttestIsSendComplete,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleAttest();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n\n  return (\n    <>\n      <KeyAndBalance chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Attest\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={attestTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceChain,\n  selectAttestAttestTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n\n  const explainerString = \"The token has been attested!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {attestTx ? <ShowTx chainId={sourceChain} tx={attestTx} /> : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Typography } from \"@material-ui/core\";\nimport { LocalGasStation } from \"@material-ui/icons\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  getDefaultNativeCurrencySymbol,\n  SOLANA_HOST,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\nimport { NATIVE_TERRA_DECIMALS } from \"../utils/terra\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport { LCDClient } from \"@terra-money/terra.js\";\n\nexport type GasEstimate = {\n  currentGasPrice: string;\n  lowEstimate: string;\n  highEstimate: string;\n};\n\nexport type MethodType = \"nft\" | \"createWrapped\" | \"transfer\";\n\n//It's difficult to project how many fees the user will accrue during the\n//workflow, as a variable number of transactions can be sent, and different\n//execution paths can be hit in the smart contracts, altering gas used.\n//As such, for the moment it is best to just check for a reasonable 'low balance' threshold.\n//Still it would be good to calculate a reasonable value at runtime based off current gas prices,\n//rather than a hardcoded value.\nconst SOLANA_THRESHOLD_LAMPORTS: bigint = BigInt(300000);\nconst ETHEREUM_THRESHOLD_WEI: bigint = BigInt(35000000000000000);\nconst TERRA_THRESHOLD_ULUNA: bigint = BigInt(500000);\n\nconst isSufficientBalance = (chainId: ChainId, balance: bigint | undefined) => {\n  if (balance === undefined || !chainId) {\n    return true;\n  }\n  if (CHAIN_ID_SOLANA === chainId) {\n    return balance > SOLANA_THRESHOLD_LAMPORTS;\n  }\n  if (isEVMChain(chainId)) {\n    return balance > ETHEREUM_THRESHOLD_WEI;\n  }\n  if (CHAIN_ID_TERRA === chainId) {\n    return balance > TERRA_THRESHOLD_ULUNA;\n  }\n\n  return true;\n};\n\n//TODO move to more generic location\nconst getBalanceSolana = async (walletAddress: string) => {\n  const connection = new Connection(SOLANA_HOST);\n  return getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]).then(\n    (results) => {\n      if (results.length && results[0]) {\n        return BigInt(results[0].lamports);\n      }\n    },\n    (error) => {\n      return BigInt(0);\n    }\n  );\n};\n\nconst getBalanceEvm = async (walletAddress: string, provider: Provider) => {\n  return provider.getBalance(walletAddress).then((result) => result.toBigInt());\n};\n\nconst getBalanceTerra = async (walletAddress: string) => {\n  const TARGET_DENOM = \"uluna\";\n\n  const lcd = new LCDClient(TERRA_HOST);\n  return lcd.bank\n    .balance(walletAddress)\n    .then((coins) => {\n      // coins doesn't support reduce\n      const balancePairs = coins.map(({ amount, denom }) => [denom, amount]);\n      const targetCoin = balancePairs.find((coin) => coin[0] === TARGET_DENOM);\n      if (targetCoin) {\n        return BigInt(targetCoin[1].toString());\n      } else {\n        return Promise.reject();\n      }\n    })\n    .catch((e) => {\n      return Promise.reject();\n    });\n};\n\nconst toBalanceString = (balance: bigint | undefined, chainId: ChainId) => {\n  if (!chainId || balance === undefined) {\n    return \"\";\n  }\n  if (isEVMChain(chainId)) {\n    return formatUnits(balance, 18); //wei decimals\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return formatUnits(balance, 9); //lamports to sol decmals\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return formatUnits(balance, NATIVE_TERRA_DECIMALS);\n  }\n};\n\nexport default function useTransactionFees(chainId: ChainId) {\n  const { walletAddress, isReady } = useIsWalletReady(chainId);\n  const { provider } = useEthereumProvider();\n  const [balance, setBalance] = useState<bigint | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loadStart = useCallback(() => {\n    setBalance(undefined);\n    setIsLoading(true);\n    setError(\"\");\n  }, []);\n\n  useEffect(() => {\n    if (chainId === CHAIN_ID_SOLANA && isReady && walletAddress) {\n      loadStart();\n      getBalanceSolana(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    } else if (isEVMChain(chainId) && isReady && walletAddress) {\n      if (provider) {\n        loadStart();\n        getBalanceEvm(walletAddress, provider).then(\n          (result) => {\n            const adjustedresult =\n              result === undefined || result === null ? BigInt(0) : result;\n            setIsLoading(false);\n            setBalance(adjustedresult);\n          },\n          (error) => {\n            setIsLoading(false);\n            setError(\"Cannot load wallet balance\");\n          }\n        );\n      }\n    } else if (chainId === CHAIN_ID_TERRA && isReady && walletAddress) {\n      loadStart();\n      getBalanceTerra(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    }\n  }, [provider, walletAddress, isReady, chainId, loadStart]);\n\n  const results = useMemo(() => {\n    return {\n      isSufficientBalance: isSufficientBalance(chainId, balance),\n      balance,\n      balanceString: toBalanceString(balance, chainId),\n      isLoading,\n      error,\n    };\n  }, [balance, chainId, isLoading, error]);\n\n  return results;\n}\n\nexport function useEthereumGasPrice(contract: MethodType, chainId: ChainId) {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [estimateResults, setEstimateResults] = useState<GasEstimate | null>(\n    null\n  );\n\n  useEffect(() => {\n    if (provider && isReady && !estimateResults) {\n      getGasEstimates(provider, contract).then(\n        (results) => {\n          setEstimateResults(results);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n    }\n  }, [provider, isReady, estimateResults, contract]);\n\n  const results = useMemo(() => estimateResults, [estimateResults]);\n  return results;\n}\n\nfunction EthGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  const estimate = useEthereumGasPrice(methodType, chainId);\n  if (!estimate) {\n    return null;\n  }\n\n  return (\n    <Typography\n      component=\"div\"\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        marginTop: 8,\n        flexWrap: \"wrap\",\n      }}\n    >\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <LocalGasStation fontSize=\"inherit\" />\n        &nbsp;{estimate.currentGasPrice}\n      </div>\n      <div>&nbsp;&nbsp;&nbsp;</div>\n      <div>\n        Est. Fees: {estimate.lowEstimate} - {estimate.highEstimate}{\" \"}\n        {getDefaultNativeCurrencySymbol(chainId)}\n      </div>\n    </Typography>\n  );\n}\n\nconst terraEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(50000),\n    highGasEstimate: BigInt(90000),\n  },\n};\n\nconst evmEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(80000),\n    highGasEstimate: BigInt(130000),\n  },\n  nft: {\n    lowGasEstimate: BigInt(350000),\n    highGasEstimate: BigInt(500000),\n  },\n  createWrapped: {\n    lowGasEstimate: BigInt(450000),\n    highGasEstimate: BigInt(700000),\n  },\n};\n\nexport async function getGasEstimates(\n  provider: Provider,\n  contract: MethodType\n): Promise<GasEstimate | null> {\n  const lowEstimateGasAmount = evmEstimatesByContract[contract].lowGasEstimate;\n  const highEstimateGasAmount =\n    evmEstimatesByContract[contract].highGasEstimate;\n\n  let lowEstimate;\n  let highEstimate;\n  let currentGasPrice;\n  if (provider) {\n    const priceInWei = await provider.getGasPrice();\n    if (priceInWei) {\n      lowEstimate = parseFloat(\n        formatUnits(lowEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      highEstimate = parseFloat(\n        formatUnits(highEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      currentGasPrice = parseFloat(formatUnits(priceInWei, \"gwei\")).toFixed(0);\n    }\n  }\n\n  const output =\n    currentGasPrice && highEstimate && lowEstimate\n      ? {\n          currentGasPrice,\n          lowEstimate,\n          highEstimate,\n        }\n      : null;\n\n  return output;\n}\n\nfunction TerraGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (methodType === \"transfer\") {\n    const lowEstimate = formatUnits(\n      terraEstimatesByContract.transfer.lowGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    const highEstimate = formatUnits(\n      terraEstimatesByContract.transfer.highGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    return (\n      <Typography\n        component=\"div\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          marginTop: 8,\n          flexWrap: \"wrap\",\n        }}\n      >\n        <div>\n          Est. Fees: {lowEstimate} - {highEstimate}{\" \"}\n          {getDefaultNativeCurrencySymbol(chainId)}\n        </div>\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function GasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (isEVMChain(chainId)) {\n    return <EthGasEstimateSummary chainId={chainId} methodType={methodType} />;\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <TerraGasEstimateSummary chainId={chainId} methodType={methodType} />\n    );\n  } else {\n    return null;\n  }\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useTransactionFees from \"../hooks/useTransactionFees\";\nimport { getDefaultNativeCurrencySymbol } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction LowBalanceWarning({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { isReady } = useIsWalletReady(chainId);\n  const transactionFeeWarning = useTransactionFees(chainId);\n  const displayWarning =\n    isReady &&\n    transactionFeeWarning.balanceString &&\n    transactionFeeWarning.isSufficientBalance === false;\n  const warningMessage = `This wallet has a very low ${getDefaultNativeCurrencySymbol(\n    chainId\n  )} balance and may not be able to pay for the upcoming transaction fees.`;\n\n  const content = (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">{warningMessage}</Typography>\n      <Typography variant=\"body1\">\n        {\"Current balance: \" + transactionFeeWarning.balanceString}\n      </Typography>\n    </Alert>\n  );\n\n  return displayWarning ? content : null;\n}\n\nexport default LowBalanceWarning;\n","import { makeStyles, TextField } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  incrementStep,\n  setSourceAsset,\n  setSourceChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestIsSourceComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isSourceComplete = useSelector(selectAttestIsSourceComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAssetChange = useCallback(\n    (event) => {\n      dispatch(setSourceAsset(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS}\n      />\n      <KeyAndBalance chainId={sourceChain} />\n      <TextField\n        label=\"Asset\"\n        variant=\"outlined\"\n        fullWidth\n        className={classes.transferField}\n        value={sourceAsset}\n        onChange={handleAssetChange}\n        disabled={shouldLockFields}\n      />\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { Alert } from \"@material-ui/lab\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback } from \"react\";\nimport pushToClipboard from \"../utils/pushToClipboard\";\n\nexport default function useCopyToClipboard(content: string) {\n  const { enqueueSnackbar } = useSnackbar();\n  return useCallback(() => {\n    pushToClipboard(content)?.then(() => {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"success\">Copied.</Alert>,\n      });\n    });\n  }, [content, enqueueSnackbar]);\n}\n","export default function pushToClipboard(content: any) {\n  if (!navigator.clipboard) {\n    // Clipboard API not available\n    return;\n  }\n  return navigator.clipboard.writeText(content);\n}\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isNativeDenom,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Tooltip, Typography } from \"@material-ui/core\";\nimport { FileCopy, OpenInNew } from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport useCopyToClipboard from \"../hooks/useCopyToClipboard\";\nimport { ParsedTokenAccount } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\nimport { shortenAddress } from \"../utils/solana\";\nimport { formatNativeDenom } from \"../utils/terra\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainTypog: {\n    display: \"inline-block\",\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    textDecoration: \"underline\",\n    textUnderlineOffset: \"2px\",\n  },\n  noGutter: {\n    marginLeft: 0,\n    marginRight: 0,\n  },\n  noUnderline: {\n    textDecoration: \"none\",\n  },\n  buttons: {\n    marginLeft: \".5rem\",\n    marginRight: \".5rem\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    textAlign: \"center\",\n    \"& > *\": {\n      margin: \".25rem\",\n    },\n  },\n};\n\n// @ts-ignore\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nexport default function SmartAddress({\n  chainId,\n  parsedTokenAccount,\n  address,\n  symbol,\n  tokenName,\n  variant,\n  noGutter,\n  noUnderline,\n  extraContent,\n}: {\n  chainId: ChainId;\n  parsedTokenAccount?: ParsedTokenAccount;\n  address?: string;\n  logo?: string;\n  tokenName?: string;\n  symbol?: string;\n  variant?: any;\n  noGutter?: boolean;\n  noUnderline?: boolean;\n  extraContent?: ReactChild;\n}) {\n  const classes = useStyles();\n  const isNativeTerra = chainId === CHAIN_ID_TERRA && isNativeDenom(address);\n  const useableAddress = parsedTokenAccount?.mintKey || address || \"\";\n  const useableSymbol = isNativeTerra\n    ? formatNativeDenom(address)\n    : parsedTokenAccount?.symbol || symbol || \"\";\n  // const useableLogo = logo || isNativeTerra ? getNativeTerraIcon(useableSymbol) : null\n  const isNative = parsedTokenAccount?.isNativeAsset || isNativeTerra || false;\n  const addressShort = shortenAddress(useableAddress) || \"\";\n\n  const useableName = isNative\n    ? \"Native Currency\"\n    : parsedTokenAccount?.name\n    ? parsedTokenAccount.name\n    : tokenName\n    ? tokenName\n    : \"\";\n  const explorerAddress = isNative\n    ? null\n    : chainId === CHAIN_ID_ETH\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"goerli.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_BSC\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }bscscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_POLYGON\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"\n      }polygonscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_AVAX\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }snowtrace.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_SOLANA\n    ? `https://explorer.solana.com/address/${useableAddress}${\n        CLUSTER === \"testnet\"\n          ? \"?cluster=devnet\"\n          : CLUSTER === \"devnet\"\n          ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n          : \"\"\n      }`\n    : chainId === CHAIN_ID_TERRA\n    ? `https://finder.terra.money/${\n        CLUSTER === \"devnet\"\n          ? \"localterra\"\n          : CLUSTER === \"testnet\"\n          ? \"bombay-12\"\n          : \"columbus-5\"\n      }/address/${useableAddress}`\n    : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  const copyToClipboard = useCopyToClipboard(useableAddress);\n\n  const explorerButton = !explorerAddress ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      endIcon={<OpenInNew />}\n      className={classes.buttons}\n      href={explorerAddress}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {\"View on \" + explorerName}\n    </Button>\n  );\n  //TODO add icon here\n  const copyButton = isNative ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      endIcon={<FileCopy />}\n      onClick={copyToClipboard}\n      className={classes.buttons}\n    >\n      Copy\n    </Button>\n  );\n\n  const tooltipContent = (\n    <>\n      {useableName && <Typography>{useableName}</Typography>}\n      {useableSymbol && !isNative && (\n        <Typography noWrap variant=\"body2\">\n          {addressShort}\n        </Typography>\n      )}\n      <div>\n        {explorerButton}\n        {copyButton}\n      </div>\n      {extraContent ? extraContent : null}\n    </>\n  );\n\n  return (\n    <StyledTooltip\n      title={tooltipContent}\n      interactive={true}\n      className={classes.mainTypog}\n    >\n      <Typography\n        variant={variant || \"body1\"}\n        className={clsx(classes.mainTypog, {\n          [classes.noGutter]: noGutter,\n          [classes.noUnderline]: noUnderline,\n        })}\n        component=\"div\"\n      >\n        {useableSymbol || addressShort}\n      </Typography>\n    </StyledTooltip>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n\n  const explainerContent =\n    sourceChain && sourceAsset ? (\n      <>\n        <span>You will attest</span>\n        <SmartAddress chainId={sourceChain} address={sourceAsset} />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/attestSlice\";\nimport {\n  selectAttestIsTargetComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={shouldLockFields}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to attest this token.{\" \"}\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary\n            methodType=\"createWrapped\"\n            chainId={targetChain}\n          />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestTargetChain } from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n\n  const explainerString = `to ${CHAINS_BY_ID[targetChain].name}`;\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerString}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setStep } from \"../../store/attestSlice\";\nimport {\n  selectAttestActiveStep,\n  selectAttestIsCreateComplete,\n  selectAttestIsCreating,\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n} from \"../../store/selectors\";\nimport HeaderText from \"../HeaderText\";\nimport Create from \"./Create\";\nimport CreatePreview from \"./CreatePreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Attest() {\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectAttestActiveStep);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const isCreateComplete = useSelector(selectAttestIsCreateComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isCreating) && !isCreateComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white small>\n        Token Registration\n      </HeaderText>\n      <Alert severity=\"info\">\n        This form allows you to register a token on a new foreign chain. Tokens\n        must be registered before they can be transferred.\n      </Alert>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))}>Target</StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton onClick={() => dispatch(setStep(2))}>\n            Send attestation\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n          >\n            Create wrapped token\n          </StepButton>\n          <StepContent>\n            {isCreateComplete ? <CreatePreview /> : <Create />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Attest;\n","export default __webpack_public_path__ + \"static/media/Discord.3cc30da6.svg\";","export default __webpack_public_path__ + \"static/media/Github.cf553f61.svg\";","export default __webpack_public_path__ + \"static/media/Medium.a9e68aca.svg\";","export default __webpack_public_path__ + \"static/media/Telegram.86d97a48.svg\";","export default __webpack_public_path__ + \"static/media/Twitter.06e4f08c.svg\";","export default __webpack_public_path__ + \"static/media/wormhole-network.5bb90ed1.svg\";","import { IconButton, makeStyles, Typography } from \"@material-ui/core\";\nimport Discord from \"../icons/Discord.svg\";\nimport Github from \"../icons/Github.svg\";\nimport Medium from \"../icons/Medium.svg\";\nimport Telegram from \"../icons/Telegram.svg\";\nimport Twitter from \"../icons/Twitter.svg\";\nimport Wormhole from \"../icons/wormhole-network.svg\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    margin: theme.spacing(2, 0, 2),\n    textAlign: \"center\",\n  },\n  socialIcon: {\n    \"& img\": {\n      height: 24,\n      width: 24,\n    },\n  },\n  builtWithContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    opacity: 0.5,\n    marginTop: theme.spacing(1),\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <div>\n        <IconButton\n          href=\"https://discord.gg/xsT8qrHAvV\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Discord} alt=\"Discord\" />\n        </IconButton>\n        <IconButton\n          href=\"https://github.com/certusone/wormhole\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Github} alt=\"Github\" />\n        </IconButton>\n        <IconButton\n          href=\"http://wormholecrypto.medium.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Medium} alt=\"Medium\" />\n        </IconButton>\n        <IconButton\n          href=\"https://t.me/wormholecrypto\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Telegram} alt=\"Telegram\" />\n        </IconButton>\n        <IconButton\n          href=\"https://twitter.com/wormholecrypto\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Twitter} alt=\"Twitter\" />\n        </IconButton>\n      </div>\n      <div className={classes.builtWithContainer}>\n        <div>\n          <a\n            href=\"https://wormholenetwork.com/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={Wormhole}\n              alt=\"Wormhole\"\n              className={classes.wormholeIcon}\n            />\n          </a>\n        </div>\n        <div>\n          <Typography variant=\"body2\">Open Source</Typography>\n          <Typography variant=\"body2\">Built with &#10084;</Typography>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import {\n  Card,\n  Chip,\n  Container,\n  Link,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { COLORS } from \"../../muiTheme\";\nimport { BETA_CHAINS, CHAINS, COMING_SOON_CHAINS } from \"../../utils/consts\";\nimport HeaderText from \"../HeaderText\";\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    marginTop: theme.spacing(12),\n    marginBottom: theme.spacing(8),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginBottom: theme.spacing(6),\n    },\n  },\n  description: {\n    marginBottom: theme.spacing(2),\n  },\n  button: {\n    marginBottom: theme.spacing(4),\n  },\n  overview: {\n    marginTop: theme.spacing(6),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(2),\n    },\n    maxWidth: \"100%\",\n  },\n  mainCard: {\n    padding: theme.spacing(8),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  spacer: {\n    height: theme.spacing(5),\n  },\n  chainList: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    margin: theme.spacing(-1, -1, 8),\n    [theme.breakpoints.down(\"sm\")]: {\n      margin: theme.spacing(-1, -1, 6),\n    },\n  },\n  chainCard: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    borderRadius: 8,\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: theme.spacing(1),\n    minHeight: \"100%\",\n    padding: theme.spacing(2),\n    width: 149, // makes it square\n    maxWidth: 149,\n    [theme.breakpoints.down(\"sm\")]: {\n      padding: theme.spacing(1.5),\n      width: 141, // keeps it square\n      maxWidth: 141,\n    },\n  },\n  chainLogoWrapper: {\n    position: \"relative\",\n    textAlign: \"center\",\n  },\n  chainLogo: {\n    height: 64,\n    maxWidth: 64,\n  },\n  chainName: {\n    marginTop: theme.spacing(1),\n    flex: \"1\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    minHeight: 40, // 2 lines\n  },\n  chip: {\n    backgroundColor: COLORS.blueWithTransparency,\n    position: \"absolute\",\n    top: \"50%\",\n    right: \"50%\",\n    transform: \"translate(50%, -50%)\",\n  },\n}));\n\nfunction Home() {\n  const classes = useStyles();\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <div className={classes.header}>\n          <HeaderText>The Portal is Open</HeaderText>\n        </div>\n      </Container>\n      <Container maxWidth=\"md\">\n        <div className={classes.chainList}>\n          {CHAINS.filter(({ id }) => !BETA_CHAINS.includes(id)).map((chain) => (\n            <div key={chain.id} className={classes.chainCard}>\n              <div className={classes.chainLogoWrapper}>\n                <img\n                  src={chain.logo}\n                  alt={chain.name}\n                  className={classes.chainLogo}\n                />\n              </div>\n              <Typography\n                variant=\"body2\"\n                component=\"div\"\n                className={classes.chainName}\n              >\n                <div>{chain.name}</div>\n              </Typography>\n            </div>\n          ))}\n          {COMING_SOON_CHAINS.map((item) => (\n            <div className={classes.chainCard}>\n              <div className={classes.chainLogoWrapper}>\n                <img\n                  src={item.logo}\n                  alt={item.name}\n                  className={classes.chainLogo}\n                />\n                <Chip\n                  label=\"Coming soon\"\n                  size=\"small\"\n                  className={classes.chip}\n                />\n              </div>\n              <Typography\n                variant=\"body2\"\n                component=\"div\"\n                className={classes.chainName}\n              >\n                <div>{item.name}</div>\n              </Typography>\n            </div>\n          ))}\n        </div>\n      </Container>\n      <Container maxWidth=\"md\">\n        <Card className={classes.mainCard}>\n          <Typography variant=\"h4\" className={classes.description}>\n            Wormhole v2 is here!\n          </Typography>\n          <Typography variant=\"h6\" className={classes.description}>\n            The Wormhole Token Bridge allows you to seamlessly transfer\n            tokenized assets across Solana, Ethereum, BSC, Terra, and Polygon.\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            If you transferred assets using the previous version of Wormhole,\n            most assets can be migrated to v2 on the{\" \"}\n            <Link component={RouterLink} to=\"/transfer\" noWrap>\n              transfer page\n            </Link>\n            .\n          </Typography>\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            For assets that don't support the migration, the v1 UI can be found\n            at{\" \"}\n            <Link href=\"https://v1.wormholebridge.com\">\n              v1.wormholebridge.com\n            </Link>\n          </Typography>\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            To learn more about the Wormhole Protocol that powers it, visit{\" \"}\n            <Link href=\"https://wormholenetwork.com/en/\">\n              wormholenetwork.com\n            </Link>\n          </Typography>\n        </Card>\n      </Container>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Connection } from \"@solana/web3.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { SOLANA_HOST } from \"../utils/consts\";\nimport {\n  decodeMetadata,\n  getMetadataAddress,\n  Metadata,\n} from \"../utils/metaplex\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\n\nexport const getMetaplexData = async (mintAddresses: string[]) => {\n  const promises = [];\n  for (const address of mintAddresses) {\n    promises.push(getMetadataAddress(address));\n  }\n  const metaAddresses = await Promise.all(promises);\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  const results = await getMultipleAccountsRPC(\n    connection,\n    metaAddresses.map((pair) => pair && pair[0])\n  );\n\n  const output = results.map((account) => {\n    if (account === null) {\n      return undefined;\n    } else {\n      if (account.data) {\n        try {\n          const MetadataParsed = decodeMetadata(account.data);\n          return MetadataParsed;\n        } catch (e) {\n          console.error(e);\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  });\n\n  return output;\n};\n\nconst createResultMap = (\n  addresses: string[],\n  metadatas: (Metadata | undefined)[]\n) => {\n  const output = new Map<string, Metadata | undefined>();\n\n  addresses.forEach((address) => {\n    const metadata = metadatas.find((x) => x?.mint === address);\n    if (metadata) {\n      output.set(address, metadata);\n    } else {\n      output.set(address, undefined);\n    }\n  });\n\n  return output;\n};\n\nconst useMetaplexData = (\n  addresses: string[]\n): DataWrapper<Map<string, Metadata | undefined> | undefined> => {\n  const [results, setResults] = useState<\n    Map<string, Metadata | undefined> | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [receivedAt, setReceivedAt] = useState<string | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    setIsLoading(true);\n    getMetaplexData(addresses).then(\n      (results) => {\n        if (!cancelled) {\n          setResults(createResultMap(addresses, results));\n          setIsLoading(false);\n          setError(\"\");\n          setReceivedAt(new Date().toISOString());\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setResults(undefined);\n          setIsLoading(false);\n          setError(\"Failed to fetch Metaplex data.\");\n          setReceivedAt(new Date().toISOString());\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, setResults, setIsLoading, setError]);\n\n  const output = useMemo(\n    () => ({\n      data: results,\n      isFetching: isLoading,\n      error,\n      receivedAt,\n    }),\n    [results, isLoading, error, receivedAt]\n  );\n  return output;\n};\n\nexport default useMetaplexData;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { TerraTokenMap } from \"../hooks/useTerraTokenMap\";\nimport { MarketsMap } from \"../hooks/useMarketsMap\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nexport interface TokenMetadataState {\n  solanaTokenMap: DataWrapper<TokenInfo[]>;\n  terraTokenMap: DataWrapper<TerraTokenMap>; //TODO make a decent type for this.\n  marketsMap: DataWrapper<MarketsMap>;\n}\n\nconst initialState: TokenMetadataState = {\n  solanaTokenMap: getEmptyDataWrapper(),\n  terraTokenMap: getEmptyDataWrapper(),\n  marketsMap: getEmptyDataWrapper(),\n};\n\nexport const tokenSlice = createSlice({\n  name: \"tokenInfos\",\n  initialState,\n  reducers: {\n    receiveSolanaTokenMap: (state, action: PayloadAction<TokenInfo[]>) => {\n      state.solanaTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchSolanaTokenMap: (state) => {\n      state.solanaTokenMap = fetchDataWrapper();\n    },\n    errorSolanaTokenMap: (state, action: PayloadAction<string>) => {\n      state.solanaTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveTerraTokenMap: (state, action: PayloadAction<TerraTokenMap>) => {\n      state.terraTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchTerraTokenMap: (state) => {\n      state.terraTokenMap = fetchDataWrapper();\n    },\n    errorTerraTokenMap: (state, action: PayloadAction<string>) => {\n      state.terraTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveMarketsMap: (state, action: PayloadAction<MarketsMap>) => {\n      state.marketsMap = receiveDataWrapper(action.payload);\n    },\n    fetchMarketsMap: (state) => {\n      state.marketsMap = fetchDataWrapper();\n    },\n    errorMarketsMap: (state, action: PayloadAction<string>) => {\n      state.marketsMap = errorDataWrapper(action.payload);\n    },\n\n    reset: () => initialState,\n  },\n});\n\nexport const {\n  receiveSolanaTokenMap,\n  fetchSolanaTokenMap,\n  errorSolanaTokenMap,\n  receiveTerraTokenMap,\n  fetchTerraTokenMap,\n  errorTerraTokenMap,\n  receiveMarketsMap,\n  fetchMarketsMap,\n  errorMarketsMap,\n  reset,\n} = tokenSlice.actions;\n\nexport default tokenSlice.reducer;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport { ENV, TokenInfo, TokenListProvider } from \"@solana/spl-token-registry\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectSolanaTokenMap } from \"../store/selectors\";\nimport {\n  errorSolanaTokenMap,\n  fetchSolanaTokenMap,\n  receiveSolanaTokenMap,\n} from \"../store/tokenSlice\";\nimport { CLUSTER } from \"../utils/consts\";\n\nconst environment = CLUSTER === \"testnet\" ? ENV.Testnet : ENV.MainnetBeta;\n\nconst useSolanaTokenMap = (): DataWrapper<TokenInfo[]> => {\n  const tokenMap = useSelector(selectSolanaTokenMap);\n  const dispatch = useDispatch();\n  const shouldFire =\n    tokenMap.data === undefined ||\n    (tokenMap.data === null && !tokenMap.isFetching);\n\n  useEffect(() => {\n    if (shouldFire) {\n      getSolanaTokenMap(dispatch);\n    }\n  }, [dispatch, shouldFire]);\n\n  return tokenMap;\n};\n\nconst getSolanaTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchSolanaTokenMap());\n\n  new TokenListProvider().resolve().then(\n    (tokens) => {\n      const tokenList = tokens.filterByChainId(environment).getList();\n      dispatch(receiveSolanaTokenMap(tokenList));\n    },\n    (error) => {\n      console.error(error);\n      dispatch(errorSolanaTokenMap(\"Failed to retrieve the Solana token map.\"));\n    }\n  );\n};\n\nexport default useSolanaTokenMap;\n","import {\n  Button,\n  InputAdornment,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\n\nexport default function NumberTextField({\n  onMaxClick,\n  ...props\n}: TextFieldProps & { onMaxClick?: () => void }) {\n  return (\n    <TextField\n      type=\"number\"\n      {...props}\n      InputProps={{\n        endAdornment: onMaxClick ? (\n          <InputAdornment position=\"end\">\n            <Button\n              onClick={onMaxClick}\n              disabled={props.disabled}\n              variant=\"outlined\"\n            >\n              Max\n            </Button>\n          </InputAdornment>\n        ) : undefined,\n        ...(props?.InputProps || {}),\n      }}\n    ></TextField>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getForeignAssetSolana,\n  hexToNativeString,\n  hexToUint8Array,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetAddressHex,\n} from \"../store/selectors\";\nimport { SOLANA_HOST, SOL_TOKEN_BRIDGE_ADDRESS } from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport SmartAddress from \"./SmartAddress\";\n\nexport function useAssociatedAccountExistsState(\n  targetChain: ChainId,\n  mintAddress: string | null | undefined,\n  readableTargetAddress: string | undefined\n) {\n  const [associatedAccountExists, setAssociatedAccountExists] = useState(true); // for now, assume it exists until we confirm it doesn't\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  useEffect(() => {\n    setAssociatedAccountExists(true);\n    if (\n      targetChain !== CHAIN_ID_SOLANA ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    let cancelled = false;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          if (!cancelled) {\n            setAssociatedAccountExists(false);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [targetChain, mintAddress, readableTargetAddress, solPK]);\n  return useMemo(\n    () => ({ associatedAccountExists, setAssociatedAccountExists }),\n    [associatedAccountExists]\n  );\n}\n\nexport default function SolanaCreateAssociatedAddress({\n  mintAddress,\n  readableTargetAddress,\n  associatedAccountExists,\n  setAssociatedAccountExists,\n}: {\n  mintAddress: string;\n  readableTargetAddress: string;\n  associatedAccountExists: boolean;\n  setAssociatedAccountExists: (associatedAccountExists: boolean) => void;\n}) {\n  const [isCreating, setIsCreating] = useState(false);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleClick = useCallback(() => {\n    if (\n      associatedAccountExists ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          setIsCreating(true);\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setIsCreating(false);\n          setAssociatedAccountExists(true);\n        } else {\n          console.log(\"Account already exists.\");\n        }\n      }\n    })();\n  }, [\n    associatedAccountExists,\n    setAssociatedAccountExists,\n    mintAddress,\n    solPK,\n    readableTargetAddress,\n    solanaWallet,\n  ]);\n  if (associatedAccountExists) return null;\n  return (\n    <>\n      <Typography color=\"error\" variant=\"body2\">\n        This associated token account doesn't exist.\n      </Typography>\n      <ButtonWithLoader\n        disabled={\n          !mintAddress || !readableTargetAddress || !solPK || isCreating\n        }\n        onClick={handleClick}\n        showLoader={isCreating}\n      >\n        Create Associated Token Account\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport function SolanaCreateAssociatedAddressAlternate() {\n  const { enqueueSnackbar } = useSnackbar();\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const addressHex = useSelector(selectTransferTargetAddressHex);\n  const base58TargetAddress = useMemo(\n    () => hexToNativeString(addressHex, CHAIN_ID_SOLANA) || \"\",\n    [addressHex]\n  );\n  const base58OriginAddress = useMemo(\n    () => hexToNativeString(originAsset, CHAIN_ID_SOLANA) || \"\",\n    [originAsset]\n  );\n  const connection = useMemo(() => new Connection(SOLANA_HOST), []);\n  const [targetAsset, setTargetAsset] = useState<string | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (!(originChain && originAsset && addressHex && base58TargetAddress)) {\n      setTargetAsset(null);\n    } else if (originChain === CHAIN_ID_SOLANA && base58OriginAddress) {\n      setTargetAsset(base58OriginAddress);\n    } else {\n      getForeignAssetSolana(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAsset)\n      ).then((result) => {\n        if (!cancelled) {\n          setTargetAsset(result);\n        }\n      });\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    originChain,\n    originAsset,\n    addressHex,\n    base58TargetAddress,\n    connection,\n    base58OriginAddress,\n  ]);\n\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      CHAIN_ID_SOLANA,\n      targetAsset,\n      base58TargetAddress\n    );\n\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleForceCreateClick = useCallback(() => {\n    if (!targetAsset || !base58TargetAddress || !solPK) return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(targetAsset);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === base58TargetAddress;\n      if (match) {\n        try {\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setAssociatedAccountExists(true);\n          enqueueSnackbar(null, {\n            content: (\n              <Alert severity=\"success\">\n                Successfully created associated token account\n              </Alert>\n            ),\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n          });\n        }\n      } else {\n        enqueueSnackbar(null, {\n          content: (\n            <Alert severity=\"error\">\n              Derived address does not match the target address. Do you have the\n              same wallet connected?\n            </Alert>\n          ),\n        });\n      }\n    })();\n  }, [\n    setAssociatedAccountExists,\n    targetAsset,\n    solPK,\n    base58TargetAddress,\n    solanaWallet,\n    enqueueSnackbar,\n  ]);\n\n  return targetAsset ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"subtitle2\">Recipient Address:</Typography>\n      <Typography component=\"div\">\n        <SmartAddress\n          chainId={CHAIN_ID_SOLANA}\n          address={base58TargetAddress}\n          variant=\"h6\"\n          extraContent={\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={handleForceCreateClick}\n              disabled={!targetAsset || !base58TargetAddress || !solPK}\n            >\n              Force Create Account\n            </Button>\n          }\n        />\n      </Typography>\n      {associatedAccountExists ? null : (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={base58TargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      )}\n    </div>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSolanaWallet } from \"../../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { COLORS } from \"../../muiTheme\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../../utils/solana\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\n//TODO move to utils/solana\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\n//TODO move to utils/solana\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\nexport default function Workflow({\n  fromMint,\n  toMint,\n  fromTokenAccount,\n}: {\n  fromMint: string;\n  toMint: string;\n  fromTokenAccount: string;\n}) {\n  const classes = useStyles();\n\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet?.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet?.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet?.publicKey]);\n  /*\n    End effects\n    */\n\n  const migrateTokens = useCallback(async () => {\n    try {\n      setError(\"\");\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet?.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(migrationAmount, fromMintDecimals).toBigInt()\n      );\n      setMigrationIsProcessing(true);\n      signSendAndConfirm(wallet, connection, instruction).then(\n        (transaction: any) => {\n          setMigrationIsProcessing(false);\n          setTransaction(transaction);\n        },\n        (error) => {\n          console.log(error);\n          setError(\"Could not complete the migrateTokens transaction.\");\n          setMigrationIsProcessing(false);\n        }\n      );\n    } catch (e) {\n      console.log(e);\n      setError(\"Could not complete the migrateTokens transaction.\");\n      setMigrationIsProcessing(false);\n    }\n  }, [\n    connection,\n    fromMint,\n    fromTokenAccount,\n    migrationAmount,\n    toMint,\n    toTokenAccount,\n    wallet,\n    fromMintDecimals,\n  ]);\n\n  const fromParse = (amount: string) => {\n    try {\n      return parseUnits(amount, fromMintDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n  const accountsReady =\n    fromTokenAccountExists && toTokenAccountExists && poolExists;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromTokenAccountBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromTokenAccountBalance);\n  const sufficientPoolBalance =\n    toCustodyBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(toCustodyBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    accountsReady &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!fromMint || !toMint || !poolAddress || !poolExists) {\n      return \"This asset is not supported.\";\n    } else if (!isReady) {\n      return \"Wallet is not connected.\";\n    } else if (!toTokenAccountExists || !fromTokenAccountExists) {\n      return \"You have not created the necessary token accounts.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"Enter an amount greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromTokenAccountBalance) {\n      setMigrationAmount(fromTokenAccountBalance);\n    }\n  }, [fromTokenAccountBalance]);\n\n  const getMetadata = (address: string) => {\n    const tokenMapItem = solanaTokenMap.data?.find(\n      (x) => x.address === address\n    );\n    const metaplexItem = metaplexData.data?.get(address);\n\n    return {\n      symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n      name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n      logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n    };\n  };\n\n  const toMetadata = getMetadata(toMint);\n  const fromMetadata = getMetadata(fromMint);\n\n  const toMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={toMint}\n      symbol={toMetadata?.symbol}\n      tokenName={toMetadata?.name}\n    />\n  );\n  const fromMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={fromMint}\n      symbol={fromMetadata?.symbol}\n      tokenName={fromMetadata?.name}\n    />\n  );\n\n  return (\n    <div>\n      <SolanaWalletKey />\n      <div className={classes.spacer} />\n      {fromTokenAccount && toTokenAccount ? (\n        <>\n          <Typography variant=\"body2\" component=\"div\">\n            <span>This will migrate</span>\n            {fromMintPretty}\n            <span>tokens in this account:</span>\n          </Typography>\n          <Typography variant=\"h5\">\n            <SmartAddress\n              address={fromTokenAccount}\n              chainId={CHAIN_ID_SOLANA}\n            />\n            {`(Balance: ${fromTokenAccountBalance}${\n              fromMetadata.symbol && \" \" + fromMetadata.symbol\n            })`}\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"body2\" component=\"div\">\n            <span>into </span>\n            {toMintPretty}\n            <span> tokens in this account:</span>\n          </Typography>\n          <Typography\n            variant=\"h5\"\n            color={toTokenAccountExists ? \"textPrimary\" : \"textSecondary\"}\n          >\n            <SmartAddress address={toTokenAccount} chainId={CHAIN_ID_SOLANA} />\n            <span>\n              {toTokenAccountExists\n                ? ` (Balance: ${toTokenAccountBalance}${\n                    (toMetadata.symbol && \" \" + toMetadata.symbol) || \"\"\n                  })`\n                : \" (Not created yet)\"}\n            </span>\n          </Typography>\n          <SolanaCreateAssociatedAddress\n            mintAddress={toMint}\n            readableTargetAddress={toTokenAccount}\n            associatedAccountExists={toTokenAccountExists}\n            setAssociatedAccountExists={setToTokenAccountExists}\n          />\n          {poolAddress && toCustodyAddress && toCustodyBalance ? (\n            <>\n              <div className={classes.spacer} />\n              <Typography variant=\"body2\" component=\"div\">\n                <span>Using pool </span>\n                <SmartAddress address={poolAddress} chainId={CHAIN_ID_SOLANA} />\n                <span> holding tokens in this account:</span>\n              </Typography>\n              <Typography variant=\"h5\">\n                <SmartAddress\n                  address={toCustodyAddress}\n                  chainId={CHAIN_ID_SOLANA}\n                />\n                <span>{` (Balance: ${toCustodyBalance}${\n                  toMetadata.symbol && \" \" + toMetadata.symbol\n                })`}</span>\n              </Typography>\n            </>\n          ) : null}\n        </>\n      ) : null}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromTokenAccountBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx\n            tx={{ id: transaction, block: 1 }}\n            chainId={CHAIN_ID_SOLANA}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n","import {\n  Migrator,\n  Migrator__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport type EthMigrationInfo = {\n  isLoading: boolean;\n  error: string;\n  data: RequisiteData | null;\n};\n\nexport type RequisiteData = {\n  poolAddress: string;\n  fromAddress: string;\n  toAddress: string;\n  fromToken: TokenImplementation;\n  toToken: TokenImplementation;\n  migrator: Migrator;\n  fromSymbol: string;\n  toSymbol: string;\n  fromDecimals: number;\n  toDecimals: number;\n  sharesDecimals: number;\n  fromWalletBalance: string;\n  toWalletBalance: string;\n  fromPoolBalance: string;\n  toPoolBalance: string;\n  walletSharesBalance: string;\n};\n\nconst getRequisiteData = async (\n  migrator: Migrator,\n  signer: Signer,\n  signerAddress: string\n): Promise<RequisiteData> => {\n  try {\n    const poolAddress = migrator.address;\n    const fromAddress = await migrator.fromAsset();\n    const toAddress = await migrator.toAsset();\n\n    const fromToken = TokenImplementation__factory.connect(fromAddress, signer);\n    const toToken = TokenImplementation__factory.connect(toAddress, signer);\n\n    const fromSymbol = await fromToken.symbol();\n    const toSymbol = await toToken.symbol();\n\n    const fromDecimals = await (await migrator.fromDecimals()).toNumber();\n    const toDecimals = await (await migrator.toDecimals()).toNumber();\n    const sharesDecimals = await migrator.decimals();\n\n    const fromWalletBalance = formatUnits(\n      await fromToken.balanceOf(signerAddress),\n      fromDecimals\n    );\n    const toWalletBalance = formatUnits(\n      await toToken.balanceOf(signerAddress),\n      toDecimals\n    );\n\n    const fromPoolBalance = formatUnits(\n      await fromToken.balanceOf(poolAddress),\n      fromDecimals\n    );\n    const toPoolBalance = formatUnits(\n      await toToken.balanceOf(poolAddress),\n      toDecimals\n    );\n\n    const walletSharesBalance = formatUnits(\n      await migrator.balanceOf(signerAddress),\n      sharesDecimals\n    );\n\n    return {\n      poolAddress,\n      fromAddress,\n      toAddress,\n      fromToken,\n      toToken,\n      migrator,\n      fromSymbol,\n      toSymbol,\n      fromDecimals,\n      toDecimals,\n      fromWalletBalance,\n      toWalletBalance,\n      fromPoolBalance,\n      toPoolBalance,\n      walletSharesBalance,\n      sharesDecimals,\n    };\n  } catch (e) {\n    return Promise.reject(\"Failed to retrieve required data.\");\n  }\n};\n\nfunction useEthereumMigratorInformation(\n  migratorAddress: string | undefined,\n  signer: Signer | undefined,\n  signerAddress: string | undefined,\n  toggleRefresh: boolean\n): EthMigrationInfo {\n  const migrator = useMemo(\n    () =>\n      migratorAddress &&\n      signer &&\n      Migrator__factory.connect(migratorAddress, signer),\n    [migratorAddress, signer]\n  );\n  const [data, setData] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!signer || !migrator || !signerAddress) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n    getRequisiteData(migrator, signer, signerAddress).then(\n      (result) => {\n        if (!cancelled) {\n          setData(result);\n          setIsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Failed to retrieve necessary data.\");\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [migrator, signer, signerAddress, toggleRefresh]);\n\n  return useMemo(() => {\n    if (!migratorAddress || !signer || !signerAddress) {\n      return {\n        isLoading: false,\n        error:\n          !signer || !signerAddress\n            ? \"Wallet not connected\"\n            : !migratorAddress\n            ? \"No contract address\"\n            : \"Error\",\n        data: null,\n      };\n    } else {\n      return {\n        isLoading,\n        error,\n        data,\n      };\n    }\n  }, [isLoading, error, data, migratorAddress, signer, signerAddress]);\n}\n\nexport default useEthereumMigratorInformation;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function EvmWorkflow({\n  chainId,\n  migratorAddress,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [toggleRefresh, setToggleRefresh] = useState(false);\n  const forceRefresh = useCallback(\n    () => setToggleRefresh((prevState) => !prevState),\n    []\n  );\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    toggleRefresh\n  );\n  const fromWalletBalance = poolInfo.data?.fromWalletBalance;\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  const fromParse = (amount: string) => {\n    try {\n      if (!poolInfo.data?.fromDecimals || !migrationAmount) {\n        return BigInt(0);\n      }\n      return parseUnits(amount, poolInfo.data.fromDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = poolInfo.data;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromWalletBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromWalletBalance);\n  const sufficientPoolBalance =\n    poolInfo.data?.toPoolBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(poolInfo.data.toPoolBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!isReady) {\n      return \"Connect your wallet to proceed.\";\n    } else if (poolInfo.error) {\n      return \"Unable to retrieve necessary information. This asset may not be supported.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"The transfer amount must be greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromWalletBalance) {\n      setMigrationAmount(fromWalletBalance);\n    }\n  }, [fromWalletBalance]);\n\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      setMigrationIsProcessing(true);\n      setError(\"\");\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      forceRefresh();\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, migrationAmount, enqueueSnackbar, forceRefresh]);\n\n  //TODO tokenName\n  const toTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.toAddress}\n      symbol={poolInfo.data?.toSymbol}\n    />\n  );\n  const fromTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.fromAddress}\n      symbol={poolInfo.data?.fromSymbol}\n    />\n  );\n  const poolPretty = (\n    <SmartAddress chainId={chainId} address={poolInfo.data?.poolAddress} />\n  );\n\n  const fatalError = poolInfo.error\n    ? \"Unable to retrieve necessary information. This asset may not be supported.\"\n    : null;\n\n  const explainerContent = (\n    <div>\n      <Typography>This action will convert</Typography>\n      <Typography variant=\"h6\">\n        {fromTokenPretty} {`(Balance: ${fromWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>to</Typography>\n      <Typography variant=\"h6\">\n        {toTokenPretty} {`(Balance: ${poolInfo.data?.toWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>Utilizing this pool</Typography>\n      <Typography variant=\"h6\">\n        {poolPretty} {`(Balance: ${poolInfo.data?.toPoolBalance || \"\"})`}\n      </Typography>\n    </div>\n  );\n\n  const mainWorkflow = (\n    <>\n      {explainerContent}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromWalletBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx tx={{ id: transaction, block: 1 }} chainId={chainId} />\n        </>\n      ) : null}\n    </>\n  );\n\n  return (\n    <div className={classes.containerDiv}>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : poolInfo.isLoading ? (\n        <CircularProgress />\n      ) : fatalError ? (\n        <Typography variant=\"h6\">{fatalError}</Typography>\n      ) : (\n        mainWorkflow\n      )}\n    </div>\n  );\n}\n","import {\n  Container,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { getMigrationAssetMap, MIGRATION_ASSET_MAP } from \"../../utils/consts\";\nimport SolanaWorkflow from \"./SolanaWorkflow\";\nimport { withRouter } from \"react-router\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_BSC,\n} from \"@certusone/wormhole-sdk\";\nimport EvmWorkflow from \"./EvmWorkflow\";\nimport { getAddress } from \"@ethersproject/address\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\ninterface RouteParams {\n  legacyAsset: string;\n  fromTokenAccount: string;\n}\n\ninterface Migration extends RouteComponentProps<RouteParams> {\n  chainId: ChainId;\n}\n\nconst SolanaRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const fromTokenAccount: string = props.match.params.fromTokenAccount;\n  const targetAsset: string | undefined = MIGRATION_ASSET_MAP.get(legacyAsset);\n\n  let fromMint: string | undefined = \"\";\n  let toMint: string | undefined = \"\";\n  let fromTokenAcct: string | undefined = \"\";\n  try {\n    fromMint = legacyAsset && new PublicKey(legacyAsset).toString();\n    toMint = targetAsset && new PublicKey(targetAsset).toString();\n    fromTokenAcct =\n      fromTokenAccount && new PublicKey(fromTokenAccount).toString();\n  } catch (e) {}\n\n  let content = null;\n\n  if (!fromMint || !toMint) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else if (!fromTokenAcct) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        Invalid token account.\n      </Typography>\n    );\n  } else {\n    content = (\n      <SolanaWorkflow\n        fromMint={fromMint}\n        toMint={toMint}\n        fromTokenAccount={fromTokenAcct}\n      />\n    );\n  }\n\n  return content;\n};\n\nconst EthereumRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const assetMap = getMigrationAssetMap(props.chainId);\n  const targetPool = assetMap.get(getAddress(legacyAsset));\n\n  let content = null;\n  if (!legacyAsset || !targetPool) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else {\n    content = (\n      <EvmWorkflow migratorAddress={targetPool} chainId={props.chainId} />\n    );\n  }\n\n  return content;\n};\n\nconst MigrationRoot: React.FC<Migration> = (props) => {\n  const classes = useStyles();\n  let content = null;\n\n  if (props.chainId === CHAIN_ID_SOLANA) {\n    content = <SolanaRoot {...props} />;\n  } else if (props.chainId === CHAIN_ID_ETH || props.chainId === CHAIN_ID_BSC) {\n    content = <EthereumRoot {...props} />;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>\n        <Typography variant=\"h5\">Migrate Assets</Typography>\n        <Typography variant=\"subtitle2\">\n          Convert assets from other bridges to Wormhole V2 tokens\n        </Typography>\n        <Divider className={classes.divider} />\n        {content}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default withRouter(MigrationRoot);\n","import { ChainId, TokenImplementation__factory } from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { COLORS } from \"../../muiTheme\";\nimport { CHAINS_BY_ID, getMigrationAssetMap } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\n//TODO move elsewhere\nexport const compareWithDecimalOffset = (\n  valueA: string,\n  decimalsA: number,\n  valueB: string,\n  decimalsB: number\n) => {\n  //find which is larger, and offset by that amount\n  const decimalsBasis = decimalsA > decimalsB ? decimalsA : decimalsB;\n  const normalizedA = parseUnits(valueA, decimalsBasis).toBigInt();\n  const normalizedB = parseUnits(valueB, decimalsBasis).toBigInt();\n\n  if (normalizedA < normalizedB) {\n    return -1;\n  } else if (normalizedA === normalizedB) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\nfunction EvmMigrationLineItem({\n  chainId,\n  migratorAddress,\n  onLoadComplete,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    false\n  );\n  const [loaded, setLoaded] = useState(false);\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const fromSymbol = poolInfo?.data?.fromSymbol;\n  const toSymbol = poolInfo?.data?.toSymbol;\n\n  const sufficientPoolBalance =\n    poolInfo.data &&\n    compareWithDecimalOffset(\n      poolInfo.data.fromWalletBalance,\n      poolInfo.data.fromDecimals,\n      poolInfo.data.toPoolBalance,\n      poolInfo.data.toDecimals\n    ) !== 1;\n\n  useEffect(() => {\n    if (!loaded && (poolInfo.data || poolInfo.error)) {\n      onLoadComplete();\n      setLoaded(true);\n    }\n  }, [loaded, poolInfo, onLoadComplete]);\n\n  //TODO use transaction loader\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      const migrationAmountAbs = parseUnits(\n        poolInfo.data.fromWalletBalance,\n        poolInfo.data.fromDecimals\n      );\n      setMigrationIsProcessing(true);\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        migrationAmountAbs\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        migrationAmountAbs\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, enqueueSnackbar]);\n\n  if (!poolInfo.data) {\n    return null;\n  } else if (transaction) {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx chainId={chainId} tx={{ id: transaction, block: 1 }} />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.fromAddress}\n            symbol={fromSymbol || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.toAddress}\n            symbol={toSymbol || undefined}\n          />\n        </div>\n        <div className={classes.convertButton}>\n          <ButtonWithLoader\n            showLoader={migrationIsProcessing}\n            onClick={migrateTokens}\n            error={\n              error\n                ? error\n                : !sufficientPoolBalance\n                ? \"The swap pool has insufficient funds.\"\n                : \"\"\n            }\n            disabled={!sufficientPoolBalance || migrationIsProcessing}\n          >\n            Convert\n          </ButtonWithLoader>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getAddressBalances = async (\n  signer: Signer,\n  signerAddress: string,\n  addresses: string[]\n): Promise<Map<string, BigNumber | null>> => {\n  try {\n    const promises: Promise<any>[] = [];\n    const output = new Map<string, BigNumber | null>();\n    addresses.forEach((address) => {\n      const factory = TokenImplementation__factory.connect(address, signer);\n      promises.push(\n        factory.balanceOf(signerAddress).then(\n          (result) => {\n            output.set(address, result);\n          },\n          (error) => {\n            output.set(address, null);\n          }\n        )\n      );\n    });\n    await Promise.all(promises);\n    return output;\n  } catch (e) {\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function EvmQuickMigrate({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const eligibleTokens = useMemo(\n    () => Array.from(migrationMap.keys()),\n    [migrationMap]\n  );\n  const [migrators, setMigrators] = useState<string[] | null>(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && signer && signerAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getAddressBalances(signer, signerAddress, eligibleTokens).then(\n        (result) => {\n          if (!cancelled) {\n            const migratorAddresses = [];\n            for (const tokenAddress of result.keys()) {\n              if (result.get(tokenAddress) && result.get(tokenAddress)?.gt(0)) {\n                const migratorAddress = migrationMap.get(\n                  getAddress(tokenAddress)\n                );\n                if (migratorAddress) {\n                  migratorAddresses.push(migratorAddress);\n                }\n              }\n            }\n            setMigratorsFinishedLoading(0);\n            setMigrators(migratorAddresses);\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, signer, signerAddress, eligibleTokens, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((address) => {\n              return (\n                <EvmMigrationLineItem\n                  key={address}\n                  chainId={chainId}\n                  migratorAddress={address}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  isEVMChain,\n  uint8ArrayToHex,\n  WormholeWrappedInfo,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { setSourceWormholeWrappedInfo as setNFTSourceWormholeWrappedInfo } from \"../store/nftSlice\";\nimport {\n  selectNFTIsRecovery,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferIsRecovery,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n} from \"../store/selectors\";\nimport { setSourceWormholeWrappedInfo as setTransferSourceWormholeWrappedInfo } from \"../store/transferSlice\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\n\nexport interface StateSafeWormholeWrappedInfo {\n  isWrapped: boolean;\n  chainId: ChainId;\n  assetAddress: string;\n  tokenId?: string;\n}\n\nconst makeStateSafe = (\n  info: WormholeWrappedInfo\n): StateSafeWormholeWrappedInfo => ({\n  ...info,\n  assetAddress: uint8ArrayToHex(info.assetAddress),\n});\n\n// Check if the tokens in the configured source chain/address are wrapped\n// tokens. Wrapped tokens are tokens that are non-native, I.E, are locked up on\n// a different chain than this one.\nfunction useCheckIfWormholeWrapped(nft?: boolean) {\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceAsset = useSelector(\n    nft ? selectNFTSourceAsset : selectTransferSourceAsset\n  );\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const tokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const setSourceWormholeWrappedInfo = nft\n    ? setNFTSourceWormholeWrappedInfo\n    : setTransferSourceWormholeWrappedInfo;\n  const { provider } = useEthereumProvider();\n  const isRecovery = useSelector(\n    nft ? selectNFTIsRecovery : selectTransferIsRecovery\n  );\n  useEffect(() => {\n    if (isRecovery) {\n      return;\n    }\n    // TODO: loading state, error state\n    let cancelled = false;\n    (async () => {\n      if (isEVMChain(sourceChain) && provider && sourceAsset) {\n        const wrappedInfo = makeStateSafe(\n          await (nft\n            ? getOriginalAssetEthNFT(\n                getNFTBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                tokenId,\n                sourceChain\n              )\n            : getOriginalAssetEth(\n                getTokenBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                sourceChain\n              ))\n        );\n        if (!cancelled) {\n          dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n        }\n      }\n      if (sourceChain === CHAIN_ID_SOLANA && sourceAsset) {\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const wrappedInfo = makeStateSafe(\n            await (nft\n              ? getOriginalAssetSolNFT(\n                  connection,\n                  SOL_NFT_BRIDGE_ADDRESS,\n                  sourceAsset\n                )\n              : getOriginalAssetSol(\n                  connection,\n                  SOL_TOKEN_BRIDGE_ADDRESS,\n                  sourceAsset\n                ))\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_TERRA && sourceAsset) {\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetTerra(lcd, sourceAsset)\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isRecovery,\n    sourceChain,\n    sourceAsset,\n    provider,\n    nft,\n    setSourceWormholeWrappedInfo,\n    tokenId,\n  ]);\n}\n\nexport default useCheckIfWormholeWrapped;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getForeignAssetEth as getForeignAssetEthNFT,\n  getForeignAssetSol as getForeignAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { setTargetAsset as setNFTTargetAsset } from \"../store/nftSlice\";\nimport {\n  selectNFTIsRecovery,\n  selectNFTIsSourceAssetWormholeWrapped,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTTargetChain,\n  selectTransferIsRecovery,\n  selectTransferIsSourceAssetWormholeWrapped,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetAsset as setTransferTargetAsset } from \"../store/transferSlice\";\nimport {\n  getEvmChainId,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\n\nfunction useFetchTargetAsset(nft?: boolean) {\n  const dispatch = useDispatch();\n  const isSourceAssetWormholeWrapped = useSelector(\n    nft\n      ? selectNFTIsSourceAssetWormholeWrapped\n      : selectTransferIsSourceAssetWormholeWrapped\n  );\n  const originChain = useSelector(\n    nft ? selectNFTOriginChain : selectTransferOriginChain\n  );\n  const originAsset = useSelector(\n    nft ? selectNFTOriginAsset : selectTransferOriginAsset\n  );\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const tokenId = originTokenId || \"\"; // this should exist by this step for NFT transfers\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const setTargetAsset = nft ? setNFTTargetAsset : setTransferTargetAsset;\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const correctEvmNetwork = getEvmChainId(targetChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n  const isRecovery = useSelector(\n    nft ? selectNFTIsRecovery : selectTransferIsRecovery\n  );\n  const [lastSuccessfulArgs, setLastSuccessfulArgs] = useState<{\n    isSourceAssetWormholeWrapped: boolean | undefined;\n    originChain: ChainId | undefined;\n    originAsset: string | undefined;\n    targetChain: ChainId;\n    nft?: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsMatchLastSuccess =\n    !!lastSuccessfulArgs &&\n    lastSuccessfulArgs.isSourceAssetWormholeWrapped ===\n      isSourceAssetWormholeWrapped &&\n    lastSuccessfulArgs.originChain === originChain &&\n    lastSuccessfulArgs.originAsset === originAsset &&\n    lastSuccessfulArgs.targetChain === targetChain &&\n    lastSuccessfulArgs.nft === nft &&\n    lastSuccessfulArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () =>\n      setLastSuccessfulArgs({\n        isSourceAssetWormholeWrapped,\n        originChain,\n        originAsset,\n        targetChain,\n        nft,\n        tokenId,\n      }),\n    [\n      isSourceAssetWormholeWrapped,\n      originChain,\n      originAsset,\n      targetChain,\n      nft,\n      tokenId,\n    ]\n  );\n  useEffect(() => {\n    if (isRecovery || argsMatchLastSuccess) {\n      return;\n    }\n    setLastSuccessfulArgs(null);\n    if (isSourceAssetWormholeWrapped && originChain === targetChain) {\n      dispatch(\n        setTargetAsset(\n          receiveDataWrapper({\n            doesExist: true,\n            address: hexToNativeString(originAsset, originChain) || null,\n          })\n        )\n      );\n      setArgs();\n      return;\n    }\n    let cancelled = false;\n    (async () => {\n      if (\n        isEVMChain(targetChain) &&\n        provider &&\n        hasCorrectEvmNetwork &&\n        originChain &&\n        originAsset\n      ) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const asset = await (nft\n            ? getForeignAssetEthNFT(\n                getNFTBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              )\n            : getForeignAssetEth(\n                getTokenBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: asset !== ethers.constants.AddressZero,\n                  address: asset,\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_SOLANA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const asset = await (nft\n            ? getForeignAssetSolNFT(\n                SOL_NFT_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset),\n                arrayify(BigNumber.from(tokenId || \"0\"))\n              )\n            : getForeignAssetSolana(\n                connection,\n                SOL_TOKEN_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_TERRA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const asset = await getForeignAssetTerra(\n            TERRA_TOKEN_BRIDGE_ADDRESS,\n            lcd,\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isRecovery,\n    isSourceAssetWormholeWrapped,\n    originChain,\n    originAsset,\n    targetChain,\n    provider,\n    nft,\n    setTargetAsset,\n    tokenId,\n    hasCorrectEvmNetwork,\n    argsMatchLastSuccess,\n    setArgs,\n  ]);\n}\n\nexport default useFetchTargetAsset;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginBottom: theme.spacing(4),\n  },\n}));\n\nexport default function StepDescription({\n  children,\n}: {\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <Typography component=\"div\" variant=\"body2\" className={classes.description}>\n      {children}\n    </Typography>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTIsRedeeming,\n  selectNFTIsSending,\n  selectNFTRedeemTx,\n  selectNFTSourceChain,\n  selectNFTTargetChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const isSending = useSelector(selectNFTIsSending);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const showWarning = (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : isEVMChain(sourceChain) && isSending\n        ? \"Note: there will be two transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { useSelector } from \"react-redux\";\nimport { useHandleNFTRedeem } from \"../../hooks/useHandleNFTRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { selectNFTTargetChain } from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport StepDescription from \"../StepDescription\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Redeem() {\n  const { handleClick, disabled, showLoader } = useHandleNFTRedeem();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  return (\n    <>\n      <StepDescription>Receive the NFT on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n    </>\n  );\n}\n\nexport default Redeem;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectNFTRedeemTx, selectNFTTargetChain } from \"../../store/selectors\";\nimport { reset } from \"../../store/nftSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The NFT will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer Another NFT!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  transferFromEth,\n  transferFromSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { BigNumber, Signer } from \"ethers\";\nimport { arrayify, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectNFTTargetChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTTargetAddressHex from \"./useNFTTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  tokenId: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await transferFromEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      tokenAddress,\n      tokenId,\n      recipientChain,\n      recipientAddress\n    );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getNFTBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  originAddressStr?: string,\n  originChain?: ChainId,\n  originTokenId?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const transaction = await transferFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_NFT_BRIDGE_ADDRESS,\n      payerAddress,\n      fromAddress,\n      mintAddress,\n      targetAddress,\n      targetChain,\n      originAddress,\n      originChain,\n      arrayify(BigNumber.from(originTokenId || \"0\"))\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleNFTTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceAsset = useSelector(selectNFTSourceAsset);\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useNFTTargetAddressHex();\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      !!sourceTokenId &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        sourceTokenId,\n        targetChain,\n        targetAddress,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        targetChain,\n        targetAddress,\n        originAsset,\n        originChain,\n        originTokenId\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    sourceTokenPublicKey,\n    sourceAsset,\n    sourceTokenId,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    originTokenId,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTTargetAddressHex() {\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTTransfer } from \"../../hooks/useHandleNFTTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectNFTSourceWalletAddress,\n  selectNFTSourceChain,\n  selectNFTTargetError,\n  selectNFTTransferTx,\n  selectNFTIsSendComplete,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport StepDescription from \"../StepDescription\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleNFTTransfer();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const error = useSelector(selectNFTTargetError);\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectNFTSourceWalletAddress);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const isDisabled = !isReady || isWrongWallet || disabled;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || undefined;\n  return (\n    <>\n      <StepDescription>\n        Transfer the NFT to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      <ButtonWithLoader\n        disabled={isDisabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={errorMessage}\n      >\n        Transfer\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const transferTx = useSelector(selectNFTTransferTx);\n\n  const explainerString = \"The NFT has been sent!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/bnb.d8c61230.svg\";","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  WSOL_ADDRESS,\n  WSOL_DECIMALS,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  errorSourceParsedTokenAccounts as errorSourceParsedTokenAccountsNFT,\n  fetchSourceParsedTokenAccounts as fetchSourceParsedTokenAccountsNFT,\n  NFTParsedTokenAccount,\n  receiveSourceParsedTokenAccounts as receiveSourceParsedTokenAccountsNFT,\n  setSourceParsedTokenAccount as setSourceParsedTokenAccountNFT,\n  setSourceParsedTokenAccounts as setSourceParsedTokenAccountsNFT,\n  setSourceWalletAddress as setSourceWalletAddressNFT,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccounts,\n  selectNFTSourceWalletAddress,\n  selectSourceWalletAddress,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccounts,\n} from \"../store/selectors\";\nimport {\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  ParsedTokenAccount,\n  receiveSourceParsedTokenAccounts,\n  setAmount,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  setSourceWalletAddress,\n} from \"../store/transferSlice\";\nimport {\n  COVALENT_GET_TOKENS_URL,\n  logoOverrides,\n  ROPSTEN_WETH_ADDRESS,\n  ROPSTEN_WETH_DECIMALS,\n  SOLANA_HOST,\n  WAVAX_ADDRESS,\n  WAVAX_DECIMALS,\n  WBNB_ADDRESS,\n  WBNB_DECIMALS,\n  WETH_ADDRESS,\n  WETH_DECIMALS,\n  WMATIC_ADDRESS,\n  WMATIC_DECIMALS,\n} from \"../utils/consts\";\nimport {\n  ExtractedMintInfo,\n  extractMintInfo,\n  getMultipleAccountsRPC,\n} from \"../utils/solana\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bnbIcon from \"../icons/bnb.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\n\nexport function createParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  symbol?: string,\n  name?: string,\n  logo?: string,\n  isNativeAsset?: boolean\n): ParsedTokenAccount {\n  return {\n    publicKey: publicKey,\n    mintKey: mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    symbol,\n    name,\n    logo,\n    isNativeAsset,\n  };\n}\n\nexport function createNFTParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  tokenId: string,\n  symbol?: string,\n  name?: string,\n  uri?: string,\n  animation_url?: string,\n  external_url?: string,\n  image?: string,\n  image_256?: string,\n  nftName?: string,\n  description?: string\n): NFTParsedTokenAccount {\n  return {\n    publicKey,\n    mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    tokenId,\n    uri,\n    animation_url,\n    external_url,\n    image,\n    image_256,\n    symbol,\n    name,\n    nftName,\n    description,\n  };\n}\n\nconst createParsedTokenAccountFromInfo = (\n  pubkey: PublicKey,\n  item: AccountInfo<ParsedAccountData>\n): ParsedTokenAccount => {\n  return {\n    publicKey: pubkey?.toString(),\n    mintKey: item.data.parsed?.info?.mint?.toString(),\n    amount: item.data.parsed?.info?.tokenAmount?.amount,\n    decimals: item.data.parsed?.info?.tokenAmount?.decimals,\n    uiAmount: item.data.parsed?.info?.tokenAmount?.uiAmount,\n    uiAmountString: item.data.parsed?.info?.tokenAmount?.uiAmountString,\n  };\n};\n\nconst createParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData\n): ParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: covalent.balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(formatUnits(covalent.balance, covalent.contract_decimals)),\n    uiAmountString: formatUnits(covalent.balance, covalent.contract_decimals),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: logoOverrides.get(covalent.contract_address) || covalent.logo_url,\n  };\n};\n\nconst createNativeSolParsedTokenAccount = async (\n  connection: Connection,\n  walletAddress: string\n) => {\n  // const walletAddress = \"H69q3Q8E74xm7swmMQpsJLVp2Q9JuBwBbxraAMX5Drzm\" // known solana mainnet wallet with tokens\n  const fetchAccounts = await getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]);\n  if (!fetchAccounts || !fetchAccounts.length || !fetchAccounts[0]) {\n    return null;\n  } else {\n    return createParsedTokenAccount(\n      walletAddress, //publicKey\n      WSOL_ADDRESS, //Mint key\n      fetchAccounts[0].lamports.toString(), //amount\n      WSOL_DECIMALS, //decimals, 9\n      parseFloat(formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS)),\n      formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS).toString(),\n      \"SOL\",\n      \"Solana\",\n      undefined, //TODO logo. It's in the solana token map, so we could potentially use that URL.\n      true\n    );\n  }\n};\n\nconst createNativeEthParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeEthRopstenParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          ROPSTEN_WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          ROPSTEN_WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeBscParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WBNB_ADDRESS, //Mint key, On the other side this will be WBNB, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WBNB_DECIMALS, //Luckily both BNB and WBNB have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"BNB\", //A white lie for display purposes\n          \"Binance Coin\", //A white lie for display purposes\n          bnbIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativePolygonParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WMATIC_ADDRESS, //Mint key, On the other side this will be WMATIC, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WMATIC_DECIMALS, //Luckily both MATIC and WMATIC have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"MATIC\", //A white lie for display purposes\n          \"Matic\", //A white lie for display purposes\n          polygonIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeAvaxParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WAVAX_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WAVAX_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"AVAX\", //A white lie for display purposes\n          \"Avalanche\", //A white lie for display purposes\n          avaxIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNFTParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData,\n  nft_data: CovalentNFTData\n): NFTParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: nft_data.token_balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(\n      formatUnits(nft_data.token_balance, covalent.contract_decimals)\n    ),\n    uiAmountString: formatUnits(\n      nft_data.token_balance,\n      covalent.contract_decimals\n    ),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: covalent.logo_url,\n    tokenId: nft_data.token_id,\n    uri: nft_data.token_url,\n    animation_url: nft_data.external_data.animation_url,\n    external_url: nft_data.external_data.external_url,\n    image: nft_data.external_data.image,\n    image_256: nft_data.external_data.image_256,\n    nftName: nft_data.external_data.name,\n    description: nft_data.external_data.description,\n  };\n};\n\nexport type CovalentData = {\n  contract_decimals: number;\n  contract_ticker_symbol: string;\n  contract_name: string;\n  contract_address: string;\n  logo_url: string | undefined;\n  balance: string;\n  quote: number | undefined;\n  quote_rate: number | undefined;\n  nft_data?: CovalentNFTData[];\n};\n\nexport type CovalentNFTExternalData = {\n  animation_url: string | null;\n  external_url: string | null;\n  image: string;\n  image_256: string;\n  name: string;\n  description: string;\n};\n\nexport type CovalentNFTData = {\n  token_id: string;\n  token_balance: string;\n  external_data: CovalentNFTExternalData;\n  token_url: string;\n};\n\nconst getEthereumAccountsCovalent = async (\n  walletAddress: string,\n  nft: boolean,\n  chainId: ChainId\n): Promise<CovalentData[]> => {\n  const url = COVALENT_GET_TOKENS_URL(chainId, walletAddress, nft);\n\n  try {\n    const output = [] as CovalentData[];\n    const response = await axios.get(url);\n    const tokens = response.data.data.items;\n\n    if (tokens instanceof Array && tokens.length) {\n      for (const item of tokens) {\n        // TODO: filter?\n        if (\n          item.contract_decimals !== undefined &&\n          item.contract_address &&\n          item.balance &&\n          item.balance !== \"0\" &&\n          (nft\n            ? item.supports_erc?.includes(\"erc721\")\n            : item.supports_erc?.includes(\"erc20\"))\n        ) {\n          output.push({ ...item } as CovalentData);\n        }\n      }\n    }\n\n    return output;\n  } catch (error) {\n    return Promise.reject(\"Unable to retrieve your Ethereum Tokens.\");\n  }\n};\n\nconst getSolanaParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    //No matter what, we retrieve the spl tokens associated to this address.\n    let splParsedTokenAccounts = await connection\n      .getParsedTokenAccountsByOwner(new PublicKey(walletAddress), {\n        programId: new PublicKey(TOKEN_PROGRAM_ID),\n      })\n      .then((result) => {\n        return result.value.map((item) =>\n          createParsedTokenAccountFromInfo(item.pubkey, item.account)\n        );\n      });\n\n    // uncomment to test token account in picker, useful for debugging\n    // splParsedTokenAccounts.push({\n    //   amount: \"1\",\n    //   decimals: 8,\n    //   mintKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   publicKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   uiAmount: 1,\n    //   uiAmountString: \"1\",\n    //   isNativeAsset: false,\n    // });\n\n    if (nft) {\n      //In the case of NFTs, we are done, and we set the accounts in redux\n      dispatch(receiveSourceParsedTokenAccountsNFT(splParsedTokenAccounts));\n    } else {\n      //In the transfer case, we also pull the SOL balance of the wallet, and prepend it at the beginning of the list.\n      const nativeAccount = await createNativeSolParsedTokenAccount(\n        connection,\n        walletAddress\n      );\n      if (nativeAccount !== null) {\n        splParsedTokenAccounts.unshift(nativeAccount);\n      }\n      dispatch(receiveSourceParsedTokenAccounts(splParsedTokenAccounts));\n    }\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\n/**\n * Fetches the balance of an asset for the connected wallet\n * This should handle every type of chain in the future, but only reads the Transfer state.\n */\nfunction useGetAvailableTokens(nft: boolean = false) {\n  const dispatch = useDispatch();\n\n  const tokenAccounts = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccounts\n      : selectTransferSourceParsedTokenAccounts\n  );\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { provider, signerAddress } = useEthereumProvider();\n\n  const [covalent, setCovalent] = useState<any>(undefined);\n  const [covalentLoading, setCovalentLoading] = useState(false);\n  const [covalentError, setCovalentError] = useState<string | undefined>(\n    undefined\n  );\n\n  const [ethNativeAccount, setEthNativeAccount] = useState<any>(undefined);\n  const [ethNativeAccountLoading, setEthNativeAccountLoading] = useState(false);\n  const [ethNativeAccountError, setEthNativeAccountError] = useState<\n    string | undefined\n  >(undefined);\n\n  const [solanaMintAccounts, setSolanaMintAccounts] = useState<\n    Map<string, ExtractedMintInfo | null> | undefined\n  >(undefined);\n  const [solanaMintAccountsLoading, setSolanaMintAccountsLoading] =\n    useState(false);\n  const [solanaMintAccountsError, setSolanaMintAccountsError] = useState<\n    string | undefined\n  >(undefined);\n\n  const selectedSourceWalletAddress = useSelector(\n    nft ? selectNFTSourceWalletAddress : selectSourceWalletAddress\n  );\n  const currentSourceWalletAddress: string | undefined = isEVMChain(lookupChain)\n    ? signerAddress\n    : lookupChain === CHAIN_ID_SOLANA\n    ? solPK?.toString()\n    : undefined;\n\n  const resetSourceAccounts = useCallback(() => {\n    dispatch(\n      nft\n        ? setSourceWalletAddressNFT(undefined)\n        : setSourceWalletAddress(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountNFT(undefined)\n        : setSourceParsedTokenAccount(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountsNFT(undefined)\n        : setSourceParsedTokenAccounts(undefined)\n    );\n    !nft && dispatch(setAmount(\"\"));\n    setCovalent(undefined); //These need to be included in the reset because they have balances on them.\n    setCovalentLoading(false);\n    setCovalentError(\"\");\n\n    setEthNativeAccount(undefined);\n    setEthNativeAccountLoading(false);\n    setEthNativeAccountError(\"\");\n  }, [setCovalent, dispatch, nft]);\n\n  //TODO this useEffect could be somewhere else in the codebase\n  //It resets the SourceParsedTokens accounts when the wallet changes\n  useEffect(() => {\n    if (\n      selectedSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== selectedSourceWalletAddress\n    ) {\n      resetSourceAccounts();\n      return;\n    } else {\n    }\n  }, [\n    selectedSourceWalletAddress,\n    currentSourceWalletAddress,\n    dispatch,\n    resetSourceAccounts,\n  ]);\n\n  //Solana accountinfos load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_SOLANA && solPK) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getSolanaParsedTokenAccounts(solPK.toString(), dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, solanaWallet, lookupChain, solPK, tokenAccounts, nft]);\n\n  //Solana Mint Accounts lookup\n  useEffect(() => {\n    if (lookupChain !== CHAIN_ID_SOLANA || !tokenAccounts.data?.length) {\n      return () => {};\n    }\n\n    let cancelled = false;\n    setSolanaMintAccountsLoading(true);\n    setSolanaMintAccountsError(undefined);\n    const mintAddresses = tokenAccounts.data.map((x) => x.mintKey);\n    //This is a known wormhole v1 token on testnet\n    // mintAddresses.push(\"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\");\n    //SOLT devnet token\n    // mintAddresses.push(\"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\");\n    // bad monkey \"NFT\"\n    // mintAddresses.push(\"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\");\n    // degenerate monkey NFT\n    // mintAddresses.push(\"EzYsbigNNGbNuANRJ3mnnyJYU2Bk7mBYVsxuonUwAX7r\");\n\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    getMultipleAccountsRPC(\n      connection,\n      mintAddresses.map((x) => new PublicKey(x))\n    ).then(\n      (results) => {\n        if (!cancelled) {\n          const output = new Map<string, ExtractedMintInfo | null>();\n\n          results.forEach((result, index) =>\n            output.set(\n              mintAddresses[index],\n              (result && extractMintInfo(result)) || null\n            )\n          );\n\n          setSolanaMintAccounts(output);\n          setSolanaMintAccountsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setSolanaMintAccounts(undefined);\n          setSolanaMintAccountsLoading(false);\n          setSolanaMintAccountsError(\n            \"Could not retrieve Solana mint accounts.\"\n          );\n        }\n      }\n    );\n\n    return () => (cancelled = true);\n  }, [tokenAccounts.data, lookupChain]);\n\n  //Ethereum native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETH &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum (Ropsten) native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthRopstenParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Binance Smart Chain native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_BSC &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeBscParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your BNB balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Polygon native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_POLYGON &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativePolygonParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your MATIC balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //TODO refactor all these into an isEVM effect\n  //avax native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_AVAX &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeAvaxParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your AVAX balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum covalent accounts load\n  useEffect(() => {\n    //const testWallet = \"0xf60c2ea62edbfe808163751dd0d8693dcb30019c\";\n    // const nftTestWallet1 = \"0x3f304c6721f35ff9af00fd32650c8e0a982180ab\";\n    // const nftTestWallet2 = \"0x98ed231428088eb440e8edb5cc8d66dcf913b86e\";\n    // const nftTestWallet3 = \"0xb1fadf677a7e9b90e9d4f31c8ffb3dc18c138c6f\";\n    // const nftBscTestWallet1 = \"0x5f464a652bd1991df0be37979b93b3306d64a909\";\n    let cancelled = false;\n    const walletAddress = signerAddress;\n    if (walletAddress && isEVMChain(lookupChain) && !covalent) {\n      //TODO less cancel\n      !cancelled && setCovalentLoading(true);\n      !cancelled &&\n        dispatch(\n          nft\n            ? fetchSourceParsedTokenAccountsNFT()\n            : fetchSourceParsedTokenAccounts()\n        );\n      getEthereumAccountsCovalent(walletAddress, nft, lookupChain).then(\n        (accounts) => {\n          !cancelled && setCovalentLoading(false);\n          !cancelled && setCovalentError(undefined);\n          !cancelled && setCovalent(accounts);\n          !cancelled &&\n            dispatch(\n              nft\n                ? receiveSourceParsedTokenAccountsNFT(\n                    accounts.reduce((arr, current) => {\n                      if (current.nft_data) {\n                        current.nft_data.forEach((x) =>\n                          arr.push(\n                            createNFTParsedTokenAccountFromCovalent(\n                              walletAddress,\n                              current,\n                              x\n                            )\n                          )\n                        );\n                      }\n                      return arr;\n                    }, [] as NFTParsedTokenAccount[])\n                  )\n                : receiveSourceParsedTokenAccounts(\n                    accounts.map((x) =>\n                      createParsedTokenAccountFromCovalent(walletAddress, x)\n                    )\n                  )\n            );\n        },\n        () => {\n          !cancelled &&\n            dispatch(\n              nft\n                ? errorSourceParsedTokenAccountsNFT(\n                    \"Cannot load your Ethereum NFTs at the moment.\"\n                  )\n                : errorSourceParsedTokenAccounts(\n                    \"Cannot load your Ethereum tokens at the moment.\"\n                  )\n            );\n          !cancelled &&\n            setCovalentError(\"Cannot load your Ethereum tokens at the moment.\");\n          !cancelled && setCovalentLoading(false);\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [lookupChain, provider, signerAddress, dispatch, nft, covalent]);\n\n  //Terra accounts load\n  //At present, we don't have any mechanism for doing this.\n  useEffect(() => {}, []);\n\n  const ethAccounts = useMemo(() => {\n    const output = { ...tokenAccounts };\n    output.data = output.data?.slice() || [];\n    output.isFetching = output.isFetching || ethNativeAccountLoading;\n    output.error = output.error || ethNativeAccountError;\n    ethNativeAccount && output.data && output.data.unshift(ethNativeAccount);\n    return output;\n  }, [\n    ethNativeAccount,\n    ethNativeAccountLoading,\n    ethNativeAccountError,\n    tokenAccounts,\n  ]);\n\n  return lookupChain === CHAIN_ID_SOLANA\n    ? {\n        tokenAccounts: tokenAccounts,\n        mintAccounts: {\n          data: solanaMintAccounts,\n          isFetching: solanaMintAccountsLoading,\n          error: solanaMintAccountsError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : isEVMChain(lookupChain)\n    ? {\n        tokenAccounts: ethAccounts,\n        covalent: {\n          data: covalent,\n          isFetching: covalentLoading,\n          error: covalentError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_TERRA\n    ? {\n        resetAccounts: resetSourceAccounts,\n      }\n    : undefined;\n}\n\nexport default useGetAvailableTokens;\n","import {\n  NFTImplementation,\n  NFTImplementation__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { arrayify, formatUnits } from \"ethers/lib/utils\";\nimport {\n  createNFTParsedTokenAccount,\n  createParsedTokenAccount,\n} from \"../hooks/useGetSourceParsedTokenAccounts\";\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumToken(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = TokenImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function ethTokenToParsedTokenAccount(\n  token: TokenImplementation,\n  signerAddress: string\n) {\n  const decimals = await token.decimals();\n  const balance = await token.balanceOf(signerAddress);\n  const symbol = await token.symbol();\n  const name = await token.name();\n  return createParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    symbol,\n    name\n  );\n}\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumNFT(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = NFTImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function isNFT(token: NFTImplementation) {\n  const erc721 = \"0x80ac58cd\";\n  const erc721metadata = \"0x5b5e139f\";\n  const supportsErc721 = await token.supportsInterface(arrayify(erc721));\n  const supportsErc721Metadata = await token.supportsInterface(\n    arrayify(erc721metadata)\n  );\n  return supportsErc721 && supportsErc721Metadata;\n}\n\nexport async function ethNFTToNFTParsedTokenAccount(\n  token: NFTImplementation,\n  tokenId: string,\n  signerAddress: string\n) {\n  const decimals = 0;\n  const balance = (await token.ownerOf(tokenId)) === signerAddress ? 1 : 0;\n  const symbol = await token.symbol();\n  const name = await token.name();\n  const uri = await token.tokenURI(tokenId);\n  return createNFTParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    tokenId,\n    symbol,\n    name,\n    uri\n  );\n}\n\nexport function isValidEthereumAddress(address: string) {\n  return ethers.utils.isAddress(address);\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectMarketsMap } from \"../store/selectors\";\nimport {\n  errorMarketsMap,\n  fetchMarketsMap,\n  receiveMarketsMap,\n} from \"../store/tokenSlice\";\nimport { FEATURED_MARKETS_JSON_URL } from \"../utils/consts\";\n\nexport type MarketsMap = {\n  markets?: {\n    [index: string]: {\n      name: string;\n      link: string;\n    };\n  };\n  tokens?: {\n    [key in ChainId]?: {\n      [index: string]: {\n        symbol: string;\n        logo: string;\n      };\n    };\n  };\n  tokenMarkets?: {\n    [key in ChainId]?: {\n      [key in ChainId]?: {\n        [index: string]: {\n          symbol: string;\n          logo: string;\n          markets: string[];\n        };\n      };\n    };\n  };\n};\n\nconst useMarketsMap = (shouldFire: boolean): DataWrapper<MarketsMap> => {\n  const marketsMap = useSelector(selectMarketsMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (marketsMap.data === undefined ||\n      (marketsMap.data === null && !marketsMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getMarketsMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return marketsMap;\n};\n\nconst getMarketsMap = (dispatch: Dispatch) => {\n  dispatch(fetchMarketsMap());\n  axios.get(FEATURED_MARKETS_JSON_URL).then(\n    (response) => {\n      dispatch(receiveMarketsMap(response.data as MarketsMap));\n    },\n    (error) => {\n      dispatch(errorMarketsMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useMarketsMap;\n","import {\n  Avatar,\n  Card,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport clsx from \"clsx\";\nimport {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport SmartAddress from \"../SmartAddress\";\nimport avaxIcon from \"../../icons/avax.svg\";\nimport bscIcon from \"../../icons/bsc.svg\";\nimport ethIcon from \"../../icons/eth.svg\";\nimport solanaIcon from \"../../icons/solana.svg\";\nimport polygonIcon from \"../../icons/polygon.svg\";\nimport useCopyToClipboard from \"../../hooks/useCopyToClipboard\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Wormhole from \"../../icons/wormhole-network.svg\";\n\nconst safeIPFS = (uri: string) =>\n  uri.startsWith(\"ipfs://ipfs/\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/\")\n    : uri.startsWith(\"ipfs://\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n    : uri.startsWith(\"https://cloudflare-ipfs.com/ipfs/\") // no CORS support?\n    ? uri.replace(\"https://cloudflare-ipfs.com/ipfs/\", \"https://ipfs.io/ipfs/\")\n    : uri;\n\nconst LogoIcon = ({ chainId }: { chainId: ChainId }) =>\n  chainId === CHAIN_ID_SOLANA ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"4px\",\n      }}\n      src={solanaIcon}\n      alt=\"Solana\"\n    />\n  ) : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN ? (\n    <Avatar\n      style={{\n        backgroundColor: \"white\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n      }}\n      src={ethIcon}\n      alt=\"Ethereum\"\n    />\n  ) : chainId === CHAIN_ID_BSC ? (\n    <Avatar\n      style={{\n        backgroundColor: \"rgb(20, 21, 26)\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"2px\",\n      }}\n      src={bscIcon}\n      alt=\"Binance Smart Chain\"\n    />\n  ) : chainId === CHAIN_ID_POLYGON ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={polygonIcon}\n      alt=\"Polygon\"\n    />\n  ) : chainId === CHAIN_ID_AVAX ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={avaxIcon}\n      alt=\"Avalanche\"\n    />\n  ) : null;\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    borderRadius: 9,\n    maxWidth: \"100%\",\n    width: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: 8,\n    position: \"relative\",\n    zIndex: 1,\n    transition: \"background-position 1s, transform 0.25s\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n      transform: \"scale(1.25)\",\n    },\n    backgroundSize: \"200% auto\",\n    backgroundColor: \"#ffb347\",\n    background:\n      \"linear-gradient(to right, #ffb347 0%, #ffcc33  51%, #ffb347  100%)\",\n  },\n  silverBorder: {\n    backgroundColor: \"#D9D8D6\",\n    backgroundSize: \"200% auto\",\n    background:\n      \"linear-gradient(to bottom right, #757F9A 0%, #D7DDE8  51%, #757F9A  100%)\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n    },\n  },\n  cardInset: {},\n  textContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    display: \"flex\",\n  },\n  detailsContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    \"&:last-child\": {\n      //override rule\n      paddingBottom: 2,\n    },\n  },\n  title: {\n    flex: 1,\n  },\n  description: {\n    padding: theme.spacing(0.5, 0, 1),\n  },\n  tokenId: {\n    fontSize: \"8px\",\n  },\n  mediaContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"transparent\",\n    margin: theme.spacing(0, 2),\n    \"& > img, & > video\": {\n      border: \"1px solid #ffb347\",\n    },\n  },\n  silverMediaBorder: {\n    \"& > img, & > video\": {\n      borderColor: \"#D7DDE8\",\n    },\n  },\n  // thanks https://cssgradient.io/ and https://htmlcolorcodes.com/color-picker/\n  eth: {\n    // colors from https://en.wikipedia.org/wiki/Ethereum#/media/File:Ethereum-icon-purple.svg\n    backgroundColor: \"rgb(69,74,117)\",\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,1) 0%, rgba(138,146,178,1) 33%, rgba(69,74,117,1) 66%, rgba(98,104,143,1) 100%)\",\n  },\n  bsc: {\n    // color from binance background rgb(20, 21, 26), 2 and 1 tint lighter\n    backgroundColor: \"#F0B90B\",\n    background:\n      \"linear-gradient(160deg, rgb(20, 21, 26) 0%, #4A4D57 33%, rgb(20, 21, 26) 66%, #2C2F3B 100%)\",\n  },\n  polygon: {\n    // color from polygon logo #8247E5 down to 30 lightness\n    backgroundColor: \"#0F0323\",\n    background:\n      \"linear-gradient(160deg, #0F0323 0%, #250957 33%, #0F0323 66%, #0F0323 100%)\",\n  },\n  solana: {\n    // colors from https://solana.com/branding/new/exchange/exchange-sq-black.svg\n    backgroundColor: \"rgb(153,69,255)\",\n    background:\n      \"linear-gradient(45deg, rgba(153,69,255,1) 0%, rgba(121,98,231,1) 20%, rgba(0,209,140,1) 100%)\",\n  },\n  hidden: {\n    display: \"none\",\n  },\n  skeleton: {\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    borderRadius: 9,\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"absolute\",\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    zIndex: 10,\n  },\n  wormholePositioner: {\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"relative\",\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    margin: `${theme.spacing(1)}px auto`,\n  },\n}));\n\nconst ViewerLoader = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.wormholePositioner}>\n      <Skeleton variant=\"rect\" animation=\"wave\" className={classes.skeleton} />\n      <img src={Wormhole} alt=\"Wormhole\" className={classes.wormholeIcon} />\n    </div>\n  );\n};\n\nexport default function NFTViewer({\n  value,\n  chainId,\n}: {\n  value: NFTParsedTokenAccount;\n  chainId: ChainId;\n}) {\n  const uri = safeIPFS(value.uri || \"\");\n  const [metadata, setMetadata] = useState({\n    uri,\n    image: value.image,\n    animation_url: value.animation_url,\n    nftName: value.nftName,\n    description: value.description,\n    isLoading: !!uri,\n  });\n  const [isMediaLoading, setIsMediaLoading] = useState(false);\n  const onLoad = useCallback(() => {\n    setIsMediaLoading(false);\n  }, []);\n  const isLoading = isMediaLoading || metadata.isLoading;\n  useEffect(() => {\n    setMetadata((m) =>\n      m.uri === uri\n        ? m\n        : {\n            uri,\n            image: value.image,\n            animation_url: value.animation_url,\n            nftName: value.nftName,\n            description: value.description,\n            isLoading: !!uri,\n          }\n    );\n  }, [value, uri]);\n  useEffect(() => {\n    if (uri) {\n      let cancelled = false;\n      (async () => {\n        try {\n          const result = await axios.get(uri);\n          if (!cancelled && result && result.data) {\n            // support returns with nested data (e.g. {status: 10000, result: {data: {...}}})\n            const data = result.data.result?.data || result.data;\n            setMetadata({\n              uri,\n              image:\n                data.image ||\n                data.image_url ||\n                data.big_image ||\n                data.small_image,\n              animation_url: data.animation_url,\n              nftName: data.name,\n              description: data.description,\n              isLoading: false,\n            });\n          } else if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        } catch (e) {\n          if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [uri]);\n\n  const classes = useStyles();\n  const animLower = metadata.animation_url?.toLowerCase();\n  // const has3DModel = animLower?.endsWith('gltf') || animLower?.endsWith('glb')\n  const hasVideo =\n    !animLower?.startsWith(\"ipfs://\") && // cloudflare ipfs doesn't support streaming video\n    (animLower?.endsWith(\"webm\") ||\n      animLower?.endsWith(\"mp4\") ||\n      animLower?.endsWith(\"mov\") ||\n      animLower?.endsWith(\"m4v\") ||\n      animLower?.endsWith(\"ogv\") ||\n      animLower?.endsWith(\"ogg\"));\n  const hasAudio =\n    animLower?.endsWith(\"mp3\") ||\n    animLower?.endsWith(\"flac\") ||\n    animLower?.endsWith(\"wav\") ||\n    animLower?.endsWith(\"oga\");\n  const hasImage = metadata.image;\n  const copyTokenId = useCopyToClipboard(value.tokenId || \"\");\n  const videoSrc = hasVideo && safeIPFS(metadata.animation_url || \"\");\n  const imageSrc = hasImage && safeIPFS(metadata.image || \"\");\n  const audioSrc = hasAudio && safeIPFS(metadata.animation_url || \"\");\n\n  //set loading when the media src changes\n  useLayoutEffect(() => {\n    if (videoSrc || imageSrc || audioSrc) {\n      setIsMediaLoading(true);\n    } else {\n      setIsMediaLoading(false);\n    }\n  }, [videoSrc, imageSrc, audioSrc]);\n\n  const image = (\n    <img\n      src={imageSrc}\n      alt={metadata.nftName || \"\"}\n      style={{ maxWidth: \"100%\" }}\n      onLoad={onLoad}\n      onError={onLoad}\n    />\n  );\n  const media = (\n    <>\n      {hasVideo ? (\n        <video\n          autoPlay\n          controls\n          loop\n          style={{ maxWidth: \"100%\" }}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        >\n          <source src={videoSrc || \"\"} />\n          {image}\n        </video>\n      ) : hasImage ? (\n        image\n      ) : null}\n      {hasAudio ? (\n        <audio\n          controls\n          src={audioSrc || \"\"}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        />\n      ) : null}\n    </>\n  );\n\n  return (\n    <>\n      <div className={!isLoading ? classes.hidden : \"\"}>\n        <ViewerLoader />\n      </div>\n      <Card\n        className={clsx(classes.card, {\n          [classes.silverBorder]:\n            chainId === CHAIN_ID_SOLANA ||\n            chainId === CHAIN_ID_POLYGON ||\n            chainId === CHAIN_ID_AVAX,\n          [classes.hidden]: isLoading,\n        })}\n        elevation={10}\n      >\n        <div\n          className={clsx(classes.cardInset, {\n            [classes.eth]:\n              chainId === CHAIN_ID_ETH ||\n              chainId === CHAIN_ID_ETHEREUM_ROPSTEN ||\n              chainId === CHAIN_ID_AVAX, //TODO: give avax it's own bg\n            [classes.bsc]: chainId === CHAIN_ID_BSC,\n            [classes.solana]: chainId === CHAIN_ID_SOLANA,\n            [classes.polygon]: chainId === CHAIN_ID_POLYGON,\n          })}\n        >\n          <CardContent className={classes.textContent}>\n            {metadata.nftName ? (\n              <Typography className={classes.title}>\n                {metadata.nftName}\n              </Typography>\n            ) : (\n              <div className={classes.title} />\n            )}\n            <SmartAddress\n              chainId={chainId}\n              parsedTokenAccount={value}\n              noGutter\n              noUnderline\n            />\n            <LogoIcon chainId={chainId} />\n          </CardContent>\n          <CardMedia\n            className={clsx(classes.mediaContent, {\n              [classes.silverMediaBorder]:\n                chainId === CHAIN_ID_SOLANA ||\n                chainId === CHAIN_ID_POLYGON ||\n                chainId === CHAIN_ID_AVAX,\n            })}\n          >\n            {media}\n          </CardMedia>\n          <CardContent className={classes.detailsContent}>\n            {metadata.description ? (\n              <Typography variant=\"body2\" className={classes.description}>\n                {metadata.description}\n              </Typography>\n            ) : null}\n            {value.tokenId ? (\n              <Typography className={classes.tokenId} align=\"right\">\n                <Tooltip title=\"Copy\" arrow>\n                  <span onClick={copyTokenId}>\n                    {value.tokenId.length > 18\n                      ? `#${value.tokenId.substr(0, 16)}...`\n                      : `#${value.tokenId}`}\n                  </span>\n                </Tooltip>\n              </Typography>\n            ) : null}\n          </CardContent>\n        </div>\n      </Card>\n    </>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  Button,\n  CircularProgress,\n  createStyles,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  makeStyles,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { InfoOutlined, Launch } from \"@material-ui/icons\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { AVAILABLE_MARKETS_URL, CHAINS_BY_ID } from \"../../utils/consts\";\nimport { shortenAddress } from \"../../utils/solana\";\nimport NFTViewer from \"./NFTViewer\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    alignCenter: {\n      textAlign: \"center\",\n    },\n    optionContainer: {\n      padding: 0,\n    },\n    optionContent: {\n      padding: theme.spacing(1),\n    },\n    tokenList: {\n      maxHeight: theme.spacing(80), //TODO smarter\n      height: theme.spacing(80),\n      overflow: \"auto\",\n    },\n    dialogContent: {\n      overflowX: \"hidden\",\n    },\n    selectionButtonContainer: {\n      //display: \"flex\",\n      textAlign: \"center\",\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    selectionButton: {\n      maxWidth: \"100%\",\n      width: theme.breakpoints.values.sm,\n    },\n    tokenOverviewContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      \"& div\": {\n        margin: theme.spacing(1),\n        flexBasis: \"25%\",\n        \"&$tokenImageContainer\": {\n          maxWidth: 40,\n        },\n        \"&$tokenMarketsList\": {\n          marginTop: theme.spacing(-0.5),\n          marginLeft: 0,\n          flexBasis: \"100%\",\n        },\n        \"&:last-child\": {\n          textAlign: \"right\",\n        },\n        flexShrink: 1,\n      },\n      flexWrap: \"wrap\",\n    },\n    tokenImageContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: 40,\n    },\n    tokenImage: {\n      maxHeight: \"2.5rem\", //Eyeballing this based off the text size\n    },\n    tokenMarketsList: {\n      order: 1,\n      textAlign: \"left\",\n      width: \"100%\",\n      \"& > .MuiButton-root\": {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n      },\n    },\n    migrationAlert: {\n      width: \"100%\",\n      \"& .MuiAlert-message\": {\n        width: \"100%\",\n      },\n    },\n    flexTitle: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n    grower: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport const balancePretty = (uiString: string) => {\n  const numberString = uiString.split(\".\")[0];\n  const bignum = BigNumber.from(numberString);\n  if (bignum.gte(1000000)) {\n    return numberString.substring(0, numberString.length - 6) + \" M\";\n  } else if (uiString.length > 8) {\n    return uiString.substr(0, 8);\n  } else {\n    return uiString;\n  }\n};\n\nconst noClickThrough = (e: any) => {\n  e.stopPropagation();\n};\n\nexport const BasicAccountRender = (\n  account: MarketParsedTokenAccount,\n  isMigrationEligible: (address: string) => boolean,\n  nft: boolean,\n  displayBalance?: (account: NFTParsedTokenAccount) => boolean\n) => {\n  const { data: marketsData } = useMarketsMap(false);\n  const classes = useStyles();\n  const mintPrettyString = shortenAddress(account.mintKey);\n  const uri = nft ? account.image_256 : account.logo || account.uri;\n  const symbol = account.symbol || \"Unknown\";\n  const name = account.name || \"Unknown\";\n  const tokenId = account.tokenId;\n  const shouldDisplayBalance = !displayBalance || displayBalance(account);\n\n  const nftContent = (\n    <div className={classes.tokenOverviewContainer}>\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography>{symbol}</Typography>\n        <Typography>{name}</Typography>\n      </div>\n      <div>\n        <Typography>{mintPrettyString}</Typography>\n        <Typography style={{ wordBreak: \"break-all\" }}>{tokenId}</Typography>\n      </div>\n    </div>\n  );\n\n  const tokenContent = (\n    <div className={classes.tokenOverviewContainer}>\n      {account.markets ? (\n        <div className={classes.tokenMarketsList}>\n          {account.markets.map((market) =>\n            marketsData?.markets?.[market] ? (\n              <Button\n                key={market}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                endIcon={<Launch />}\n                href={marketsData.markets[market].link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={noClickThrough}\n              >\n                {marketsData.markets[market].name}\n              </Button>\n            ) : null\n          )}\n        </div>\n      ) : null}\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography variant=\"subtitle1\">{symbol}</Typography>\n      </div>\n      <div>\n        {\n          <Typography variant=\"body1\">\n            {account.isNativeAsset ? \"Native\" : mintPrettyString}\n          </Typography>\n        }\n      </div>\n      <div>\n        {shouldDisplayBalance ? (\n          <>\n            <Typography variant=\"body2\">{\"Balance\"}</Typography>\n            <Typography variant=\"h6\">\n              {balancePretty(account.uiAmountString)}\n            </Typography>\n          </>\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n\n  const migrationRender = (\n    <div className={classes.migrationAlert}>\n      <Alert severity=\"warning\">\n        <Typography variant=\"body2\">\n          This is a legacy asset eligible for migration.\n        </Typography>\n        <div>{tokenContent}</div>\n      </Alert>\n    </div>\n  );\n\n  return nft\n    ? nftContent\n    : isMigrationEligible(account.mintKey)\n    ? migrationRender\n    : tokenContent;\n};\n\ninterface MarketParsedTokenAccount extends NFTParsedTokenAccount {\n  markets?: string[];\n}\n\nexport default function TokenPicker({\n  value,\n  options,\n  RenderOption,\n  onChange,\n  isValidAddress,\n  getAddress,\n  disabled,\n  resetAccounts,\n  nft,\n  chainId,\n  error,\n  showLoader,\n  useTokenId,\n}: {\n  value: NFTParsedTokenAccount | null;\n  options: NFTParsedTokenAccount[];\n  RenderOption: ({\n    account,\n  }: {\n    account: NFTParsedTokenAccount;\n  }) => JSX.Element;\n  onChange: (newValue: NFTParsedTokenAccount | null) => Promise<void>;\n  isValidAddress?: (address: string) => boolean;\n  getAddress?: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount>;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  nft: boolean;\n  chainId: ChainId;\n  error?: string;\n  showLoader?: boolean;\n  useTokenId?: boolean;\n}) {\n  const classes = useStyles();\n  const [holderString, setHolderString] = useState(\"\");\n  const [tokenIdHolderString, setTokenIdHolderString] = useState(\"\");\n  const [loadingError, setLoadingError] = useState(\"\");\n  const [isLocalLoading, setLocalLoading] = useState(false);\n  const [dialogIsOpen, setDialogIsOpen] = useState(false);\n  const [selectionError, setSelectionError] = useState(\"\");\n\n  const targetChain = useSelector(selectTransferTargetChain);\n  const { data: marketsData } = useMarketsMap(true);\n\n  const openDialog = useCallback(() => {\n    setHolderString(\"\");\n    setSelectionError(\"\");\n    setDialogIsOpen(true);\n  }, []);\n\n  const closeDialog = useCallback(() => {\n    setDialogIsOpen(false);\n  }, []);\n\n  const handleSelectOption = useCallback(\n    async (option: NFTParsedTokenAccount) => {\n      setSelectionError(\"\");\n      let newOption = null;\n      try {\n        //Covalent balances tend to be stale, so we make an attempt to correct it at selection time.\n        if (getAddress && !option.isNativeAsset) {\n          newOption = await getAddress(option.mintKey, option.tokenId);\n          newOption = {\n            ...option,\n            ...newOption,\n            // keep logo and uri from covalent / market list / etc (otherwise would be overwritten by undefined)\n            logo: option.logo || newOption.logo,\n            uri: option.uri || newOption.uri,\n          } as NFTParsedTokenAccount;\n        } else {\n          newOption = option;\n        }\n        await onChange(newOption);\n        closeDialog();\n      } catch (e) {\n        console.error(e);\n        setSelectionError(\n          \"Unable to retrieve required information about this token. Ensure your wallet is connected, then refresh the list.\"\n        );\n      }\n    },\n    [getAddress, onChange, closeDialog]\n  );\n\n  const resetAccountsWrapper = useCallback(() => {\n    setHolderString(\"\");\n    setTokenIdHolderString(\"\");\n    setSelectionError(\"\");\n    resetAccounts && resetAccounts();\n  }, [resetAccounts]);\n\n  const searchFilter = useCallback(\n    (option: NFTParsedTokenAccount) => {\n      if (!holderString) {\n        return true;\n      }\n      const optionString = (\n        (option.publicKey || \"\") +\n        \" \" +\n        (option.mintKey || \"\") +\n        \" \" +\n        (option.symbol || \"\") +\n        \" \" +\n        (option.name || \" \")\n      ).toLowerCase();\n      const searchString = holderString.toLowerCase();\n      return optionString.includes(searchString);\n    },\n    [holderString]\n  );\n\n  const marketChainTokens = marketsData?.tokens?.[chainId];\n  const featuredMarkets = marketsData?.tokenMarkets?.[chainId]?.[targetChain];\n\n  const featuredOptions = useMemo(() => {\n    // only tokens have featured markets\n    if (!nft && featuredMarkets) {\n      const ownedMarketTokens = options\n        .filter(\n          (option: NFTParsedTokenAccount) => featuredMarkets?.[option.mintKey]\n        )\n        .map(\n          (option) =>\n            ({\n              ...option,\n              markets: featuredMarkets[option.mintKey].markets,\n            } as MarketParsedTokenAccount)\n        );\n      return [\n        ...ownedMarketTokens,\n        ...Object.keys(featuredMarkets)\n          .filter(\n            (mintKey) =>\n              !ownedMarketTokens.find((option) => option.mintKey === mintKey)\n          )\n          .map(\n            (mintKey) =>\n              ({\n                amount: \"0\",\n                decimals: 0,\n                markets: featuredMarkets[mintKey].markets,\n                mintKey,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\", // if we can't look up by address, we can select the market that isn't in the list of holdings, but can't proceed since the balance will be 0\n                symbol: marketChainTokens?.[mintKey]?.symbol,\n                logo: marketChainTokens?.[mintKey]?.logo,\n              } as MarketParsedTokenAccount)\n          ),\n      ].filter(searchFilter);\n    }\n    return [];\n  }, [nft, marketChainTokens, featuredMarkets, options, searchFilter]);\n\n  const nonFeaturedOptions = useMemo(() => {\n    return options.filter(\n      (option: NFTParsedTokenAccount) =>\n        searchFilter(option) &&\n        // only tokens have featured markets\n        (nft || !featuredMarkets?.[option.mintKey])\n    );\n  }, [nft, options, featuredMarkets, searchFilter]);\n\n  const localFind = useCallback(\n    (address: string, tokenIdHolderString: string) => {\n      return options.find(\n        (x) =>\n          x.mintKey === address &&\n          (!tokenIdHolderString || x.tokenId === tokenIdHolderString)\n      );\n    },\n    [options]\n  );\n\n  //This is the effect which allows pasting an address in directly\n  useEffect(() => {\n    if (!isValidAddress || !getAddress) {\n      return;\n    }\n    if (useTokenId && !tokenIdHolderString) {\n      return;\n    }\n    setLoadingError(\"\");\n    let cancelled = false;\n    if (isValidAddress(holderString)) {\n      const option = localFind(holderString, tokenIdHolderString);\n      if (option) {\n        handleSelectOption(option);\n        return () => {\n          cancelled = true;\n        };\n      }\n      setLocalLoading(true);\n      setLoadingError(\"\");\n      getAddress(\n        holderString,\n        useTokenId ? tokenIdHolderString : undefined\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            if (result) {\n              handleSelectOption(result);\n            }\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            setLoadingError(\"Could not find the specified address.\");\n          }\n        }\n      );\n    }\n    return () => (cancelled = true);\n  }, [\n    holderString,\n    isValidAddress,\n    getAddress,\n    handleSelectOption,\n    localFind,\n    tokenIdHolderString,\n    useTokenId,\n  ]);\n\n  //TODO reset button\n  //TODO debounce & save hotloaded options as an option before automatically selecting\n  //TODO sigfigs function on the balance strings\n\n  const localLoader = (\n    <div className={classes.alignCenter}>\n      <CircularProgress />\n      <Typography variant=\"body2\">\n        {showLoader ? \"Loading available tokens\" : \"Searching for results\"}\n      </Typography>\n    </div>\n  );\n\n  const displayLocalError = (\n    <div className={classes.alignCenter}>\n      <Typography variant=\"body2\" color=\"error\">\n        {loadingError || selectionError}\n      </Typography>\n    </div>\n  );\n\n  const dialog = (\n    <Dialog\n      onClose={closeDialog}\n      aria-labelledby=\"simple-dialog-title\"\n      open={dialogIsOpen}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle>\n        <div id=\"simple-dialog-title\" className={classes.flexTitle}>\n          <Typography variant=\"h5\">Select a token</Typography>\n          <div className={classes.grower} />\n          <Tooltip title=\"Reload tokens\">\n            <IconButton onClick={resetAccountsWrapper}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        <Alert severity=\"info\">\n          You should always check for markets and liquidity before sending\n          tokens.{\" \"}\n          <Link\n            href={AVAILABLE_MARKETS_URL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Click here to see available markets for wrapped tokens.\n          </Link>\n        </Alert>\n        <TextField\n          variant=\"outlined\"\n          label=\"Search name or paste address\"\n          value={holderString}\n          onChange={(event) => setHolderString(event.target.value)}\n          fullWidth\n          margin=\"normal\"\n        />\n        {useTokenId ? (\n          <TextField\n            variant=\"outlined\"\n            label=\"Token Id\"\n            value={tokenIdHolderString}\n            onChange={(event) => setTokenIdHolderString(event.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n        ) : null}\n        {isLocalLoading || showLoader ? (\n          localLoader\n        ) : loadingError || selectionError ? (\n          displayLocalError\n        ) : (\n          <List component=\"div\" className={classes.tokenList}>\n            {featuredOptions.length ? (\n              <>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Featured {CHAINS_BY_ID[chainId].name} &gt;{\" \"}\n                  {CHAINS_BY_ID[targetChain].name} markets{\" \"}\n                  <Tooltip\n                    title={`Markets for these ${CHAINS_BY_ID[chainId].name} tokens exist for the corresponding tokens on ${CHAINS_BY_ID[targetChain].name}`}\n                  >\n                    <InfoOutlined\n                      fontSize=\"small\"\n                      style={{ verticalAlign: \"text-bottom\" }}\n                    />\n                  </Tooltip>\n                </Typography>\n                {featuredOptions.map((option) => {\n                  return (\n                    <ListItem\n                      component=\"div\"\n                      button\n                      onClick={() => handleSelectOption(option)}\n                      key={\n                        option.publicKey +\n                        option.mintKey +\n                        (option.tokenId || \"\")\n                      }\n                    >\n                      <RenderOption account={option} />\n                    </ListItem>\n                  );\n                })}\n                {nonFeaturedOptions.length ? (\n                  <>\n                    <Divider style={{ marginTop: 8, marginBottom: 16 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Other Assets\n                    </Typography>\n                  </>\n                ) : null}\n              </>\n            ) : null}\n            {nonFeaturedOptions.map((option) => {\n              return (\n                <ListItem\n                  component=\"div\"\n                  button\n                  onClick={() => handleSelectOption(option)}\n                  key={\n                    option.publicKey + option.mintKey + (option.tokenId || \"\")\n                  }\n                >\n                  <RenderOption account={option} />\n                </ListItem>\n              );\n            })}\n            {featuredOptions.length || nonFeaturedOptions.length ? null : (\n              <div className={classes.alignCenter}>\n                <Typography>No results found</Typography>\n              </div>\n            )}\n          </List>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n\n  const selectionChip = (\n    <div className={classes.selectionButtonContainer}>\n      <Button\n        onClick={openDialog}\n        disabled={disabled}\n        variant=\"outlined\"\n        endIcon={<KeyboardArrowDownIcon />}\n        className={classes.selectionButton}\n      >\n        {value ? (\n          <RenderOption account={value} />\n        ) : (\n          <Typography color=\"textSecondary\">Select a token</Typography>\n        )}\n      </Button>\n    </div>\n  );\n\n  return (\n    <>\n      {dialog}\n      {value && nft ? <NFTViewer value={value} chainId={chainId} /> : null}\n      {selectionChip}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  NFTImplementation,\n  TokenImplementation,\n} from \"@certusone/wormhole-sdk\";\nimport { WormholeAbi__factory } from \"@certusone/wormhole-sdk/lib/esm/ethers-contracts/abi\";\nimport { getAddress as getEthAddress } from \"@ethersproject/address\";\nimport React, { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  getMigrationAssetMap,\n  WORMHOLE_V1_ETH_ADDRESS,\n} from \"../../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  ethTokenToParsedTokenAccount,\n  getEthereumNFT,\n  getEthereumToken,\n  isValidEthereumAddress,\n} from \"../../utils/ethereum\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\nconst isWormholev1 = (provider: any, address: string, chainId: ChainId) => {\n  if (chainId !== CHAIN_ID_ETH) {\n    return Promise.resolve(false);\n  }\n  const connection = WormholeAbi__factory.connect(\n    WORMHOLE_V1_ETH_ADDRESS,\n    provider\n  );\n  return connection.isWrappedAsset(address);\n};\n\ntype EthereumSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  chainId: ChainId;\n  nft?: boolean;\n};\n\nexport default function EvmTokenPicker(\n  props: EthereumSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    tokenAccounts,\n    disabled,\n    resetAccounts,\n    chainId,\n    nft,\n  } = props;\n  const { provider, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const selectedTokenAccount: NFTParsedTokenAccount | undefined = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n\n  const shouldDisplayBalance = useCallback(\n    (tokenAccount: NFTParsedTokenAccount) => {\n      const selectedMintMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.mintKey.toLowerCase() ===\n          tokenAccount.mintKey.toLowerCase();\n      //added just in case we start displaying NFT balances again.\n      const selectedTokenIdMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.tokenId === tokenAccount.tokenId;\n      return !!(\n        tokenAccount.isNativeAsset || //The native asset amount isn't taken from covalent, so can be trusted.\n        (selectedMintMatch && selectedTokenIdMatch)\n      );\n    },\n    [selectedTokenAccount]\n  );\n\n  const isMigrationEligible = useCallback(\n    (address: string) => {\n      const assetMap = getMigrationAssetMap(chainId);\n      return !!assetMap.get(getEthAddress(address));\n    },\n    [chainId]\n  );\n\n  const getAddress: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount> = useCallback(\n    async (address: string, tokenId?: string) => {\n      if (provider && signerAddress && isReady) {\n        try {\n          const tokenAccount = await (nft\n            ? getEthereumNFT(address, provider)\n            : getEthereumToken(address, provider));\n          if (!tokenAccount) {\n            return Promise.reject(\"Could not find the specified token.\");\n          }\n          if (nft && !tokenId) {\n            return Promise.reject(\"Token ID is required.\");\n          } else if (nft && tokenId) {\n            return ethNFTToNFTParsedTokenAccount(\n              tokenAccount as NFTImplementation,\n              tokenId,\n              signerAddress\n            );\n          } else {\n            return ethTokenToParsedTokenAccount(\n              tokenAccount as TokenImplementation,\n              signerAddress\n            );\n          }\n        } catch (e) {\n          return Promise.reject(\"Unable to retrive the specific token.\");\n        }\n      } else {\n        return Promise.reject({ error: \"Wallet is not connected.\" });\n      }\n    },\n    [isReady, nft, provider, signerAddress]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      let v1 = false;\n      try {\n        v1 = await isWormholev1(provider, account.publicKey, chainId);\n      } catch (e) {\n        //For now, just swallow this one.\n      }\n      const migration = isMigrationEligible(account.publicKey);\n      if (v1 === true && !migration) {\n        throw new Error(\n          \"Wormhole v1 assets cannot be transferred with this bridge.\"\n        );\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [chainId, onChange, provider, isMigrationEligible]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(\n        account,\n        isMigrationEligible,\n        nft || false,\n        shouldDisplayBalance\n      );\n    },\n    [nft, isMigrationEligible, shouldDisplayBalance]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      useTokenId={nft}\n      onChange={onChangeWrapper}\n      isValidAddress={isValidEthereumAddress}\n      getAddress={getAddress}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={tokenAccounts?.isFetching}\n      nft={nft || false}\n      chainId={chainId}\n    />\n  );\n}\n","import {\n  createStyles,\n  IconButton,\n  makeStyles,\n  Tooltip,\n} from \"@material-ui/core\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    inlineContentWrapper: {\n      display: \"inline-block\",\n      flexGrow: 1,\n    },\n    flexWrapper: {\n      \"& > *\": {\n        margin: \".5rem\",\n      },\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  })\n);\n\nexport default function RefreshButtonWrapper({\n  children,\n  callback,\n}: {\n  children: JSX.Element;\n  callback: () => any;\n}) {\n  const classes = useStyles();\n\n  const refreshWrapper = (\n    <div className={classes.flexWrapper}>\n      <div className={classes.inlineContentWrapper}>{children}</div>\n      <Tooltip title=\"Reload Tokens\">\n        <IconButton onClick={callback}>\n          <RefreshIcon />\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n\n  return refreshWrapper;\n}\n","import { ParsedTokenAccount } from \"../store/transferSlice\";\n\nexport const sortParsedTokenAccounts = (\n  a: ParsedTokenAccount,\n  b: ParsedTokenAccount\n) =>\n  a.isNativeAsset && !b.isNativeAsset\n    ? -1\n    : !a.isNativeAsset && b.isNativeAsset\n    ? 1\n    : a.symbol && b.symbol\n    ? a.symbol.localeCompare(b.symbol)\n    : a.symbol\n    ? -1\n    : b.symbol\n    ? 1\n    : 0;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport React, { useCallback, useMemo } from \"react\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  MIGRATION_ASSET_MAP,\n  WORMHOLE_V1_MINT_AUTHORITY,\n} from \"../../utils/consts\";\nimport { ExtractedMintInfo } from \"../../utils/solana\";\nimport { sortParsedTokenAccounts } from \"../../utils/sort\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype SolanaSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: NFTParsedTokenAccount | null) => void;\n  accounts: DataWrapper<NFTParsedTokenAccount[]> | null | undefined;\n  disabled: boolean;\n  mintAccounts:\n    | DataWrapper<Map<string, ExtractedMintInfo | null> | undefined>\n    | undefined;\n  resetAccounts: (() => void) | undefined;\n  nft?: boolean;\n};\n\nconst isMigrationEligible = (address: string) => {\n  return !!MIGRATION_ASSET_MAP.get(address);\n};\n\nexport default function SolanaSourceTokenSelector(\n  props: SolanaSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    disabled,\n    resetAccounts,\n    nft,\n    accounts,\n    mintAccounts,\n  } = props;\n  const tokenMap = useSolanaTokenMap();\n  const mintAddresses = useMemo(() => {\n    const output: string[] = [];\n    mintAccounts?.data?.forEach(\n      (mintAuth, mintAddress) => mintAddress && output.push(mintAddress)\n    );\n    return output;\n  }, [mintAccounts?.data]);\n  const metaplex = useMetaplexData(mintAddresses);\n\n  const memoizedTokenMap: Map<String, TokenInfo> = useMemo(() => {\n    const output = new Map<String, TokenInfo>();\n\n    if (tokenMap.data) {\n      for (const data of tokenMap.data) {\n        if (data && data.address) {\n          output.set(data.address, data);\n        }\n      }\n    }\n\n    return output;\n  }, [tokenMap]);\n\n  const getLogo = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.logo) ||\n        memoizedTokenMap.get(account.mintKey)?.logoURI ||\n        metaplex.data?.get(account.mintKey)?.data?.uri ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getSymbol = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.symbol) ||\n        memoizedTokenMap.get(account.mintKey)?.symbol ||\n        metaplex.data?.get(account.mintKey)?.data?.symbol ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getName = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.name) ||\n        memoizedTokenMap.get(account.mintKey)?.name ||\n        metaplex.data?.get(account.mintKey)?.data?.name ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  //This exists to remove NFTs from the list of potential options. It requires reading the metaplex data, so it would be\n  //difficult to do before this point.\n  const filteredOptions = useMemo(() => {\n    const array = accounts?.data || [];\n    const tokenList = array.filter((x) => {\n      const zeroBalance = x.amount === \"0\";\n      if (zeroBalance) {\n        return false;\n      }\n      const isNFT =\n        x.decimals === 0 && metaplex.data?.get(x.mintKey)?.data?.uri;\n      const is721CompatibleNFT =\n        isNFT && mintAccounts?.data?.get(x.mintKey)?.supply === \"1\";\n      return nft ? is721CompatibleNFT : !isNFT;\n    });\n    tokenList.sort(sortParsedTokenAccounts);\n    return tokenList;\n  }, [mintAccounts?.data, metaplex.data, nft, accounts]);\n\n  const accountsWithMetadata = useMemo(() => {\n    return filteredOptions.map((account) => {\n      const logo = getLogo(account);\n      const symbol = getSymbol(account);\n      const name = getName(account);\n\n      const uri = getLogo(account);\n\n      return {\n        ...account,\n        name,\n        symbol,\n        logo,\n        uri,\n      };\n    });\n  }, [filteredOptions, getLogo, getName, getSymbol]);\n\n  const isLoading =\n    accounts?.isFetching || metaplex.isFetching || tokenMap.isFetching;\n\n  const isWormholev1 = useCallback(\n    (address: string) => {\n      //This is a v1 wormhole token on testnet\n      //const testAddress = \"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\";\n\n      if (!props.mintAccounts?.data) {\n        return true; //These should never be null by this point\n      }\n      const mintAuthority = props.mintAccounts.data.get(address)?.mintAuthority;\n\n      if (!mintAuthority) {\n        return true; //We should never fail to pull the mint of an account.\n      }\n\n      if (mintAuthority === WORMHOLE_V1_MINT_AUTHORITY) {\n        return true; //This means the mint was created by the wormhole v1 contract, and we want to disallow its transfer.\n      }\n\n      return false;\n    },\n    [props.mintAccounts]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (newValue: NFTParsedTokenAccount | null) => {\n      let v1 = false;\n      if (newValue === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      try {\n        v1 = isWormholev1(newValue.mintKey);\n      } catch (e) {\n        //swallow for now\n      }\n\n      if (v1) {\n        Promise.reject(\n          \"Wormhole v1 assets should not be transferred with this bridge.\"\n        );\n      }\n\n      onChange(newValue);\n      return Promise.resolve();\n    },\n    [isWormholev1, onChange]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, isMigrationEligible, nft || false);\n    },\n    [nft]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={accountsWithMetadata}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={nft || false}\n      chainId={CHAIN_ID_SOLANA}\n    />\n  );\n}\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { MutableRefObject, useEffect, useMemo, useState } from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport interface TerraNativeBalances {\n  [index: string]: string;\n}\n\nexport default function useTerraNativeBalances(\n  walletAddress?: string,\n  refreshRef?: MutableRefObject<() => void>\n) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [balances, setBalances] = useState<TerraNativeBalances | undefined>({});\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    if (refreshRef) {\n      refreshRef.current = () => {\n        setRefresh(true);\n      };\n    }\n  }, [refreshRef]);\n  useEffect(() => {\n    setRefresh(false);\n    if (walletAddress) {\n      setIsLoading(true);\n      setBalances(undefined);\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.bank\n        .balance(walletAddress)\n        .then((coins) => {\n          // coins doesn't support reduce\n          const balancePairs = coins.map(({ amount, denom }) => [\n            denom,\n            amount,\n          ]);\n          const balance = balancePairs.reduce((obj, current) => {\n            obj[current[0].toString()] = current[1].toString();\n            return obj;\n          }, {} as TerraNativeBalances);\n          setIsLoading(false);\n          setBalances(balance);\n        })\n        .catch((e) => {\n          setIsLoading(false);\n          setBalances(undefined);\n        });\n    } else {\n      setIsLoading(false);\n      setBalances(undefined);\n    }\n  }, [walletAddress, refresh]);\n  const value = useMemo(() => ({ isLoading, balances }), [isLoading, balances]);\n  return value;\n}\n","import { CHAIN_ID_TERRA, isNativeDenom } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useTerraNativeBalances from \"../../hooks/useTerraNativeBalances\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { SUPPORTED_TERRA_TOKENS, TERRA_HOST } from \"../../utils/consts\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  isValidTerraAddress,\n  NATIVE_TERRA_DECIMALS,\n} from \"../../utils/terra\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype TerraTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function TerraTokenPicker(props: TerraTokenPickerProps) {\n  const { value, onChange, disabled } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_TERRA);\n  const nativeRefresh = useRef<() => void>(() => {});\n  const { balances, isLoading: nativeIsLoading } = useTerraNativeBalances(\n    walletAddress,\n    nativeRefresh\n  );\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const terraTokenArray = useMemo(() => {\n    const balancesItems =\n      balances && walletAddress\n        ? Object.keys(balances).map((denom) =>\n            // ({\n            //   protocol: \"native\",\n            //   symbol: formatNativeDenom(denom),\n            //   token: denom,\n            //   icon: getNativeTerraIcon(formatNativeDenom(denom)),\n            //   balance: balances[denom],\n            // } as TerraTokenMetadata)\n\n            //TODO support non-natives in the SUPPORTED_TERRA_TOKENS\n            //This token account makes a lot of assumptions\n            createParsedTokenAccount(\n              walletAddress,\n              denom,\n              balances[denom], //amount\n              NATIVE_TERRA_DECIMALS, //TODO actually get decimals rather than hardcode\n              0, //uiAmount is unused\n              formatUnits(balances[denom], NATIVE_TERRA_DECIMALS), //uiAmountString\n              formatNativeDenom(denom), // symbol\n              undefined, //name\n              getNativeTerraIcon(formatNativeDenom(denom)), //logo\n              true //is native asset\n            )\n          )\n        : [];\n    return balancesItems.filter((metadata) =>\n      SUPPORTED_TERRA_TOKENS.includes(metadata.mintKey)\n    );\n    // const values = tokenMap.data?.mainnet;\n    // const tokenMapItems = Object.values(values || {}) || [];\n    // return [...balancesItems, ...tokenMapItems];\n  }, [\n    walletAddress,\n    balances,\n    // tokenMap\n  ]);\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupTerraAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Wallet not connected\");\n      }\n      const lcd = new LCDClient(TERRA_HOST);\n      return lcd.wasm\n        .contractQuery(lookupAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(lookupAsset, {\n              balance: {\n                address: walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                return createParsedTokenAccount(\n                  walletAddress,\n                  lookupAsset,\n                  balance.balance.toString(),\n                  info.decimals,\n                  Number(formatUnits(balance.balance, info.decimals)),\n                  formatUnits(balance.balance, info.decimals),\n                  info.symbol,\n                  info.name\n                );\n              } else {\n                throw new Error(\"Failed to retrieve Terra account.\");\n              }\n            })\n        )\n        .catch(() => {\n          return Promise.reject();\n        });\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    return isValidTerraAddress(address) && !isNativeDenom(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={terraTokenArray || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupTerraAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_TERRA}\n    />\n  );\n}\n","//import Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetSourceParsedTokens from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  setSourceParsedTokenAccount as setNFTSourceParsedTokenAccount,\n  setSourceWalletAddress as setNFTSourceWalletAddress,\n} from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport {\n  ParsedTokenAccount,\n  setSourceParsedTokenAccount as setTransferSourceParsedTokenAccount,\n  setSourceWalletAddress as setTransferSourceWalletAddress,\n} from \"../../store/transferSlice\";\nimport EvmTokenPicker from \"./EvmTokenPicker\";\nimport RefreshButtonWrapper from \"./RefreshButtonWrapper\";\nimport SolanaTokenPicker from \"./SolanaTokenPicker\";\nimport TerraTokenPicker from \"./TerraTokenPicker\";\n\ntype TokenSelectorProps = {\n  disabled: boolean;\n  nft?: boolean;\n};\n\nexport const TokenSelector = (props: TokenSelectorProps) => {\n  const { disabled, nft } = props;\n  const dispatch = useDispatch();\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceParsedTokenAccount = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n  const walletIsReady = useIsWalletReady(lookupChain);\n\n  const setSourceParsedTokenAccount = nft\n    ? setNFTSourceParsedTokenAccount\n    : setTransferSourceParsedTokenAccount;\n  const setSourceWalletAddress = nft\n    ? setNFTSourceWalletAddress\n    : setTransferSourceWalletAddress;\n\n  const handleOnChange = useCallback(\n    (newTokenAccount: ParsedTokenAccount | null) => {\n      if (!newTokenAccount) {\n        dispatch(setSourceParsedTokenAccount(undefined));\n        dispatch(setSourceWalletAddress(undefined));\n      } else if (newTokenAccount !== undefined && walletIsReady.walletAddress) {\n        dispatch(setSourceParsedTokenAccount(newTokenAccount));\n        dispatch(setSourceWalletAddress(walletIsReady.walletAddress));\n      }\n    },\n    [\n      dispatch,\n      walletIsReady,\n      setSourceParsedTokenAccount,\n      setSourceWalletAddress,\n    ]\n  );\n\n  const maps = useGetSourceParsedTokens(nft);\n  const resetAccountWrapper = maps?.resetAccounts || (() => {}); //This should never happen.\n\n  //This is only for errors so bad that we shouldn't even mount the component\n  const fatalError =\n    isEVMChain(lookupChain) &&\n    lookupChain !== CHAIN_ID_TERRA &&\n    maps?.tokenAccounts?.error; //Terra & ETH can proceed because it has advanced mode\n\n  const content = fatalError ? (\n    <RefreshButtonWrapper callback={resetAccountWrapper}>\n      <Typography>{fatalError}</Typography>\n    </RefreshButtonWrapper>\n  ) : lookupChain === CHAIN_ID_SOLANA ? (\n    <SolanaTokenPicker\n      value={sourceParsedTokenAccount || null}\n      onChange={handleOnChange}\n      disabled={disabled}\n      accounts={maps?.tokenAccounts}\n      mintAccounts={maps?.mintAccounts}\n      resetAccounts={maps?.resetAccounts}\n      nft={nft}\n    />\n  ) : isEVMChain(lookupChain) ? (\n    <EvmTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      tokenAccounts={maps?.tokenAccounts}\n      resetAccounts={maps?.resetAccounts}\n      chainId={lookupChain}\n      nft={nft}\n    />\n  ) : lookupChain === CHAIN_ID_TERRA ? (\n    <TerraTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : (\n    <TextField\n      variant=\"outlined\"\n      placeholder=\"Asset\"\n      fullWidth\n      value={\"Not Implemented\"}\n      disabled={true}\n    />\n  );\n\n  return <div>{content}</div>;\n};\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { incrementStep, setSourceChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsSourceComplete,\n  selectNFTShouldLockFields,\n  selectNFTSourceBalanceString,\n  selectNFTSourceChain,\n  selectNFTSourceError,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const uiAmountString = useSelector(selectNFTSourceBalanceString);\n  const error = useSelector(selectNFTSourceError);\n  const isSourceComplete = useSelector(selectNFTIsSourceComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select an NFT to send through the Wormhole NFT Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/nft-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              endIcon={<VerifiedUser />}\n            >\n              NFT Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS_WITH_NFT_SUPPORT}\n      />\n      {isEVMChain(sourceChain) ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs which implement ERC-721 are supported.\n        </Alert>\n      ) : null}\n      {sourceChain === CHAIN_ID_SOLANA ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs with a supply of 1 are supported.\n        </Alert>\n      ) : null}\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} nft={true} />\n        </div>\n      ) : null}\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer 1 NFT of</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        <span>from</span>\n        <SmartAddress\n          chainId={sourceChain}\n          address={sourceParsedTokenAccount?.publicKey}\n        />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n      {sourceParsedTokenAccount ? (\n        <NFTViewer value={sourceParsedTokenAccount} chainId={sourceChain} />\n      ) : null}\n    </>\n  );\n}\n","import {\n  canonicalAddress,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { arrayify, zeroPad } from \"@ethersproject/bytes\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setTargetAddressHex as setNFTTargetAddressHex } from \"../store/nftSlice\";\nimport {\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n  selectTransferTargetParsedTokenAccount,\n} from \"../store/selectors\";\nimport { setTargetAddressHex as setTransferTargetAddressHex } from \"../store/transferSlice\";\n\nfunction useSyncTargetAddress(shouldFire: boolean, nft?: boolean) {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const { signerAddress } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const targetAsset = useSelector(\n    nft ? selectNFTTargetAsset : selectTransferTargetAsset\n  );\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const targetTokenAccountPublicKey = targetParsedTokenAccount?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const setTargetAddressHex = nft\n    ? setNFTTargetAddressHex\n    : setTransferTargetAddressHex;\n  useEffect(() => {\n    if (shouldFire) {\n      let cancelled = false;\n      if (isEVMChain(targetChain) && signerAddress) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(zeroPad(arrayify(signerAddress), 32))\n          )\n        );\n      }\n      // TODO: have the user explicitly select an account on solana\n      else if (\n        !nft && // only support existing, non-derived token accounts for token transfers (nft flow doesn't check balance)\n        targetChain === CHAIN_ID_SOLANA &&\n        targetTokenAccountPublicKey\n      ) {\n        // use the target's TokenAccount if it exists\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(new PublicKey(targetTokenAccountPublicKey).toBytes(), 32)\n            )\n          )\n        );\n      } else if (targetChain === CHAIN_ID_SOLANA && solPK && targetAsset) {\n        // otherwise, use the associated token account (which we create in the case it doesn't exist)\n        (async () => {\n          try {\n            const associatedTokenAccount =\n              await Token.getAssociatedTokenAddress(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                new PublicKey(targetAsset), // this might error\n                solPK\n              );\n            if (!cancelled) {\n              dispatch(\n                setTargetAddressHex(\n                  uint8ArrayToHex(zeroPad(associatedTokenAccount.toBytes(), 32))\n                )\n              );\n            }\n          } catch (e) {\n            if (!cancelled) {\n              dispatch(setTargetAddressHex(undefined));\n            }\n          }\n        })();\n      } else if (\n        targetChain === CHAIN_ID_TERRA &&\n        terraWallet &&\n        terraWallet.walletAddress\n      ) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(canonicalAddress(terraWallet.walletAddress), 32)\n            )\n          )\n        );\n      } else {\n        dispatch(setTargetAddressHex(undefined));\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    dispatch,\n    shouldFire,\n    targetChain,\n    signerAddress,\n    solPK,\n    targetAsset,\n    targetTokenAccountPublicKey,\n    terraWallet,\n    nft,\n    setTargetAddressHex,\n  ]);\n}\n\nexport default useSyncTargetAddress;\n","import {\n  CHAIN_ID_SOLANA,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTShouldLockFields,\n  selectNFTSourceChain,\n  selectNFTTargetAddressHex,\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectNFTTargetError,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport StepDescription from \"../StepDescription\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const chains = useMemo(\n    () => CHAINS_WITH_NFT_SUPPORT.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAsset = useSelector(selectNFTTargetAsset);\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  let tokenId;\n  try {\n    tokenId =\n      originChain === CHAIN_ID_SOLANA && originAsset\n        ? BigNumber.from(\n            new PublicKey(hexToUint8Array(originAsset)).toBytes()\n          ).toString()\n        : originTokenId;\n  } catch (e) {\n    tokenId = originTokenId;\n  }\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  const error = useSelector(selectNFTTargetError);\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  useSyncTargetAddress(!shouldLockFields, true);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        select\n        fullWidth\n        variant=\"outlined\"\n        value={targetChain}\n        onChange={handleTargetChange}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        className={classes.transferField}\n        value={readableTargetAddress}\n        disabled={true}\n      />\n      {targetAsset !== ethers.constants.AddressZero ? (\n        <>\n          <TextField\n            label=\"Token Address\"\n            fullWidth\n            variant=\"outlined\"\n            className={classes.transferField}\n            value={targetAsset || \"\"}\n            disabled={true}\n          />\n          {isEVMChain(targetChain) ? (\n            <TextField\n              variant=\"outlined\"\n              label=\"TokenId\"\n              fullWidth\n              className={classes.transferField}\n              value={tokenId || \"\"}\n              disabled={true}\n            />\n          ) : null}\n        </>\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your NFT.\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary methodType=\"nft\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete} //|| !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTTargetAddressHex,\n  selectNFTTargetChain,\n} from \"../../store/selectors\";\nimport { hexToNativeString } from \"@certusone/wormhole-sdk\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useSelector(selectNFTTargetAddressHex);\n  const targetAddressNative = hexToNativeString(targetAddress, targetChain);\n\n  const explainerContent =\n    targetChain && targetAddressNative ? (\n      <>\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={targetAddressNative} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport { setStep } from \"../../store/nftSlice\";\nimport {\n  selectNFTActiveStep,\n  selectNFTIsRedeemComplete,\n  selectNFTIsRedeeming,\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n} from \"../../store/selectors\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction NFT() {\n  useCheckIfWormholeWrapped(true);\n  useFetchTargetAsset(true);\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectNFTActiveStep);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const isRedeemComplete = useSelector(selectNFTIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))}>Target</StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled>Send NFT</StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n          >\n            Redeem NFT\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default NFT;\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport {\n  Button,\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { getMetaplexData } from \"../hooks/useMetaplexData\";\nimport { COLORS } from \"../muiTheme\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BETA_CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  getEthereumNFT,\n  isNFT,\n  isValidEthereumAddress,\n} from \"../utils/ethereum\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport NFTViewer from \"./TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  originHeader: {\n    marginTop: theme.spacing(4),\n  },\n  viewButtonWrapper: {\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n  loaderWrapper: {\n    margin: theme.spacing(2),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function NFTOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const { provider, signerAddress } = useEthereumProvider();\n  const [lookupChain, setLookupChain] = useState(CHAIN_ID_ETH);\n  const { isReady, statusMessage } = useIsWalletReady(lookupChain);\n  const [lookupAsset, setLookupAsset] = useState(\"\");\n  const [lookupTokenId, setLookupTokenId] = useState(\"\");\n  const [lookupError, setLookupError] = useState(\"\");\n  const [parsedTokenAccount, setParsedTokenAccount] = useState<\n    NFTParsedTokenAccount | undefined\n  >(undefined);\n  const [originInfo, setOriginInfo] = useState<\n    WormholeWrappedNFTInfo | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleChainChange = useCallback((event) => {\n    setLookupChain(event.target.value);\n  }, []);\n  const handleAssetChange = useCallback((event) => {\n    setLookupAsset(event.target.value);\n  }, []);\n  const handleTokenIdChange = useCallback((event) => {\n    setLookupTokenId(event.target.value);\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    setLookupError(\"\");\n    setParsedTokenAccount(undefined);\n    setOriginInfo(undefined);\n    if (\n      isReady &&\n      provider &&\n      signerAddress &&\n      isEVMChain(lookupChain) &&\n      lookupAsset &&\n      lookupTokenId\n    ) {\n      if (isValidEthereumAddress(lookupAsset)) {\n        (async () => {\n          setIsLoading(true);\n          try {\n            const token = await getEthereumNFT(lookupAsset, provider);\n            const result = await isNFT(token);\n            if (result) {\n              const newParsedTokenAccount = await ethNFTToNFTParsedTokenAccount(\n                token,\n                lookupTokenId,\n                signerAddress\n              );\n              const info = await getOriginalAssetEth(\n                getNFTBridgeAddressForChain(lookupChain),\n                provider,\n                lookupAsset,\n                lookupTokenId,\n                lookupChain\n              );\n              if (!cancelled) {\n                setIsLoading(false);\n                setParsedTokenAccount(newParsedTokenAccount);\n                setOriginInfo(info);\n              }\n            } else if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          } catch (e) {\n            console.error(e);\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          }\n        })();\n      } else {\n        setLookupError(\"Invalid address\");\n      }\n    } else if (lookupChain === CHAIN_ID_SOLANA && lookupAsset) {\n      (async () => {\n        try {\n          setIsLoading(true);\n          const [metadata] = await getMetaplexData([lookupAsset]);\n          if (metadata) {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            const info = await getOriginalAssetSol(\n              connection,\n              SOL_NFT_BRIDGE_ADDRESS,\n              lookupAsset\n            );\n            if (!cancelled) {\n              setIsLoading(false);\n              setParsedTokenAccount({\n                amount: \"0\",\n                decimals: 0,\n                mintKey: lookupAsset,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\",\n                uri: metadata.data.uri,\n              });\n              setOriginInfo(info);\n            }\n          } else {\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\"Error fetching metadata\");\n            }\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            setIsLoading(false);\n            setLookupError(\"Invalid token\");\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    isReady,\n    provider,\n    signerAddress,\n    lookupChain,\n    lookupAsset,\n    lookupTokenId,\n  ]);\n  const readableAddress =\n    originInfo &&\n    originInfo.chainId &&\n    originInfo.assetAddress &&\n    hexToNativeString(\n      uint8ArrayToHex(originInfo.assetAddress),\n      originInfo.chainId\n    );\n  const displayError =\n    (isEVMChain(lookupChain) && statusMessage) || lookupError;\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <HeaderText white small>\n          NFT Origin Verifier\n        </HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>\n          <Alert severity=\"info\" variant=\"outlined\">\n            This page allows you to find where a Wormhole-bridged NFT was\n            originally minted so you can verify its authenticity.\n          </Alert>\n          <TextField\n            select\n            variant=\"outlined\"\n            label=\"Chain\"\n            value={lookupChain}\n            onChange={handleChainChange}\n            fullWidth\n            margin=\"normal\"\n          >\n            {CHAINS_WITH_NFT_SUPPORT.filter(({ id }) =>\n              isBeta ? true : !BETA_CHAINS.includes(id)\n            ).map(({ id, name }) => (\n              <MenuItem key={id} value={id}>\n                {name}\n              </MenuItem>\n            ))}\n          </TextField>\n          {isEVMChain(lookupChain) ? (\n            <KeyAndBalance chainId={lookupChain} />\n          ) : null}\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n            label=\"Paste an address\"\n            value={lookupAsset}\n            onChange={handleAssetChange}\n          />\n          {isEVMChain(lookupChain) ? (\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              label=\"Paste a tokenId\"\n              value={lookupTokenId}\n              onChange={handleTokenIdChange}\n            />\n          ) : null}\n          {displayError ? (\n            <Typography align=\"center\" color=\"error\">\n              {displayError}\n            </Typography>\n          ) : null}\n          {isLoading ? (\n            <div className={classes.loaderWrapper}>\n              <CircularProgress />\n            </div>\n          ) : null}\n          {parsedTokenAccount ? (\n            <NFTViewer value={parsedTokenAccount} chainId={lookupChain} />\n          ) : null}\n          {originInfo ? (\n            <>\n              <Typography\n                variant=\"h5\"\n                gutterBottom\n                className={classes.originHeader}\n              >\n                Origin Info\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Chain: {CHAINS_BY_ID[originInfo.chainId].name}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Address: {readableAddress}\n              </Typography>\n              {originInfo.chainId === CHAIN_ID_SOLANA ? null : (\n                <Typography variant=\"body2\" gutterBottom>\n                  Token ID: {originInfo.tokenId}\n                </Typography>\n              )}\n              <div className={classes.viewButtonWrapper}>\n                {originInfo.chainId === CHAIN_ID_SOLANA ? (\n                  <Button\n                    href={`https://solscan.io/token/${readableAddress}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Solscan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_BSC ? (\n                  <Button\n                    href={`https://bscscan.com/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on BscScan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_POLYGON ? (\n                  <Button\n                    href={`https://opensea.io/assets/matic/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_AVAX ? (\n                  <Button\n                    href={`https://snowtrace.io/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Snowtrace\n                  </Button>\n                ) : (\n                  <Button\n                    href={`https://opensea.io/assets/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                )}\n              </div>\n            </>\n          ) : null}\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  WSOL_ADDRESS,\n} from \"@certusone/wormhole-sdk\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { useCallback, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleRedeem } from \"../../hooks/useHandleRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  ROPSTEN_WETH_ADDRESS,\n  WAVAX_ADDRESS,\n  WBNB_ADDRESS,\n  WETH_ADDRESS,\n  WMATIC_ADDRESS,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport { SolanaCreateAssociatedAddressAlternate } from \"../SolanaCreateAssociatedAddress\";\nimport StepDescription from \"../StepDescription\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Redeem() {\n  const { handleClick, handleNativeClick, disabled, showLoader } =\n    useHandleRedeem();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  //TODO better check, probably involving a hook & the VAA\n  const isEthNative =\n    targetChain === CHAIN_ID_ETH &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WETH_ADDRESS.toLowerCase();\n  const isEthRopstenNative =\n    targetChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n    targetAsset &&\n    targetAsset.toLowerCase() === ROPSTEN_WETH_ADDRESS.toLowerCase();\n  const isBscNative =\n    targetChain === CHAIN_ID_BSC &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WBNB_ADDRESS.toLowerCase();\n  const isPolygonNative =\n    targetChain === CHAIN_ID_POLYGON &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WMATIC_ADDRESS.toLowerCase();\n  const isAvaxNative =\n    targetChain === CHAIN_ID_AVAX &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WAVAX_ADDRESS.toLowerCase();\n  const isSolNative =\n    targetChain === CHAIN_ID_SOLANA &&\n    targetAsset &&\n    targetAsset === WSOL_ADDRESS;\n  const isNativeEligible =\n    isEthNative ||\n    isEthRopstenNative ||\n    isBscNative ||\n    isPolygonNative ||\n    isAvaxNative ||\n    isSolNative;\n  const [useNativeRedeem, setUseNativeRedeem] = useState(true);\n  const toggleNativeRedeem = useCallback(() => {\n    setUseNativeRedeem(!useNativeRedeem);\n  }, [useNativeRedeem]);\n\n  return (\n    <>\n      <StepDescription>Receive the tokens on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      {isNativeEligible && (\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={useNativeRedeem}\n              onChange={toggleNativeRedeem}\n              color=\"primary\"\n            />\n          }\n          label=\"Automatically unwrap to native currency\"\n        />\n      )}\n      {targetChain === CHAIN_ID_SOLANA ? (\n        <SolanaCreateAssociatedAddressAlternate />\n      ) : null}\n\n      <ButtonWithLoader\n        //TODO disable when the associated token account is confirmed to not exist\n        disabled={!isReady || disabled}\n        onClick={\n          isNativeEligible && useNativeRedeem ? handleNativeClick : handleClick\n        }\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n    </>\n  );\n}\n\nexport default Redeem;\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport {\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { getEvmChainId } from \"../../utils/consts\";\nimport {\n  ethTokenToParsedTokenAccount,\n  getEthereumToken,\n} from \"../../utils/ethereum\";\n\nconst useStyles = makeStyles((theme) => ({\n  addButton: {\n    display: \"block\",\n    margin: `${theme.spacing(1)}px auto 0px`,\n  },\n}));\n\nexport default function AddToMetamask() {\n  const classes = useStyles();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const handleClick = useCallback(() => {\n    if (provider && targetAsset && signerAddress && hasCorrectEvmNetwork) {\n      (async () => {\n        try {\n          const token = await getEthereumToken(targetAsset, provider);\n          const { symbol, decimals } = await ethTokenToParsedTokenAccount(\n            token,\n            signerAddress\n          );\n          const ethereum = (await detectEthereumProvider()) as any;\n          ethereum.request({\n            method: \"wallet_watchAsset\",\n            params: {\n              type: \"ERC20\", // In the future, other standards will be supported\n              options: {\n                address: targetAsset, // The address of the token contract\n                symbol: (\n                  symbol ||\n                  sourceParsedTokenAccount?.symbol ||\n                  \"wh\"\n                ).substr(0, 5), // A ticker symbol or shorthand, up to 5 characters\n                decimals, // The number of token decimals\n                // image: string; // A string url of the token logo\n              },\n            },\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      })();\n    }\n  }, [\n    provider,\n    targetAsset,\n    signerAddress,\n    hasCorrectEvmNetwork,\n    sourceParsedTokenAccount,\n  ]);\n  return provider &&\n    signerAddress &&\n    targetAsset &&\n    isEVMChain(targetChain) &&\n    hasCorrectEvmNetwork ? (\n    <Button\n      onClick={handleClick}\n      size=\"small\"\n      variant=\"outlined\"\n      className={classes.addButton}\n    >\n      Add to Metamask\n    </Button>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport AddToMetamask from \"./AddToMetamask\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The tokens will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <AddToMetamask />\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer More Tokens!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  transferFromEth,\n  transferFromEthNative,\n  transferFromSolana,\n  transferFromTerra,\n  transferNativeSol,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { parseUnits, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n  selectTransferIsTargetComplete,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/transferSlice\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport useTransferTargetAddressHex from \"./useTransferTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals);\n    const receipt = isNative\n      ? await transferFromEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        )\n      : await transferFromEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          tokenAddress,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  isNative: boolean,\n  originAddressStr?: string,\n  originChain?: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const amountParsed = parseUnits(amount, decimals).toBigInt();\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const promise = isNative\n      ? transferNativeSol(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          amountParsed,\n          targetAddress,\n          targetChain\n        )\n      : transferFromSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          fromAddress,\n          mintAddress,\n          amountParsed,\n          targetAddress,\n          targetChain,\n          originAddress,\n          originChain\n        );\n    const transaction = await promise;\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals).toString();\n    const msgs = await transferFromTerra(\n      wallet.terraAddress,\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      asset,\n      amountParsed,\n      targetChain,\n      targetAddress\n    );\n\n    const result = await postWithFees(\n      wallet,\n      msgs,\n      \"Wormhole - Initiate Transfer\"\n    );\n\n    const info = await waitForTerraExecution(result);\n    dispatch(setTransferTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const amount = useSelector(selectTransferAmount);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddress = useTransferTargetAddressHex();\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const decimals = sourceParsedTokenAccount?.decimals;\n  const isNative = sourceParsedTokenAccount?.isNativeAsset || false;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        isNative,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress &&\n      decimals !== undefined\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        isNative,\n        originAsset,\n        originChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_TERRA &&\n      !!terraWallet &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceTokenPublicKey,\n    sourceAsset,\n    amount,\n    decimals,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    isNative,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferTargetAddressHex() {\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { ChainId, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type EvmMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst ERC20_BASIC_ABI = [\n  \"function name() view returns (string name)\",\n  \"function symbol() view returns (string symbol)\",\n  \"function decimals() view returns (uint8 decimals)\",\n];\n\nconst handleError = () => {\n  return undefined;\n};\n\nconst fetchSingleMetadata = async (\n  address: string,\n  provider: Provider\n): Promise<EvmMetadata> => {\n  const contract = new ethers.Contract(address, ERC20_BASIC_ABI, provider);\n  const [name, symbol, decimals] = await Promise.all([\n    contract.name().catch(handleError),\n    contract.symbol().catch(handleError),\n    contract.decimals().catch(handleError),\n  ]);\n  return { tokenName: name, symbol, decimals };\n};\n\nconst fetchEthMetadata = async (addresses: string[], provider: Provider) => {\n  const promises: Promise<EvmMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, provider));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, EvmMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useEvmMetadata(\n  addresses: string[],\n  chainId: ChainId\n): DataWrapper<Map<string, EvmMetadata>> {\n  const { isReady } = useIsWalletReady(chainId, false);\n  const { provider } = useEthereumProvider();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, EvmMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length && provider && isReady && isEVMChain(chainId)) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchEthMetadata(addresses, provider).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, provider, isReady, chainId]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useEvmMetadata;\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport type TerraMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (address: string, lcd: LCDClient) =>\n  lcd.wasm\n    .contractQuery(address, {\n      token_info: {},\n    })\n    .then(\n      ({ symbol, name: tokenName, decimals }: any) =>\n        ({\n          symbol,\n          tokenName,\n          decimals,\n        } as TerraMetadata)\n    );\n\nconst fetchTerraMetadata = async (addresses: string[]) => {\n  const lcd = new LCDClient(TERRA_HOST);\n  const promises: Promise<TerraMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, lcd));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, TerraMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useTerraMetadata = (\n  addresses: string[]\n): DataWrapper<Map<string, TerraMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, TerraMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchTerraMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useTerraMetadata;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectTerraTokenMap } from \"../store/selectors\";\nimport {\n  errorTerraTokenMap,\n  fetchTerraTokenMap,\n  receiveTerraTokenMap,\n} from \"../store/tokenSlice\";\nimport { TERRA_TOKEN_METADATA_URL } from \"../utils/consts\";\n\nexport type TerraTokenMetadata = {\n  protocol: string;\n  symbol: string;\n  token: string;\n  icon: string;\n  name?: string;\n  balance?: string; // populated by native tokens, could move to a type that extends this\n};\n\nexport type TerraTokenMap = {\n  mainnet: {\n    [address: string]: TerraTokenMetadata;\n  };\n};\n\nconst useTerraTokenMap = (shouldFire: boolean): DataWrapper<TerraTokenMap> => {\n  const terraTokenMap = useSelector(selectTerraTokenMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (terraTokenMap.data === undefined ||\n      (terraTokenMap.data === null && !terraTokenMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getTerraTokenMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return terraTokenMap;\n};\n\nconst getTerraTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchTerraTokenMap());\n  axios.get(TERRA_TOKEN_METADATA_URL).then(\n    (response) => {\n      dispatch(receiveTerraTokenMap(response.data as TerraTokenMap));\n    },\n    (error) => {\n      dispatch(errorTerraTokenMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useTerraTokenMap;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useMemo } from \"react\";\nimport { DataWrapper, getEmptyDataWrapper } from \"../store/helpers\";\nimport { logoOverrides } from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useEvmMetadata, { EvmMetadata } from \"./useEvmMetadata\";\nimport useMetaplexData from \"./useMetaplexData\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraMetadata, { TerraMetadata } from \"./useTerraMetadata\";\nimport useTerraTokenMap, { TerraTokenMap } from \"./useTerraTokenMap\";\n\nexport type GenericMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  //decimals?: number;\n  //TODO more items\n  raw?: any;\n};\n\nconst constructSolanaMetadata = (\n  addresses: string[],\n  solanaTokenMap: DataWrapper<TokenInfo[]>,\n  metaplexData: DataWrapper<Map<string, Metadata | undefined> | undefined>\n) => {\n  const isFetching = solanaTokenMap.isFetching || metaplexData?.isFetching;\n  const error = solanaTokenMap.error || metaplexData?.isFetching;\n  const receivedAt = solanaTokenMap.receivedAt && metaplexData?.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metaplex = metaplexData?.data?.get(address);\n    const tokenInfo = solanaTokenMap.data?.find((x) => x.address === address);\n    //Both this and the token picker, at present, give priority to the tokenmap\n    const obj = {\n      symbol: metaplex?.data?.symbol || tokenInfo?.symbol || undefined,\n      logo: tokenInfo?.logoURI || undefined, //TODO is URI on metaplex actually the logo? If not, where is it?\n      tokenName: metaplex?.data?.name || tokenInfo?.name || undefined,\n      decimals: tokenInfo?.decimals || undefined, //TODO decimals are actually on the mint, not the metaplex account.\n      raw: metaplex,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructTerraMetadata = (\n  addresses: string[],\n  tokenMap: DataWrapper<TerraTokenMap>,\n  terraMetadata: DataWrapper<Map<string, TerraMetadata>>\n) => {\n  const isFetching = tokenMap.isFetching || terraMetadata.isFetching;\n  const error = tokenMap.error || terraMetadata.error;\n  const receivedAt = tokenMap.receivedAt && terraMetadata.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metadata = terraMetadata.data?.get(address);\n    const tokenInfo = tokenMap.data?.mainnet[address];\n    const obj = {\n      symbol: tokenInfo?.symbol || metadata?.symbol || undefined,\n      logo: tokenInfo?.icon || metadata?.logo || undefined,\n      tokenName: tokenInfo?.name || metadata?.tokenName || undefined,\n      decimals: metadata?.decimals || undefined,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructEthMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, EvmMetadata> | null>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: logoOverrides.get(address) || meta?.logo || undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nexport default function useMetadata(\n  chainId: ChainId,\n  addresses: string[]\n): DataWrapper<Map<string, GenericMetadata>> {\n  const terraTokenMap = useTerraTokenMap(chainId === CHAIN_ID_TERRA);\n  const solanaTokenMap = useSolanaTokenMap();\n\n  const solanaAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_SOLANA ? addresses : [];\n  }, [chainId, addresses]);\n  const terraAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_TERRA ? addresses : [];\n  }, [chainId, addresses]);\n  const ethereumAddresses = useMemo(() => {\n    return isEVMChain(chainId) ? addresses : [];\n  }, [chainId, addresses]);\n\n  const metaplexData = useMetaplexData(solanaAddresses);\n  const terraMetadata = useTerraMetadata(terraAddresses);\n  const ethMetadata = useEvmMetadata(ethereumAddresses, chainId);\n\n  const output: DataWrapper<Map<string, GenericMetadata>> = useMemo(\n    () =>\n      chainId === CHAIN_ID_SOLANA\n        ? constructSolanaMetadata(solanaAddresses, solanaTokenMap, metaplexData)\n        : isEVMChain(chainId)\n        ? constructEthMetadata(ethereumAddresses, ethMetadata)\n        : chainId === CHAIN_ID_TERRA\n        ? constructTerraMetadata(terraAddresses, terraTokenMap, terraMetadata)\n        : getEmptyDataWrapper(),\n    [\n      chainId,\n      solanaAddresses,\n      solanaTokenMap,\n      metaplexData,\n      ethereumAddresses,\n      ethMetadata,\n      terraAddresses,\n      terraMetadata,\n      terraTokenMap,\n    ]\n  );\n\n  return output;\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetParsedTokenAccount } from \"../store/transferSlice\";\nimport { getEvmChainId, SOLANA_HOST, TERRA_HOST } from \"../utils/consts\";\nimport { createParsedTokenAccount } from \"./useGetSourceParsedTokenAccounts\";\nimport useMetadata from \"./useMetadata\";\n\nfunction useGetTargetParsedTokenAccounts() {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetAssetArrayed = useMemo(\n    () => (targetAsset ? [targetAsset] : []),\n    [targetAsset]\n  );\n  const metadata = useMetadata(targetChain, targetAssetArrayed);\n  const tokenName =\n    (targetAsset && metadata.data?.get(targetAsset)?.tokenName) || undefined;\n  const symbol =\n    (targetAsset && metadata.data?.get(targetAsset)?.symbol) || undefined;\n  const logo =\n    (targetAsset && metadata.data?.get(targetAsset)?.logo) || undefined;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const hasResolvedMetadata = metadata.data || metadata.error;\n  useEffect(() => {\n    // targetParsedTokenAccount is cleared on setTargetAsset, but we need to clear it on wallet changes too\n    dispatch(setTargetParsedTokenAccount(undefined));\n    if (!targetAsset || !hasResolvedMetadata) {\n      return;\n    }\n    let cancelled = false;\n\n    if (targetChain === CHAIN_ID_TERRA && terraWallet) {\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.wasm\n        .contractQuery(targetAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(targetAsset, {\n              balance: {\n                address: terraWallet.walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                dispatch(\n                  setTargetParsedTokenAccount(\n                    createParsedTokenAccount(\n                      \"\",\n                      \"\",\n                      balance.balance.toString(),\n                      info.decimals,\n                      Number(formatUnits(balance.balance, info.decimals)),\n                      formatUnits(balance.balance, info.decimals),\n                      symbol,\n                      tokenName,\n                      logo\n                    )\n                  )\n                );\n              }\n            })\n        );\n    }\n    if (targetChain === CHAIN_ID_SOLANA && solPK) {\n      let mint;\n      try {\n        mint = new PublicKey(targetAsset);\n      } catch (e) {\n        return;\n      }\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      connection\n        .getParsedTokenAccountsByOwner(solPK, { mint })\n        .then(({ value }) => {\n          if (!cancelled) {\n            if (value.length) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    value[0].pubkey.toString(),\n                    value[0].account.data.parsed?.info?.mint,\n                    value[0].account.data.parsed?.info?.tokenAmount?.amount,\n                    value[0].account.data.parsed?.info?.tokenAmount?.decimals,\n                    value[0].account.data.parsed?.info?.tokenAmount?.uiAmount,\n                    value[0].account.data.parsed?.info?.tokenAmount\n                      ?.uiAmountString,\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            } else {\n              // TODO: error state\n            }\n          }\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    if (\n      isEVMChain(targetChain) &&\n      provider &&\n      signerAddress &&\n      hasCorrectEvmNetwork\n    ) {\n      const token = TokenImplementation__factory.connect(targetAsset, provider);\n      token\n        .decimals()\n        .then((decimals) => {\n          token.balanceOf(signerAddress).then((n) => {\n            if (!cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  // TODO: verify accuracy\n                  createParsedTokenAccount(\n                    signerAddress,\n                    token.address,\n                    n.toString(),\n                    decimals,\n                    Number(formatUnits(n, decimals)),\n                    formatUnits(n, decimals),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          });\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    targetAsset,\n    targetChain,\n    provider,\n    signerAddress,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    hasCorrectEvmNetwork,\n    hasResolvedMetadata,\n    symbol,\n    tokenName,\n    logo,\n  ]);\n}\n\nexport default useGetTargetParsedTokenAccounts;\n","import { Button } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  setSourceAsset,\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestSignedVAAHex,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { ChainId, hexToNativeString } from \"@certusone/wormhole-sdk\";\n\nexport function RegisterNowButtonCore({\n  originChain,\n  originAsset,\n  targetChain,\n}: {\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  targetChain: ChainId;\n}) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  // user might be in the middle of a different attest\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const canSwitch = originChain && originAsset && !signedVAAHex;\n  const handleClick = useCallback(() => {\n    const nativeAsset =\n      originChain && hexToNativeString(originAsset, originChain);\n    if (originChain && originAsset && nativeAsset && canSwitch) {\n      dispatch(setSourceChain(originChain));\n      dispatch(setSourceAsset(nativeAsset));\n      dispatch(setTargetChain(targetChain));\n      dispatch(setStep(2));\n      history.push(\"/register\");\n    }\n  }, [dispatch, canSwitch, originChain, originAsset, targetChain, history]);\n  if (!canSwitch) return null;\n  return (\n    <Button\n      variant=\"outlined\"\n      size=\"small\"\n      style={{ display: \"block\", margin: \"4px auto 0px\" }}\n      onClick={handleClick}\n    >\n      Register Now\n    </Button>\n  );\n}\n\nexport default function RegisterNowButton() {\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  return (\n    <RegisterNowButtonCore\n      originChain={originChain}\n      originAsset={originAsset}\n      targetChain={targetChain}\n    />\n  );\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  hexToNativeString,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetTargetParsedTokenAccounts from \"../../hooks/useGetTargetParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport {\n  selectTransferAmount,\n  selectTransferIsTargetComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceChain,\n  selectTransferTargetAddressHex,\n  selectTransferTargetAsset,\n  selectTransferTargetAssetWrapper,\n  selectTransferTargetBalanceString,\n  selectTransferTargetChain,\n  selectTransferTargetError,\n  selectTransferTargetParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { incrementStep, setTargetChain } from \"../../store/transferSlice\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport StepDescription from \"../StepDescription\";\nimport RegisterNowButton from \"./RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport const useTargetInfo = () => {\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const tokenName = targetParsedTokenAccount?.name;\n  const symbol = targetParsedTokenAccount?.symbol;\n  const logo = targetParsedTokenAccount?.logo;\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  return useMemo(\n    () => ({\n      targetChain,\n      targetAsset,\n      tokenName,\n      symbol,\n      logo,\n      readableTargetAddress,\n    }),\n    [targetChain, targetAsset, tokenName, symbol, logo, readableTargetAddress]\n  );\n};\n\nfunction Target() {\n  useGetTargetParsedTokenAccounts();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const { error: targetAssetError, data } = useSelector(\n    selectTransferTargetAssetWrapper\n  );\n  const {\n    targetChain,\n    targetAsset,\n    tokenName,\n    symbol,\n    logo,\n    readableTargetAddress,\n  } = useTargetInfo();\n  const uiAmountString = useSelector(selectTransferTargetBalanceString);\n  const transferAmount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferTargetError);\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  const isLoading = !statusMessage && !targetAssetError && !data;\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      targetChain,\n      targetAsset,\n      readableTargetAddress\n    );\n  useSyncTargetAddress(!shouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={true}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      {readableTargetAddress ? (\n        <>\n          {targetAsset ? (\n            <div className={classes.transferField}>\n              <Typography variant=\"subtitle2\">Bridged tokens:</Typography>\n              <Typography component=\"div\">\n                <SmartAddress\n                  chainId={targetChain}\n                  address={targetAsset}\n                  symbol={symbol}\n                  tokenName={tokenName}\n                  logo={logo}\n                  variant=\"h6\"\n                />\n                {`(Amount: ${transferAmount})`}\n              </Typography>\n            </div>\n          ) : null}\n          <div className={classes.transferField}>\n            <Typography variant=\"subtitle2\">Sent to:</Typography>\n            <Typography component=\"div\">\n              <SmartAddress\n                chainId={targetChain}\n                address={readableTargetAddress}\n                variant=\"h6\"\n              />\n              {`(Current balance: ${uiAmountString || \"0\"})`}\n            </Typography>\n          </div>\n        </>\n      ) : null}\n      {targetChain === CHAIN_ID_SOLANA && targetAsset ? (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={readableTargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your tokens.\n        </Typography>\n        {(isEVMChain(targetChain) || targetChain === CHAIN_ID_TERRA) && (\n          <GasEstimateSummary methodType=\"transfer\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete || !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={isLoading}\n        error={\n          statusMessage || (isLoading ? undefined : error || targetAssetError)\n        }\n      >\n        Next\n      </ButtonWithLoader>\n      {!statusMessage && data && !data.doesExist ? <RegisterNowButton /> : null}\n    </>\n  );\n}\n\nexport default Target;\n","import { ChainId, CHAIN_ID_ETH, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Box, Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  AVAILABLE_MARKETS_URL,\n  CHAINS_BY_ID,\n  MULTI_CHAIN_TOKENS,\n} from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    textAlign: \"center\",\n  },\n  line: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction WormholeWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n      <Typography component=\"div\" className={classes.line}>\n        The tokens you will receive are{\" \"}\n        <Box fontWeight={900} display=\"inline\">\n          Wormhole Wrapped Tokens\n        </Box>{\" \"}\n        and will need to be exchanged for native assets.\n      </Typography>\n      <Typography component=\"div\">\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction MultichainWarning({\n  symbol,\n  targetChain,\n}: {\n  symbol: string;\n  targetChain: ChainId;\n}) {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography\n        variant=\"h6\"\n        className={classes.line}\n      >{`You will not receive native ${symbol} on ${CHAINS_BY_ID[targetChain].name}`}</Typography>\n      <Typography\n        className={classes.line}\n      >{`To receive native ${symbol}, you will have to perform a swap with the wrapped tokens once you are done bridging.`}</Typography>\n      <Typography>\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction RewardsWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      Lido stETH rewards can only be received on Ethereum. Use the value\n      accruing wrapper token wstETH instead.\n    </Alert>\n  );\n}\n\nexport default function TokenWarning({\n  sourceChain,\n  sourceAsset,\n  originChain,\n  targetChain,\n  targetAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (\n    !(originChain && targetChain && targetAsset && sourceChain && sourceAsset)\n  ) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const isWormholeWrapped = originChain !== targetChain;\n  const multichainSymbol =\n    MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress] || undefined;\n  const isMultiChain = !!multichainSymbol;\n  const isRewardsToken =\n    searchableAddress === \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\" &&\n    sourceChain === CHAIN_ID_ETH;\n\n  const showMultiChainWarning = isMultiChain && isWormholeWrapped;\n  const showWrappedWarning = !isMultiChain && isWormholeWrapped; //Multichain warning is more important\n  const showRewardsWarning = isRewardsToken;\n\n  return (\n    <>\n      {showMultiChainWarning ? (\n        <MultichainWarning\n          symbol={multichainSymbol || \"tokens\"}\n          targetChain={targetChain}\n        />\n      ) : null}\n      {showWrappedWarning ? <WormholeWrappedWarning /> : null}\n      {showRewardsWarning ? <RewardsWarning /> : null}\n    </>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowDownward } from \"@material-ui/icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferOriginChain,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, MULTI_CHAIN_TOKENS } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\nimport TokenWarning from \"./TokenWarning\";\n\nfunction SendConfirmationContent({\n  open,\n  onClose,\n  onClick,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onClick: () => void;\n}) {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const { targetChain, targetAsset, symbol, tokenName, logo } = useTargetInfo();\n  const originChain = useSelector(selectTransferOriginChain);\n\n  //TODO this check is essentially duplicated.\n  const deservesTimeout = useMemo(() => {\n    if (originChain && sourceParsedTokenAccount?.mintKey) {\n      const searchableAddress = isEVMChain(originChain)\n        ? sourceParsedTokenAccount.mintKey.toLowerCase()\n        : sourceParsedTokenAccount.mintKey;\n      return (\n        originChain !== targetChain &&\n        !!MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress]\n      );\n    } else {\n      return false;\n    }\n  }, [originChain, targetChain, sourceChain, sourceParsedTokenAccount]);\n  const timeoutDuration = 5;\n\n  const [countdown, setCountdown] = useState(\n    deservesTimeout ? timeoutDuration : 0\n  );\n\n  useEffect(() => {\n    if (!deservesTimeout || countdown === 0) {\n      return;\n    }\n    let cancelled = false;\n\n    setInterval(() => {\n      if (!cancelled) {\n        setCountdown((state) => state - 1);\n      }\n    }, 1000);\n\n    return () => {\n      cancelled = true;\n    };\n  }, [deservesTimeout, countdown]);\n\n  useEffect(() => {\n    if (open && deservesTimeout) {\n      //Countdown starts on mount, but we actually want it to start on open\n      setCountdown(timeoutDuration);\n    }\n  }, [open, deservesTimeout]);\n\n  const sendConfirmationContent = (\n    <>\n      <DialogTitle>Are you sure?</DialogTitle>\n      <DialogContent>\n        {targetAsset ? (\n          <div style={{ textAlign: \"center\", marginBottom: 16 }}>\n            <Typography variant=\"subtitle1\" style={{ marginBottom: 8 }}>\n              You are about to perform this transfer:\n            </Typography>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={sourceChain}\n              parsedTokenAccount={sourceParsedTokenAccount}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[sourceChain].name}\n              </Typography>\n            </div>\n            <div style={{ paddingTop: 4 }}>\n              <ArrowDownward fontSize=\"inherit\" />\n            </div>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[targetChain].name}\n              </Typography>\n            </div>\n          </div>\n        ) : null}\n        <TokenWarning\n          sourceAsset={sourceParsedTokenAccount?.mintKey}\n          sourceChain={sourceChain}\n          originChain={originChain}\n          targetAsset={targetAsset ?? undefined}\n          targetChain={targetChain}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClick}\n          size={\"medium\"}\n          disabled={!!countdown}\n        >\n          {!!countdown ? countdown.toString() : \"Confirm\"}\n        </Button>\n      </DialogActions>\n    </>\n  );\n\n  return sendConfirmationContent;\n}\n\nexport default function SendConfirmationDialog({\n  open,\n  onClick,\n  onClose,\n}: {\n  open: boolean;\n  onClick: () => void;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <SendConfirmationContent\n        open={open}\n        onClose={onClose}\n        onClick={onClick}\n      />\n    </Dialog>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useAllowance from \"../../hooks/useAllowance\";\nimport { useHandleTransfer } from \"../../hooks/useHandleTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetError,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport StepDescription from \"../StepDescription\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport SendConfirmationDialog from \"./SendConfirmationDialog\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleTransfer();\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n  const handleTransferClick = useCallback(() => {\n    setIsConfirmOpen(true);\n  }, []);\n  const handleConfirmClick = useCallback(() => {\n    handleClick();\n    setIsConfirmOpen(false);\n  }, [handleClick]);\n  const handleConfirmClose = useCallback(() => {\n    setIsConfirmOpen(false);\n  }, []);\n\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const sourceAmount = useSelector(selectTransferAmount);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceDecimals = sourceParsedTokenAccount?.decimals;\n  const sourceIsNative = sourceParsedTokenAccount?.isNativeAsset;\n  const sourceAmountParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    sourceAmount &&\n    parseUnits(sourceAmount, sourceDecimals).toBigInt();\n  const oneParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    parseUnits(\"1\", sourceDecimals).toBigInt();\n  const transferTx = useSelector(selectTransferTransferTx);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n\n  const error = useSelector(selectTransferTargetError);\n  const [allowanceError, setAllowanceError] = useState(\"\");\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const [shouldApproveUnlimited, setShouldApproveUnlimited] = useState(false);\n  const toggleShouldApproveUnlimited = useCallback(\n    () => setShouldApproveUnlimited(!shouldApproveUnlimited),\n    [shouldApproveUnlimited]\n  );\n\n  const {\n    sufficientAllowance,\n    isAllowanceFetching,\n    isApproveProcessing,\n    approveAmount,\n  } = useAllowance(\n    sourceChain,\n    sourceAsset,\n    sourceAmountParsed || undefined,\n    sourceIsNative\n  );\n\n  const approveButtonNeeded = isEVMChain(sourceChain) && !sufficientAllowance;\n  const notOne = shouldApproveUnlimited || sourceAmountParsed !== oneParsed;\n  const isDisabled =\n    !isReady ||\n    isWrongWallet ||\n    disabled ||\n    isAllowanceFetching ||\n    isApproveProcessing;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || allowanceError || undefined;\n\n  const approveExactAmount = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(BigInt(sourceAmountParsed)).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount, sourceAmountParsed]);\n  const approveUnlimited = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(ethers.constants.MaxUint256.toBigInt()).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount]);\n\n  return (\n    <>\n      <StepDescription>\n        Transfer the tokens to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {approveButtonNeeded ? (\n        <>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={shouldApproveUnlimited}\n                onChange={toggleShouldApproveUnlimited}\n                color=\"primary\"\n              />\n            }\n            label=\"Approve Unlimited Tokens\"\n          />\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={\n              shouldApproveUnlimited ? approveUnlimited : approveExactAmount\n            }\n            showLoader={isAllowanceFetching || isApproveProcessing}\n            error={errorMessage}\n          >\n            {\"Approve \" +\n              (shouldApproveUnlimited ? \"Unlimited\" : sourceAmount) +\n              ` Token${notOne ? \"s\" : \"\"}`}\n          </ButtonWithLoader>\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={handleTransferClick}\n            showLoader={showLoader}\n            error={errorMessage}\n          >\n            Transfer\n          </ButtonWithLoader>\n          <SendConfirmationDialog\n            open={isConfirmOpen}\n            onClick={handleConfirmClick}\n            onClose={handleConfirmClose}\n          />\n        </>\n      )}\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import {\n  approveEth,\n  ChainId,\n  getAllowanceEth,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { selectTransferIsApproving } from \"../store/selectors\";\nimport { setIsApproving } from \"../store/transferSlice\";\nimport { getTokenBridgeAddressForChain } from \"../utils/consts\";\n\nexport default function useAllowance(\n  chainId: ChainId,\n  tokenAddress?: string,\n  transferAmount?: BigInt,\n  sourceIsNative?: boolean\n) {\n  const dispatch = useDispatch();\n  const [allowance, setAllowance] = useState<BigInt | null>(null);\n  const [isAllowanceFetching, setIsAllowanceFetching] = useState(false);\n  const isApproveProcessing = useSelector(selectTransferIsApproving);\n  const { signer } = useEthereumProvider();\n  const sufficientAllowance =\n    !isEVMChain(chainId) ||\n    sourceIsNative ||\n    (allowance && transferAmount && allowance >= transferAmount);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (isEVMChain(chainId) && tokenAddress && signer && !isApproveProcessing) {\n      setIsAllowanceFetching(true);\n      getAllowanceEth(\n        getTokenBridgeAddressForChain(chainId),\n        tokenAddress,\n        signer\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            setAllowance(result.toBigInt());\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            //setError(\"Unable to retrieve allowance\"); //TODO set an error\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [chainId, tokenAddress, signer, isApproveProcessing]);\n\n  const approveAmount: (amount: BigInt) => Promise<any> = useMemo(() => {\n    return !isEVMChain(chainId) || !tokenAddress || !signer\n      ? (amount: BigInt) => {\n          return Promise.resolve();\n        }\n      : (amount: BigInt) => {\n          dispatch(setIsApproving(true));\n          return approveEth(\n            getTokenBridgeAddressForChain(chainId),\n            tokenAddress,\n            signer,\n            BigNumber.from(amount)\n          ).then(\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.resolve();\n            },\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.reject();\n            }\n          );\n        };\n  }, [chainId, tokenAddress, signer, dispatch]);\n\n  return useMemo(\n    () => ({\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    }),\n    [\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    ]\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferSourceChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const transferTx = useSelector(selectTransferTransferTx);\n\n  const explainerString = \"The tokens have entered the bridge!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { ArrowForward, VerifiedUser } from \"@material-ui/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSourceComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceBalanceString,\n  selectTransferSourceChain,\n  selectTransferSourceError,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  incrementStep,\n  setAmount,\n  setSourceChain,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport {\n  BSC_MIGRATION_ASSET_MAP,\n  CHAINS,\n  ETH_MIGRATION_ASSET_MAP,\n  MIGRATION_ASSET_MAP,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport NumberTextField from \"../NumberTextField\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n  chainSelectWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  chainSelectContainer: {\n    flexBasis: \"100%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n  chainSelectArrow: {\n    position: \"relative\",\n    top: \"12px\",\n    [theme.breakpoints.down(\"sm\")]: { transform: \"rotate(90deg)\" },\n  },\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetChainOptions = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const parsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const hasParsedTokenAccount = !!parsedTokenAccount;\n  const isSolanaMigration =\n    sourceChain === CHAIN_ID_SOLANA &&\n    !!parsedTokenAccount &&\n    !!MIGRATION_ASSET_MAP.get(parsedTokenAccount.mintKey);\n  const isEthereumMigration =\n    sourceChain === CHAIN_ID_ETH &&\n    !!parsedTokenAccount &&\n    !!ETH_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isBscMigration =\n    sourceChain === CHAIN_ID_BSC &&\n    !!parsedTokenAccount &&\n    !!BSC_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isMigrationAsset =\n    isSolanaMigration || isEthereumMigration || isBscMigration;\n  const uiAmountString = useSelector(selectTransferSourceBalanceString);\n  const amount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferSourceError);\n  const isSourceComplete = useSelector(selectTransferIsSourceComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleMigrationClick = useCallback(() => {\n    if (sourceChain === CHAIN_ID_SOLANA) {\n      history.push(\n        `/migrate/Solana/${parsedTokenAccount?.mintKey}/${parsedTokenAccount?.publicKey}`\n      );\n    } else if (sourceChain === CHAIN_ID_ETH) {\n      history.push(`/migrate/Ethereum/${parsedTokenAccount?.mintKey}`);\n    } else if (sourceChain === CHAIN_ID_BSC) {\n      history.push(`/migrate/BinanceSmartChain/${parsedTokenAccount?.mintKey}`);\n    }\n  }, [history, parsedTokenAccount, sourceChain]);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAmountChange = useCallback(\n    (event) => {\n      dispatch(setAmount(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (uiAmountString) {\n      dispatch(setAmount(uiAmountString));\n    }\n  }, [dispatch, uiAmountString]);\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select tokens to send through the Wormhole Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/token-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              endIcon={<VerifiedUser />}\n            >\n              Token Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <div className={classes.chainSelectWrapper}>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Source</Typography>\n          <ChainSelect\n            select\n            variant=\"outlined\"\n            fullWidth\n            value={sourceChain}\n            onChange={handleSourceChange}\n            disabled={shouldLockFields}\n            chains={CHAINS}\n          />\n        </div>\n        <div className={classes.chainSelectArrow}>\n          <ArrowForward style={{ margin: \"0px 8px\" }} />\n        </div>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Target</Typography>\n          <ChainSelect\n            variant=\"outlined\"\n            select\n            fullWidth\n            value={targetChain}\n            onChange={handleTargetChange}\n            disabled={shouldLockFields}\n            chains={targetChainOptions}\n          />\n        </div>\n      </div>\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} />\n        </div>\n      ) : null}\n      {isMigrationAsset ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={handleMigrationClick}\n        >\n          Go to Migration Page\n        </Button>\n      ) : (\n        <>\n          <LowBalanceWarning chainId={sourceChain} />\n          {hasParsedTokenAccount ? (\n            <NumberTextField\n              variant=\"outlined\"\n              label=\"Amount\"\n              fullWidth\n              className={classes.transferField}\n              value={amount}\n              onChange={handleAmountChange}\n              disabled={shouldLockFields}\n              onMaxClick={\n                uiAmountString && !parsedTokenAccount.isNativeAsset\n                  ? handleMaxClick\n                  : undefined\n              }\n            />\n          ) : null}\n          <ButtonWithLoader\n            disabled={!isSourceComplete}\n            onClick={handleNextClick}\n            showLoader={false}\n            error={statusMessage || error}\n          >\n            Next\n          </ButtonWithLoader>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  const sourceAmount = useSelector(selectTransferAmount);\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer {sourceAmount}</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        {sourceWalletAddress ? (\n          <>\n            <span>from</span>\n            <SmartAddress chainId={sourceChain} address={sourceWalletAddress} />\n          </>\n        ) : null}\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n    </>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const {\n    targetChain,\n    readableTargetAddress,\n    targetAsset,\n    symbol,\n    tokenName,\n    logo,\n  } = useTargetInfo();\n\n  const explainerContent =\n    targetChain && readableTargetAddress ? (\n      <>\n        {targetAsset ? (\n          <>\n            <span>and receive</span>\n            <SmartAddress\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n          </>\n        ) : null}\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={readableTargetAddress} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport {\n  selectTransferActiveStep,\n  selectTransferIsRedeemComplete,\n  selectTransferIsRedeeming,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n} from \"../../store/selectors\";\nimport { setStep } from \"../../store/transferSlice\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Transfer() {\n  useCheckIfWormholeWrapped();\n  useFetchTargetAsset();\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectTransferActiveStep);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const isRedeemComplete = useSelector(selectTransferIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton\n            disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n            onClick={() => dispatch(setStep(1))}\n          >\n            Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled>Send tokens</StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n          >\n            Redeem tokens\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Transfer;\n","import { MARKETS } from \"@project-serum/serum\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport interface Markets {\n  [coin: string]: {\n    publicKey?: PublicKey;\n    name: string;\n    deprecated?: boolean;\n  };\n}\n\nexport const serumMarkets = (() => {\n  const m: Markets = {};\n  MARKETS.forEach((market) => {\n    const coin = market.name.split(\"/\")[0];\n    if (m[coin]) {\n      // Only override a market if it's not deprecated\t.\n      if (!m.deprecated) {\n        m[coin] = {\n          publicKey: market.address,\n          name: market.name.split(\"/\").join(\"\"),\n        };\n      }\n    } else {\n      m[coin] = {\n        publicKey: market.address,\n        name: market.name.split(\"/\").join(\"\"),\n      };\n    }\n  });\n\n  m[\"USDC\"] = m[\"USDT\"];\n\n  return m;\n})();\n\n// Create a cached API wrapper to avoid rate limits.\nclass PriceStore {\n  cache: Map<String, number | undefined>;\n\n  constructor() {\n    this.cache = new Map();\n  }\n\n  async getPrice(\n    connection: Connection,\n    marketName: string\n  ): Promise<number | undefined> {\n    return new Promise((resolve, reject) => {\n      if (this.cache.get(marketName) === undefined) {\n        fetch(`https://serum-api.bonfida.com/orderbooks/${marketName}`).then(\n          (resp) => {\n            resp.json().then((resp) => {\n              if (resp.data.asks === null || resp.data.bids === null) {\n                resolve(undefined);\n              } else if (\n                resp.data.asks.length === 0 &&\n                resp.data.bids.length === 0\n              ) {\n                resolve(undefined);\n              } else if (resp.data.asks.length === 0) {\n                resolve(resp.data.bids[0].price);\n              } else if (resp.data.bids.length === 0) {\n                resolve(resp.data.asks[0].price);\n              } else {\n                const mid =\n                  (resp.data.asks[0].price + resp.data.bids[0].price) / 2.0;\n                this.cache.set(marketName, mid);\n                resolve(this.cache.get(marketName));\n              }\n            });\n          }\n        );\n      } else {\n        return resolve(this.cache.get(marketName));\n      }\n    });\n  }\n}\n\nexport const priceStore = new PriceStore();\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  BSC_TOKEN_BRIDGE_ADDRESS,\n  CHAINS_BY_ID,\n  COVALENT_GET_TOKENS_URL,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n  logoOverrides,\n  POLYGON_TOKEN_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_CUSTODY_ADDRESS,\n  TERRA_SWAPRATE_URL,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { priceStore, serumMarkets } from \"../utils/SolanaPriceStore\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  NATIVE_TERRA_DECIMALS,\n} from \"../utils/terra\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraNativeBalances from \"./useTerraNativeBalances\";\n\nexport type TVL = {\n  logo?: string;\n  symbol?: string;\n  name?: string;\n  amount: string;\n  totalValue?: number;\n  quotePrice?: number;\n  assetAddress: string;\n  originChainId: ChainId;\n  originChain: string;\n  decimals?: number;\n};\n\nconst BAD_PRICES_BY_CHAIN = {\n  [CHAIN_ID_BSC]: [\n    \"0x04132bf45511d03a58afd4f1d36a29d229ccc574\",\n    \"0xa79bd679ce21a2418be9e6f88b2186c9986bbe7d\",\n    \"0x931c3987040c90b6db09981c7c91ba155d3fa31f\",\n  ],\n  [CHAIN_ID_ETH]: [\"0x3845badade8e6dff049820680d1f14bd3903a5d0\"],\n};\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): TVL[] => {\n  const output: TVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    if (item.balance > 0 && item.contract_address) {\n      const hasUnreliablePrice =\n        BAD_PRICES_BY_CHAIN[chainId]?.includes(item.contract_address) ||\n        item.quote_rate > 1000000;\n      output.push({\n        logo:\n          logoOverrides.get(item.contract_address) ||\n          item.logo_url ||\n          undefined,\n        symbol: item.contract_ticker_symbol || undefined,\n        name: item.contract_name || undefined,\n        amount: formatUnits(item.balance, item.contract_decimals),\n        totalValue: hasUnreliablePrice ? 0 : item.quote,\n        quotePrice: hasUnreliablePrice ? 0 : item.quote_rate,\n        assetAddress: item.contract_address,\n        originChainId: chainId,\n        originChain: CHAINS_BY_ID[chainId].name,\n        decimals: item.contract_decimals,\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>,\n  solanaPrices: DataWrapper<Map<string, number | undefined>>\n) => {\n  const output: TVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data ||\n    solanaPrices.isFetching ||\n    !solanaPrices.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const mint = item.account.data.parsed?.info?.mint?.toString();\n    const price = solanaPrices?.data?.get(mint);\n    output.push({\n      logo: genericMetadata?.logo || undefined,\n      symbol: genericMetadata?.symbol || undefined,\n      name: genericMetadata?.tokenName || undefined,\n      amount: item.account.data.parsed?.info?.tokenAmount?.uiAmount || \"0\", //Should always be defined.\n      totalValue: price\n        ? parseFloat(\n            item.account.data.parsed?.info?.tokenAmount?.uiAmount || \"0\"\n          ) * price\n        : undefined,\n      quotePrice: price,\n      assetAddress: mint,\n      originChainId: CHAIN_ID_SOLANA,\n      originChain: \"Solana\",\n      decimals: item.account.data.parsed?.info?.tokenAmount?.decimals,\n    });\n  });\n\n  return output;\n};\n\nconst useTerraTVL = () => {\n  const { isLoading: isTerraNativeLoading, balances: terraNativeBalances } =\n    useTerraNativeBalances(TERRA_TOKEN_BRIDGE_ADDRESS);\n  const [terraSwaprates, setTerraSwaprates] = useState<any[]>([]);\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      try {\n        const result = await axios.get(TERRA_SWAPRATE_URL);\n        if (!cancelled && result && result.data) {\n          setTerraSwaprates(result.data);\n        }\n      } catch (e) {}\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n  const terraTVL = useMemo(() => {\n    const arr: TVL[] = [];\n    if (terraNativeBalances) {\n      const denoms = Object.keys(terraNativeBalances);\n      denoms.forEach((denom) => {\n        const amount = formatUnits(\n          terraNativeBalances[denom],\n          NATIVE_TERRA_DECIMALS\n        );\n        const symbol = formatNativeDenom(denom);\n        let matchingSwap = undefined;\n        let quotePrice = 0;\n        let totalValue = 0;\n        try {\n          matchingSwap = terraSwaprates.find((swap) => swap.denom === denom);\n          quotePrice =\n            denom === \"uusd\"\n              ? 1\n              : matchingSwap\n              ? 1 / Number(matchingSwap.swaprate)\n              : 0;\n          totalValue =\n            denom === \"uusd\"\n              ? Number(\n                  formatUnits(terraNativeBalances[denom], NATIVE_TERRA_DECIMALS)\n                )\n              : matchingSwap\n              ? Number(amount) / Number(matchingSwap.swaprate)\n              : 0;\n        } catch (e) {}\n        arr.push({\n          amount,\n          assetAddress: denom,\n          originChain: CHAINS_BY_ID[CHAIN_ID_TERRA].name,\n          originChainId: CHAIN_ID_TERRA,\n          quotePrice,\n          totalValue,\n          logo: getNativeTerraIcon(symbol),\n          symbol,\n          decimals: NATIVE_TERRA_DECIMALS,\n        });\n      });\n    }\n    return arr;\n  }, [terraNativeBalances, terraSwaprates]);\n  return useMemo(\n    () => ({ terraTVL, isLoading: isTerraNativeLoading }),\n    [isTerraNativeLoading, terraTVL]\n  );\n};\n\nconst useSolanaPrices = (\n  mintAddresses: string[],\n  tokenMap: DataWrapper<TokenInfo[]>\n) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [priceMap, setPriceMap] = useState<Map<\n    string,\n    number | undefined\n  > | null>(null);\n  const [error] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!mintAddresses || !mintAddresses.length || !tokenMap.data) {\n      return;\n    }\n\n    const relevantMarkets: {\n      publicKey?: PublicKey;\n      name: string;\n      deprecated?: boolean;\n      mintAddress: string;\n    }[] = [];\n    mintAddresses.forEach((address) => {\n      const tokenInfo = tokenMap.data?.find((x) => x.address === address);\n      const relevantMarket = tokenInfo && serumMarkets[tokenInfo.symbol];\n      if (relevantMarket) {\n        relevantMarkets.push({ ...relevantMarket, mintAddress: address });\n      }\n    });\n\n    setIsLoading(true);\n    const priceMap: Map<string, number | undefined> = new Map();\n    const connection = new Connection(SOLANA_HOST);\n    const promises: Promise<void>[] = [];\n    //Load all the revelevant markets into the priceMap\n    relevantMarkets.forEach((market) => {\n      const marketName: string = market.name;\n      promises.push(\n        priceStore\n          .getPrice(connection, marketName)\n          .then((result) => {\n            priceMap.set(market.mintAddress, result);\n          })\n          .catch((e) => {\n            //Do nothing, we just won't load this price.\n            return Promise.resolve();\n          })\n      );\n    });\n\n    Promise.all(promises).then(() => {\n      //By this point all the relevant markets are loaded.\n      if (!cancelled) {\n        setPriceMap(priceMap);\n        setIsLoading(false);\n      }\n    });\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [mintAddresses, tokenMap.data]);\n\n  return useMemo(() => {\n    return {\n      isFetching: isLoading,\n      data: priceMap || null,\n      error: error,\n      receivedAt: null,\n    };\n  }, [error, priceMap, isLoading]);\n};\n\nconst useTVL = (): DataWrapper<TVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n  const solanaTokenMap = useSolanaTokenMap();\n  const solanaPrices = useSolanaPrices(mintAddresses, solanaTokenMap);\n\n  const { isLoading: isTerraLoading, terraTVL } = useTerraTVL();\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata, solanaPrices),\n    [solanaCustodyTokens, solanaMetadata, solanaPrices]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_ETH, ETH_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_BSC, BSC_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_TOKEN_BRIDGE_ADDRESS,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [\n      ...ethTVL,\n      ...bscTVL,\n      ...polygonTVL,\n      ...solanaTVL,\n      ...terraTVL,\n    ];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        solanaCustodyTokensLoading ||\n        isTerraLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    polygonTVL,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n    isTerraLoading,\n    terraTVL,\n  ]);\n};\n\nexport default useTVL;\n","import React from \"react\";\n\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst TablePaginationActions = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n};\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nexport default TablePaginationActions;\n","import { IconButton } from \"@material-ui/core\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {\n  AddCircleOutline,\n  KeyboardArrowDown,\n  KeyboardArrowRight,\n  RemoveCircleOutline,\n} from \"@material-ui/icons\";\nimport React from \"react\";\nimport {\n  useExpanded,\n  useGlobalFilter,\n  useGroupBy,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport TablePaginationActions from \"./TablePaginationActions\";\n\nconst stopProp = (e) => {\n  e.stopPropagation();\n};\n\nconst EnhancedTable = ({ columns, data, skipPageReset, initialState = {} }) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    rows,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: !skipPageReset,\n      initialState,\n    },\n    useGlobalFilter,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination\n  );\n\n  const handlePageChange = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (event) => {\n    setPageSize(Number(event.target.value));\n  };\n\n  // Render the UI for your table\n  return (\n    <>\n      <TableContainer>\n        <MaUTable {...getTableProps()}>\n          <TableHead>\n            {headerGroups.map((headerGroup) => (\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <TableCell\n                    {...(column.id === \"selection\"\n                      ? column.getHeaderProps()\n                      : column.getHeaderProps(column.getSortByToggleProps()))}\n                    align={\n                      // TODO: better way to get column?\n                      columns.find((c) => c.Header === column.Header)?.align ||\n                      \"left\"\n                    }\n                  >\n                    {column.id !== \"selection\" ? (\n                      <TableSortLabel\n                        active={column.isSorted}\n                        // react-table has a unsorted state which is not treated here\n                        direction={column.isSortedDesc ? \"desc\" : \"asc\"}\n                      >\n                        {column.render(\"Header\")}\n                      </TableSortLabel>\n                    ) : (\n                      column.render(\"Header\")\n                    )}\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span onClick={stopProp}>\n                        <IconButton\n                          size=\"small\"\n                          {...column.getGroupByToggleProps()}\n                        >\n                          {column.isGrouped ? (\n                            <RemoveCircleOutline fontSize=\"inherit\" />\n                          ) : (\n                            <AddCircleOutline fontSize=\"inherit\" />\n                          )}\n                        </IconButton>\n                      </span>\n                    ) : null}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {page.map((row, i) => {\n              prepareRow(row);\n              return (\n                <TableRow {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <TableCell\n                        {...cell.getCellProps()}\n                        align={cell.column.align || \"left\"}\n                      >\n                        {cell.isGrouped ? (\n                          // If it's a grouped cell, add an expander and row count\n                          <>\n                            <IconButton\n                              size=\"small\"\n                              {...row.getToggleRowExpandedProps()}\n                            >\n                              {row.isExpanded ? (\n                                <KeyboardArrowDown fontSize=\"inherit\" />\n                              ) : (\n                                <KeyboardArrowRight fontSize=\"inherit\" />\n                              )}\n                            </IconButton>{\" \"}\n                            {cell.render(\"Cell\")} ({row.subRows.length})\n                          </>\n                        ) : cell.isAggregated ? (\n                          // If the cell is aggregated, use the Aggregated\n                          // renderer for cell\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                          // Otherwise, just render the regular cell\n                          cell.render(\"Cell\")\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </MaUTable>\n      </TableContainer>\n      <TablePagination\n        component=\"div\"\n        rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: rows.length }]}\n        count={rows.length}\n        rowsPerPage={pageSize}\n        page={pageIndex}\n        SelectProps={{\n          inputProps: { \"aria-label\": \"rows per page\" },\n          native: true,\n        }}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleRowsPerPageChange}\n        ActionsComponent={TablePaginationActions}\n      />\n    </>\n  );\n};\n\nexport default EnhancedTable;\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOL_CUSTODY_ADDRESS,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n}));\n\nconst CustodyAddresses: React.FC<any> = () => {\n  const classes = useStyles();\n  const data = useMemo(() => {\n    return [\n      {\n        chainName: \"Ethereum\",\n        chainId: CHAIN_ID_ETH,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_ETH),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_ETH),\n      },\n      {\n        chainName: \"Solana\",\n        chainId: CHAIN_ID_SOLANA,\n        tokenAddress: SOL_CUSTODY_ADDRESS,\n        nftAddress: SOL_NFT_CUSTODY_ADDRESS,\n      },\n      {\n        chainName: \"Binance Smart Chain\",\n        chainId: CHAIN_ID_BSC,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_BSC),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_BSC),\n      },\n      {\n        chainName: \"Terra\",\n        chainId: CHAIN_ID_TERRA,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_TERRA),\n        nftAddress: null,\n      },\n      {\n        chainName: \"Polygon\",\n        chainId: CHAIN_ID_POLYGON,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_POLYGON),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_POLYGON),\n      },\n    ];\n  }, []);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      {\n        Header: \"Token Address\",\n        id: \"tokenAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.tokenAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.tokenAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n      {\n        Header: \"NFT Address\",\n        id: \"nftAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nftAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.nftAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h5\">Custody Addresses</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          These are the custody addresses which hold collateralized assets for\n          the token bridge.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{}}\n    />\n  );\n\n  return (\n    <>\n      {header}\n      {table}\n    </>\n  );\n};\n\nexport default CustodyAddresses;\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BSC_NFT_BRIDGE_ADDRESS,\n  COVALENT_GET_TOKENS_URL,\n  ETH_NFT_BRIDGE_ADDRESS,\n  getNFTBridgeAddressForChain,\n  POLYGON_NFT_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\n\nexport type NFTTVL = NFTParsedTokenAccount & { chainId: ChainId };\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): NFTTVL[] => {\n  const output: NFTTVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    //TODO remove non nfts\n    if (item.balance > 0 && item.contract_address && item.nft_data) {\n      item.nft_data.forEach((nftData: any) => {\n        if (nftData.token_id) {\n          output.push({\n            amount: item.balance,\n            mintKey: item.contract_address,\n            tokenId: nftData.token_id,\n            publicKey: getNFTBridgeAddressForChain(chainId),\n            decimals: 0,\n            uiAmount: 0,\n            uiAmountString: item.balance.toString(),\n            chainId: chainId,\n            uri: nftData.token_url,\n            animation_url: nftData.external_data?.animation_url,\n            external_url: nftData.external_data?.external_url,\n            image: nftData.external_data?.image,\n            image_256: nftData.external_data?.image_256,\n            nftName: nftData.external_data?.name,\n            description: nftData.external_data?.description,\n          });\n        }\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>\n) => {\n  const output: NFTTVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const raw: Metadata | undefined = genericMetadata?.raw;\n\n    if (\n      item.account.data.parsed?.info?.tokenAmount?.uiAmount > 0 &&\n      item.account.data.parsed?.info?.tokenAmount?.decimals === 0\n    ) {\n      output.push({\n        amount: item.account.data.parsed?.info?.tokenAmount?.amount,\n        mintKey: item.account.data.parsed?.info?.mint,\n        publicKey: getNFTBridgeAddressForChain(CHAIN_ID_SOLANA),\n        decimals: 0,\n        uiAmount: 0,\n        uiAmountString:\n          item.account.data.parsed?.info?.tokenAmount?.uiAmountString,\n        chainId: CHAIN_ID_SOLANA,\n        uri: raw?.data?.uri,\n        symbol: raw?.data?.symbol,\n        // external_url: nftData.external_data?.external_url,\n        // image: nftData.external_data?.image,\n        // image_256: nftData.external_data?.image_256,\n        // nftName: nftData.external_data?.name,\n        // description: nftData.external_data?.description,\n      });\n    }\n  });\n\n  return output;\n};\n\nconst useNFTTVL = (): DataWrapper<NFTTVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata),\n    [solanaCustodyTokens, solanaMetadata]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_ETH,\n          ETH_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_BSC,\n          BSC_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_NFT_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [...ethTVL, ...bscTVL, ...polygonTVL, ...solanaTVL];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        solanaCustodyTokensLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonTVL,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n  ]);\n};\n\nexport default useNFTTVL;\n","export const DENY_LIST = [\n  \"D9cX654dGb4GFzqq3RY7rhZbRkQqUkfggDZdnYxqv97g\",\n  \"0xfeA43A080297B02F2eBB88a27Cb0FA6DB1b33B1d\",\n  \"GUSNP2z7nXjMpmYWeFbS819VwHb5tp7VoGbC6iGHtXmE\",\n  \"ERfkrhhgBB6zRo3x4XAcQKjhxu1JdX1PBfdj1RbHsfc7\",\n  \"f8DrFDG8dd6kV34WdjoEZd9vZin2pJAck8eMFUXZv1G\",\n  \"0x72b6dc1003e154ac71c76d3795a3829cfd5e33b9\",\n];\n\nexport const ALLOW_LIST: string[] = [\n  \"0x915bcb55faf663429fcc1efeb4e346703a91e4b2\",\n  \"0xf642d8a98845a25844d3911fa1da1d70587c0acc\",\n  \"0x1c60841b70821dca733c9b1a26dbe1a33338bd43\",\n  \"0x5603172654f37b509d74c6fe3a3fc087104100d9\",\n  \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n  \"0xd136ad9eb0a53633156972e3f746ab10d6dced7d\",\n  \"0x68d5d4ff0274dd95760e300ef16b81c5eed09842\",\n  \"0x4961db588dd962abb20927aa38fa33e5225b3be2\",\n  \"0x2e956ed3d7337f4ed4316a6e8f2edf74bf84bb54\",\n  \"0xb411d36e034d87558c3f96636dd7f7b62e093a1e\",\n  \"0x7592e2f251a7f7da27211625d652092769f43a60\",\n  \"0x21b999ec13828edefa243675c64324298c03b831\",\n  \"0xad5f6cdda157694439ef9f6dd409424321c74628\",\n  \"0x9cf63efbe189091b7e3d364c7f6cfbe06997872b\",\n  \"0x7581f8e289f00591818f6c467939da7f9ab5a777\",\n  \"0x93b1077d163365e05c9421e8f72547e2fe1e0a5b\",\n  \"0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625\",\n  \"0x2fb5b875a85713cba312c097d16838c242cadaec\",\n  \"0x1e988ba4692e52bc50b375bcc8585b95c48aad77\",\n  \"0x0ae3c3a1504e41a6877de1b854c000ec64894bea\",\n  \"0xc6904fb685b4dfbdb98a5b70e40863cd9aef33dc\",\n  \"0xd58434f33a20661f186ff67626ea6bdf41b80bca\",\n  \"0x9bb7da8f68f15ece32fe323246e7a1abac6d895d\",\n  \"0xb7f7f6c52f2e2fdb1963eab30438024864c313f6\",\n  \"0x2a281305a50627a22ec3e7d82ae656adfee6d964\",\n  \"0x346868f7e783e8206335bb14f74ba59a87c44f35\",\n  \"0x549d38f104ac46d856c1b2bf2a20d170efdb2a8d\",\n  \"0x138ff21a21dfc06fbfccf15f2d9fd290a660e152\",\n  \"0x15533781a650f0c34f587cdb60965cdfd16ff624\",\n  \"0xaae71bbbaa359be0d81d5cbc9b1e88a8b7c58a94\",\n  \"0x4721d66937b16274fac603509e9d61c5372ff220\",\n  \"0x72dcccb74cade0aca67739fe0a7956c5dead4a8a\",\n  \"0x07fe07226a376e8b74e4da2094537843fdf16318\",\n  \"0x1ddb2c0897daf18632662e71fdd2dbdc0eb3a9ec\",\n  \"0x2d956093d27621ec0c4628b77eaeac6c734da02c\",\n  \"0x312b151a0e87785649ed835d946c2b0de5745c30\",\n  \"0x32afc8dc2ff4af284fa5341954050f917357a5f1\",\n  \"0x4ba782b05c7d580ab6b896c6a63b8e5de53738b3\",\n  \"0x5bc94e9347f3b9be8415bdfd24af16666704e44f\",\n  \"0x5ddff6f22ee5df31403b9de994b4c70c8755a8ac\",\n  \"0x61f4a37676700f6e9bcbaeb05ff6c2f701c1c702\",\n  \"0xcb1f79791088d0f4397c35ec241f91c3727a6dba\",\n  \"0xd279d7e46f73961812c4853e065d0096a2657a71\",\n  \"0xd901b0618ce2b7f61457ced5621bea4820954ce4\",\n  \"0xdf7952b35f24acf7fc0487d01c8d5690a60dba07\",\n  \"0xf5db804101d8600c26598a1ba465166c33cdaa4b\",\n  \"0x299b6f57922533e1dd9edb8fe76ef632fb2b081e\",\n  \"0x36a8377e2bb3ec7d6b0f1675e243e542eb6a4764\",\n  \"0x4173eff368153f1f1c87be05226ebca9e5f5748b\",\n  \"0x684cd10b02cdade20f1858c6315052d66d1eafc2\",\n  \"0x7227e371540cf7b8e512544ba6871472031f3335\",\n  \"0xd317cfff093c08a43062b39075e51ac2060317f2\",\n  \"FxN1Q3vzdUmkx3qVgsnLiQtRWfYK1MAejEjret9dY68E\",\n  \"4V8LnMchSg7LpgNNJxGrcJaheeW5eSiJKRuocxf4YvXn\",\n  \"9ayoVUQVpHRcDyrdJ1dDUmkxtY74SYgEo7fMRSbW7GQ6\",\n  \"83ENiVFRQvVLAsP2gp4pW9EDphsiorgXaZjSuaWwjQEq\",\n  \"2nVCGdoR6xehmoPfTAof7xSvdnGaEKhvXi48BeaXbxNW\",\n  \"3mUeDoxSzSpBudaWVygwszkVSHUkeJ7q4C5DGjhi9twL\",\n  \"J1JLJjYotfACqTQ8g1vWUW9BHRSkJ3NxTqJiukf3aTmn\",\n  \"CECj5imCnAv7avNjSETanhRMxWz5yR2ZN5jfFqAijzmK\",\n  \"GHVaMJPwJYrqDaHCGLksvsfGoNaS6NVHL5wc31osASYZ\",\n  \"85d8VHCBpER7NeT8Quzcos7iGoZouLkaZNfqfQ5VN3kP\",\n  \"EBDEioh6L5UZxuyPPZ9gY3H6fsRqmPEvSXL2EKv588qz\",\n  \"BZM9yMv9CXZDYV2JGNWSdNJc6xWGfEHY4vUWX9rc4W4n\",\n  \"4cc5svLcu1xyYCGcfwDop64ZMs6WJiCY6JrKF711GDLu\",\n  \"8cWC1faRe7fkTMu5wAVQoSbkYChJUNTTCneLhZprqMBj\",\n  \"F14j998PJo8CdNU4aS7vEWqm8duNuZAZ6bgrAJhJHPNw\",\n  \"DZUjZ8p3QtuSnozqFsuHYTjPFCWkgkgWhD7b71AvbKEC\",\n  \"AtjDYmFmnjhh8VMJHAEY3CYMdWCPEDzJzxjjTrMrcY4K\",\n  \"GwBPGaMyR8cDKVuGgFUdLqevDkMbKNNKRerhvqJD6hL3\",\n  \"B3fYjDpfJ9q7YJfnrjeFgALaiLn5DaobPje3VQZ8zk4a\",\n  \"3KeSd9UcWFWq7DQnUWT9tXkgb54yUUCynLzJZkaMoqEX\",\n  \"XUhiSfF7NN3s8T4gZByoae7sKKuLfffkgF14G6PYHPH\",\n  \"2BLYg54F2ejko6Dz6gDPDDGUMxFPHe4v6oNTsshRnS9S\",\n  \"HEr369zRti7fShFufrxg7zpmGsRcWey8XNoGdr6bfFHp\",\n  \"997VfMfoCp6uh8ZjJZeSm7yDEP9x2iJVPqrLk2M6XBx4\",\n  \"BuUUVQeiCNoChQ2CRAgVuXCS56ZF5m8AtGen8LtcjdTv\",\n  \"DHUFjTnK94Yx9MybaosFxFFa4pmvxoo2toHxDXZisthU\",\n  \"73nxe85cw4XqQ2o5znPCZDVXL5zf3wpM59boCqnhRzqz\",\n  \"BbMsktYU3XDZNTB2jNU75RZPak2pu75jDRudHtjbLBMD\",\n  \"2K8p6q9KVkDBcedrXpVgAkr4AH9BAZf2BvvXkQvgC3L1\",\n  \"G1k5umwEmgziVLAetgmuGRw6sBRodRCGviRNT5HW3CK6\",\n  \"2XNvSJhJjpXBbvmhrnbx3BNMTC3JhAmyC11nkmWkTtuM\",\n  \"FBoetbUNf5GVJfnCXDf5uo9HMVwmvuSYBMmEVKTKDFd3\",\n  \"8TgS1Z1H3YM2qer6wQfVgfs1zrrkEhN8jwqZwEkuaoQs\",\n  \"2P2hiNdVyn6BhC4zhGiT1Ct2Jm47F8eShfkwwEDeerCu\",\n  \"8nTjurPHAGSttLJHhfPws5wqnPF2ogNg2BWGyJV9Tpt\",\n  \"gJbDs6Mp78jMV2vuwZei6oRaPfVQycYxvZXkc8emKoi\",\n  \"55VXhAfPKEG5LhQyakH3eUrxy3zrC6pryQSPy5SMDpRW\",\n  \"FKxYYQNyigzTfyig4Gyvxkcq9wFb4FEQPq9KvNLoMQ2R\",\n  \"9fhR7uHDtJEWBzE9hiwCemggMiKiZGzMmMS22mG3DNuN\",\n  \"Cjduv1s4nUkt8i7syFr8yjUvYa5GiNASVKPnNorPSjyo\",\n  \"5Gak12U6pxnyh8akeDY4jdaUBJ6FziEVSTDFDSX97acs\",\n  \"8Urs8EzwgvNSyRXgSVkuBAD4B5odLfKih6rTn75YnXes\",\n  \"Ft4y4KR1Vf45js7RBWbuT7nTFaZmty11sCTGcfJ4fAsx\",\n  \"4iKnL1CTvA3yrcchB17vz3yBSmaj2aLvhxPhtBEXvtdd\",\n  \"2KfyLN3iyBHYGajiHzEj75aZqeNM22FA9jh8QaKQbwD2\",\n  \"5tBZ5feptkoEWiGhisi1y81gzYg3PAJ9v5QbY6uJ4P9a\",\n  \"AJnfVpnmtN3oo5jMT1Rxr9VQdVxLUuF6U35oSFRMtten\",\n  \"8TEPXUw4vtZuy2xizHfDcccCfsNMxpADrEBw9FJXe3tJ\",\n  \"CVsnX3yUwQoe2WappLEhBbu4vxZAE6Bym33UkKuYgKqf\",\n  \"8TxaeiYDUhVL6cJVxHeS5Gx6UpE3G4zsQJMaejHttb5x\",\n  \"5usxCLasTHRAJqC2kzqboAzQQA4jibxWPCbb3Xtc5r7z\",\n  \"FsBzFoC4YYeAvdRX1d4AmYcwtZbcp3ctGs137AsGzLRe\",\n  \"CYPz33SnBXkCf1SfsN5yWk5jRCU7r4m4m236K7LYQYUn\",\n  \"DmGzNiorJqWac5cNejfUkk3vxYPkbarsB29y3ZdZ2chi\",\n  \"6Z551xuQRipV5tfiLawgALuufBtMYRhHiL8Mco1uoQHp\",\n  \"8QFELiySN2tQutqamND7v557BpuE3Nu4h5KLxnaLa92K\",\n  \"HciHdyzYoCuhFCgYCvCYsXssJuxkHhE68anbgBvqsa4Y\",\n  \"AsVWRy4KfRErkcyif5ZXXvVdTeeWLKJaLo5ZKAfYxuFe\",\n  \"DNKy4mE6onmzDYYGd4vP9BuJByDoPYdoFKvHUtveCarn\",\n  \"EBms1LbV3o6h4eCTAzyZ4xoBmJ1T4SuhQLLguCJ88LBA\",\n  \"7xaMEDQ1gTJhXTZ1LYgoMBEeGXiZNmY3QhPxcnBKjkcS\",\n  \"71hXBp4hbpYrVSsKMuFACF5UJMBasCmPybpN3dyNdFxJ\",\n  \"EstAdgD62RLLPCsLVgJWxxQAeQAJ8iX7Yid9EJp99CQ7\",\n  \"HHodYwygcTYuxBNrQx1aLwfQLkJaAMcioXvMs7LNK6Jf\",\n  \"AkydeQuFwTsWj8YrmKdhV4TE1w5Nc9DF5ipgfNGs2k8q\",\n  \"AmJ52MAQXAjtFkFdAYkLWKZU3zp2BDryLcbQQ1hMSBcp\",\n  \"BQHvhpAwZr83joHaEJrKUY4Lij4ZXqKgi9MzeBeiatbX\",\n  \"7oEGhi9YJECDHvfbp41spBwGU1pEfgS5mHo8cXGwfxug\",\n  \"364ue6kuFJM6reWX7Lz8LwCxA7TeVbWuMXBFrv1EZYWS\",\n  \"88R54Zx8TLM4roQPTrHSpA5BfLFQVu5CcH9DyxWmfxDV\",\n  \"F11NLrf3w5WuR8kyPFfgpdG9qMM7QoS9JdkMyFu9B6z\",\n  \"DzgpaoTtvcxmfAuceZR3Q4xAJjjHCcFURJ4orMiAP1oB\",\n  \"8iNwAG4LCFoxZWmpAPq2AUXmdBAeeGNgxUZnRNJ2oaxZ\",\n  \"Jzv1Tp99guHWs4WxmcSV3ty3UHhqwv312Wb7A59Cm6B\",\n  \"HqTSsezCJ49VjpcRvGtN4WbLHgywkpqrQZAPPR4sid7P\",\n  \"7b9xH9DZ5EjehncbST6Cw2cVVVmJccYsoYa7CmVxV74w\",\n  \"FE5zmTuD1zaaDheJf8HxDJS8HFVHaFTHbeonxqrBMYhm\",\n  \"JD9NiPVbSHGAanmxnXCcmYaXfa56rWwzvB6TVAXkirYS\",\n  \"F2kkKqoUr8gCfjXTUknLQZ8TEvedkNA5s6Ne6XS4CPQf\",\n  \"38QnWX1xq83uspnp9nY6cEhdcRcx1dw5VJwxudZ7ugDM\",\n  \"Gzkr9pHFCQ3WqkyRMZobPSXZNheFQKYrjJCVs1Xmhj6R\",\n  \"jfLuStusES8VBAHqFSBB9XXX5vQjjWxZGyEYdDRS2yz\",\n  \"9dFPAaubJzhHFpsc8s4qbSepMFEKecaQYHrUKQMRoZcs\",\n  \"6yCBHAmvBAZkFSXi7u8Sj7n9pNPuDFrGahNnLxpAk9YJ\",\n  \"A2SgMawSkCjdhQpBypwRpCSryAPa6B65dRetu3YGX4ay\",\n  \"9wPZRx3jrYQ2U3AwrxRJ8dQXFgVt8Qc5BxjD2reAD81\",\n  \"C6FGVFzzwGqxEGnEqQva4zZ6tdVXHDY4KsPuDFMKQipA\",\n  \"28awX2aLeyDik4aYtLe3xgvx5rnA9PeJrUmEepbps1XU\",\n  \"7B3esUC5uCw3yLcpvU91q3poeVENLpyfLU7SCZxy7YnF\",\n  \"5qoDyfChkPokzd5BXGcbNmqFYwF3dYerLfnN2ujxTCjU\",\n  \"5K5hobUAQLYTiKMGqJBJauZWbQJHLnjmwfbYRu3Kdt59\",\n  \"pavej29HVNfxHEkDxR9fE8zgCozmFuCFFCk7u9dUfci\",\n  \"4hKuAuo8dXgkRLfz78qNHNGs188epLoVmcKPKuDDKFNj\",\n  \"AzX2c2bFMeZcnj1Y6DokKAacDnsRzAo6pyVJmMiVUuVQ\",\n  \"D6uV9j31HV2yv6Cg6uuJuAeSMVdJ7PpVrzRtm1d5N3pV\",\n  \"2VNQusXvHEjMBTkY4gYUUhvdkCMc9DADSSxbdS7sJ1CK\",\n  \"Cug1VKTudanAUbUMh4sw1bicJgcfXqs8x4tjHHPtqkEA\",\n  \"HQnijpcihTRLRaQpywJfo4cM5pZHBffvTATFiomE8g8u\",\n  \"73kJkeEFQYPxT3cHDRG8iiyvUhmSBY2Nc33JpB6DFK2R\",\n  \"4rZifPfY8DdPkWv4mqvctLgcGaBScBQHMCPguZQC28C4\",\n  \"GZivmjaWrg2Va9seuxY4D7SGPP8WnKsKwwc5a87hMAgn\",\n  \"9rMUmiujvmthZoVBaFff2Jf8YW2cX4SzWDK2nritZXK3\",\n  \"CkAD1HLVnqhfMeCXzKuEuhjFd4FmTXRtCVe535jJKVH2\",\n  \"8tfmWiyX4efiXb3P9ti4GfCZZ5FNcwbRZgzfA688K9tC\",\n  \"HXrkcTcRNF6EnvfFaXMpqbSeik7fgbn9DLraBaNmRD5u\",\n  \"59j1gA2ANhYkzvvCZauoisnpfnVk6UbycFHMNBij2jy\",\n  \"5Dot4FyLAdx9LkxrmG4zi6nrRQQcPZjvBAjZ5VmvYWpp\",\n  \"BbL5V1TJuLnMonChPVAfP3uarM5G2XKCfcEaTxzXEqPK\",\n  \"4hmEUPcgHimQ1vNrr3WNGYb1RezmRLD6fVv9TVwAU9yj\",\n  \"Gnmnh3LNaaQ1UmnQMkdGTH7ja2aTHQyxkS7tCfYkxvtD\",\n  \"9BUEx9ULoTQhs3QVzyQvSecxfbTPV8PcuHkHeuRE8LF8\",\n  \"6UF8mqUg1aGakkW2yS4oRPiX1YNBJiqxcoyN9u6pBYo9\",\n  \"7vEHTQ9mmy7T7fkhns3fBFrWqRhXPTZUPgn64QxVirhY\",\n  \"71HGRqeeDwcXJs9CxzPyTurLNdwYwsBBb17CmxoW4VTD\",\n  \"5v2fhVgjH2Xv2v78ysSZWvhZ5wu8ycD4pJE6LRBbaf1G\",\n  \"7rjPaxZ5p5jzZFhEZwVFCsLwvxppmJ8nmsrgxmRMeKMq\",\n  \"7JHruL5Baoqj66RniPDpB1SiKz8jegNuiKLxcvCDVYCa\",\n  \"3xA3wJk9YpgwxNuSc9GHQ6E1Wt8zeKC5oK8yQLg2JzrF\",\n  \"3c7r6ZtTDxN1fxc1ixM8Ay26hTyfnucs3yx42vVH4LM3\",\n  \"4jsaQWBKn3aSpZbwboxiNRRiagY2xdkoSomfoBRDrdcs\",\n  \"B9txgFSjNXjFQv5VTCu2vhMyCEWnyp9UQWpeZzTLdeKP\",\n  \"96GjikTDDt1FuznnmwE9rzKi2i7gZ3gYwW7g2daW8s2r\",\n  \"C4otrRtEHVeeTkkmMy6WkLkMEbtK49BUgkfYXMNiJhGq\",\n  \"Dtesdhkc5WFDHvjy7JzrpSL7xbN7DHsQhrK5i8vgzogi\",\n  \"Cf2fzzcUhBqtXokdEEg4HVuc4dNmgrsz2J8QsvPwMnFU\",\n  \"DoqovGZ86RjsFZd3TGaLDwaU8mXmw3C195BfV31UuG85\",\n  \"Au3h7j9twciHo6YQ9vznx97rC1D82dcqdBgBqkzwKMGm\",\n  \"93N68g43aiDTJTTQdJL5djSBytTCSqL62woXubFrX2vJ\",\n  \"6WwzhMYbAWem22ZcVcS2NohsccjmrWZbq1aHDySABTZ2\",\n  \"DGkYVSFoq5cafZJZboHPuzdrKtVYrm4R5oS18nEuZaGu\",\n  \"8MLm9nLqLsDQgoN7nHkUoeu2oqe8J3cuZKc2KCX8Zde2\",\n  \"9Zn1R4fdAHZSrq6hrXdQWdRVJhAUEtpU9gT26KRgRjCb\",\n  \"6j53Ln8GvosfZXar1WCNrmURVxjR8GV9Es2HE6fTvkz9\",\n  \"9Kevoh8H31NQV8kB89aocRTrkt2UGqbs7Ani73WkACrf\",\n  \"8MTsYKzp4qNEFXzM6nWhRk759qqSMbur5DXjbWwDNFCj\",\n  \"CcCVqUaMsKNcQwWHHA3H5yydjcspcD3LhBYP9aYrmweK\",\n  \"FCiSbFdcZSpx1YZFfUCV56KQ34C8CJY9A3JrnMGopNip\",\n  \"5R5cr6dq3v25Z4Cq7qM2dG4hxN5gbY5eUKzETRnBYXUf\",\n  \"DeQDKoAuR1BYvspX8dHehyua3VRuCmD2zbEvZ97NLjas\",\n  \"C6nyuPc5wZLB1c3rFvchbF4aLZBn4yujtDyeqsJDhXSL\",\n  \"7vzFUmX9qZiznTikem4Eu2v2aa1BkqDsuT3gvYLq2rRT\",\n  \"Nf2WRYpG8hquo3BsvioYxKZmDECvuS7HmDhHrpQrdYv\",\n  \"Fz5jKMiXi5SN4TqQ12fYm49QFxJkeLoyYEZWVwRwyBCC\",\n  \"FCs3xYBoo55HenGpeNETpuWjuPfzegHhDQFzEuu3HWuM\",\n  \"CC56nm4aRSd7RzcnrX9VH5VXnfj5Bq1XLGRxXy9oDm2p\",\n  \"BLJg1tgRZdzPxXhJngtbCnuJ8PtsVpFjFcoUby2NXxjH\",\n  \"4Y3Lfzeh9m45GomuKpqjj6bVRLpNnn7wyosPzRyx8bQW\",\n  \"8GCrwThSdG2JUXwwisFtwEs5gkGGxjNKQYArRtq6bEPc\",\n  \"78wF4F64K31GbbC9jhi3me4kSqznGtf6KHFLTUTkrEjB\",\n  \"Cy57RjcnLmWhY2ccjEwcFu6SvoySbq6mevDhY54DxVLh\",\n  \"FVTRVzRagRDQj7Lp2n1GyRJ85TNSErhYk4xf283Svnrn\",\n  \"rMH5QQxx9WNZYeCgTEr7TogXT1rnATDaibWcvibHxRp\",\n  \"ENFgBr93NsoG9QHUTHbfEobWtnFmV1fEsAuiaNq1Qxiv\",\n  \"454LshEu93z3auzq2cMbA7PsSw9v8zhuvQRGkfP6eGMx\",\n  \"aHe1GAdAVgijtp55eUmPe6DdUYonRVw6Xdq1QpTmVeM\",\n  \"4BG5Yo4o2nHGDgA1AqH94oUk2CouLuGCSK7ZjqHQaT2J\",\n  \"CCDKm4AEVxeeNVdYNM7X8CBQmtNpySEhBvp1yQ93jjdY\",\n  \"27XFvenPT5LpkJ8FVJdHf3CPaARqgCWm1EsSRt2HrDcH\",\n  \"DqH8Q3e5Bts3rCsC6UpTP18Hf1fD7dfGaP71uR6HpxRg\",\n  \"FPfgDLbWDjSx1FnEdeM5DWqJNpRqv5oDqpmvW18Ef5QQ\",\n  \"6u1TPKaTboYQ8gU7DF7AgEp5cP9N3FTuxxsu5oWi5uJ5\",\n  \"CCg1C49hNR91425PeS1HatXobQkAniJ775N6pjWAiqp2\",\n  \"ENxmdaEsTWXkufsTLngp3sZ89dFZWNoke7F95aVE67Kz\",\n  \"39h7MdBeuMFvcBz5FKGQBqnqR7BSAfp4ob8qLphLc4yo\",\n  \"CRGEVCx5HrRjsbX71RM8acuydKHiXwRwWysF9BJvYTG9\",\n  \"3mzktRHfhxjPirgHF9sjbXf2kwW1RZSudaRpyc478BAA\",\n  \"9J7F9nx2UyVYPuTk21ni2jxprgBpzfMpN7HxJqgKUWxd\",\n  \"3K8NyBHkMdWX672bqqtJC5mZASvqCHtZXPRMhKz8iP2x\",\n  \"65sAs4U5puLv3UC8f5y1DVCGAhpMtTRUoKpMdUMFY1sY\",\n  \"Dxb5mPASvxsoDRhHZEu2arYRqvYByYgyvrtUYxnFJsGg\",\n  \"GF2hTcNvU7HFj5682KBVpffoS223aVhYaaCcM9ngxehs\",\n  \"BBF6JkFMRLMqW5F4Ri8VUNnAK5T2n9MLmRhtuXQNJmZh\",\n  \"8x8J5MGViuLTtxwjwnrLM29USZqx7TcbGvqdaNfA1m8X\",\n  \"U4Babgbjm7ciqth5XDJppzVk7WhGnHNZUGvPL2ox8HB\",\n  \"3Y9f4MxYEvjWfiBJexTSnRQcKVD8e1aSUs4Z6FZYj5K1\",\n  \"CZZ5B1Az9kW2nyRHM5mABS2NWuStoHCPcfh75KFo2UsN\",\n  \"tRKmpQWu48phJXR7W4d2skG9W4nvb5cb976bkGQYAuN\",\n  \"3iAabhw1Rdu2HimbzT9gDCDcuod7TmBtcZwFWxGQyFfQ\",\n  \"5TTRcMNMwhiGUZ8JtTnqB6sW3g6P4fAFhWLsV2kJWEsg\",\n  \"8B8VaqcxunjTnbq4mGhPW3C2eHuByWVBRjqKthwX2aRQ\",\n  \"9hi9yukj5ZjtD2Z73zRLca8kARChJmgEaMtYefx454Q3\",\n  \"DTrqt4Wb1H16hdrLwEfFkNVwGYWPqnghb3pREEZejhtS\",\n  \"EitHiKHGWWadEhZahZLHURVoxPqAUofKLEXfYU9NsvMp\",\n  \"4ZscrWACeLLYrsFLQjX16bdjCqLy6vkKuHa2w3fsakDe\",\n  \"FuPR7rUMzphpQ3YhmENUJUt5gvtDpJDbUqSa6FA82U6p\",\n  \"2o9C56tqnc54QF54MxGn38DNNEa9vAMow3bc5VMqogMV\",\n  \"Ffgr3YTKvhWkdv2pSW2F5VEVvLQvnatje1ookcuJpBAF\",\n  \"J9rKCnTuERL9G95FmFQnYDeLVYrNa7pQBiL13oqGgH3t\",\n  \"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\",\n  \"779kNT4696bMaAkeAHxezAuniTrVjfvrp3vABvhdPGWs\",\n  \"4fA5U4w4DfmNojhKKBCVHeAY5VQ4dYpx5uFQSsrknSFA\",\n  \"BU2oyceVSZXYzxURwhAvfULBSe59v22LQfuYgS585L1g\",\n  \"3BApsMpiSaHfF2a59aW9XAPfGQ8WMaQd7Q1F9rTbhGqv\",\n  \"5oWeivCzcQrcmueDbUAfPQRfjGeDqkVDxErchHUz8NCh\",\n  \"2rrZbBRpt5o7GKnTHusTqRANsj1vs5t4WC9CQPt2cujb\",\n  \"CbN1vKsz99qbQidVR5RfBLmrxPoYbJguEAnsFi5BN5WU\",\n  \"CTwRHSdPNGucwLuLqUMSc5ddJbnSN7GjKFYfm91wJHVo\",\n  \"6NKWLHZENHKvditMFu7z97qJypmJTsz1PbjFVpsmrXMY\",\n  \"5D2kc7J4RNcMzfoAQz1E4NWjLS7GzTnJKvTV3HiospCZ\",\n  \"9hrjJvaYETxp6VcRRX4yzT8jtH6gzoVtFUqdaCksisx4\",\n  \"2kUMSNYvpWXqrpSV2L1GV5UWYH3CFXF7F9QbGkgv9kNw\",\n  \"8nRkgYkufaLQVtuaaPGwrKJBSS7tu55YWx3EiRufD9uU\",\n  \"7aLAz1NE2hx7adjrgDs87GT49gwTkmW2n8gHSRJUVzHa\",\n  \"G2kuL2iKEdYmZBnM1a8rA5j5si4AqySJUq3ujPaJxkDk\",\n  \"FQJUJSHQACz7WLHVM7iS2dKnZVWwFHTuwUdtByLMxXF8\",\n  \"AhtJTzNB7zwLB7RxqbYcpAKBeEfxYrczz12Nn4FgVb2y\",\n  \"7zEHcoELyPvmipqXL297edddhxLfx25UGTvY8dMrZqzT\",\n  \"38mqzHtHLmUMCZyuZKEQB8Zkg2fGkToYw4gVwPC3NoH3\",\n  \"3kL3aPezAbZxzamMurWvjMpXkVQgLAgrh9wT1CeS3CnK\",\n  \"EB7hzkjRjV3AFCfQDuPK8joneM6dW2a96rJCHvc7p1fW\",\n  \"AVbSKg271GmzqrtPmU5fRza9uR2HGLhTy3yiM1mMPTpw\",\n  \"CoVJmrq8KeRZGAcKa6h6mueQsFotVkibehWeKGCZBXe\",\n  \"5bwpMvAA65frL4A1B3nYQcQjLHGUzHhkHX5FV4CVi1s8\",\n  \"Kyi9YmFqBARjW8KwS192hyrfzwyQbCR6utt5yr6hoNg\",\n  \"ESrJ2tXdmkGv81FNJmJcezunQLz3fP6WFzfmZd6d4FPn\",\n  \"8qMsDP7hFWZAKGA2taL7u8rERH4te4D4i8cxzHKtAMcA\",\n  \"5c1ymadNzqM9cE8K8gqDguNYg2jWnGcNBV5S3tGGdhM2\",\n  \"Gx4Y9M67BPsAViveoBcm4JocVh82S7pZsaXc4PH9EibE\",\n  \"5Xb7BoMNP19cXPgLdzrAkJCarznkYAfpmyyCvynJam7K\",\n  \"EZH44QW2BzUijN79rrngRUoGHCJGWitabxkVkT82XpeA\",\n];\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useNFTTVL from \"../../hooks/useNFTTVL\";\nimport {\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n} from \"../../utils/consts\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport {\n  //DENY_LIST,\n  ALLOW_LIST,\n} from \"./nftLists\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  tableBox: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    flexWrap: \"wrap\",\n  },\n  randomButton: {\n    margin: \"0px auto 8px\",\n    display: \"block\",\n  },\n  randomNftContainer: {\n    minHeight: \"550px\",\n    maxWidth: \"100%\",\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n  tableContainer: {\n    flexGrow: 1,\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n  },\n}));\n\nconst NFTStats: React.FC<any> = () => {\n  const classes = useStyles();\n  const nftTVL = useNFTTVL();\n\n  //Disable this to quickly turn off\n  //TODO also change what data is fetched off this\n  const enableRandomNFT = true;\n\n  const [randomNumber, setRandomNumber] = useState<number | null>(null);\n  const randomNft = useMemo(\n    () =>\n      (randomNumber !== null && nftTVL.data && nftTVL.data[randomNumber]) ||\n      null,\n    [randomNumber, nftTVL.data]\n  );\n  const genRandomNumber = useCallback(() => {\n    if (!nftTVL || !nftTVL.data || !nftTVL.data?.length || nftTVL.isFetching) {\n      setRandomNumber(null);\n    } else {\n      let found = false;\n      let nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n\n      while (!found) {\n        if (!nftTVL.data) {\n          return null;\n        }\n        const item = nftTVL?.data[nextNumber]?.mintKey?.toLowerCase() || null;\n        if (ALLOW_LIST.find((x) => x.toLowerCase() === item)) {\n          found = true;\n        } else {\n          nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n        }\n      }\n\n      setRandomNumber(nextNumber);\n    }\n  }, [nftTVL]);\n  useEffect(() => {\n    genRandomNumber();\n  }, [nftTVL.isFetching, genRandomNumber]);\n\n  const data = useMemo(() => {\n    const output: any[] = [];\n    if (nftTVL.data && !nftTVL.isFetching) {\n      CHAINS_WITH_NFT_SUPPORT.forEach((chain) => {\n        output.push({\n          nfts: nftTVL?.data?.filter((x) => x.chainId === chain.id),\n          chainName: chain.name,\n          chainId: chain.id,\n          chainLogo: chain.logo,\n          contractAddress: getNFTBridgeAddressForChain(chain.id),\n        });\n      });\n    }\n\n    return output;\n  }, [nftTVL]);\n\n  //Generate allow list\n  // useEffect(() => {\n  //   const output: string[] = [];\n  //   if (nftTVL.data) {\n  //     nftTVL.data.forEach((item) => {\n  //       if (\n  //         !DENY_LIST.find((x) => x.toLowerCase() === item.mintKey.toLowerCase())\n  //       ) {\n  //         if (!output.includes(item.mintKey)) {\n  //           output.push(item.mintKey);\n  //         }\n  //       }\n  //     });\n  //   }\n  //   console.log(JSON.stringify(output));\n  // }, [nftTVL.data]);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      // {\n      //   Header: \"Address\",\n      //   accessor: \"contractAddress\",\n      //   disableGroupBy: true,\n      //   Cell: (value: any) =>\n      //     value.row?.original?.contractAddress &&\n      //     value.row?.original?.chainId ? (\n      //       <SmartAddress\n      //         chainId={value.row?.original?.chainId}\n      //         address={value.row?.original?.contractAddress}\n      //       />\n      //     ) : (\n      //       \"\"\n      //     ),\n      // },\n      {\n        Header: \"NFTs Locked\",\n        id: \"nftCount\",\n        accessor: \"nftCount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nfts?.length !== undefined\n            ? numeral(value.row?.original?.nfts?.length).format(\"0 a\")\n            : \"\",\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h5\">Total NFTs Locked</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          These NFTs are currently locked by the NFT Bridge contracts.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n      {!nftTVL.isFetching ? (\n        <div\n          className={clsx(classes.explainerContainer, classes.totalContainer)}\n        >\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"div\"\n            noWrap\n          >\n            {\"Total \"}\n          </Typography>\n          <Typography\n            variant=\"h3\"\n            component=\"div\"\n            noWrap\n            className={classes.totalValue}\n          >\n            {nftTVL.data?.length || \"0\"}\n          </Typography>\n        </div>\n      ) : null}\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{ sortBy: [{ id: \"nftCount\", desc: true }] }}\n    />\n  );\n\n  const randomNFTContent =\n    enableRandomNFT && randomNft ? (\n      <div className={classes.randomNftContainer}>\n        <Button\n          className={classes.randomButton}\n          variant=\"contained\"\n          onClick={genRandomNumber}\n          color=\"primary\"\n        >\n          Load Random Wormhole NFT\n        </Button>\n        <NFTViewer chainId={randomNft.chainId} value={randomNft} />\n      </div>\n    ) : null;\n\n  // const allNfts =\n  //   nftTVL?.data?.map((thing) => (\n  //     <NFTViewer chainId={thing.chainId} value={thing} />\n  //   )) || [];\n\n  return (\n    <>\n      {header}\n      {nftTVL.isFetching ? (\n        <CircularProgress className={classes.alignCenter} />\n      ) : (\n        <div className={classes.tableBox}>\n          <div className={classes.tableContainer}>{table}</div>\n          {randomNFTContent}\n        </div>\n      )}\n      {/* {allNfts} */}\n    </>\n  );\n};\n\nexport default NFTStats;\n","import axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  RECENT_TRANSACTIONS_WORMHOLE,\n  TOTAL_TRANSACTIONS_WORMHOLE,\n  VAA_EMITTER_ADDRESSES,\n} from \"../utils/consts\";\n\nexport type TransactionCount = {\n  totalAllTime: number;\n  total24h: number;\n  mostRecent: any; //This will be a signedVAA\n};\n\nconst mergeResults = (totals: any, recents: any): TransactionCount | null => {\n  let totalAllTime = 0;\n  let total24h = 0;\n  VAA_EMITTER_ADDRESSES.forEach((address: string) => {\n    let totalAll = (totals?.TotalCount && totals.TotalCount[address]) || 0;\n    let total24 = (totals?.LastDayCount && totals.LastDayCount[address]) || 0;\n\n    totalAllTime += totalAll;\n    total24h += total24;\n  });\n\n  return {\n    totalAllTime,\n    total24h,\n    mostRecent: null,\n  };\n};\n\nconst useTransactionCount = (): DataWrapper<TransactionCount> => {\n  const [totals, setTotals] = useState(null);\n  const [recents, setRecents] = useState(null);\n\n  const [loadingTotals, setLoadingTotals] = useState(false);\n  const [loadingRecents, setLoadingRecents] = useState(false);\n\n  const [totalsError, setTotalsError] = useState(\"\");\n  const [recentsError, setRecentsError] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingTotals(true);\n    axios.get(TOTAL_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setTotals(results.data);\n          setLoadingTotals(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setTotalsError(\"Unable to retrieve transaction totals.\");\n          setLoadingTotals(false);\n        }\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingRecents(true);\n    axios.get(RECENT_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setRecents(results.data);\n          setLoadingRecents(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setRecentsError(\"Unable to retrieve recent transactions.\");\n          setLoadingRecents(false);\n        }\n      }\n    );\n  }, []);\n\n  return useMemo(() => {\n    const data = mergeResults(totals, recents);\n    return {\n      isFetching: loadingRecents || loadingTotals,\n      error: totalsError || recentsError,\n      receivedAt: null,\n      data: data,\n    };\n  }, [\n    totals,\n    recents,\n    loadingRecents,\n    loadingTotals,\n    recentsError,\n    totalsError,\n  ]);\n};\n\nexport default useTransactionCount;\n","import {\n  CircularProgress,\n  Link,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport useTransactionCount from \"../../hooks/useTransactionCount\";\nimport { WORMHOLE_EXPLORER_BASE } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  totalsBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n  },\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  typog: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nconst TransactionMetrics: React.FC<any> = () => {\n  const transactionCount = useTransactionCount();\n  const classes = useStyles();\n  const isFetching = transactionCount.isFetching;\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div>\n        <Typography variant=\"h5\">Transaction Count</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          This is how many transactions the Token Bridge has processed.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const content = (\n    <div className={classes.totalsBox}>\n      <div className={classes.totalContainer}>\n        <Typography\n          variant=\"body2\"\n          color=\"textSecondary\"\n          component=\"div\"\n          noWrap\n        >\n          {\"Last 48 Hours\"}\n        </Typography>\n        <Typography\n          variant=\"h3\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {transactionCount.data?.total24h || \"0\"}\n        </Typography>\n      </div>\n      <div className={classes.totalContainer}>\n        <Typography\n          variant=\"body2\"\n          color=\"textSecondary\"\n          component=\"div\"\n          noWrap\n        >\n          {\"All Time\"}\n        </Typography>\n        <Typography\n          variant=\"h3\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {transactionCount.data?.totalAllTime || \"0\"}\n        </Typography>\n      </div>\n    </div>\n  );\n\n  const networkExplorer = (\n    <Typography\n      variant=\"subtitle1\"\n      className={clsx(classes.alignCenter, classes.typog)}\n    >\n      To see metrics for the entire Wormhole Network (not just this bridge),\n      check out the{\" \"}\n      <Link href={WORMHOLE_EXPLORER_BASE} target=\"_blank\">\n        Wormhole Network Explorer\n      </Link>\n    </Typography>\n  );\n\n  return (\n    <>\n      {header}\n      {isFetching ? (\n        <CircularProgress className={classes.alignCenter} />\n      ) : (\n        <>\n          {content}\n          {networkExplorer}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default TransactionMetrics;\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { formatUnits, parseUnits } from \"@ethersproject/units\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useMemo } from \"react\";\nimport useTVL from \"../../hooks/useTVL\";\nimport { COLORS } from \"../../muiTheme\";\nimport SmartAddress from \"../SmartAddress\";\nimport { balancePretty } from \"../TokenSelectors/TokenPicker\";\nimport CustodyAddresses from \"./CustodyAddresses\";\nimport NFTStats from \"./NFTStats\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport TransactionMetrics from \"./TransactionMetrics\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(2),\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n}));\n\nconst StatsRoot: React.FC<any> = () => {\n  const classes = useStyles();\n  const tvl = useTVL();\n\n  const sortTokens = useMemo(() => {\n    return (rowA: any, rowB: any) => {\n      if (rowA.isGrouped && rowB.isGrouped) {\n        return rowA.values.assetAddress > rowB.values.assetAddress ? 1 : -1;\n      } else if (rowA.isGrouped && !rowB.isGrouped) {\n        return 1;\n      } else if (!rowA.isGrouped && rowB.isGrouped) {\n        return -1;\n      } else if (rowA.original.symbol && !rowB.original.symbol) {\n        return 1;\n      } else if (rowB.original.symbol && !rowA.original.symbol) {\n        return -1;\n      } else if (rowA.original.symbol && rowB.original.symbol) {\n        return rowA.original.symbol > rowB.original.symbol ? 1 : -1;\n      } else {\n        return rowA.original.assetAddress > rowB.original.assetAddress ? 1 : -1;\n      }\n    };\n  }, []);\n  const tvlColumns = useMemo(() => {\n    return [\n      {\n        Header: \"Token\",\n        id: \"assetAddress\",\n        sortType: sortTokens,\n        disableGroupBy: true,\n        accessor: (value: any) => ({\n          chainId: value.originChainId,\n          symbol: value.symbol,\n          name: value.name,\n          logo: value.logo,\n          assetAddress: value.assetAddress,\n        }),\n        aggregate: (leafValues: any) => leafValues.length,\n        Aggregated: ({ value }: { value: any }) =>\n          `${value} Token${value === 1 ? \"\" : \"s\"}`,\n        Cell: (value: any) => (\n          <div className={classes.tokenContainer}>\n            <div className={classes.logoPositioner}>\n              {value.row?.original?.logo ? (\n                <img\n                  src={value.row?.original?.logo}\n                  alt=\"\"\n                  className={classes.logo}\n                />\n              ) : null}\n            </div>\n            <SmartAddress\n              chainId={value.row?.original?.originChainId}\n              address={value.row?.original?.assetAddress}\n              symbol={value.row?.original?.symbol}\n              tokenName={value.row?.original?.name}\n            />\n          </div>\n        ),\n      },\n      { Header: \"Chain\", accessor: \"originChain\" },\n      {\n        Header: \"Amount\",\n        accessor: \"amount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.amount !== undefined\n            ? numeral(value.row?.original?.amount).format(\"0,0.00\")\n            : \"\",\n      },\n      {\n        Header: \"Total Value (USD)\",\n        id: \"totalValue\",\n        accessor: \"totalValue\",\n        align: \"right\",\n        disableGroupBy: true,\n        aggregate: (leafValues: any) =>\n          balancePretty(\n            formatUnits(\n              leafValues.reduce(\n                (p: BigNumber, v: number | null | undefined) =>\n                  v ? p.add(parseUnits(v.toFixed(18).toString(), 18)) : p,\n                BigNumber.from(0)\n              ),\n              18\n            )\n          ),\n        Aggregated: ({ value }: { value: any }) => value,\n        Cell: (value: any) =>\n          value.row?.original?.totalValue !== undefined\n            ? numeral(value.row?.original?.totalValue).format(\"0.0 a\")\n            : \"\",\n      },\n      {\n        Header: \"Unit Price (USD)\",\n        accessor: \"quotePrice\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.quotePrice !== undefined\n            ? numeral(value.row?.original?.quotePrice).format(\"0,0.00\")\n            : \"\",\n      },\n    ];\n  }, [\n    classes.logo,\n    classes.tokenContainer,\n    classes.logoPositioner,\n    sortTokens,\n  ]);\n  const tvlString = useMemo(() => {\n    if (!tvl.data) {\n      return \"\";\n    } else {\n      let sum = 0;\n      tvl.data.forEach((val) => {\n        if (val.totalValue) sum += val.totalValue;\n      });\n      return numeral(sum).format(\"0 a\").toUpperCase();\n    }\n  }, [tvl.data]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Paper className={classes.mainPaper}>\n        <>\n          <div className={classes.flexBox}>\n            <div className={classes.explainerContainer}>\n              <Typography variant=\"h5\">Total Value Locked</Typography>\n              <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                These assets are currently locked by the Token Bridge contracts.\n              </Typography>\n            </div>\n            <div className={classes.grower} />\n            {!tvl.isFetching ? (\n              <div\n                className={clsx(\n                  classes.explainerContainer,\n                  classes.totalContainer\n                )}\n              >\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  component=\"div\"\n                  noWrap\n                >\n                  {\"Total (USD)\"}\n                </Typography>\n                <Typography\n                  variant=\"h3\"\n                  component=\"div\"\n                  noWrap\n                  className={classes.totalValue}\n                >\n                  {tvlString}\n                </Typography>\n              </div>\n            ) : null}\n          </div>\n          {!tvl.isFetching ? (\n            <MuiReactTable\n              columns={tvlColumns}\n              data={tvl.data}\n              skipPageReset={false}\n              initialState={{ sortBy: [{ id: \"totalValue\", desc: true }] }}\n            />\n          ) : (\n            <CircularProgress className={classes.alignCenter} />\n          )}\n        </>\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <NFTStats />\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <TransactionMetrics />\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <CustodyAddresses />\n      </Paper>\n    </Container>\n  );\n};\n\nexport default StatsRoot;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n  uint8ArrayToNative,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOLANA_SYSTEM_PROGRAM_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type OriginalAssetInfo = {\n  originChain: ChainId | null;\n  originAddress: string | null;\n  originTokenId: string | null;\n};\n\nexport async function getOriginalAssetToken(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  provider?: Web3Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider) {\n      promise = await getOriginalAssetEth(\n        getTokenBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = await getOriginalAssetSol(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    } else if (foreignChain === CHAIN_ID_TERRA) {\n      const lcd = new LCDClient(TERRA_HOST);\n      promise = await getOriginalAssetTerra(lcd, foreignNativeStringAddress);\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\nexport async function getOriginalAssetNFT(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  tokenId?: string,\n  provider?: Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider && tokenId) {\n      promise = getOriginalAssetEthNFT(\n        getNFTBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        tokenId,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = getOriginalAssetSolNFT(\n        connection,\n        SOL_NFT_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\n//TODO refactor useCheckIfWormholeWrapped to use this function, and probably move to SDK\nexport async function getOriginalAsset(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  nft: boolean,\n  tokenId?: string,\n  provider?: Provider\n): Promise<WormholeWrappedNFTInfo> {\n  const result = nft\n    ? await getOriginalAssetNFT(\n        foreignChain,\n        foreignNativeStringAddress,\n        tokenId,\n        provider\n      )\n    : await getOriginalAssetToken(\n        foreignChain,\n        foreignNativeStringAddress,\n        provider\n      );\n\n  if (\n    isEVMChain(result.chainId) &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      ethers.constants.AddressZero\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n  if (\n    result.chainId === CHAIN_ID_SOLANA &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      SOLANA_SYSTEM_PROGRAM_ADDRESS\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n\n  return result;\n}\n\n//This potentially returns the same chain as the foreign chain, in the case where the asset is native\nfunction useOriginalAsset(\n  foreignChain: ChainId,\n  foreignAddress: string,\n  nft: boolean,\n  tokenId?: string\n): DataWrapper<OriginalAssetInfo> {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const [originAddress, setOriginAddress] = useState<string | null>(null);\n  const [originTokenId, setOriginTokenId] = useState<string | null>(null);\n  const [originChain, setOriginChain] = useState<ChainId | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previousArgs, setPreviousArgs] = useState<{\n    foreignChain: ChainId;\n    foreignAddress: string;\n    nft: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.foreignChain === foreignChain &&\n    previousArgs.foreignAddress === foreignAddress &&\n    previousArgs.nft === nft &&\n    previousArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () => setPreviousArgs({ foreignChain, foreignAddress, nft, tokenId }),\n    [foreignChain, foreignAddress, nft, tokenId]\n  );\n\n  const argumentError = useMemo(\n    () =>\n      !foreignChain ||\n      !foreignAddress ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && nft && !tokenId) ||\n      argsEqual,\n    [isReady, nft, tokenId, argsEqual, foreignChain, foreignAddress]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setError(\"\");\n      setOriginAddress(null);\n      setOriginTokenId(null);\n      setOriginChain(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n\n    getOriginalAsset(foreignChain, foreignAddress, nft, tokenId, provider)\n      .then((result) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setArgs();\n          setOriginAddress(\n            hexToNativeString(\n              uint8ArrayToHex(result.assetAddress),\n              result.chainId\n            ) || null\n          );\n          setOriginTokenId(result.tokenId || null);\n          setOriginChain(result.chainId);\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Unable to determine original asset.\");\n        }\n      });\n  }, [\n    foreignChain,\n    foreignAddress,\n    nft,\n    provider,\n    setArgs,\n    argumentError,\n    tokenId,\n    argsEqual,\n  ]);\n\n  const output: DataWrapper<OriginalAssetInfo> = useMemo(\n    () => ({\n      error: error,\n      isFetching: isLoading,\n      data:\n        originChain || originAddress || originTokenId\n          ? { originChain, originAddress, originTokenId }\n          : null,\n      receivedAt: null,\n    }),\n    [isLoading, originAddress, originChain, originTokenId, error]\n  );\n\n  return output;\n}\n\nexport default useOriginalAsset;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport useFetchForeignAsset, {\n  ForeignAssetInfo,\n} from \"../hooks/useFetchForeignAsset\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetadata from \"../hooks/useMetadata\";\nimport useOriginalAsset, { OriginalAssetInfo } from \"../hooks/useOriginalAsset\";\nimport { COLORS } from \"../muiTheme\";\nimport { BETA_CHAINS, CHAINS, CHAINS_BY_ID } from \"../utils/consts\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport SmartAddress from \"./SmartAddress\";\nimport { RegisterNowButtonCore } from \"./Transfer/RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(2),\n    },\n  },\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  spacer: {\n    height: theme.spacing(3),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  arrowIcon: {\n    margin: \"0 auto\",\n    fontSize: \"70px\",\n  },\n  resultContainer: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction PrimaryAssetInfomation({\n  lookupChain,\n  lookupAsset,\n  originChain,\n  originAsset,\n  showLoader,\n}: {\n  lookupChain: ChainId;\n  lookupAsset: string;\n  originChain: ChainId;\n  originAsset: string;\n  showLoader: boolean;\n}) {\n  const classes = useStyles();\n  const tokenArray = useMemo(() => [originAsset], [originAsset]);\n  const metadata = useMetadata(originChain, tokenArray);\n  const nativeContent = (\n    <div>\n      <Typography>{`This is not a Wormhole wrapped token.`}</Typography>\n    </div>\n  );\n  const wrapped = (\n    <div>\n      <Typography>{`This is wrapped by Wormhole! Here is the original token: `}</Typography>\n      <div className={classes.flexBox}>\n        <Typography>{`Chain: ${CHAINS_BY_ID[originChain].name}`}</Typography>\n        <div>\n          <Typography component=\"div\">\n            {\"Token: \"}\n            <SmartAddress\n              address={originAsset}\n              chainId={originChain}\n              symbol={metadata.data?.get(originAsset)?.symbol}\n              tokenName={metadata.data?.get(originAsset)?.tokenName}\n            />\n          </Typography>\n        </div>\n      </div>\n    </div>\n  );\n  return lookupChain === originChain ? nativeContent : wrapped;\n}\n\nfunction SecondaryAssetInformation({\n  chainId,\n  foreignAssetInfo,\n  originAssetInfo,\n}: {\n  chainId: ChainId;\n  foreignAssetInfo?: ForeignAssetInfo;\n  originAssetInfo?: OriginalAssetInfo;\n}) {\n  const classes = useStyles();\n  const tokenArray: string[] = useMemo(() => {\n    //Saved to a variable to help typescript cope\n    const originAddress = originAssetInfo?.originAddress;\n    return originAddress && chainId === originAssetInfo?.originChain\n      ? [originAddress]\n      : foreignAssetInfo?.address\n      ? [foreignAssetInfo?.address]\n      : [];\n  }, [foreignAssetInfo, originAssetInfo, chainId]);\n  const metadata = useMetadata(chainId, tokenArray);\n  //TODO when this is the origin chain\n  return !originAssetInfo ? null : chainId === originAssetInfo.originChain ? (\n    <div>\n      <Typography>{`Transferring to ${CHAINS_BY_ID[chainId].name} will unwrap the token:`}</Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={originAssetInfo.originAddress || undefined}\n          symbol={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")\n              ?.tokenName || undefined\n          }\n        />\n      </div>\n    </div>\n  ) : !foreignAssetInfo ? null : foreignAssetInfo.doesExist === false ? (\n    <div>\n      <Typography>{`This token has not yet been registered on ${CHAINS_BY_ID[chainId].name}`}</Typography>\n      <RegisterNowButtonCore\n        originChain={originAssetInfo?.originChain || undefined}\n        originAsset={\n          nativeToHexString(\n            originAssetInfo?.originAddress || undefined,\n            originAssetInfo?.originChain || CHAIN_ID_SOLANA // this should exist\n          ) || undefined\n        }\n        targetChain={chainId}\n      />\n    </div>\n  ) : (\n    <div>\n      <Typography>When bridged, this asset becomes: </Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={foreignAssetInfo.address || undefined}\n          symbol={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.tokenName ||\n            undefined\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function TokenOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n\n  const [primaryLookupChain, setPrimaryLookupChain] = useState(CHAIN_ID_SOLANA);\n  const [primaryLookupAsset, setPrimaryLookupAsset] = useState(\"\");\n\n  const [secondaryLookupChain, setSecondaryLookupChain] =\n    useState(CHAIN_ID_TERRA);\n\n  const primaryLookupChainOptions = useMemo(\n    () => (isBeta ? CHAINS.filter((x) => !BETA_CHAINS.includes(x.id)) : CHAINS),\n    [isBeta]\n  );\n  const secondaryLookupChainOptions = useMemo(\n    () =>\n      isBeta\n        ? CHAINS.filter(\n            (x) => !BETA_CHAINS.includes(x.id) && x.id !== primaryLookupChain\n          )\n        : CHAINS.filter((x) => x.id !== primaryLookupChain),\n    [isBeta, primaryLookupChain]\n  );\n\n  const handlePrimaryLookupChainChange = useCallback(\n    (e) => {\n      setPrimaryLookupChain(e.target.value);\n      if (secondaryLookupChain === e.target.value) {\n        setSecondaryLookupChain(\n          e.target.value === CHAIN_ID_SOLANA ? CHAIN_ID_TERRA : CHAIN_ID_SOLANA\n        );\n      }\n      setPrimaryLookupAsset(\"\");\n    },\n    [secondaryLookupChain]\n  );\n  const handleSecondaryLookupChainChange = useCallback((e) => {\n    setSecondaryLookupChain(e.target.value);\n  }, []);\n  const handlePrimaryLookupAssetChange = useCallback((event) => {\n    setPrimaryLookupAsset(event.target.value);\n  }, []);\n\n  const originInfo = useOriginalAsset(\n    primaryLookupChain,\n    primaryLookupAsset,\n    false\n  );\n  const foreignAssetInfo = useFetchForeignAsset(\n    originInfo.data?.originChain || 1,\n    originInfo.data?.originAddress || \"\",\n    secondaryLookupChain\n  );\n\n  const primaryWalletIsActive = !originInfo.data;\n  const secondaryWalletIsActive = !primaryWalletIsActive;\n\n  const primaryWallet = useIsWalletReady(\n    primaryLookupChain,\n    primaryWalletIsActive\n  );\n  const secondaryWallet = useIsWalletReady(\n    secondaryLookupChain,\n    secondaryWalletIsActive\n  );\n\n  const primaryWalletError =\n    isEVMChain(primaryLookupChain) &&\n    primaryLookupAsset &&\n    !originInfo.data &&\n    !originInfo.error &&\n    (!primaryWallet.isReady ? primaryWallet.statusMessage : \"\");\n  const originError = originInfo.error;\n  const primaryError = primaryWalletError || originError;\n\n  const secondaryWalletError =\n    isEVMChain(secondaryLookupChain) &&\n    originInfo.data?.originAddress &&\n    originInfo.data?.originChain &&\n    !foreignAssetInfo.data &&\n    (!secondaryWallet.isReady ? secondaryWallet.statusMessage : \"\");\n  const foreignError = foreignAssetInfo.error;\n  const secondaryError = secondaryWalletError || foreignError;\n\n  const primaryContent = (\n    <>\n      <Typography variant=\"h5\">Source Information</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Enter a token from any supported chain to get started.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Chain\"\n        value={primaryLookupChain}\n        onChange={handlePrimaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {primaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        label=\"Paste an address\"\n        value={primaryLookupAsset}\n        onChange={handlePrimaryLookupAssetChange}\n      />\n      <div className={classes.centered}>\n        {isEVMChain(primaryLookupChain) ? (\n          <KeyAndBalance chainId={primaryLookupChain} />\n        ) : null}\n        {primaryError ? (\n          <Typography color=\"error\">{primaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {originInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <PrimaryAssetInfomation\n            lookupAsset={primaryLookupAsset}\n            lookupChain={primaryLookupChain}\n            originChain={originInfo.data.originChain}\n            originAsset={originInfo.data.originAddress}\n            showLoader={originInfo.isFetching}\n          />\n        ) : null}\n      </div>\n    </>\n  );\n\n  const secondaryContent = originInfo.data ? (\n    <>\n      <Typography variant=\"h5\">Bridge Results</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Select a chain to see the result of bridging this token.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Other Chain\"\n        value={secondaryLookupChain}\n        onChange={handleSecondaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {secondaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <div className={classes.centered}>\n        {isEVMChain(secondaryLookupChain) ? (\n          <KeyAndBalance chainId={secondaryLookupChain} />\n        ) : null}\n        {secondaryError ? (\n          <Typography color=\"error\">{secondaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {foreignAssetInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <SecondaryAssetInformation\n            foreignAssetInfo={foreignAssetInfo.data || undefined}\n            originAssetInfo={originInfo.data || undefined}\n            chainId={secondaryLookupChain}\n          />\n        ) : null}\n      </div>\n    </>\n  ) : null;\n\n  const content = (\n    <div>\n      <Container maxWidth=\"md\" className={classes.centered}>\n        <HeaderText white small>\n          Token Origin Verifier\n        </HeaderText>\n        <div className={classes.spacer} />\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>{primaryContent}</Card>\n        {secondaryContent ? (\n          <>\n            <div className={classes.centered}>\n              <ArrowDropDownIcon className={classes.arrowIcon} />\n            </div>\n            <Card className={classes.mainCard}>{secondaryContent}</Card>\n          </>\n        ) : null}\n      </Container>\n    </div>\n  );\n\n  return content;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useAssociatedAccountExistsState } from \"../components/SolanaCreateAssociatedAddress\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../utils/solana\";\n\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\n//If the pool doesn't exist in this app, it's an error.\nexport type SolanaMigratorInformation = {\n  poolAddress: string;\n  fromMint: string;\n  toMint: string;\n  fromMintDecimals: number;\n  fromAssociatedTokenAccountExists: boolean;\n  toAssociatedTokenAccountExists: boolean;\n  setToTokenAccountExists: any;\n  fromAssociatedTokenAccount: string;\n  toAssociatedTokenAccount: string;\n  fromAssociatedTokenAccountBalance: string;\n  toAssociatedTokenAccountBalance: string | null;\n  toCustodyAddress: string;\n  toCustodyBalance: string;\n\n  fromName: string | null;\n  fromSymbol: string | null;\n  fromLogo: string | null;\n  toName: string | null;\n  toSymbol: string | null;\n  toLogo: string | null;\n\n  getNotReadyCause: (amount: string) => string | null;\n\n  migrateTokens: (amount: string) => Promise<string>;\n};\n\n//TODO refactor the workflow page to use this hook\nexport default function useSolanaMigratorInformation(\n  fromMint: string,\n  toMint: string,\n  fromTokenAccount: string\n): DataWrapper<SolanaMigratorInformation> {\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA, false);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [error, setError] = useState(\"\");\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet && wallet.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet]);\n  /*\n      End effects\n      */\n\n  const migrateTokens = useCallback(\n    async (amount) => {\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(amount, fromMintDecimals).toBigInt()\n      );\n      return await signSendAndConfirm(wallet, connection, instruction);\n    },\n    [\n      connection,\n      fromMint,\n      fromTokenAccount,\n      toMint,\n      toTokenAccount,\n      wallet,\n      fromMintDecimals,\n    ]\n  );\n\n  const fromParse = useCallback(\n    (amount: string) => {\n      try {\n        return parseUnits(amount, fromMintDecimals).toBigInt();\n      } catch (e) {\n        return BigInt(0);\n      }\n    },\n    [fromMintDecimals]\n  );\n\n  const getNotReadyCause = useCallback(\n    (amount: string) => {\n      const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n      const accountsReady = fromTokenAccountExists && toTokenAccountExists;\n      const amountGreaterThanZero = fromParse(amount) > BigInt(0);\n      const sufficientFromTokens =\n        fromTokenAccountBalance &&\n        amount &&\n        fromParse(amount) <= fromParse(fromTokenAccountBalance);\n      const sufficientPoolBalance =\n        toCustodyBalance &&\n        amount &&\n        parseFloat(amount) <= parseFloat(toCustodyBalance);\n\n      if (!hasRequisiteData) {\n        return \"This asset is not supported.\";\n      } else if (!isReady) {\n        return \"Wallet is not connected.\";\n      } else if (!accountsReady) {\n        return \"You have not created the necessary token accounts.\";\n      } else if (!amount) {\n        return \"Enter an amount to transfer.\";\n      } else if (!amountGreaterThanZero) {\n        return \"Enter an amount greater than zero.\";\n      } else if (!sufficientFromTokens) {\n        return \"There are not sufficient funds in your wallet for this transfer.\";\n      } else if (!sufficientPoolBalance) {\n        return \"There are not sufficient funds in the pool for this transfer.\";\n      } else {\n        return \"\";\n      }\n    },\n    [\n      fromMint,\n      fromParse,\n      fromTokenAccountBalance,\n      fromTokenAccountExists,\n      isReady,\n      poolAddress,\n      poolExists,\n      toCustodyBalance,\n      toMint,\n      toTokenAccountExists,\n    ]\n  );\n\n  const getMetadata = useCallback(\n    (address: string) => {\n      const tokenMapItem = solanaTokenMap.data?.find(\n        (x) => x.address === address\n      );\n      const metaplexItem = metaplexData.data?.get(address);\n\n      return {\n        symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n        name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n        logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n      };\n    },\n    [metaplexData.data, solanaTokenMap.data]\n  );\n\n  const isFetching = solanaTokenMap.isFetching || metaplexData.isFetching; //TODO add loading state on the actual Solana information\n  const hasRequisiteData = !!(\n    fromMintDecimals !== null &&\n    fromMintDecimals !== undefined &&\n    toTokenAccount &&\n    fromTokenAccountBalance &&\n    toCustodyAddress &&\n    toCustodyBalance\n  );\n\n  const output: DataWrapper<SolanaMigratorInformation> = useMemo(() => {\n    let data: SolanaMigratorInformation | null = null;\n    if (hasRequisiteData) {\n      data = {\n        poolAddress,\n        fromMint,\n        toMint,\n        fromMintDecimals,\n        fromAssociatedTokenAccountExists: fromTokenAccountExists,\n        toAssociatedTokenAccountExists: toTokenAccountExists,\n        fromAssociatedTokenAccount: fromTokenAccount,\n        toAssociatedTokenAccount: toTokenAccount,\n        fromAssociatedTokenAccountBalance: fromTokenAccountBalance,\n        toAssociatedTokenAccountBalance: toTokenAccountBalance || null,\n        toCustodyAddress,\n        toCustodyBalance,\n\n        fromName: getMetadata(fromMint)?.name || null,\n        fromSymbol: getMetadata(fromMint)?.symbol || null,\n        fromLogo: getMetadata(fromMint)?.logo || null,\n        toName: getMetadata(toMint)?.name || null,\n        toSymbol: getMetadata(toMint)?.symbol || null,\n        toLogo: getMetadata(toMint)?.logo || null,\n\n        setToTokenAccountExists,\n\n        getNotReadyCause: getNotReadyCause,\n\n        migrateTokens,\n      };\n    }\n\n    return {\n      isFetching: isFetching,\n      error: error || !hasRequisiteData,\n      receivedAt: null,\n      data,\n    };\n  }, [\n    error,\n    isFetching,\n    hasRequisiteData,\n    poolAddress,\n    fromMint,\n    toMint,\n    fromMintDecimals,\n    fromTokenAccountExists,\n    toTokenAccountExists,\n    fromTokenAccount,\n    toTokenAccount,\n    fromTokenAccountBalance,\n    toTokenAccountBalance,\n    toCustodyAddress,\n    toCustodyBalance,\n    getMetadata,\n    getNotReadyCause,\n    migrateTokens,\n    setToTokenAccountExists,\n  ]);\n\n  return output;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSolanaMigratorInformation from \"../../hooks/useSolanaMigratorInformation\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  CHAINS_BY_ID,\n  getMigrationAssetMap,\n  SOLANA_HOST,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\nfunction SolanaMigrationLineItem({\n  migratorInfo,\n  onLoadComplete,\n}: {\n  migratorInfo: DefaultAssociatedTokenAccountInfo;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const poolInfo = useSolanaMigratorInformation(\n    migratorInfo.fromMintKey,\n    migratorInfo.toMintKey,\n    migratorInfo.defaultFromTokenAccount\n  );\n\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [migrationError, setMigrationError] = useState(\"\");\n\n  const handleMigrateClick = useCallback(() => {\n    if (!poolInfo.data) {\n      return;\n    }\n    setMigrationIsProcessing(true);\n    setMigrationError(\"\");\n    poolInfo.data\n      .migrateTokens(poolInfo.data.fromAssociatedTokenAccountBalance)\n      .then((result) => {\n        setMigrationIsProcessing(false);\n        setTransaction(result);\n      })\n      .catch((e) => {\n        setMigrationError(\"Unable to perform migration.\");\n        setMigrationIsProcessing(false);\n      });\n  }, [poolInfo.data]);\n\n  const precheckError =\n    poolInfo.data &&\n    poolInfo.data.getNotReadyCause(\n      poolInfo.data.fromAssociatedTokenAccountBalance\n    );\n\n  useEffect(() => {\n    if (poolInfo.data || poolInfo.error) {\n      onLoadComplete();\n    }\n  }, [poolInfo, onLoadComplete]);\n\n  if (!poolInfo.data) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Failed to load migration information for token\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={migratorInfo.fromMintKey}\n          />\n        </div>\n      </div>\n    );\n  } else if (transaction) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx\n            chainId={CHAIN_ID_SOLANA}\n            tx={{ id: transaction, block: 1 }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.fromAssociatedTokenAccount}\n            symbol={poolInfo.data.fromSymbol || undefined}\n            tokenName={poolInfo.data.fromName || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.toAssociatedTokenAccount}\n            symbol={poolInfo.data.toSymbol || undefined}\n            tokenName={poolInfo.data.toName || undefined}\n          />\n        </div>\n        {!poolInfo.data.toAssociatedTokenAccountExists ? (\n          <div className={classes.convertButton}>\n            <SolanaCreateAssociatedAddress\n              mintAddress={migratorInfo.toMintKey}\n              readableTargetAddress={poolInfo.data?.toAssociatedTokenAccount}\n              associatedAccountExists={\n                poolInfo.data.toAssociatedTokenAccountExists\n              }\n              setAssociatedAccountExists={poolInfo.data.setToTokenAccountExists}\n            />\n          </div>\n        ) : (\n          <div className={classes.convertButton}>\n            <ButtonWithLoader\n              showLoader={migrationIsProcessing}\n              onClick={handleMigrateClick}\n              error={\n                poolInfo.error\n                  ? poolInfo.error\n                  : migrationError\n                  ? migrationError\n                  : precheckError\n                  ? precheckError\n                  : \"\"\n              }\n              disabled={\n                !!poolInfo.error || !!precheckError || migrationIsProcessing\n              }\n            >\n              Convert\n            </ButtonWithLoader>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\ntype DefaultAssociatedTokenAccountInfo = {\n  fromMintKey: string;\n  toMintKey: string;\n  defaultFromTokenAccount: string;\n  fromAccountInfo: AccountInfo<ParsedAccountData> | null;\n};\n\nconst getTokenBalances = async (\n  walletAddress: string,\n  migrationMap: Map<string, string>\n): Promise<DefaultAssociatedTokenAccountInfo[]> => {\n  try {\n    const connection = new Connection(SOLANA_HOST);\n    const output: DefaultAssociatedTokenAccountInfo[] = [];\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      new PublicKey(walletAddress),\n      { programId: TOKEN_PROGRAM_ID },\n      \"confirmed\"\n    );\n    tokenAccounts.value.forEach((item) => {\n      if (\n        item.account != null &&\n        item.account.data?.parsed?.info?.tokenAmount?.uiAmountString &&\n        item.account.data?.parsed.info?.tokenAmount?.amount !== \"0\"\n      ) {\n        const fromMintKey = item.account.data.parsed.info.mint;\n        const toMintKey = migrationMap.get(fromMintKey);\n        if (toMintKey) {\n          output.push({\n            fromMintKey,\n            toMintKey: toMintKey,\n            defaultFromTokenAccount: item.pubkey.toString(),\n            fromAccountInfo: item.account,\n          });\n        }\n      }\n    });\n\n    return output;\n  } catch (e) {\n    console.error(e);\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function SolanaQuickMigrate() {\n  const chainId = CHAIN_ID_SOLANA;\n  const classes = useStyles();\n  const { isReady, walletAddress } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const [migrators, setMigrators] = useState<\n    DefaultAssociatedTokenAccountInfo[] | null\n  >(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && walletAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getTokenBalances(walletAddress, migrationMap).then(\n        (result) => {\n          if (!cancelled) {\n            setMigratorsFinishedLoading(0);\n            setMigrators(result.filter((x) => x.fromAccountInfo && x));\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, walletAddress, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <SolanaWalletKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((info) => {\n              return (\n                <SolanaMigrationLineItem\n                  migratorInfo={info}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  AppBar,\n  Button,\n  Container,\n  Hidden,\n  IconButton,\n  Link,\n  makeStyles,\n  Tab,\n  Tabs,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { BarChart, HelpOutline, Send } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport { useCallback } from \"react\";\nimport { useHistory, useLocation, useRouteMatch } from \"react-router\";\nimport {\n  Link as RouterLink,\n  NavLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Attest from \"./components/Attest\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./components/Home\";\nimport Migration from \"./components/Migration\";\nimport EvmQuickMigrate from \"./components/Migration/EvmQuickMigrate\";\nimport NFT from \"./components/NFT\";\nimport NFTOriginVerifier from \"./components/NFTOriginVerifier\";\nimport Recovery from \"./components/Recovery\";\nimport Transfer from \"./components/Transfer\";\nimport { useBetaContext } from \"./contexts/BetaContext\";\nimport { COLORS } from \"./muiTheme\";\nimport { CLUSTER } from \"./utils/consts\";\nimport Stats from \"./components/Stats\";\nimport TokenOriginVerifier from \"./components/TokenOriginVerifier\";\nimport SolanaQuickMigrate from \"./components/Migration/SolanaQuickMigrate\";\nimport Wormhole from \"./icons/wormhole-network.svg\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    background: COLORS.nearBlackWithMinorTransparency,\n    \"& > .MuiToolbar-root\": {\n      margin: \"auto\",\n      width: \"100%\",\n      maxWidth: 1100,\n    },\n  },\n  spacer: {\n    flex: 1,\n    width: \"100vw\",\n  },\n  link: {\n    ...theme.typography.body1,\n    color: theme.palette.text.primary,\n    marginLeft: theme.spacing(6),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginLeft: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: theme.spacing(1),\n    },\n    \"&.active\": {\n      color: theme.palette.primary.light,\n    },\n  },\n  bg: {\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,.1) 0%, rgba(138,146,178,.1) 33%, rgba(69,74,117,.1) 66%, rgba(98,104,143,.1) 100%), linear-gradient(45deg, rgba(153,69,255,.1) 0%, rgba(121,98,231,.1) 20%, rgba(0,209,140,.1) 100%)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n  },\n  content: {\n    margin: theme.spacing(2, 0),\n    [theme.breakpoints.up(\"md\")]: {\n      margin: theme.spacing(4, 0),\n    },\n  },\n  brandLink: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    \"&:hover\": {\n      textDecoration: \"none\",\n    },\n  },\n  brandText: {\n    ...theme.typography.h5,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 22,\n    },\n    fontWeight: \"500\",\n    background: `linear-gradient(160deg, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 100%);`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n    letterSpacing: \"3px\",\n    display: \"inline-block\",\n    marginLeft: theme.spacing(0.5),\n  },\n  iconButton: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginRight: theme.spacing(1),\n    },\n  },\n  gradientButton: {\n    backgroundImage: `linear-gradient(45deg, ${COLORS.blue} 0%, ${COLORS.nearBlack}20 50%,  ${COLORS.blue}30 62%, ${COLORS.nearBlack}50  120%)`,\n    transition: \"0.75s\",\n    backgroundSize: \"200% auto\",\n    boxShadow: \"0 0 20px #222\",\n    \"&:hover\": {\n      backgroundPosition:\n        \"right center\" /* change the direction of the change here */,\n    },\n  },\n  betaBanner: {\n    background: `linear-gradient(to left, ${COLORS.blue}40, ${COLORS.green}40);`,\n    padding: theme.spacing(1, 0),\n  },\n  wormholeIcon: {\n    height: 32,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    display: \"inline-block\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const isHomepage = useRouteMatch({ path: \"/\", exact: true });\n  const { push } = useHistory();\n  const { pathname } = useLocation();\n  const handleTabChange = useCallback(\n    (event, value) => {\n      push(value);\n    },\n    [push]\n  );\n  return (\n    <div className={classes.bg}>\n      <AppBar position=\"static\" color=\"inherit\" className={classes.appBar}>\n        <Toolbar>\n          <Link component={RouterLink} to=\"/\" className={classes.brandLink}>\n            <img\n              src={Wormhole}\n              alt=\"Wormhole\"\n              className={classes.wormholeIcon}\n            />\n            <Typography className={clsx(classes.link, classes.brandText)}>\n              wormhole\n            </Typography>\n          </Link>\n          <div className={classes.spacer} />\n          <Hidden implementation=\"css\" xsDown>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              {isHomepage ? (\n                <>\n                  <Tooltip title=\"View wormhole network stats\">\n                    <IconButton\n                      component={NavLink}\n                      to=\"/stats\"\n                      size=\"small\"\n                      className={clsx(classes.link, classes.iconButton)}\n                    >\n                      <BarChart />\n                    </IconButton>\n                  </Tooltip>\n                  <Button\n                    component={RouterLink}\n                    to=\"/transfer\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    className={classes.gradientButton}\n                  >\n                    Transfer Tokens\n                  </Button>\n                </>\n              ) : (\n                <Tooltip title=\"View the FAQ\">\n                  <Button\n                    href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    variant=\"outlined\"\n                    endIcon={<HelpOutline />}\n                  >\n                    FAQ\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          </Hidden>\n          <Hidden implementation=\"css\" smUp>\n            {isHomepage ? (\n              <>\n                <Tooltip title=\"View wormhole network stats\">\n                  <IconButton\n                    component={NavLink}\n                    to=\"/stats\"\n                    size=\"small\"\n                    className={classes.link + \" \" + classes.iconButton}\n                  >\n                    <BarChart />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Transfer tokens to another blockchain\">\n                  <IconButton\n                    component={NavLink}\n                    to=\"/transfer\"\n                    size=\"small\"\n                    className={classes.link}\n                  >\n                    <Send />\n                  </IconButton>\n                </Tooltip>\n              </>\n            ) : (\n              <Tooltip title=\"View the FAQ\">\n                <IconButton\n                  href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  size=\"small\"\n                  className={classes.link}\n                >\n                  <HelpOutline />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Hidden>\n        </Toolbar>\n      </AppBar>\n      {CLUSTER === \"mainnet\" ? null : (\n        <AppBar position=\"static\" className={classes.betaBanner}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You are using the {CLUSTER} build of this app.\n          </Typography>\n        </AppBar>\n      )}\n      {isBeta ? (\n        <AppBar position=\"static\" className={classes.betaBanner}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You have enabled the beta. Enter the secret code again to\n            disable.\n          </Typography>\n        </AppBar>\n      ) : null}\n      <div className={classes.content}>\n        {[\"/transfer\", \"/nft\", \"/redeem\"].includes(pathname) ? (\n          <Container maxWidth=\"md\" style={{ paddingBottom: 24 }}>\n            <Tabs\n              value={pathname}\n              variant=\"fullWidth\"\n              onChange={handleTabChange}\n              indicatorColor=\"primary\"\n            >\n              <Tab label=\"Tokens\" value=\"/transfer\" />\n              <Tab label=\"NFTs\" value=\"/nft\" />\n              <Tab label=\"Redeem\" value=\"/redeem\" to=\"/redeem\" />\n            </Tabs>\n          </Container>\n        ) : null}\n        <Switch>\n          <Route exact path=\"/transfer\">\n            <Transfer />\n          </Route>\n          <Route exact path=\"/nft\">\n            <NFT />\n          </Route>\n          <Route exact path=\"/redeem\">\n            <Recovery />\n          </Route>\n          <Route exact path=\"/nft-origin-verifier\">\n            <NFTOriginVerifier />\n          </Route>\n          <Route exact path=\"/token-origin-verifier\">\n            <TokenOriginVerifier />\n          </Route>\n          <Route exact path=\"/register\">\n            <Attest />\n          </Route>\n          <Route exact path=\"/migrate/Solana/:legacyAsset/:fromTokenAccount\">\n            <Migration chainId={CHAIN_ID_SOLANA} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Solana/\">\n            <SolanaQuickMigrate />\n          </Route>\n          <Route exact path=\"/stats\">\n            <Stats />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route>\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </div>\n      <div className={classes.spacer} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { makeStyles } from \"@material-ui/core\";\n// import { useRouteMatch } from \"react-router\";\n\nconst useStyles = makeStyles((theme) => ({\n  holeOuterContainer: {\n    maxWidth: \"100%\",\n    width: \"100%\",\n    position: \"relative\",\n  },\n  holeInnerContainer: {\n    position: \"absolute\",\n    zIndex: -1,\n    left: \"50%\",\n    transform: \"translate(-50%, 0)\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  holeImage: {\n    width: \"max(1200px, 100vw)\",\n    maxWidth: \"1600px\",\n  },\n  blurred: {\n    filter: \"blur(2px)\",\n    opacity: \".9\",\n  },\n}));\n\nconst BackgroundImage = () => {\n  const classes = useStyles();\n  // const isHomepage = useRouteMatch({ path: \"/\", exact: true });\n\n  return (\n    <div className={classes.holeOuterContainer}>\n      <div className={classes.holeInnerContainer}></div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Typography variant=\"h5\" style={{ textAlign: \"center\", marginTop: 24 }}>\n          An unexpected error has occurred. Please refresh the page.\n        </Typography>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport attestReducer from \"./attestSlice\";\nimport nftReducer from \"./nftSlice\";\nimport transferReducer from \"./transferSlice\";\nimport tokenReducer from \"./tokenSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    attest: attestReducer,\n    nft: nftReducer,\n    transfer: transferReducer,\n    tokens: tokenReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { SnackbarProvider } from \"notistack\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport BackgroundImage from \"./components/BackgroundImage\";\nimport { BetaContextProvider } from \"./contexts/BetaContext\";\nimport { EthereumProviderProvider } from \"./contexts/EthereumProviderContext\";\nimport { SolanaWalletProvider } from \"./contexts/SolanaWalletContext.tsx\";\nimport { TerraWalletProvider } from \"./contexts/TerraWalletContext.tsx\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { theme } from \"./muiTheme\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <ErrorBoundary>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <ErrorBoundary>\n          <SnackbarProvider maxSnack={3}>\n            <BetaContextProvider>\n              <SolanaWalletProvider>\n                <EthereumProviderProvider>\n                  <TerraWalletProvider>\n                    <HashRouter>\n                      <BackgroundImage />\n                      <App />\n                    </HashRouter>\n                  </TerraWalletProvider>\n                </EthereumProviderProvider>\n              </SolanaWalletProvider>\n            </BetaContextProvider>\n          </SnackbarProvider>\n        </ErrorBoundary>\n      </ThemeProvider>\n    </Provider>\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { RootState } from \".\";\n\n/*\n * Attest\n */\n\nexport const selectAttestActiveStep = (state: RootState) =>\n  state.attest.activeStep;\nexport const selectAttestSourceChain = (state: RootState) =>\n  state.attest.sourceChain;\nexport const selectAttestSourceAsset = (state: RootState) =>\n  state.attest.sourceAsset;\nexport const selectAttestTargetChain = (state: RootState) =>\n  state.attest.targetChain;\nexport const selectAttestAttestTx = (state: RootState) => state.attest.attestTx;\nexport const selectAttestSignedVAAHex = (state: RootState) =>\n  state.attest.signedVAAHex;\nexport const selectAttestIsSending = (state: RootState) =>\n  state.attest.isSending;\nexport const selectAttestIsCreating = (state: RootState) =>\n  state.attest.isCreating;\nexport const selectAttestCreateTx = (state: RootState) => state.attest.createTx;\nexport const selectAttestIsSourceComplete = (state: RootState) =>\n  !!state.attest.sourceChain && !!state.attest.sourceAsset;\n// TODO: check wrapped asset exists or is native attest\nexport const selectAttestIsTargetComplete = (state: RootState) =>\n  selectAttestIsSourceComplete(state) && !!state.attest.targetChain;\nexport const selectAttestIsSendComplete = (state: RootState) =>\n  !!selectAttestSignedVAAHex(state);\nexport const selectAttestIsCreateComplete = (state: RootState) =>\n  !!selectAttestCreateTx(state);\nexport const selectAttestShouldLockFields = (state: RootState) =>\n  selectAttestIsSending(state) || selectAttestIsSendComplete(state);\n\n/*\n * NFT\n */\n\nexport const selectNFTActiveStep = (state: RootState) => state.nft.activeStep;\nexport const selectNFTSourceChain = (state: RootState) => state.nft.sourceChain;\nexport const selectNFTSourceAsset = (state: RootState) => {\n  return state.nft.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectNFTIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.nft.isSourceAssetWormholeWrapped;\nexport const selectNFTOriginChain = (state: RootState) => state.nft.originChain;\nexport const selectNFTOriginAsset = (state: RootState) => state.nft.originAsset;\nexport const selectNFTOriginTokenId = (state: RootState) =>\n  state.nft.originTokenId;\nexport const selectNFTSourceWalletAddress = (state: RootState) =>\n  state.nft.sourceWalletAddress;\nexport const selectNFTSourceParsedTokenAccount = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount;\nexport const selectNFTSourceParsedTokenAccounts = (state: RootState) =>\n  state.nft.sourceParsedTokenAccounts;\nexport const selectNFTSourceBalanceString = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectNFTTargetChain = (state: RootState) => state.nft.targetChain;\nexport const selectNFTTargetAddressHex = (state: RootState) =>\n  state.nft.targetAddressHex;\nexport const selectNFTTargetAsset = (state: RootState) =>\n  state.nft.targetAsset.data?.address;\nexport const selectNFTTransferTx = (state: RootState) => state.nft.transferTx;\nexport const selectNFTSignedVAAHex = (state: RootState) =>\n  state.nft.signedVAAHex;\nexport const selectNFTIsSending = (state: RootState) => state.nft.isSending;\nexport const selectNFTIsRedeeming = (state: RootState) => state.nft.isRedeeming;\nexport const selectNFTRedeemTx = (state: RootState) => state.nft.redeemTx;\nexport const selectNFTSourceError = (state: RootState): string | undefined => {\n  if (!state.nft.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.nft.sourceParsedTokenAccount) {\n    return \"Select an NFT\";\n  }\n  if (\n    state.nft.sourceChain === CHAIN_ID_SOLANA &&\n    !state.nft.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.nft.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  if (state.nft.sourceParsedTokenAccount.decimals !== 0) {\n    // TODO: more advanced NFT check - also check supply and uri\n    return \"For non-NFTs, use the Transfer flow\";\n  }\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.nft.sourceParsedTokenAccount.uiAmountString,\n        state.nft.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Balance must be greater than zero\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectNFTIsSourceComplete = (state: RootState) =>\n  !selectNFTSourceError(state);\nexport const selectNFTTargetError = (state: RootState) => {\n  const sourceError = selectNFTSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.nft.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.nft.sourceChain === state.nft.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (\n    state.nft.targetChain === CHAIN_ID_SOLANA &&\n    !selectNFTTargetAsset(state)\n  ) {\n    // target asset is only required for solana\n    // in the cases of new transfers, target asset will not exist and be created on redeem\n    // Solana requires the derived address to derive the associated token account which is the target on the vaa\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.nft.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectNFTIsTargetComplete = (state: RootState) =>\n  !selectNFTTargetError(state);\nexport const selectNFTIsSendComplete = (state: RootState) =>\n  !!selectNFTSignedVAAHex(state);\nexport const selectNFTIsRedeemComplete = (state: RootState) =>\n  !!selectNFTRedeemTx(state);\nexport const selectNFTShouldLockFields = (state: RootState) =>\n  selectNFTIsSending(state) || selectNFTIsSendComplete(state);\nexport const selectNFTIsRecovery = (state: RootState) => state.nft.isRecovery;\n/*\n * Transfer\n */\n\nexport const selectTransferActiveStep = (state: RootState) =>\n  state.transfer.activeStep;\nexport const selectTransferSourceChain = (state: RootState) =>\n  state.transfer.sourceChain;\nexport const selectTransferSourceAsset = (state: RootState) => {\n  return state.transfer.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectTransferIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.transfer.isSourceAssetWormholeWrapped;\nexport const selectTransferOriginChain = (state: RootState) =>\n  state.transfer.originChain;\nexport const selectTransferOriginAsset = (state: RootState) =>\n  state.transfer.originAsset;\nexport const selectSourceWalletAddress = (state: RootState) =>\n  state.transfer.sourceWalletAddress;\nexport const selectTransferSourceParsedTokenAccount = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount;\nexport const selectTransferSourceParsedTokenAccounts = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccounts;\nexport const selectTransferSourceBalanceString = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferAmount = (state: RootState) => state.transfer.amount;\nexport const selectTransferTargetChain = (state: RootState) =>\n  state.transfer.targetChain;\nexport const selectTransferTargetAddressHex = (state: RootState) =>\n  state.transfer.targetAddressHex;\nexport const selectTransferTargetAssetWrapper = (state: RootState) =>\n  state.transfer.targetAsset;\nexport const selectTransferTargetAsset = (state: RootState) =>\n  state.transfer.targetAsset.data?.address;\nexport const selectTransferTargetParsedTokenAccount = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount;\nexport const selectTransferTargetBalanceString = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferTransferTx = (state: RootState) =>\n  state.transfer.transferTx;\nexport const selectTransferSignedVAAHex = (state: RootState) =>\n  state.transfer.signedVAAHex;\nexport const selectTransferIsSending = (state: RootState) =>\n  state.transfer.isSending;\nexport const selectTransferIsRedeeming = (state: RootState) =>\n  state.transfer.isRedeeming;\nexport const selectTransferRedeemTx = (state: RootState) =>\n  state.transfer.redeemTx;\nexport const selectTransferIsApproving = (state: RootState) =>\n  state.transfer.isApproving;\nexport const selectTransferSourceError = (\n  state: RootState\n): string | undefined => {\n  if (!state.transfer.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount) {\n    return \"Select a token\";\n  }\n  if (!state.transfer.amount) {\n    return \"Enter an amount\";\n  }\n  if (\n    state.transfer.sourceChain === CHAIN_ID_SOLANA &&\n    !state.transfer.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  // no NFT check - NFTs should be blocked by all token pickers\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Amount must be greater than zero\";\n    }\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).gt(\n        parseUnits(\n          state.transfer.sourceParsedTokenAccount.uiAmountString,\n          state.transfer.sourceParsedTokenAccount.decimals\n        )\n      )\n    ) {\n      return \"Amount may not be greater than balance\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectTransferIsSourceComplete = (state: RootState) =>\n  !selectTransferSourceError(state);\nexport const UNREGISTERED_ERROR_MESSAGE =\n  \"Target asset unavailable. Is the token registered?\";\nexport const selectTransferTargetError = (state: RootState) => {\n  const sourceError = selectTransferSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.transfer.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.transfer.sourceChain === state.transfer.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (!selectTransferTargetAsset(state)) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (\n    isEVMChain(state.transfer.targetChain) &&\n    selectTransferTargetAsset(state) === ethers.constants.AddressZero\n  ) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.transfer.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectTransferIsTargetComplete = (state: RootState) =>\n  !selectTransferTargetError(state);\nexport const selectTransferIsSendComplete = (state: RootState) =>\n  !!selectTransferSignedVAAHex(state);\nexport const selectTransferIsRedeemComplete = (state: RootState) =>\n  !!selectTransferRedeemTx(state);\nexport const selectTransferShouldLockFields = (state: RootState) =>\n  selectTransferIsSending(state) || selectTransferIsSendComplete(state);\nexport const selectTransferIsRecovery = (state: RootState) =>\n  state.transfer.isRecovery;\n\nexport const selectSolanaTokenMap = (state: RootState) => {\n  return state.tokens.solanaTokenMap;\n};\n\nexport const selectTerraTokenMap = (state: RootState) => {\n  return state.tokens.terraTokenMap;\n};\n\nexport const selectMarketsMap = (state: RootState) => {\n  return state.tokens.marketsMap;\n};\n","import {\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  MenuItem,\n  OutlinedTextFieldProps,\n  TextField,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { useMemo } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { BETA_CHAINS, ChainInfo } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\nconst createChainMenuItem = ({ id, name, logo }: ChainInfo, classes: any) => (\n  <MenuItem key={id} value={id}>\n    <ListItemIcon className={classes.listItemIcon}>\n      <img src={logo} alt={name} className={classes.icon} />\n    </ListItemIcon>\n    <ListItemText>{name}</ListItemText>\n  </MenuItem>\n);\n\ninterface ChainSelectProps extends OutlinedTextFieldProps {\n  chains: ChainInfo[];\n}\n\nexport default function ChainSelect({ chains, ...rest }: ChainSelectProps) {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const filteredChains = useMemo(\n    () =>\n      chains.filter(({ id }) => (isBeta ? true : !BETA_CHAINS.includes(id))),\n    [chains, isBeta]\n  );\n  return (\n    <TextField {...rest} className={clsx(classes.select, rest.className)}>\n      {filteredChains.map((chain) => createChainMenuItem(chain, classes))}\n    </TextField>\n  );\n}\n","import { ChainId, getSignedVAA } from \"@certusone/wormhole-sdk\";\nimport { WORMHOLE_RPC_HOSTS } from \"./consts\";\n\nexport let CURRENT_WORMHOLE_RPC_HOST = -1;\n\nexport const getNextRpcHost = () =>\n  ++CURRENT_WORMHOLE_RPC_HOST % WORMHOLE_RPC_HOSTS.length;\n\nexport async function getSignedVAAWithRetry(\n  emitterChain: ChainId,\n  emitterAddress: string,\n  sequence: string,\n  retryAttempts?: number\n) {\n  let result;\n  let attempts = 0;\n  while (!result) {\n    attempts++;\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      result = await getSignedVAA(\n        WORMHOLE_RPC_HOSTS[getNextRpcHost()],\n        emitterChain,\n        emitterAddress,\n        sequence\n      );\n    } catch (e) {\n      if (retryAttempts !== undefined && attempts > retryAttempts) {\n        throw e;\n      }\n    }\n  }\n  return result;\n}\n","import React, { ReactChildren, useContext, useEffect, useState } from \"react\";\n\nconst BetaContext = React.createContext<boolean>(false);\n\nexport const BetaContextProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [isBetaEnabled, setIsBetaEnabled] = useState(false);\n\n  useEffect(() => {\n    let userEntered = [];\n    const secretSequence = [\n      \"38\",\n      \"38\",\n      \"40\",\n      \"40\",\n      \"37\",\n      \"39\",\n      \"37\",\n      \"39\",\n      \"66\",\n      \"65\",\n    ];\n    const secretListener = (event: KeyboardEvent) => {\n      const k = event.keyCode.toString();\n      if (k === secretSequence[userEntered.length]) {\n        userEntered.push(k);\n        if (userEntered.length === secretSequence.length) {\n          userEntered = [];\n          setIsBetaEnabled((prev) => !prev);\n        }\n      } else {\n        userEntered = [];\n      }\n    };\n    window.addEventListener(\"keydown\", secretListener);\n    return () => {\n      window.removeEventListener(\"keydown\", secretListener);\n    };\n  }, []);\n\n  return (\n    <BetaContext.Provider value={isBetaEnabled}>\n      {children}\n    </BetaContext.Provider>\n  );\n};\n\nexport const useBetaContext = () => {\n  return useContext(BetaContext);\n};\n","export default __webpack_public_path__ + \"static/media/eth.364436c5.svg\";","export default __webpack_public_path__ + \"static/media/avax.234db155.svg\";","export default __webpack_public_path__ + \"static/media/polygon.97ff139c.svg\";","import { Typography } from \"@material-ui/core\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst EthereumSignerKey = () => {\n  const { connect, disconnect, signerAddress, providerError } =\n    useEthereumProvider();\n  return (\n    <>\n      <ToggleConnectedButton\n        connect={connect}\n        disconnect={disconnect}\n        connected={!!signerAddress}\n        pk={signerAddress || \"\"}\n      />\n      {providerError ? (\n        <Typography variant=\"body2\" color=\"error\">\n          {providerError}\n        </Typography>\n      ) : null}\n    </>\n  );\n};\n\nexport default EthereumSignerKey;\n","import { makeStyles } from \"@material-ui/core\";\nimport DisconnectIcon from \"@material-ui/icons/LinkOff\";\nimport {\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-material-ui\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: \"center\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  disconnectButton: {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst SolanaWalletKey = () => {\n  const classes = useStyles();\n  const wallet = useSolanaWallet();\n  return (\n    <div className={classes.root}>\n      <WalletMultiButton />\n      {wallet && (\n        <WalletDisconnectButton\n          startIcon={<DisconnectIcon />}\n          className={classes.disconnectButton}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SolanaWalletKey;\n","export default __webpack_public_path__ + \"static/media/bsc.2e866e3f.svg\";","export default __webpack_public_path__ + \"static/media/solana.fa522d66.svg\";","import { PublicKey, AccountInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { deserializeUnchecked } from \"borsh\";\nimport { BinaryReader, BinaryWriter } from \"borsh\";\nconst base58: any = require(\"bs58\");\n\n// eslint-disable-next-line\nexport const METADATA_REPLACE = new RegExp(\"\\u0000\", \"g\");\nexport const EDITION_MARKER_BIT_SIZE = 248;\nexport const METADATA_PREFIX = \"metadata\";\nexport const EDITION = \"edition\";\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = \"\";\n  lamports: number = 0;\n\n  get data() {\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== \"string\") {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nexport const MEMO_ID = new PublicKey(\n  \"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"\n);\n\nexport const METADATA_PROGRAM_ID =\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\" as StringPublicKey;\n\nexport const VAULT_ID =\n  \"vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn\" as StringPublicKey;\n\nexport const AUCTION_ID =\n  \"auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8\" as StringPublicKey;\n\nexport const METAPLEX_ID =\n  \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\" as StringPublicKey;\n\nexport const SYSTEM = new PublicKey(\"11111111111111111111111111111111\");\n\nexport const getStoreID = async (storeOwnerAddress?: string) => {\n  if (!storeOwnerAddress) {\n    return undefined;\n  }\n\n  const programs = await findProgramAddress(\n    [\n      Buffer.from(\"metaplex\"),\n      toPublicKey(METAPLEX_ID).toBuffer(),\n      toPublicKey(storeOwnerAddress).toBuffer(),\n    ],\n    toPublicKey(METAPLEX_ID)\n  );\n  const storeAddress = programs[0];\n\n  return storeAddress;\n};\n\nexport const setProgramIds = async (store?: string) => {\n  STORE = store ? toPublicKey(store) : undefined;\n};\n\nlet STORE: PublicKey | undefined;\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    metadata: METADATA_PROGRAM_ID,\n    memo: MEMO_ID,\n    vault: VAULT_ID,\n    auction: AUCTION_ID,\n    metaplex: METAPLEX_ID,\n    store: STORE,\n  };\n};\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n) => {\n  const key =\n    \"pda-\" +\n    seeds.reduce((agg, item) => agg + item.toString(\"hex\"), \"\") +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\nexport type StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport async function getEdition(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  const PROGRAM_IDS = programIds();\n\n  return (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        toPublicKey(PROGRAM_IDS.metadata).toBuffer(),\n        toPublicKey(tokenMint).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      toPublicKey(PROGRAM_IDS.metadata)\n    )\n  )[0];\n}\n\nclass CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\nclass UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n    this.primarySaleHappened = args.primarySaleHappened;\n  }\n}\n\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n\n  public async init() {\n    const edition = await getEdition(this.mint);\n    this.edition = edition;\n    this.masterEdition = edition;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass MintPrintingTokensArgs {\n  instruction: number = 9;\n  supply: BN;\n\n  constructor(args: { supply: BN }) {\n    this.supply = args.supply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error(\"bad index for edition\");\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    // eslint-disable-next-line\n    return appliedMask != 0;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", Data],\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", { kind: \"option\", type: Data }],\n        [\"updateAuthority\", { kind: \"option\", type: \"pubkeyAsString\" }],\n        [\"primarySaleHappened\", { kind: \"option\", type: \"u8\" }],\n      ],\n    },\n  ],\n\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    MintPrintingTokensArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"supply\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV1,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n        [\"printingMint\", \"pubkeyAsString\"],\n        [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"parent\", \"pubkeyAsString\"],\n        [\"edition\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"ledger\", [31]],\n      ],\n    },\n  ],\n]);\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, \"\");\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, \"\");\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, \"\");\n  return metadata;\n};\n\nexport const getMetadataAddress = async (\n  mintKey: string\n): Promise<[PublicKey, number]> => {\n  const seeds = [\n    Buffer.from(\"metadata\"),\n    new PublicKey(METADATA_PROGRAM_ID).toBuffer(),\n    new PublicKey(mintKey).toBuffer(),\n  ];\n  return PublicKey.findProgramAddress(\n    seeds,\n    new PublicKey(METADATA_PROGRAM_ID)\n  );\n};\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface ParsedTokenAccount {\n  publicKey: string;\n  mintKey: string;\n  amount: string;\n  decimals: number;\n  uiAmount: number;\n  uiAmountString: string;\n  symbol?: string;\n  name?: string;\n  logo?: string;\n  isNativeAsset?: boolean;\n}\n\nexport interface Transaction {\n  id: string;\n  block: number;\n}\n\nexport interface TransferState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: ParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<ParsedTokenAccount[]>;\n  amount: string;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  targetParsedTokenAccount: ParsedTokenAccount | undefined;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isApproving: boolean;\n  isRecovery: boolean;\n}\n\nconst initialState: TransferState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  amount: \"\",\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  targetParsedTokenAccount: undefined,\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isApproving: false,\n  isRecovery: false,\n};\n\nexport const transferSlice = createSlice({\n  name: \"transfer\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setAmount: (state, action: PayloadAction<string>) => {\n      state.amount = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n      state.targetParsedTokenAccount = undefined;\n    },\n    setTargetParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.targetParsedTokenAccount = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    setIsApproving: (state, action: PayloadAction<boolean>) => {\n      state.isApproving = action.payload;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string;\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setAmount,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTargetParsedTokenAccount,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  setIsApproving,\n  reset,\n  setRecoveryVaa,\n} = transferSlice.actions;\n\nexport default transferSlice.reducer;\n","import { Button, makeStyles, Tooltip } from \"@material-ui/core\";\nimport { LinkOff } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n}));\n\nconst ToggleConnectedButton = ({\n  connect,\n  disconnect,\n  connected,\n  pk,\n}: {\n  connect(): any;\n  disconnect(): any;\n  connected: boolean;\n  pk: string;\n}) => {\n  const classes = useStyles();\n  const is0x = pk.startsWith(\"0x\");\n  return connected ? (\n    <Tooltip title={pk}>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        onClick={disconnect}\n        className={classes.button}\n        startIcon={<LinkOff />}\n      >\n        Disconnect {pk.substring(0, is0x ? 6 : 3)}...\n        {pk.substr(pk.length - (is0x ? 4 : 3))}\n      </Button>\n    </Tooltip>\n  ) : (\n    <Button\n      color=\"primary\"\n      variant=\"contained\"\n      size=\"small\"\n      onClick={connect}\n      className={classes.button}\n    >\n      Connect\n    </Button>\n  );\n};\n\nexport default ToggleConnectedButton;\n","import {\n  NetworkInfo,\n  Wallet,\n  WalletProvider,\n  useWallet,\n} from \"@terra-money/wallet-provider\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nconst mainnet = {\n  name: \"mainnet\",\n  chainID: \"columbus-4\",\n  lcd: \"https://lcd.terra.dev\",\n};\n\nconst localnet = {\n  name: \"localnet\",\n  chainID: \"localnet\",\n  lcd: TERRA_HOST.URL,\n};\n\nconst walletConnectChainIds: Record<number, NetworkInfo> = {\n  0: localnet,\n  1: mainnet,\n};\n\ninterface ITerraWalletContext {\n  connect(): void;\n  disconnect(): void;\n  connected: boolean;\n  wallet: any;\n}\n\nconst TerraWalletContext = React.createContext<ITerraWalletContext>({\n  connect: () => {},\n  disconnect: () => {},\n  connected: false,\n  wallet: null,\n});\n\nexport const TerraWalletWrapper = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  // TODO: Use wallet instead of useConnectedWallet.\n  const terraWallet = useWallet();\n  const [, setWallet] = useState<Wallet | undefined>(undefined);\n  const [connected, setConnected] = useState(false);\n\n  const connect = useCallback(() => {\n    const CHROME_EXTENSION = 1;\n    if (terraWallet) {\n      terraWallet.connect(terraWallet.availableConnectTypes[CHROME_EXTENSION]);\n      setWallet(terraWallet);\n      setConnected(true);\n    }\n  }, [terraWallet]);\n\n  const disconnect = useCallback(() => {\n    setConnected(false);\n    setWallet(undefined);\n  }, []);\n\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      connected,\n      wallet: terraWallet,\n    }),\n    [connect, disconnect, connected, terraWallet]\n  );\n\n  return (\n    <TerraWalletContext.Provider value={contextValue}>\n      {children}\n    </TerraWalletContext.Provider>\n  );\n};\n\nexport const TerraWalletProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  return (\n    <WalletProvider\n      defaultNetwork={localnet}\n      walletConnectChainIds={walletConnectChainIds}\n    >\n      <TerraWalletWrapper>{children}</TerraWalletWrapper>\n    </WalletProvider>\n  );\n};\n\nexport const useTerraWallet = () => {\n  return useContext(TerraWalletContext);\n};\n","export type DataWrapper<T> = {\n  data: T | null;\n  error: any | null;\n  isFetching: boolean;\n  receivedAt: string | null;\n  //possibly invalidate\n};\n\nexport function getEmptyDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function receiveDataWrapper<T>(data: T): DataWrapper<T> {\n  return {\n    data,\n    error: null,\n    isFetching: false,\n    receivedAt: new Date().toISOString(),\n  };\n}\n\nexport function errorDataWrapper<T>(error: string): DataWrapper<T> {\n  return {\n    data: null,\n    error,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function fetchDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: true,\n    receivedAt: null,\n  };\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BigNumber, ethers } from \"ethers\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\n\nexport type Provider = ethers.providers.Web3Provider | undefined;\nexport type Signer = ethers.Signer | undefined;\n\ninterface IEthereumProviderContext {\n  connect(): void;\n  disconnect(): void;\n  provider: Provider;\n  chainId: number | undefined;\n  signer: Signer;\n  signerAddress: string | undefined;\n  providerError: string | null;\n}\n\nconst EthereumProviderContext = React.createContext<IEthereumProviderContext>({\n  connect: () => {},\n  disconnect: () => {},\n  provider: undefined,\n  chainId: undefined,\n  signer: undefined,\n  signerAddress: undefined,\n  providerError: null,\n});\nexport const EthereumProviderProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [providerError, setProviderError] = useState<string | null>(null);\n  const [provider, setProvider] = useState<Provider>(undefined);\n  const [chainId, setChainId] = useState<number | undefined>(undefined);\n  const [signer, setSigner] = useState<Signer>(undefined);\n  const [signerAddress, setSignerAddress] = useState<string | undefined>(\n    undefined\n  );\n  const connect = useCallback(() => {\n    setProviderError(null);\n    detectEthereumProvider()\n      .then((detectedProvider) => {\n        if (detectedProvider) {\n          const provider = new ethers.providers.Web3Provider(\n            // @ts-ignore\n            detectedProvider,\n            \"any\"\n          );\n          provider\n            .send(\"eth_requestAccounts\", [])\n            .then(() => {\n              setProviderError(null);\n              setProvider(provider);\n              provider\n                .getNetwork()\n                .then((network) => {\n                  setChainId(network.chainId);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the network\"\n                  );\n                });\n              const signer = provider.getSigner();\n              setSigner(signer);\n              signer\n                .getAddress()\n                .then((address) => {\n                  setSignerAddress(address);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the signer address\"\n                  );\n                });\n              // TODO: try using ethers directly\n              // @ts-ignore\n              if (detectedProvider && detectedProvider.on) {\n                // @ts-ignore\n                detectedProvider.on(\"chainChanged\", (chainId) => {\n                  try {\n                    setChainId(BigNumber.from(chainId).toNumber());\n                  } catch (e) {}\n                });\n                // @ts-ignore\n                detectedProvider.on(\"accountsChanged\", (accounts) => {\n                  try {\n                    const signer = provider.getSigner();\n                    setSigner(signer);\n                    signer\n                      .getAddress()\n                      .then((address) => {\n                        setSignerAddress(address);\n                      })\n                      .catch(() => {\n                        setProviderError(\n                          \"An error occurred while getting the signer address\"\n                        );\n                      });\n                  } catch (e) {}\n                });\n              }\n            })\n            .catch(() => {\n              setProviderError(\n                \"An error occurred while requesting eth accounts\"\n              );\n            });\n        } else {\n          setProviderError(\"Please install MetaMask\");\n        }\n      })\n      .catch(() => {\n        setProviderError(\"Please install MetaMask\");\n      });\n  }, []);\n  const disconnect = useCallback(() => {\n    setProviderError(null);\n    setProvider(undefined);\n    setChainId(undefined);\n    setSigner(undefined);\n    setSignerAddress(undefined);\n  }, []);\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    }),\n    [\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    ]\n  );\n  return (\n    <EthereumProviderContext.Provider value={contextValue}>\n      {children}\n    </EthereumProviderContext.Provider>\n  );\n};\nexport const useEthereumProvider = () => {\n  return useContext(EthereumProviderContext);\n};\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { hexlify, hexStripZeros } from \"@ethersproject/bytes\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useCallback, useMemo } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { CLUSTER, getEvmChainId } from \"../utils/consts\";\n\nconst createWalletStatus = (\n  isReady: boolean,\n  statusMessage: string = \"\",\n  forceNetworkSwitch: () => void,\n  walletAddress?: string\n) => ({\n  isReady,\n  statusMessage,\n  forceNetworkSwitch,\n  walletAddress,\n});\n\nfunction useIsWalletReady(\n  chainId: ChainId,\n  enableNetworkAutoswitch: boolean = true\n): {\n  isReady: boolean;\n  statusMessage: string;\n  walletAddress?: string;\n  forceNetworkSwitch: () => void;\n} {\n  const autoSwitch = enableNetworkAutoswitch;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const hasTerraWallet = !!terraWallet;\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasEthInfo = !!provider && !!signerAddress;\n  const correctEvmNetwork = getEvmChainId(chainId);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const forceNetworkSwitch = useCallback(() => {\n    if (provider && correctEvmNetwork) {\n      if (!isEVMChain(chainId)) {\n        return;\n      }\n      try {\n        provider.send(\"wallet_switchEthereumChain\", [\n          { chainId: hexStripZeros(hexlify(correctEvmNetwork)) },\n        ]);\n      } catch (e) {}\n    }\n  }, [provider, correctEvmNetwork, chainId]);\n\n  return useMemo(() => {\n    if (\n      chainId === CHAIN_ID_TERRA &&\n      hasTerraWallet &&\n      terraWallet?.walletAddress\n    ) {\n      // TODO: terraWallet does not update on wallet changes\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        terraWallet.walletAddress\n      );\n    }\n    if (chainId === CHAIN_ID_SOLANA && solPK) {\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        solPK.toString()\n      );\n    }\n    if (isEVMChain(chainId) && hasEthInfo && signerAddress) {\n      if (hasCorrectEvmNetwork) {\n        return createWalletStatus(\n          true,\n          undefined,\n          forceNetworkSwitch,\n          signerAddress\n        );\n      } else {\n        if (provider && correctEvmNetwork && autoSwitch) {\n          forceNetworkSwitch();\n        }\n        return createWalletStatus(\n          false,\n          `Wallet is not connected to ${CLUSTER}. Expected Chain ID: ${correctEvmNetwork}`,\n          forceNetworkSwitch,\n          undefined\n        );\n      }\n    }\n\n    return createWalletStatus(\n      false,\n      \"Wallet not connected\",\n      forceNetworkSwitch,\n      undefined\n    );\n  }, [\n    chainId,\n    autoSwitch,\n    forceNetworkSwitch,\n    hasTerraWallet,\n    solPK,\n    hasEthInfo,\n    correctEvmNetwork,\n    hasCorrectEvmNetwork,\n    provider,\n    signerAddress,\n    terraWallet,\n  ]);\n}\n\nexport default useIsWalletReady;\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\nimport { ParsedTokenAccount, Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\n// these all are optional so NFT could share TokenSelectors\nexport interface NFTParsedTokenAccount extends ParsedTokenAccount {\n  tokenId?: string;\n  uri?: string;\n  animation_url?: string | null;\n  external_url?: string | null;\n  image?: string;\n  image_256?: string;\n  nftName?: string;\n  description?: string;\n}\n\nexport interface NFTState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  originTokenId: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: NFTParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<NFTParsedTokenAccount[]>;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isRecovery: boolean;\n}\n\nconst initialState: NFTState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  originTokenId: undefined,\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isRecovery: false,\n};\n\nexport const nftSlice = createSlice({\n  name: \"nft\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n      state.originTokenId = action.payload.tokenId;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.originTokenId = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string; //TODO maximum amount of fields\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      state.targetAsset = getEmptyDataWrapper();\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.originTokenId = undefined;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  reset,\n  setRecoveryVaa,\n} = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface AttestState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  sourceAsset: string;\n  targetChain: ChainId;\n  attestTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isCreating: boolean;\n  createTx: Transaction | undefined;\n}\n\nconst initialState: AttestState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  sourceAsset: \"\",\n  targetChain: CHAIN_ID_ETH,\n  attestTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isCreating: false,\n  createTx: undefined,\n};\n\nexport const attestSlice = createSlice({\n  name: \"attest\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceAsset = \"\";\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceAsset: (state, action: PayloadAction<string>) => {\n      state.sourceAsset = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceAsset = \"\";\n      }\n    },\n    setAttestTx: (state, action: PayloadAction<Transaction>) => {\n      state.attestTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsCreating: (state, action: PayloadAction<boolean>) => {\n      state.isCreating = action.payload;\n    },\n    setCreateTx: (state, action: PayloadAction<Transaction>) => {\n      state.createTx = action.payload;\n      state.isCreating = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceAsset,\n  setTargetChain,\n  setAttestTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsCreating,\n  setCreateTx,\n  reset,\n} = attestSlice.actions;\n\nexport default attestSlice.reducer;\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    textTransform: \"none\",\n    width: \"100%\",\n  },\n  loader: {\n    position: \"absolute\",\n    bottom: 0,\n    left: \"50%\",\n    marginLeft: -12,\n    marginBottom: 6,\n  },\n  error: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function ButtonWithLoader({\n  disabled,\n  onClick,\n  showLoader,\n  error,\n  children,\n}: {\n  disabled?: boolean;\n  onClick: () => void;\n  showLoader?: boolean;\n  error?: string;\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.root}>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          className={classes.button}\n          disabled={disabled}\n          onClick={onClick}\n        >\n          {children}\n        </Button>\n        {showLoader ? (\n          <CircularProgress\n            size={24}\n            color=\"inherit\"\n            className={classes.loader}\n          />\n        ) : null}\n      </div>\n      {error ? (\n        <Typography variant=\"body2\" color=\"error\" className={classes.error}>\n          {error}\n        </Typography>\n      ) : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  createWrappedOnEth,\n  createWrappedOnSolana,\n  createWrappedOnTerra,\n  updateWrappedOnEth,\n  updateWrappedOnTerra,\n  updateWrappedOnSolana,\n  postVaaSolana,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useAttestSignedVAA from \"./useAttestSignedVAA\";\nimport { setCreateTx, setIsCreating } from \"../store/attestSlice\";\nimport {\n  selectAttestIsCreating,\n  selectAttestTargetChain,\n} from \"../store/selectors\";\nimport {\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const receipt = shouldUpdate\n      ? await updateWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await createWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setCreateTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, // TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolana(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA)\n    );\n    const transaction = shouldUpdate\n      ? await updateWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await createWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setCreateTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const msg = shouldUpdate\n      ? await updateWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        )\n      : await createWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Create Wrapped\"\n    );\n    dispatch(\n      setCreateTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nexport function useHandleCreateWrapped(shouldUpdate: boolean) {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const signedVAA = useAttestSignedVAA();\n  const isCreating = useSelector(selectAttestIsCreating);\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const handleCreateClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && !!signedVAA) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        signedVAA,\n        targetChain,\n        shouldUpdate\n      );\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        shouldUpdate\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && !!signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA, shouldUpdate);\n    } else {\n      // enqueueSnackbar(\n      //   \"Creating wrapped tokens on this chain is not yet supported\",\n      //   {\n      //     variant: \"error\",\n      //   }\n      // );\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    signedVAA,\n    signer,\n    shouldUpdate,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleCreateClick,\n      disabled: !!isCreating,\n      showLoader: !!isCreating,\n    }),\n    [handleCreateClick, isCreating]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useAttestSignedVAA() {\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getClaimAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  postVaaSolana,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  createMetaOnSolana,\n  getForeignAssetSol,\n  isNFTVAASolanaNative,\n  redeemOnEth,\n  redeemOnSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/nftSlice\";\nimport { selectNFTIsRedeeming, selectNFTTargetChain } from \"../store/selectors\";\nimport {\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getMetadataAddress } from \"../utils/metaplex\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTSignedVAA from \"./useNFTSignedVAA\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = await redeemOnEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      signedVAA\n    );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const claimAddress = await getClaimAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS,\n      signedVAA\n    );\n    const claimInfo = await connection.getAccountInfo(claimAddress);\n    let txid;\n    if (!claimInfo) {\n      await postVaaSolana(\n        connection,\n        wallet.signTransaction,\n        SOL_BRIDGE_ADDRESS,\n        payerAddress,\n        Buffer.from(signedVAA)\n      );\n      // TODO: how do we retry in between these steps\n      const transaction = await redeemOnSolana(\n        connection,\n        SOL_BRIDGE_ADDRESS,\n        SOL_NFT_BRIDGE_ADDRESS,\n        payerAddress,\n        signedVAA\n      );\n      txid = await signSendAndConfirm(wallet, connection, transaction);\n      // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    }\n    const isNative = await isNFTVAASolanaNative(signedVAA);\n    if (!isNative) {\n      const { parse_vaa } = await import(\n        \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n      );\n      const parsedVAA = parse_vaa(signedVAA);\n      const { originChain, originAddress, tokenId } = parseNFTPayload(\n        Buffer.from(new Uint8Array(parsedVAA.payload))\n      );\n      const mintAddress = await getForeignAssetSol(\n        SOL_NFT_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAddress),\n        arrayify(tokenId)\n      );\n      const [metadataAddress] = await getMetadataAddress(mintAddress);\n      const metadata = await connection.getAccountInfo(metadataAddress);\n      if (!metadata) {\n        const transaction = await createMetaOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_NFT_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n        txid = await signSendAndConfirm(wallet, connection, transaction);\n      }\n    }\n    dispatch(setRedeemTx({ id: txid || \"\", block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleNFTRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const signedVAA = useNFTSignedVAA();\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTSignedVAA() {\n  const signedVAAHex = useSelector(selectNFTSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  parseTransferPayload,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Card,\n  CircularProgress,\n  Container,\n  Divider,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { COLORS } from \"../muiTheme\";\nimport { setRecoveryVaa as setRecoveryNFTVaa } from \"../store/nftSlice\";\nimport { setRecoveryVaa } from \"../store/transferSlice\";\nimport {\n  CHAINS,\n  CHAINS_WITH_NFT_SUPPORT,\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n  WORMHOLE_RPC_HOSTS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport ChainSelect from \"./ChainSelect\";\nimport KeyAndBalance from \"./KeyAndBalance\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  advancedContainer: {\n    padding: theme.spacing(2, 0),\n  },\n}));\n\nasync function evm(\n  provider: ethers.providers.Web3Provider,\n  tx: string,\n  enqueueSnackbar: any,\n  chainId: ChainId,\n  nft: boolean\n) {\n  try {\n    const receipt = await provider.getTransactionReceipt(tx);\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      nft\n        ? getNFTBridgeAddressForChain(chainId)\n        : getTokenBridgeAddressForChain(chainId)\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function solana(tx: string, enqueueSnackbar: any, nft: boolean) {\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const info = await connection.getTransaction(tx);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      nft ? SOL_NFT_BRIDGE_ADDRESS : SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function terra(tx: string, enqueueSnackbar: any) {\n  try {\n    const lcd = new LCDClient(TERRA_HOST);\n    const info = await lcd.tx.txInfo(tx);\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence,\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nexport default function Recovery() {\n  const classes = useStyles();\n  const { push } = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const { provider } = useEthereumProvider();\n  const [type, setType] = useState(\"Token\");\n  const isNFT = type === \"NFT\";\n  const [recoverySourceChain, setRecoverySourceChain] =\n    useState(CHAIN_ID_SOLANA);\n  const [recoverySourceTx, setRecoverySourceTx] = useState(\"\");\n  const [recoverySourceTxIsLoading, setRecoverySourceTxIsLoading] =\n    useState(false);\n  const [recoverySourceTxError, setRecoverySourceTxError] = useState(\"\");\n  const [recoverySignedVAA, setRecoverySignedVAA] = useState(\"\");\n  const [recoveryParsedVAA, setRecoveryParsedVAA] = useState<any>(null);\n  const { isReady, statusMessage } = useIsWalletReady(recoverySourceChain);\n  const walletConnectError =\n    isEVMChain(recoverySourceChain) && !isReady ? statusMessage : \"\";\n  const parsedPayload = useMemo(() => {\n    try {\n      return recoveryParsedVAA?.payload\n        ? isNFT\n          ? parseNFTPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n          : parseTransferPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n        : null;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }, [recoveryParsedVAA, isNFT]);\n  useEffect(() => {\n    if (recoverySourceTx && (!isEVMChain(recoverySourceChain) || isReady)) {\n      let cancelled = false;\n      if (isEVMChain(recoverySourceChain) && provider) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await evm(\n            provider,\n            recoverySourceTx,\n            enqueueSnackbar,\n            recoverySourceChain,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_SOLANA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await solana(\n            recoverySourceTx,\n            enqueueSnackbar,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_TERRA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await terra(recoverySourceTx, enqueueSnackbar);\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    recoverySourceChain,\n    recoverySourceTx,\n    provider,\n    enqueueSnackbar,\n    isNFT,\n    isReady,\n  ]);\n  const handleTypeChange = useCallback((event) => {\n    setRecoverySourceChain((prevChain) =>\n      event.target.value === \"NFT\" &&\n      !CHAINS_WITH_NFT_SUPPORT.find((chain) => chain.id === prevChain)\n        ? CHAIN_ID_SOLANA\n        : prevChain\n    );\n    setType(event.target.value);\n  }, []);\n  const handleSourceChainChange = useCallback((event) => {\n    setRecoverySourceTx(\"\");\n    setRecoverySourceChain(event.target.value);\n  }, []);\n  const handleSourceTxChange = useCallback((event) => {\n    setRecoverySourceTx(event.target.value.trim());\n  }, []);\n  const handleSignedVAAChange = useCallback((event) => {\n    setRecoverySignedVAA(event.target.value.trim());\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    if (recoverySignedVAA) {\n      (async () => {\n        try {\n          const { parse_vaa } = await import(\n            \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n          );\n          const parsedVAA = parse_vaa(hexToUint8Array(recoverySignedVAA));\n          if (!cancelled) {\n            setRecoveryParsedVAA(parsedVAA);\n          }\n        } catch (e) {\n          console.log(e);\n          if (!cancelled) {\n            setRecoveryParsedVAA(null);\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [recoverySignedVAA]);\n  const parsedPayloadTargetChain = parsedPayload?.targetChain;\n  const enableRecovery = recoverySignedVAA && parsedPayloadTargetChain;\n  const handleRecoverClick = useCallback(() => {\n    if (enableRecovery && recoverySignedVAA && parsedPayloadTargetChain) {\n      // TODO: make recovery reducer\n      if (isNFT) {\n        dispatch(\n          setRecoveryNFTVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n            },\n          })\n        );\n        push(\"/nft\");\n      } else {\n        dispatch(\n          setRecoveryVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n            },\n          })\n        );\n        push(\"/transfer\");\n      }\n    }\n  }, [\n    dispatch,\n    enableRecovery,\n    recoverySignedVAA,\n    parsedPayloadTargetChain,\n    parsedPayload,\n    isNFT,\n    push,\n  ]);\n  return (\n    <Container maxWidth=\"md\">\n      <Card className={classes.mainCard}>\n        <Alert severity=\"info\" variant=\"outlined\">\n          If you have sent your tokens but have not redeemed them, you may paste\n          in the Source Transaction ID (from Step 3) to resume your transfer.\n        </Alert>\n        <TextField\n          select\n          variant=\"outlined\"\n          label=\"Type\"\n          disabled={!!recoverySignedVAA}\n          value={type}\n          onChange={handleTypeChange}\n          fullWidth\n          margin=\"normal\"\n        >\n          <MenuItem value=\"Token\">Token</MenuItem>\n          <MenuItem value=\"NFT\">NFT</MenuItem>\n        </TextField>\n        <ChainSelect\n          select\n          variant=\"outlined\"\n          label=\"Source Chain\"\n          disabled={!!recoverySignedVAA}\n          value={recoverySourceChain}\n          onChange={handleSourceChainChange}\n          fullWidth\n          margin=\"normal\"\n          chains={isNFT ? CHAINS_WITH_NFT_SUPPORT : CHAINS}\n        />\n        {isEVMChain(recoverySourceChain) ? (\n          <KeyAndBalance chainId={recoverySourceChain} />\n        ) : null}\n        <TextField\n          variant=\"outlined\"\n          label=\"Source Tx (paste here)\"\n          disabled={\n            !!recoverySignedVAA ||\n            recoverySourceTxIsLoading ||\n            !!walletConnectError\n          }\n          value={recoverySourceTx}\n          onChange={handleSourceTxChange}\n          error={!!recoverySourceTxError || !!walletConnectError}\n          helperText={recoverySourceTxError || walletConnectError}\n          fullWidth\n          margin=\"normal\"\n        />\n        <ButtonWithLoader\n          onClick={handleRecoverClick}\n          disabled={!enableRecovery}\n          showLoader={recoverySourceTxIsLoading}\n        >\n          Recover\n        </ButtonWithLoader>\n        <div className={classes.advancedContainer}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              Advanced\n            </AccordionSummary>\n            <AccordionDetails>\n              <div>\n                <Box position=\"relative\">\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Signed VAA (Hex)\"\n                    disabled={recoverySourceTxIsLoading}\n                    value={recoverySignedVAA || \"\"}\n                    onChange={handleSignedVAAChange}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                  {recoverySourceTxIsLoading ? (\n                    <Box\n                      position=\"absolute\"\n                      style={{\n                        top: 0,\n                        right: 0,\n                        left: 0,\n                        bottom: 0,\n                        backgroundColor: \"rgba(0,0,0,0.5)\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <CircularProgress />\n                    </Box>\n                  ) : null}\n                </Box>\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Chain\"\n                  disabled\n                  value={recoveryParsedVAA?.emitter_chain || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Address\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      hexToNativeString(\n                        recoveryParsedVAA.emitter_address,\n                        recoveryParsedVAA.emitter_chain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Sequence\"\n                  disabled\n                  value={recoveryParsedVAA?.sequence || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Timestamp\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      new Date(\n                        recoveryParsedVAA.timestamp * 1000\n                      ).toLocaleString()) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Chain\"\n                  disabled\n                  value={parsedPayload?.originChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Token Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.originAddress,\n                        parsedPayload.originChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Origin Token ID\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.tokenId || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                ) : null}\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Chain\"\n                  disabled\n                  value={parsedPayload?.targetChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.targetAddress,\n                        parsedPayload.targetChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? null : (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Amount\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.amount.toString() || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                )}\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  postVaaSolana,\n  redeemAndUnwrapOnSolana,\n  redeemOnEth,\n  redeemOnEthNative,\n  redeemOnSolana,\n  redeemOnTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport {\n  selectTransferIsRedeeming,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/transferSlice\";\nimport {\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = isNative\n      ? await redeemOnEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await redeemOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  isNative: boolean\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolana(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA)\n    );\n    // TODO: how do we retry in between these steps\n    const transaction = isNative\n      ? await redeemAndUnwrapOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await redeemOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setRedeemTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const msg = await redeemOnTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      signedVAA\n    );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Complete Transfer\"\n    );\n    dispatch(\n      setRedeemTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const signedVAA = useTransferSignedVAA();\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, false, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        false\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n  ]);\n\n  const handleRedeemNativeClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, true, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        true\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA); //TODO isNative = true\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n  ]);\n\n  return useMemo(\n    () => ({\n      handleNativeClick: handleRedeemNativeClick,\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming, handleRedeemNativeClick]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferSignedVAA() {\n  const signedVAAHex = useSelector(selectTransferSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport {\n  AccountInfo,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nexport async function signSendAndConfirm(\n  wallet: WalletContextState,\n  connection: Connection,\n  transaction: Transaction\n) {\n  if (!wallet.signTransaction) {\n    throw new Error(\"wallet.signTransaction is undefined\");\n  }\n  const signed = await wallet.signTransaction(transaction);\n  const txid = await connection.sendRawTransaction(signed.serialize());\n  await connection.confirmTransaction(txid);\n  return txid;\n}\n\nexport interface ExtractedMintInfo {\n  mintAuthority?: string;\n  supply?: string;\n}\n\nexport function extractMintInfo(\n  account: AccountInfo<Buffer>\n): ExtractedMintInfo {\n  const data = Buffer.from(account.data);\n  const mintInfo = MintLayout.decode(data);\n\n  const uintArray = mintInfo?.mintAuthority;\n  const pubkey = new PublicKey(uintArray);\n  const supply = BigNumber.from(mintInfo?.supply.reverse()).toString();\n  const output = {\n    mintAuthority: pubkey?.toString(),\n    supply: supply.toString(),\n  };\n\n  return output;\n}\n\nexport async function getMultipleAccountsRPC(\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  return getMultipleAccounts(connection, pubkeys, \"confirmed\");\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  pubkeys: PublicKey[],\n  commitment: string\n) => {\n  return (\n    await Promise.all(\n      chunks(pubkeys, 99).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk, commitment)\n      )\n    )\n  ).flat();\n};\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function shortenAddress(address: string) {\n  return address.length > 10\n    ? `${address.slice(0, 4)}...${address.slice(-4)}`\n    : address;\n}\n","import { createTheme, responsiveFontSizes } from \"@material-ui/core\";\n\nexport const COLORS = {\n  blue: \"#1975e6\",\n  blueWithTransparency: \"rgba(25, 117, 230, 0.8)\",\n  gray: \"#4e4e54\",\n  green: \"#0ac2af\",\n  greenWithTransparency: \"rgba(10, 194, 175, 0.8)\",\n  lightGreen: \"rgba(51, 242, 223, 1)\",\n  lightBlue: \"#83b9fc\",\n  nearBlack: \"#000008\",\n  nearBlackWithMinorTransparency: \"rgba(0,0,0,.25)\",\n  red: \"#aa0818\",\n  darkRed: \"#810612\",\n};\n\nexport const theme = responsiveFontSizes(\n  createTheme({\n    palette: {\n      type: \"dark\",\n      background: {\n        default: COLORS.nearBlack,\n        paper: COLORS.nearBlack,\n      },\n      divider: COLORS.gray,\n      text: {\n        primary: \"rgba(255,255,255,0.98)\",\n      },\n      primary: {\n        main: COLORS.blueWithTransparency, // #0074FF\n        light: COLORS.lightBlue,\n      },\n      secondary: {\n        main: COLORS.greenWithTransparency, // #00EFD8\n        light: COLORS.lightGreen,\n      },\n      error: {\n        main: COLORS.red,\n      },\n    },\n    typography: {\n      fontFamily: \"'Sora', sans-serif\",\n      h1: {\n        fontWeight: \"200\",\n      },\n      h2: {\n        fontWeight: \"200\",\n      },\n      h4: {\n        fontWeight: \"500\",\n      },\n    },\n    overrides: {\n      MuiCssBaseline: {\n        \"@global\": {\n          \"*\": {\n            scrollbarWidth: \"thin\",\n            scrollbarColor: `${COLORS.gray} ${COLORS.nearBlackWithMinorTransparency}`,\n          },\n          \"*::-webkit-scrollbar\": {\n            width: \"8px\",\n            height: \"8px\",\n            backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          },\n          \"*::-webkit-scrollbar-thumb\": {\n            backgroundColor: COLORS.gray,\n            borderRadius: \"4px\",\n          },\n          \"*::-webkit-scrollbar-corner\": {\n            // this hides an annoying white box which appears when both scrollbars are present\n            backgroundColor: \"transparent\",\n          },\n        },\n      },\n      MuiAccordion: {\n        root: {\n          backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          \"&:before\": {\n            display: \"none\",\n          },\n        },\n        rounded: {\n          \"&:first-child\": {\n            borderTopLeftRadius: \"16px\",\n            borderTopRightRadius: \"16px\",\n          },\n          \"&:last-child\": {\n            borderBottomLeftRadius: \"16px\",\n            borderBottomRightRadius: \"16px\",\n          },\n        },\n      },\n      MuiAlert: {\n        root: {\n          borderRadius: \"8px\",\n          border: \"1px solid\",\n        },\n      },\n      MuiButton: {\n        root: {\n          borderRadius: \"5px\",\n          textTransform: \"none\",\n        },\n      },\n      MuiLink: {\n        root: {\n          color: COLORS.lightBlue,\n        },\n      },\n      MuiPaper: {\n        rounded: {\n          borderRadius: \"16px\",\n        },\n      },\n      MuiStepper: {\n        root: {\n          backgroundColor: \"transparent\",\n          padding: 0,\n        },\n      },\n      MuiStep: {\n        root: {\n          backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          borderRadius: \"16px\",\n          padding: 16,\n        },\n      },\n      MuiStepConnector: {\n        lineVertical: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepContent: {\n        root: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepLabel: {\n        label: {\n          fontSize: 16,\n          fontWeight: \"300\",\n          \"&.MuiStepLabel-active\": {\n            fontWeight: \"300\",\n          },\n          \"&.MuiStepLabel-completed\": {\n            fontWeight: \"300\",\n          },\n        },\n      },\n      MuiTab: {\n        root: {\n          fontSize: 18,\n          fontWeight: \"300\",\n          padding: 12,\n          textTransform: \"none\",\n        },\n      },\n    },\n  })\n);\n","export default __webpack_public_path__ + \"static/media/oasis-network-rose-logo.c910dc42.svg\";","export default __webpack_public_path__ + \"static/media/terra.4c802748.svg\";","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bscIcon from \"../icons/bsc.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport solanaIcon from \"../icons/solana.svg\";\nimport terraIcon from \"../icons/terra.svg\";\n\nexport type Cluster = \"devnet\" | \"testnet\" | \"mainnet\";\nexport const CLUSTER: Cluster =\n  process.env.REACT_APP_CLUSTER === \"mainnet\"\n    ? \"mainnet\"\n    : process.env.REACT_APP_CLUSTER === \"testnet\"\n    ? \"testnet\"\n    : \"devnet\";\nexport interface ChainInfo {\n  id: ChainId;\n  name: string;\n  logo: string;\n}\nexport const CHAINS =\n  CLUSTER === \"mainnet\"\n    ? [\n        {\n          id: CHAIN_ID_AVAX,\n          name: \"Avalanche\",\n          logo: avaxIcon,\n        },\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        {\n          id: CHAIN_ID_AVAX,\n          name: \"Avalanche\",\n          logo: avaxIcon,\n        },\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum (Goerli)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_ETHEREUM_ROPSTEN,\n          name: \"Ethereum (Ropsten)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : [\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ];\nexport const BETA_CHAINS: ChainId[] =\n  CLUSTER === \"mainnet\" ? [CHAIN_ID_AVAX] : [];\nexport const CHAINS_WITH_NFT_SUPPORT = CHAINS.filter(\n  ({ id }) =>\n    id === CHAIN_ID_AVAX ||\n    id === CHAIN_ID_BSC ||\n    id === CHAIN_ID_ETH ||\n    id === CHAIN_ID_ETHEREUM_ROPSTEN ||\n    id === CHAIN_ID_POLYGON ||\n    id === CHAIN_ID_SOLANA\n);\nexport type ChainsById = { [key in ChainId]: ChainInfo };\nexport const CHAINS_BY_ID: ChainsById = CHAINS.reduce((obj, chain) => {\n  obj[chain.id] = chain;\n  return obj;\n}, {} as ChainsById);\n\nexport const COMING_SOON_CHAINS = [\n  {\n    id: 0,\n    name: \"Oasis\",\n    logo: oasisIcon,\n  },\n  {\n    id: 0,\n    name: \"Avalanche\",\n    logo: avaxIcon,\n  },\n];\nexport const getDefaultNativeCurrencySymbol = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? \"SOL\"\n    : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"ETH\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BNB\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"LUNA\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"MATIC\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"AVAX\"\n    : \"\";\nexport const getExplorerName = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"Etherscan\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BscScan\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"Finder\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"Polygonscan\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"Snowtrace\"\n    : \"Explorer\";\nexport const WORMHOLE_RPC_HOSTS =\n  CLUSTER === \"mainnet\"\n    ? [\n        \"https://wormhole-v2-mainnet-api.certus.one\",\n        \"https://wormhole.inotel.ro\",\n        \"https://wormhole-v2-mainnet-api.mcf.rocks\",\n        \"https://wormhole-v2-mainnet-api.chainlayer.network\",\n        \"https://wormhole-v2-mainnet-api.staking.fund\",\n        \"https://wormhole-v2-mainnet.01node.com\",\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\"https://wormhole-v2-testnet-api.certus.one\"]\n    : [\"http://localhost:7071\"];\nexport const ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 5 : 1337;\nexport const ROPSTEN_ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 3 : 1337;\nexport const BSC_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 56 : CLUSTER === \"testnet\" ? 97 : 1397;\nexport const POLYGON_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 137 : CLUSTER === \"testnet\" ? 80001 : 1381;\nexport const AVAX_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 43114 : CLUSTER === \"testnet\" ? 43113 : 1381;\nexport const getEvmChainId = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH\n    ? ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NETWORK_CHAIN_ID\n    : undefined;\nexport const SOLANA_HOST = process.env.REACT_APP_SOLANA_API_URL\n  ? process.env.REACT_APP_SOLANA_API_URL\n  : CLUSTER === \"mainnet\"\n  ? clusterApiUrl(\"mainnet-beta\")\n  : CLUSTER === \"testnet\"\n  ? clusterApiUrl(\"devnet\")\n  : \"http://localhost:8899\";\n\nexport const TERRA_HOST =\n  CLUSTER === \"mainnet\"\n    ? {\n        URL: \"https://lcd.terra.dev\",\n        chainID: \"columbus-5\",\n        name: \"mainnet\",\n      }\n    : CLUSTER === \"testnet\"\n    ? {\n        URL: \"https://bombay-lcd.terra.dev\",\n        chainID: \"bombay-12\",\n        name: \"testnet\",\n      }\n    : {\n        URL: \"http://localhost:1317\",\n        chainID: \"columbus-5\",\n        name: \"localterra\",\n      };\nexport const ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x706abc4E45D419950511e474C7B9Ed348A4a716c\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD8E4C2DbDd2e2bd8F1336EA691dBFF6952B1a6eB\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF890982f9310df57d00f659cf4fd87e65adEd8d7\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const BSC_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const BSC_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xcD16E5613EF35599dc82B24Cb45B5A93D779f1EE\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const BSC_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xB6F6D86a8f9879A9c87f643768d9efc38c1Da6E7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9dcF9D205C9De35334D646BeE44b2D2859712A09\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const POLYGON_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0CBE91CF822c73C2315FB05100C2F714765d5c20\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const POLYGON_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x90BBd86a6Fe93D3bc3ed6335935447E75fAb7fCf\"\n    : CLUSTER === \"testnet\"\n    ? \"0x51a02d0dcb5e52F5b92bdAA38FA013C91c7309A9\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const POLYGON_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x377D55a7928c046E18eEbb61977e714d2a76472a\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const AVAX_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x54a8e5f9c4CbA08F9943965859F6c34eAF03E26c\"\n    : CLUSTER === \"testnet\"\n    ? \"0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const AVAX_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xf7B6737Ca9c4e08aE573F75A97B73D7a813f5De5\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD601BAf2EEE3C028344471684F6b27E789D9075D\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const AVAX_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0e082F06FF657D94310cB8cE8B0D9a04541d8052\"\n    : CLUSTER === \"testnet\"\n    ? \"0x61E44E506Ca5659E6c0bba9b678586fA2d729756\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const SOL_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth\"\n    : CLUSTER === \"testnet\"\n    ? \"3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5\"\n    : \"Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o\";\nexport const SOL_NFT_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WnFt12ZrnzZrFZkt2xsNsaNWoQribnuQ5B5FrDbwDhD\"\n    : CLUSTER === \"testnet\"\n    ? \"2rHhojZ7hpu1zA91nvZmT8TqWWvMcKmmNBCr2mKTtMq4\"\n    : \"NFTWqJR8YnRVqPDvTJrYuLrQDitTG5AScqbeghi4zSA\";\nexport const SOL_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb\"\n    : CLUSTER === \"testnet\"\n    ? \"DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe\"\n    : \"B6RHG3mfcckmrYN1UhmJzyS1XX3fZKbkeUcpJe9Sy3FE\";\nexport const ROPSTEN_ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x210c5F5e2AF958B4defFe715Dc621b7a3BA888c5\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ROPSTEN_ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x2b048Da40f69c8dc386a56705915f8E966fe1eba\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF174F9A837536C449321df1Ca093Bb96948D5386\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\n\nexport const SOL_CUSTODY_ADDRESS =\n  \"GugU1tP7doLeTw9hQP51xRJyS8Da1fWxuiy2rVrnMD2m\";\nexport const SOL_NFT_CUSTODY_ADDRESS =\n  \"D63bhHo634eXSj4Jq3xgu2fjB5XKc8DFHzDY9iZk7fv1\";\nexport const TERRA_TEST_TOKEN_ADDRESS =\n  \"terra13nkgqrfymug724h8pprpexqj9h629sa3ncw7sh\";\nexport const TERRA_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pd65m0q9tl3v8znnz5f5ltsfegyzah7g42cx5v\"\n    : \"terra18vd8fpwxzck93qlwghaj6arh4p7c5n896xzem5\";\nexport const TERRA_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pseddrv0yfsn76u4zxrjmtf45kdlmalswdv39a\"\n    : \"terra10pyejy66429refv3g35g2t7am0was7ya7kz2a4\";\n\nexport const getBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_BRIDGE_ADDRESS\n    : \"\";\nexport const getNFTBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NFT_BRIDGE_ADDRESS\n    : \"\";\nexport const getTokenBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_TOKEN_BRIDGE_ADDRESS\n    : \"\";\n\nexport const COVALENT_API_KEY = process.env.REACT_APP_COVALENT_API_KEY\n  ? process.env.REACT_APP_COVALENT_API_KEY\n  : \"\";\n\nexport const COVALENT_ETHEREUM = 1; // Covalent only supports mainnet and Kovan\nexport const COVALENT_BSC = CLUSTER === \"devnet\" ? 56 : BSC_NETWORK_CHAIN_ID;\nexport const COVALENT_POLYGON =\n  CLUSTER === \"devnet\" ? 137 : POLYGON_NETWORK_CHAIN_ID;\nexport const COVALENT_AVAX = CLUSTER === \"devnet\" ? 137 : AVAX_NETWORK_CHAIN_ID;\nexport const COVALENT_GET_TOKENS_URL = (\n  chainId: ChainId,\n  walletAddress: string,\n  nft?: boolean,\n  noNftMetadata?: boolean\n) => {\n  const chainNum =\n    chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? COVALENT_ETHEREUM\n      : chainId === CHAIN_ID_BSC\n      ? COVALENT_BSC\n      : chainId === CHAIN_ID_POLYGON\n      ? COVALENT_POLYGON\n      : chainId === CHAIN_ID_AVAX\n      ? COVALENT_AVAX\n      : \"\";\n  // https://www.covalenthq.com/docs/api/#get-/v1/{chain_id}/address/{address}/balances_v2/\n  return `https://api.covalenthq.com/v1/${chainNum}/address/${walletAddress}/balances_v2/?key=${COVALENT_API_KEY}${\n    nft ? \"&nft=true\" : \"\"\n  }${noNftMetadata ? \"&no-nft-fetch=true\" : \"\"}`;\n};\nexport const TERRA_SWAPRATE_URL =\n  \"https://fcd.terra.dev/v1/market/swaprate/uusd\";\n\nexport const WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WETH_DECIMALS = 18;\n\nexport const WBNB_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\n    : CLUSTER === \"testnet\"\n    ? \"0xae13d989dac2f0debff460ac112a837c89baa7cd\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WBNB_DECIMALS = 18;\n\nexport const WMATIC_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WMATIC_DECIMALS = 18;\n\nexport const ROPSTEN_WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc778417e063141139fce010982780140aa0cd5ab\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const ROPSTEN_WETH_DECIMALS = 18;\n\nexport const WAVAX_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7\"\n    : CLUSTER === \"testnet\"\n    ? \"0xd00ae08403b9bbb9124bb305c09058e32c39a48c\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WAVAX_DECIMALS = 18;\n\nexport const WORMHOLE_V1_ETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"\n    : CLUSTER === \"testnet\"\n    ? \"0xdae0Cba01eFc4bfEc1F7Fece73Fe8b8d2Eda65B0\"\n    : \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"; //TODO something that doesn't explode in localhost\nexport const WORMHOLE_V1_SOLANA_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC\"\n    : CLUSTER === \"testnet\"\n    ? \"BrdgiFmZN3BKkcY3danbPYyxPKwb8RhQzpM2VY5L97ED\"\n    : \"\";\n\nexport const TERRA_TOKEN_METADATA_URL =\n  \"https://assets.terra.money/cw20/tokens.json\";\n\nexport const WORMHOLE_V1_MINT_AUTHORITY =\n  CLUSTER === \"mainnet\"\n    ? \"9zyPU1mjgzaVyQsYwKJJ7AhVz5bgx5uc1NPABvAcUXsT\"\n    : CLUSTER === \"testnet\"\n    ? \"BJa7dq3bRP216zaTdw4cdcV71WkPc1HXvmnGeFVDi5DC\"\n    : \"\";\n\n// hardcoded addresses for warnings\nexport const SOLANA_TOKENS_THAT_EXIST_ELSEWHERE = [\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\", //  SRM\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n  \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\", //  KIN\n  \"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5\", // renBTC\n  \"8wv2KAykQstNAj2oW6AHANGBiFKVFhvMiyyzzjhkmGvE\", // renLUNA\n  \"G1a6jxYz3m8DVyMqYnuV7s86wD4fvuXYneWSpLJkmsXj\", // renBCH\n  \"FKJvvVJ242tX7zFtzTmzqoA631LqHh4CdgcN8dcfFSju\", // renDGB\n  \"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU\", // renDOGE\n  \"E99CQ2gFMmbiyK2bwiaFNWUUmwz4r8k2CVEFxwuvQ7ue\", // renZEC\n  \"De2bU64vsXKU9jq4bCjeDxNRGPn8nr3euaTK8jBYmD3J\", // renFIL\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", // USDT\n];\nexport const ETH_TOKENS_THAT_EXIST_ELSEWHERE = [\n  getAddress(\"0x476c5E26a75bd202a9683ffD34359C0CC15be0fF\"), // SRM\n  getAddress(\"0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5\"), // KIN\n  getAddress(\"0xeb4c2781e4eba804ce9a9803c67d0893436bb27d\"), // renBTC\n  getAddress(\"0x52d87F22192131636F93c5AB18d0127Ea52CB641\"), // renLUNA\n  getAddress(\"0x459086f2376525bdceba5bdda135e4e9d3fef5bf\"), // renBCH\n  getAddress(\"0xe3cb486f3f5c639e98ccbaf57d95369375687f80\"), // renDGB\n  getAddress(\"0x3832d2F059E55934220881F831bE501D180671A7\"), // renDOGE\n  getAddress(\"0x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2\"), // renZEC\n  getAddress(\"0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5\"), // renFIL\n];\nexport const ETH_TOKENS_THAT_CAN_BE_SWAPPED_ON_SOLANA = [\n  getAddress(\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"), // USDC\n  getAddress(\"0xdac17f958d2ee523a2206206994597c13d831ec7\"), // USDT\n];\nexport const BSC_MARKET_WARNINGS = [\n  getAddress(WBNB_ADDRESS),\n  getAddress(\"0xe9e7cea3dedca5984780bafc599bd69add087d56\"), // BUSD\n  getAddress(\"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"), // USDC\n  getAddress(\"0x55d398326f99059ff775485246999027b3197955\"), // BSC-USD\n];\n\nexport const MIGRATION_PROGRAM_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"whmRZnmyxdr2TkHXcZoFdtvNYRLQ5Jtbkf6ZbGkJjdk\"\n    : CLUSTER === \"testnet\"\n    ? \"\"\n    : \"Ex9bCdVMSfx7EzB3pgSi2R4UHwJAXvTw18rBQm5YQ8gK\";\n\nexport const MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // HUSD\n          \"BybpSTBoZHsmKnfxYG47GDhVPKrnEKX31CScShbrzUhX\",\n          \"7VQo3HFLNH5QqGtM8eC3XQbPkJUu7nS9LeGWjerRh5Sw\",\n        ],\n        [\n          // BUSD\n          \"AJ1W9A9N9dEMdVyoDiam2rV44gnBm2csrPDP7xqcapgX\",\n          \"33fsBLA8djQm82RpHmE3SuVrPGtZBWNYExsEUeKX1HXX\",\n        ],\n        [\n          // HBTC\n          \"8pBc4v9GAwCBNWPB5XKA93APexMGAS4qMr37vNke9Ref\",\n          \"7dVH61ChzgmN9BwG4PkzwRP8PbYwPJ7ZPNF2vamKT2H8\",\n        ],\n        [\n          // DAI\n          \"FYpdBuyAHSbdaAyD1sKkxyLWbAP8uUW9h6uvdhK74ij1\",\n          \"EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o\",\n        ],\n        [\n          // FRAX\n          \"8L8pDf3jutdpdr4m3np68CL9ZroLActrqwxi6s9Ah5xU\",\n          \"FR87nWEUxVgerFGhZM8Y4AggKGLnaXswr1Pd8wZ4kZcp\",\n        ],\n        [\n          // USDK\n          \"2kycGCD8tJbrjJJqWN2Qz5ysN9iB4Bth3Uic4mSB7uak\",\n          \"43m2ewFV5nDepieFjT9EmAQnc1HRtAF247RBpLGFem5F\",\n        ],\n        // [\n        //   // UST\n        //   \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n        //   \"5Un6AdG9GBjxVhTSvvt2x6X6vtN1zrDxkkDpDcShnHfF\",\n        // ],\n        [\n          // UST\n          \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n          \"9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i\",\n        ],\n        // [\n        //   // Wrapped LUNA\n        //   \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n        //   \"EQTV1LW23Mgtjb5LXSg9NGw1J32oqTV4HCPmHCVSGmqD\",\n        // ],\n        [\n          // Wrapped LUNA\n          \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n          \"F6v4wfAdJB8D8p77bMXZgYt8TDKsYxLYxH5AFhUkYx9W\",\n        ],\n        [\n          // FTT\n          \"GbBWwtYTMPis4VHb8MrBbdibPhn28TSrLB53KvUmb7Gi\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // SRM\n          \"2jXy799YnEcRXneFo2GEAB6SDRsAa767HpWmktRr1DaP\",\n          \"xnorPhAzWXUczCP3KjU5yDxmKKZi5cSbxytQ1LgE3kG\",\n        ],\n        [\n          // FTT (Sollet)\n          \"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // WETH (Sollet)\n          \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n          \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n        ],\n        [\n          // UNI (Sollet)\n          \"DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw\",\n          \"8FU95xFJhUUkyyCLU13HSzDLs7oC4QZdXQHL6SCeab36\",\n        ],\n        [\n          // HXRO (Sollet)\n          \"DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc\",\n          \"HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK\",\n        ],\n        [\n          // ALEPH (Sollet)\n          \"CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K\",\n          \"3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x\",\n        ],\n        [\n          // TOMOE (Sollet)\n          \"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd\",\n          \"46AiRdka3HYGkhV6r9gyS6Teo9cojfGXfK8oniALYMZx\",\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\",\n        //   \"GcdupcwxkmVGM6s9F8bHSjNoznXAb3hRJTioABNYkn31\",\n        // ],\n      ]\n);\n\nexport const ETH_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9\"),\n          getAddress(\"0xe76820F1DB773B1d62a3D22F47259705cC5fA4E6\"),\n        ],\n        [\n          // UST\n          getAddress(\"0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\"),\n          getAddress(\"0xF39C29d8f6851d87c40c83b61078EB7384f7Cb51\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const BSC_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xECCF35F941Ab67FfcAA9A1265C2fF88865caA005\"),\n          getAddress(\"0x355A116ef1Cf566B12Ef3a8e409A64e303c53740\"),\n        ],\n        [\n          // UST\n          getAddress(\"0x23396cF899Ca06c4472205fC903bDB4de249D6fC\"),\n          getAddress(\"0x0F98AB919D04a291838B3b075c57181057D4CF75\"),\n        ],\n        [\n          // ORION\n          getAddress(\"0x5530ec23f4ee1521182bd158c09f4ca7efec1ef0\"),\n          getAddress(\"0x084fa354e65b521e6fb9d1602549cf8693cdb4f8\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const getMigrationAssetMap = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_BSC) {\n    return BSC_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_ETH) {\n    return ETH_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return MIGRATION_ASSET_MAP;\n  } else {\n    return new Map<string, string>();\n  }\n};\n\nexport const SUPPORTED_TERRA_TOKENS = [\"uluna\", \"uusd\"];\n\nexport const TERRA_FCD_BASE =\n  CLUSTER === \"mainnet\"\n    ? \"https://fcd.terra.dev\"\n    : CLUSTER === \"testnet\"\n    ? \"https://bombay-fcd.terra.dev\"\n    : \"http://localhost:3060\";\nexport const TERRA_GAS_PRICES_URL = `${TERRA_FCD_BASE}/v1/txs/gas_prices`;\n\nexport const TOTAL_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet/totals?groupBy=address`;\n\nexport const RECENT_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet/recent?groupBy=address&numRows=2`;\n\nexport const VAA_EMITTER_ADDRESSES = [\n  `${CHAIN_ID_SOLANA}:ec7372995d5cc8732397fb0ad35c0121e0eaa90d26f828a534cab54391b3a4f5`, //SOLANA TOKEN\n  `${CHAIN_ID_SOLANA}:0def15a24423e1edd1a5ab16f557b9060303ddbab8c803d2ee48f4b78a1cfd6b`, //SOLAN NFT\n  `${CHAIN_ID_ETH}:0000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585`, //ETH token\n  `${CHAIN_ID_ETH}:0000000000000000000000006ffd7ede62328b3af38fcd61461bbfc52f5651fe`, //ETH NFT\n  `${CHAIN_ID_TERRA}:0000000000000000000000007cf7b764e38a0a5e967972c1df77d432510564e2`, //terra\n  `${CHAIN_ID_BSC}:000000000000000000000000b6f6d86a8f9879a9c87f643768d9efc38c1da6e7`, //bsc\n  `${CHAIN_ID_BSC}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //bsc nft\n  `${CHAIN_ID_POLYGON}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //Polygon\n  `${CHAIN_ID_POLYGON}:00000000000000000000000090bbd86a6fe93d3bc3ed6335935447e75fab7fcf`, //Polygon nft\n];\n\nexport const WORMHOLE_EXPLORER_BASE = \"https://wormholenetwork.com/en/explorer\";\n\nexport type MultiChainInfo = {\n  [key in ChainId]: { [address: string]: string };\n};\nexport const MULTI_CHAIN_TOKENS: MultiChainInfo =\n  //EVM chains should format the addresses to all lowercase\n  CLUSTER === \"mainnet\"\n    ? ({\n        [CHAIN_ID_SOLANA]: {\n          EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: \"USDC\",\n          Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: \"USDT\",\n        },\n        [CHAIN_ID_ETH]: {\n          \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\": \"USDC\",\n          \"0xdac17f958d2ee523a2206206994597c13d831ec7\": \"USDT\",\n        },\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {\n          \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\": \"USDC\",\n          \"0x55d398326f99059ff775485246999027b3197955\": \"USDT\",\n        },\n        [CHAIN_ID_POLYGON]: {\n          \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\": \"USDC\",\n          \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\": \"USDT\",\n        },\n      } as MultiChainInfo)\n    : ({\n        [CHAIN_ID_SOLANA]: {\n          \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\": \"SOLT\",\n        },\n        [CHAIN_ID_ETH]: {},\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {},\n        [CHAIN_ID_POLYGON]: {},\n      } as MultiChainInfo);\n\nexport const AVAILABLE_MARKETS_URL =\n  \"https://docs.wormholenetwork.com/wormhole/overview-liquid-markets\";\n\nexport const SOLANA_SYSTEM_PROGRAM_ADDRESS = \"11111111111111111111111111111111\";\nexport const FEATURED_MARKETS_JSON_URL =\n  \"https://raw.githubusercontent.com/certusone/wormhole-token-list/main/src/markets.json\";\n\nexport const logoOverrides = new Map<string, string>([\n  [\n    \"0x727f064a78dc734d33eec18d5370aef32ffd46e4\",\n    \"https://orion.money/assets/ORION-LOGO-2.1-GREEN@256x256.png\",\n  ],\n]);\n","import { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { useWallet, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getMathWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport React, { FC, useMemo } from \"react\";\n\nexport const SolanaWalletProvider: FC = (props) => {\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you want to instantiate here will be compiled into your application\n  const wallets = useMemo(() => {\n    return [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      // getTorusWallet({\n      //     options: { clientId: 'Go to https://developer.tor.us and create a client ID' }\n      // }),\n      // getLedgerWallet(),\n      // getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ];\n  }, []);\n\n  return (\n    <WalletProvider wallets={wallets}>\n      <WalletDialogProvider>{props.children}</WalletDialogProvider>\n    </WalletProvider>\n  );\n};\n\nexport const useSolanaWallet = useWallet;\n","import { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst TerraWalletKey = () => {\n  const { connect, disconnect, connected, wallet } = useTerraWallet();\n  const pk =\n    (wallet &&\n      wallet.wallets &&\n      wallet.wallets.length > 0 &&\n      wallet.wallets[0].terraAddress) ||\n    \"\";\n  return (\n    <ToggleConnectedButton\n      connect={connect}\n      disconnect={disconnect}\n      connected={connected}\n      pk={pk}\n    />\n  );\n};\n\nexport default TerraWalletKey;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport EthereumSignerKey from \"./EthereumSignerKey\";\nimport SolanaWalletKey from \"./SolanaWalletKey\";\nimport TerraWalletKey from \"./TerraWalletKey\";\n\nfunction KeyAndBalance({ chainId }: { chainId: ChainId }) {\n  if (isEVMChain(chainId)) {\n    return (\n      <>\n        <EthereumSignerKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_SOLANA) {\n    return (\n      <>\n        <SolanaWalletKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <>\n        <TerraWalletKey />\n      </>\n    );\n  }\n  return null;\n}\n\nexport default KeyAndBalance;\n","const MM_ERR_WITH_INFO_START =\n  \"VM Exception while processing transaction: revert \";\nconst parseError = (e: any) =>\n  e?.data?.message?.startsWith(MM_ERR_WITH_INFO_START)\n    ? e.data.message.replace(MM_ERR_WITH_INFO_START, \"\")\n    : e?.response?.data?.error // terra error\n    ? e.response.data.error\n    : e?.message\n    ? e.message\n    : \"An unknown error occurred\";\nexport default parseError;\n","import {\n  canonicalAddress,\n  isNativeDenom,\n  isNativeTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ConnectedWallet, TxResult } from \"@terra-money/wallet-provider\";\nimport axios from \"axios\";\n// import { TerraTokenMetadata } from \"../hooks/useTerraTokenMap\";\nimport { TERRA_GAS_PRICES_URL, TERRA_HOST } from \"./consts\";\n\nexport const NATIVE_TERRA_DECIMALS = 6;\n\nexport const getNativeTerraIcon = (symbol = \"\") =>\n  `https://assets.terra.money/icon/60/${symbol}.png`;\n\n// inspired by https://github.com/terra-money/station/blob/dca7de43958ce075c6e46605622203b9859b0e14/src/lib/utils/format.ts#L38\nexport const formatNativeDenom = (denom = \"\"): string => {\n  const unit = denom.slice(1).toUpperCase();\n  const isValidTerra = isNativeTerra(denom);\n  return denom === \"uluna\"\n    ? \"Luna\"\n    : isValidTerra\n    ? unit.slice(0, 2) + \"T\"\n    : \"\";\n};\n\nexport const formatTerraNativeBalance = (balance = \"\"): string =>\n  formatUnits(balance, 6);\n\nexport async function waitForTerraExecution(transaction: TxResult) {\n  const lcd = new LCDClient(TERRA_HOST);\n  let info;\n  while (!info) {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      info = await lcd.tx.txInfo(transaction.result.txhash);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (info.code !== undefined) {\n    // error code\n    throw new Error(\n      `Tx ${transaction.result.txhash}: error code ${info.code}: ${info.raw_log}`\n    );\n  }\n  return info;\n}\n\nexport const isValidTerraAddress = (address: string) => {\n  if (isNativeDenom(address)) {\n    return true;\n  }\n  try {\n    const startsWithTerra = address && address.startsWith(\"terra\");\n    const isParseable = canonicalAddress(address);\n    const isLength20 = isParseable.length === 20;\n    return !!(startsWithTerra && isParseable && isLength20);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport async function postWithFees(\n  wallet: ConnectedWallet,\n  msgs: any[],\n  memo: string\n) {\n  // don't try/catch, let errors propagate\n  const lcd = new LCDClient(TERRA_HOST);\n  //let gasPrices = await lcd.config.gasPrices //Unsure if the values returned from this are hardcoded or not.\n  //Thus, we are going to pull it directly from the current FCD.\n  let gasPrices = await axios\n    .get(TERRA_GAS_PRICES_URL)\n    .then((result) => result.data);\n\n  const feeEstimate = await lcd.tx.estimateFee(\n    wallet.walletAddress,\n    [...msgs],\n    {\n      memo,\n      feeDenoms: [\"uluna\"],\n      gasPrices,\n    }\n  );\n\n  const result = await wallet.post({\n    msgs: [...msgs],\n    memo,\n    feeDenoms: [\"uluna\"],\n    gasPrices,\n    fee: feeEstimate,\n  });\n\n  return result;\n}\n"],"sourceRoot":""}