{"version":3,"sources":["components/HeaderText.tsx","hooks/useFetchForeignAsset.ts","components/Transfer/WaitingForWalletMessage.tsx","components/Attest/WaitingForWalletMessage.tsx","components/Attest/Create.tsx","components/ShowTx.tsx","components/Attest/CreatePreview.tsx","hooks/useHandleAttest.tsx","components/TransactionProgress.tsx","components/Attest/Send.tsx","components/Attest/SendPreview.tsx","hooks/useTransactionFees.tsx","components/LowBalanceWarning.tsx","components/Attest/Source.tsx","hooks/useCopyToClipboard.tsx","utils/pushToClipboard.ts","components/SmartAddress.tsx","components/Attest/SourcePreview.tsx","components/Attest/Target.tsx","components/Attest/TargetPreview.tsx","components/Attest/index.tsx","icons/Discord.svg","icons/Github.svg","icons/Medium.svg","icons/Telegram.svg","icons/Twitter.svg","icons/wormhole-network.svg","components/Footer.tsx","components/Home/index.tsx","hooks/useMetaplexData.ts","store/tokenSlice.ts","hooks/useSolanaTokenMap.ts","components/NumberTextField.tsx","components/SolanaCreateAssociatedAddress.tsx","components/Migration/SolanaWorkflow.tsx","hooks/useEthereumMigratorInformation.tsx","components/Migration/EvmWorkflow.tsx","components/Migration/index.tsx","components/Migration/EvmQuickMigrate.tsx","hooks/useCheckIfWormholeWrapped.ts","hooks/useFetchTargetAsset.ts","components/StepDescription.tsx","components/NFT/WaitingForWalletMessage.tsx","components/NFT/Redeem.tsx","components/NFT/RedeemPreview.tsx","hooks/useHandleNFTTransfer.tsx","hooks/useNFTTargetAddress.ts","components/NFT/Send.tsx","components/NFT/SendPreview.tsx","icons/bnb.svg","hooks/useGetSourceParsedTokenAccounts.ts","utils/ethereum.ts","hooks/useMarketsMap.ts","components/TokenSelectors/NFTViewer.tsx","components/TokenSelectors/TokenPicker.tsx","components/TokenSelectors/EvmTokenPicker.tsx","components/TokenSelectors/RefreshButtonWrapper.tsx","utils/sort.ts","components/TokenSelectors/SolanaTokenPicker.tsx","hooks/useTerraNativeBalances.ts","components/TokenSelectors/TerraTokenPicker.tsx","components/TokenSelectors/SourceTokenSelector.tsx","components/NFT/Source.tsx","components/NFT/SourcePreview.tsx","hooks/useSyncTargetAddress.ts","components/NFT/Target.tsx","components/NFT/TargetPreview.tsx","components/NFT/index.tsx","components/NFTOriginVerifier.tsx","components/Transfer/Redeem.tsx","components/Transfer/AddToMetamask.tsx","components/Transfer/RedeemPreview.tsx","hooks/useHandleTransfer.tsx","hooks/useTransferTargetAddress.ts","hooks/useEvmMetadata.ts","hooks/useTerraMetadata.ts","hooks/useTerraTokenMap.ts","hooks/useMetadata.ts","hooks/useGetTargetParsedTokenAccounts.ts","components/Transfer/RegisterNowButton.tsx","components/Transfer/Target.tsx","components/Transfer/TokenWarning.tsx","components/Transfer/SendConfirmationDialog.tsx","components/Transfer/Send.tsx","hooks/useAllowance.ts","components/Transfer/SendPreview.tsx","components/Transfer/Source.tsx","components/Transfer/SourcePreview.tsx","components/Transfer/TargetPreview.tsx","components/Transfer/index.tsx","utils/SolanaPriceStore.ts","hooks/useTVL.ts","components/Stats/tableComponents/TablePaginationActions.jsx","components/Stats/tableComponents/MuiReactTable.jsx","components/Stats/CustodyAddresses.tsx","hooks/useNFTTVL.ts","components/Stats/nftLists.ts","components/Stats/NFTStats.tsx","hooks/useTransactionCount.ts","components/Stats/TransactionMetrics.tsx","components/Stats/index.tsx","hooks/useOriginalAsset.ts","components/TokenOriginVerifier.tsx","hooks/useSolanaMigratorInformation.tsx","components/Migration/SolanaQuickMigrate.tsx","App.js","components/BackgroundImage.tsx","ErrorBoundary.js","store/index.ts","index.js","store/selectors.ts","components/ChainSelect.tsx","utils/getSignedVAAWithRetry.ts","contexts/BetaContext.tsx","icons/eth.svg","icons/polygon.svg","components/EthereumSignerKey.tsx","components/SolanaWalletKey.tsx","icons/bsc.svg","icons/solana.svg","utils/metaplex.ts","store/transferSlice.ts","components/ToggleConnectedButton.tsx","contexts/TerraWalletContext.tsx","store/helpers.ts","contexts/EthereumProviderContext.tsx","hooks/useIsWalletReady.ts","store/nftSlice.ts","store/attestSlice.ts","components/ButtonWithLoader.tsx","hooks/useHandleCreateWrapped.tsx","hooks/useAttestSignedVAA.ts","hooks/useHandleNFTRedeem.tsx","hooks/useNFTSignedVAA.ts","components/Recovery.tsx","hooks/useHandleRedeem.tsx","hooks/useTransferSignedVAA.ts","utils/solana.ts","muiTheme.js","icons/terra.svg","icons/oasis-network-rose-logo.svg","utils/consts.ts","contexts/SolanaWalletContext.tsx","components/TerraWalletKey.tsx","components/KeyAndBalance.tsx","utils/parseError.ts","utils/terra.ts"],"names":["useStyles","makeStyles","theme","centeredContainer","textAlign","width","header","marginTop","spacing","marginBottom","breakpoints","down","linearGradient","background","COLORS","blue","green","WebkitBackgroundClip","backgroundClip","WebkitTextFillColor","MozBackgroundClip","MozTextFillColor","HeaderText","children","white","small","classes","className","Typography","variant","component","clsx","useFetchForeignAsset","originChain","originAsset","foreignChain","useEthereumProvider","provider","evmChainId","chainId","isReady","useIsWalletReady","hasCorrectEvmNetwork","getEvmChainId","useState","assetAddress","setAssetAddress","doesExist","setDoesExist","error","setError","isLoading","setIsLoading","originAssetHex","useMemo","nativeToHexString","e","previousArgs","setPreviousArgs","argsEqual","setArgs","useCallback","argumentError","isEVMChain","useEffect","getForeignAssetEth","getTokenBridgeAddressForChain","hexToUint8Array","CHAIN_ID_TERRA","lcd","LCDClient","TERRA_HOST","getForeignAssetTerra","TERRA_TOKEN_BRIDGE_ADDRESS","connection","Connection","SOLANA_HOST","getForeignAssetSolana","SOL_TOKEN_BRIDGE_ADDRESS","then","result","ethers","constants","AddressZero","catch","compoundError","isFetching","data","undefined","address","receivedAt","message","color","palette","warning","light","WAITING_FOR_WALLET_AND_CONF","WaitingForWalletMessage","isApproving","useSelector","selectTransferIsApproving","isSending","selectTransferIsSending","transferTx","selectTransferTransferTx","targetChain","selectTransferTargetChain","isRedeeming","selectTransferIsRedeeming","redeemTx","selectTransferRedeemTx","CHAIN_ID_SOLANA","selectAttestIsSending","attestTx","selectAttestAttestTx","selectAttestTargetChain","isCreating","selectAttestIsCreating","createTx","selectAttestCreateTx","alignCenter","margin","display","spacer","height","Create","selectAttestSourceAsset","selectAttestSourceChain","statusMessage","foreignAssetInfo","shouldUpdate","useHandleCreateWrapped","handleClick","disabled","showLoader","console","log","KeyAndBalance","CircularProgress","ButtonWithLoader","onClick","tx","viewButton","ShowTx","showExplorerLink","CLUSTER","explorerAddress","CHAIN_ID_ETH","id","CHAIN_ID_ETHEREUM_ROPSTEN","CHAIN_ID_BSC","CHAIN_ID_POLYGON","explorerName","getExplorerName","noWrap","Button","href","target","rel","size","description","CreatePreview","push","useHistory","dispatch","useDispatch","handleResetClick","reset","handleReturnClick","enqueueSnackbar","signer","sourceAsset","a","setIsSending","attestFromEth","receipt","setAttestTx","transactionHash","block","blockNumber","content","Alert","severity","sequence","parseSequenceFromLogEth","getBridgeAddressForChain","emitterAddress","getEmitterAddressEth","getSignedVAAWithRetry","vaaBytes","setSignedVAAHex","uint8ArrayToHex","parseError","solPK","wallet","attestFromSolana","SOL_BRIDGE_ADDRESS","toString","transaction","signSendAndConfirm","txid","getTransaction","info","Error","slot","parseSequenceFromLogSolana","getEmitterAddressSolana","asset","attestFromTerra","terraAddress","msg","postWithFees","waitForTerraExecution","txhash","parseSequenceFromLogTerra","getEmitterAddressTerra","useHandleAttest","useSnackbar","sourceChain","isTargetComplete","selectAttestIsTargetComplete","isSendComplete","selectAttestIsSendComplete","solanaWallet","useSolanaWallet","publicKey","terraWallet","useConnectedWallet","handleAttestClick","evm","solana","terra","root","TransactionProgress","currentBlock","setCurrentBlock","cancelled","Promise","resolve","setTimeout","getBlockNumber","newBlock","sub","onSlotChange","slotInfo","removeSlotChangeListener","blockDiff","expectedBlocks","LinearProgress","value","CHAINS_BY_ID","name","Send","SendPreview","SOLANA_THRESHOLD_LAMPORTS","BigInt","ETHEREUM_THRESHOLD_WEI","TERRA_THRESHOLD_ULUNA","isSufficientBalance","balance","getBalanceSolana","walletAddress","getMultipleAccountsRPC","PublicKey","results","length","lamports","getBalanceEvm","getBalance","toBigInt","getBalanceTerra","bank","coins","targetCoin","map","amount","denom","find","coin","reject","toBalanceString","formatUnits","NATIVE_TERRA_DECIMALS","useEthereumGasPrice","contract","estimateResults","setEstimateResults","getGasEstimates","EthGasEstimateSummary","methodType","estimate","style","alignItems","flexWrap","LocalGasStation","fontSize","currentGasPrice","lowEstimate","highEstimate","getDefaultNativeCurrencySymbol","terraEstimatesByContract","transfer","lowGasEstimate","highGasEstimate","evmEstimatesByContract","nft","createWrapped","lowEstimateGasAmount","highEstimateGasAmount","getGasPrice","priceInWei","parseFloat","toFixed","output","TerraGasEstimateSummary","GasEstimateSummary","alert","LowBalanceWarning","transactionFeeWarning","setBalance","loadStart","adjustedresult","balanceString","useTransactionFees","displayWarning","warningMessage","transferField","Source","isSourceComplete","selectAttestIsSourceComplete","shouldLockFields","selectAttestShouldLockFields","handleSourceChange","event","setSourceChain","handleAssetChange","setSourceAsset","handleNextClick","incrementStep","ChainSelect","select","fullWidth","onChange","chains","CHAINS","TextField","label","useCopyToClipboard","navigator","clipboard","writeText","pushToClipboard","mainTypog","marginLeft","marginRight","textDecoration","textUnderlineOffset","noGutter","noUnderline","buttons","StyledTooltip","withStyles","tooltip","minWidth","Tooltip","SmartAddress","parsedTokenAccount","symbol","tokenName","extraContent","isNativeTerra","isNativeDenom","useableAddress","mintKey","useableSymbol","formatNativeDenom","isNative","isNativeAsset","addressShort","shortenAddress","useableName","copyToClipboard","explorerButton","endIcon","OpenInNew","copyButton","FileCopy","tooltipContent","title","interactive","SourcePreview","explainerContent","Target","filter","c","handleTargetChange","setTargetChain","TargetPreview","explainerString","Attest","activeStep","selectAttestActiveStep","isCreateComplete","selectAttestIsCreateComplete","preventNavigation","window","onbeforeunload","Container","maxWidth","Stepper","orientation","Step","expanded","StepButton","setStep","StepContent","footer","socialIcon","builtWithContainer","justifyContent","opacity","wormholeIcon","transition","verticalAlign","Footer","IconButton","src","Discord","alt","Github","Medium","Telegram","Twitter","Wormhole","button","overview","mainCard","padding","backgroundColor","nearBlackWithMinorTransparency","chainList","chainCard","borderRadius","flexDirection","minHeight","chainLogoWrapper","position","chainLogo","chainName","flex","chip","blueWithTransparency","top","right","transform","Home","BETA_CHAINS","includes","chain","logo","COMING_SOON_CHAINS","item","Chip","Card","Link","RouterLink","to","getMetaplexData","mintAddresses","promises","getMetadataAddress","all","metaAddresses","pair","account","decodeMetadata","useMetaplexData","addresses","setResults","setReceivedAt","useLayoutEffect","metadatas","Map","forEach","metadata","x","mint","set","createResultMap","Date","toISOString","initialState","solanaTokenMap","getEmptyDataWrapper","terraTokenMap","marketsMap","tokenSlice","createSlice","reducers","receiveSolanaTokenMap","state","action","receiveDataWrapper","payload","fetchSolanaTokenMap","fetchDataWrapper","errorSolanaTokenMap","errorDataWrapper","receiveTerraTokenMap","fetchTerraTokenMap","errorTerraTokenMap","receiveMarketsMap","fetchMarketsMap","errorMarketsMap","actions","environment","ENV","Testnet","MainnetBeta","getSolanaTokenMap","TokenListProvider","tokens","tokenList","filterByChainId","getList","useSolanaTokenMap","tokenMap","selectSolanaTokenMap","shouldFire","NumberTextField","onMaxClick","props","type","InputProps","endAdornment","InputAdornment","useAssociatedAccountExistsState","mintAddress","readableTargetAddress","associatedAccountExists","setAssociatedAccountExists","mintPublicKey","payerPublicKey","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","associatedAddress","getAccountInfo","SolanaCreateAssociatedAddress","setIsCreating","Transaction","createAssociatedTokenAccountInstruction","add","getRecentBlockhash","blockhash","recentBlockhash","feePayer","SolanaCreateAssociatedAddressAlternate","selectTransferOriginChain","selectTransferOriginAsset","addressHex","selectTransferTargetAddressHex","base58TargetAddress","hexToNativeString","base58OriginAddress","targetAsset","setTargetAsset","handleForceCreateClick","mainPaper","divider","getDecimals","setter","pk","getParsedAccountInfo","decimals","parsed","tokenAmount","uiAmountString","Workflow","fromMint","toMint","fromTokenAccount","metaplexArray","metaplexData","poolAddress","setPoolAddress","poolExists","setPoolExists","fromTokenAccountBalance","setFromTokenAccountBalance","toTokenAccount","setToTokenAccount","toTokenAccountBalance","setToTokenAccountBalance","fromMintDecimals","setFromMintDecimals","fromTokenAccountExists","toTokenAccountExists","setToTokenAccountExists","toCustodyAddress","setToCustodyAddress","toCustodyBalance","setToCustodyBalance","migrationAmount","setMigrationAmount","migrationIsProcessing","setMigrationIsProcessing","setTransaction","getPoolAddress","MIGRATION_PROGRAM_ADDRESS","key","getMultipleAccounts","getToCustodyAddress","migrateTokens","migrateTokensTx","parseUnits","instruction","fromParse","hasRequisiteData","accountsReady","amountGreaterThanZero","sufficientFromTokens","sufficientPoolBalance","isReadyToTransfer","handleAmountChange","handleMaxClick","getMetadata","tokenMapItem","metaplexItem","get","logoURI","uri","toMetadata","fromMetadata","toMintPretty","fromMintPretty","SolanaWalletKey","getRequisiteData","migrator","signerAddress","fromAsset","fromAddress","toAsset","toAddress","fromToken","TokenImplementation__factory","connect","toToken","fromSymbol","toSymbol","fromDecimals","toNumber","toDecimals","sharesDecimals","balanceOf","fromWalletBalance","toWalletBalance","fromPoolBalance","toPoolBalance","walletSharesBalance","useEthereumMigratorInformation","migratorAddress","toggleRefresh","Migrator__factory","setData","containerDiv","EvmWorkflow","setToggleRefresh","forceRefresh","prevState","poolInfo","approve","migrate","wait","hash","toTokenPretty","fromTokenPretty","poolPretty","fatalError","mainWorkflow","EthereumSignerKey","SolanaRoot","legacyAsset","match","params","MIGRATION_ASSET_MAP","fromTokenAcct","EthereumRoot","targetPool","getMigrationAssetMap","getAddress","withRouter","Paper","Divider","lineItem","alignSelf","flexGrow","flewGrow","hidden","convertButton","EvmMigrationLineItem","onLoadComplete","loaded","setLoaded","valueA","decimalsA","valueB","decimalsB","decimalsBasis","normalizedA","normalizedB","compareWithDecimalOffset","migrationAmountAbs","getAddressBalances","factory","EvmQuickMigrate","migrationMap","eligibleTokens","Array","from","keys","migrators","setMigrators","migratorsError","setMigratorsError","migratorsLoading","setMigratorsLoading","migratorsFinishedLoading","setMigratorsFinishedLoading","reportLoadComplete","migratorAddresses","tokenAddress","gt","hasEligibleAssets","makeStateSafe","useCheckIfWormholeWrapped","selectNFTSourceChain","selectTransferSourceChain","selectNFTSourceAsset","selectTransferSourceAsset","nftSourceParsedTokenAccount","selectNFTSourceParsedTokenAccount","tokenId","setSourceWormholeWrappedInfo","setNFTSourceWormholeWrappedInfo","setTransferSourceWormholeWrappedInfo","isRecovery","selectNFTIsRecovery","selectTransferIsRecovery","getOriginalAssetEthNFT","getNFTBridgeAddressForChain","getOriginalAssetEth","wrappedInfo","getOriginalAssetSolNFT","SOL_NFT_BRIDGE_ADDRESS","getOriginalAssetSol","getOriginalAssetTerra","useFetchTargetAsset","isSourceAssetWormholeWrapped","selectNFTIsSourceAssetWormholeWrapped","selectTransferIsSourceAssetWormholeWrapped","selectNFTOriginChain","selectNFTOriginAsset","selectNFTOriginTokenId","selectNFTTargetChain","setNFTTargetAsset","setTransferTargetAsset","lastSuccessfulArgs","setLastSuccessfulArgs","argsMatchLastSuccess","getForeignAssetEthNFT","getForeignAssetSolNFT","arrayify","BigNumber","StepDescription","selectNFTIsSending","selectNFTTransferTx","selectNFTIsRedeeming","selectNFTRedeemTx","Redeem","useHandleNFTRedeem","RedeemPreview","recipientChain","recipientAddress","transferFromEth","setTransferTx","payerAddress","targetAddress","originAddressStr","originTokenId","originAddress","zeroPad","transferFromSolana","useHandleNFTTransfer","sourceTokenId","targetAddressHex","selectNFTTargetAddressHex","useNFTTargetAddressHex","selectNFTIsTargetComplete","selectNFTIsSendComplete","sourceParsedTokenAccount","sourceTokenPublicKey","handleTransferClick","selectNFTTargetError","sourceWalletAddress","selectNFTSourceWalletAddress","isWrongWallet","isDisabled","errorMessage","createParsedTokenAccount","uiAmount","createNFTParsedTokenAccount","animation_url","external_url","image","image_256","nftName","createParsedTokenAccountFromInfo","pubkey","createParsedTokenAccountFromCovalent","covalent","contract_address","contract_decimals","Number","contract_ticker_symbol","contract_name","logoOverrides","logo_url","createNativeSolParsedTokenAccount","fetchAccounts","WSOL_ADDRESS","WSOL_DECIMALS","createNativeEthParsedTokenAccount","balanceInWei","balanceInEth","utils","formatEther","WETH_ADDRESS","WETH_DECIMALS","ethIcon","createNativeEthRopstenParsedTokenAccount","ROPSTEN_WETH_ADDRESS","ROPSTEN_WETH_DECIMALS","createNativeBscParsedTokenAccount","WBNB_ADDRESS","WBNB_DECIMALS","bnbIcon","createNativePolygonParsedTokenAccount","WMATIC_ADDRESS","WMATIC_DECIMALS","polygonIcon","createNFTParsedTokenAccountFromCovalent","nft_data","token_balance","token_id","token_url","external_data","getEthereumAccountsCovalent","url","COVALENT_GET_TOKENS_URL","axios","response","items","supports_erc","getSolanaParsedTokenAccounts","fetchSourceParsedTokenAccountsNFT","fetchSourceParsedTokenAccounts","getParsedTokenAccountsByOwner","programId","splParsedTokenAccounts","receiveSourceParsedTokenAccountsNFT","nativeAccount","unshift","receiveSourceParsedTokenAccounts","errorSourceParsedTokenAccountsNFT","errorSourceParsedTokenAccounts","useGetAvailableTokens","tokenAccounts","selectNFTSourceParsedTokenAccounts","selectTransferSourceParsedTokenAccounts","lookupChain","setCovalent","covalentLoading","setCovalentLoading","covalentError","setCovalentError","ethNativeAccount","setEthNativeAccount","ethNativeAccountLoading","setEthNativeAccountLoading","ethNativeAccountError","setEthNativeAccountError","solanaMintAccounts","setSolanaMintAccounts","solanaMintAccountsLoading","setSolanaMintAccountsLoading","solanaMintAccountsError","setSolanaMintAccountsError","selectedSourceWalletAddress","selectSourceWalletAddress","currentSourceWalletAddress","resetSourceAccounts","setSourceWalletAddressNFT","setSourceWalletAddress","setSourceParsedTokenAccountNFT","setSourceParsedTokenAccount","setSourceParsedTokenAccountsNFT","setSourceParsedTokenAccounts","setAmount","index","extractMintInfo","accounts","reduce","arr","current","ethAccounts","slice","mintAccounts","resetAccounts","getEthereumToken","token","ethTokenToParsedTokenAccount","getEthereumNFT","NFTImplementation__factory","isNFT","erc721metadata","supportsInterface","supportsErc721","supportsErc721Metadata","ethNFTToNFTParsedTokenAccount","ownerOf","tokenURI","isValidEthereumAddress","isAddress","getMarketsMap","FEATURED_MARKETS_JSON_URL","useMarketsMap","selectMarketsMap","internalShouldFire","safeIPFS","startsWith","replace","LogoIcon","Avatar","solanaIcon","bscIcon","card","zIndex","backgroundPosition","backgroundSize","silverBorder","cardInset","textContent","paddingTop","paddingBottom","detailsContent","mediaContent","border","silverMediaBorder","borderColor","eth","bsc","polygon","skeleton","placeItems","wormholePositioner","ViewerLoader","Skeleton","animation","NFTViewer","setMetadata","isMediaLoading","setIsMediaLoading","onLoad","m","image_url","big_image","small_image","animLower","toLowerCase","hasVideo","endsWith","hasAudio","hasImage","copyTokenId","videoSrc","imageSrc","audioSrc","onError","media","autoPlay","controls","loop","onLoadedData","elevation","CardContent","CardMedia","align","arrow","substr","createStyles","optionContainer","optionContent","maxHeight","overflow","dialogContent","overflowX","selectionButtonContainer","selectionButton","values","sm","tokenOverviewContainer","flexBasis","flexShrink","tokenImageContainer","tokenImage","tokenMarketsList","order","migrationAlert","flexTitle","grower","balancePretty","uiString","numberString","split","gte","substring","noClickThrough","stopPropagation","BasicAccountRender","isMigrationEligible","displayBalance","marketsData","mintPrettyString","shouldDisplayBalance","nftContent","wordBreak","tokenContent","markets","market","Launch","link","migrationRender","TokenPicker","options","RenderOption","isValidAddress","useTokenId","holderString","setHolderString","tokenIdHolderString","setTokenIdHolderString","loadingError","setLoadingError","isLocalLoading","setLocalLoading","dialogIsOpen","setDialogIsOpen","selectionError","setSelectionError","openDialog","closeDialog","handleSelectOption","option","newOption","resetAccountsWrapper","searchFilter","optionString","searchString","marketChainTokens","featuredMarkets","tokenMarkets","featuredOptions","ownedMarketTokens","Object","nonFeaturedOptions","localFind","localLoader","displayLocalError","dialog","Dialog","onClose","open","DialogTitle","DialogContent","AVAILABLE_MARKETS_URL","List","gutterBottom","InfoOutlined","ListItem","selectionChip","isWormholev1","WormholeAbi__factory","WORMHOLE_V1_ETH_ADDRESS","isWrappedAsset","EvmTokenPicker","selectedTokenAccount","selectTransferSourceParsedTokenAccount","tokenAccount","selectedMintMatch","selectedTokenIdMatch","getEthAddress","onChangeWrapper","v1","migration","RenderComp","inlineContentWrapper","flexWrapper","RefreshButtonWrapper","callback","sortParsedTokenAccounts","b","localeCompare","SolanaSourceTokenSelector","mintAuth","metaplex","memoizedTokenMap","getLogo","getSymbol","getName","filteredOptions","is721CompatibleNFT","supply","sort","accountsWithMetadata","mintAuthority","WORMHOLE_V1_MINT_AUTHORITY","newValue","useTerraNativeBalances","refreshRef","balances","setBalances","refresh","setRefresh","obj","returnsFalse","TerraTokenPicker","nativeRefresh","useRef","nativeIsLoading","resetAccountWrapper","terraTokenArray","getNativeTerraIcon","SUPPORTED_TERRA_TOKENS","lookupTerraAddress","lookupAsset","wasm","contractQuery","token_info","isSearchableAddress","isValidTerraAddress","TokenSelector","walletIsReady","setNFTSourceParsedTokenAccount","setTransferSourceParsedTokenAccount","setNFTSourceWalletAddress","setTransferSourceWalletAddress","handleOnChange","newTokenAccount","maps","useGetSourceParsedTokens","placeholder","selectNFTSourceBalanceString","selectNFTSourceError","selectNFTIsSourceComplete","selectNFTShouldLockFields","VerifiedUser","CHAINS_WITH_NFT_SUPPORT","useSyncTargetAddress","selectNFTTargetAsset","selectTransferTargetAsset","targetParsedTokenAccount","selectTransferTargetParsedTokenAccount","targetTokenAccountPublicKey","setTargetAddressHex","setNFTTargetAddressHex","setTransferTargetAddressHex","toBytes","associatedTokenAccount","canonicalAddress","targetAddressNative","NFT","selectNFTActiveStep","isRedeemComplete","selectNFTIsRedeemComplete","originHeader","viewButtonWrapper","loaderWrapper","NFTOriginVerifier","isBeta","useBetaContext","setLookupChain","setLookupAsset","lookupTokenId","setLookupTokenId","lookupError","setLookupError","setParsedTokenAccount","originInfo","setOriginInfo","handleChainChange","handleTokenIdChange","newParsedTokenAccount","readableAddress","displayError","MenuItem","useHandleRedeem","handleNativeClick","isEthNative","isEthRopstenNative","isBscNative","isPolygonNative","isSolNative","isNativeEligible","useNativeRedeem","setUseNativeRedeem","toggleNativeRedeem","FormControlLabel","control","Checkbox","checked","addButton","AddToMetamask","detectEthereumProvider","request","method","amountParsed","transferFromEthNative","promise","transferNativeSol","transferFromTerra","msgs","useHandleTransfer","selectTransferAmount","useTransferTargetAddressHex","selectTransferIsTargetComplete","selectTransferIsSendComplete","ERC20_BASIC_ABI","handleError","fetchSingleMetadata","Contract","fetchEthMetadata","resultsArray","useEvmMetadata","setIsFetching","fetchTerraMetadata","useTerraMetadata","getTerraTokenMap","TERRA_TOKEN_METADATA_URL","useTerraTokenMap","selectTerraTokenMap","useMetadata","solanaAddresses","terraAddresses","ethereumAddresses","terraMetadata","ethMetadata","tokenInfo","raw","constructSolanaMetadata","metadataMap","meta","constructEthMetadata","mainnet","icon","constructTerraMetadata","useGetTargetParsedTokenAccounts","targetAssetArrayed","hasResolvedMetadata","setTargetParsedTokenAccount","n","RegisterNowButtonCore","history","signedVAAHex","selectAttestSignedVAAHex","canSwitch","nativeAsset","RegisterNowButton","useTargetInfo","selectTransferTargetAssetWrapper","targetAssetError","selectTransferTargetBalanceString","transferAmount","selectTransferTargetError","selectTransferShouldLockFields","container","line","WormholeWrappedWarning","Box","fontWeight","MultichainWarning","RewardsWarning","TokenWarning","searchableAddress","isWormholeWrapped","multichainSymbol","MULTI_CHAIN_TOKENS","isMultiChain","showMultiChainWarning","showWrappedWarning","showRewardsWarning","SendConfirmationContent","deservesTimeout","countdown","setCountdown","setInterval","ArrowDownward","DialogActions","SendConfirmationDialog","isConfirmOpen","setIsConfirmOpen","handleConfirmClick","handleConfirmClose","sourceAmount","sourceDecimals","sourceIsNative","sourceAmountParsed","oneParsed","allowanceError","setAllowanceError","shouldApproveUnlimited","setShouldApproveUnlimited","toggleShouldApproveUnlimited","allowance","setAllowance","isAllowanceFetching","setIsAllowanceFetching","isApproveProcessing","sufficientAllowance","getAllowanceEth","approveAmount","setIsApproving","approveEth","useAllowance","approveButtonNeeded","notOne","approveExactAmount","approveUnlimited","MaxUint256","chainSelectWrapper","chainSelectContainer","chainSelectArrow","targetChainOptions","hasParsedTokenAccount","isSolanaMigration","isEthereumMigration","ETH_MIGRATION_ASSET_MAP","isBscMigration","BSC_MIGRATION_ASSET_MAP","isMigrationAsset","selectTransferSourceBalanceString","selectTransferSourceError","selectTransferIsSourceComplete","handleMigrationClick","ArrowForward","Transfer","selectTransferActiveStep","selectTransferIsRedeemComplete","serumMarkets","MARKETS","deprecated","join","PriceStore","cache","this","marketName","fetch","resp","json","asks","bids","price","mid","priceStore","BAD_PRICES_BY_CHAIN","calcEvmTVL","covalentReport","hasUnreliablePrice","quote_rate","totalValue","quote","quotePrice","originChainId","useTVL","ethCovalentData","setEthCovalentData","ethCovalentIsLoading","setEthCovalentIsLoading","ethCovalentError","setEthCovalentError","bscCovalentData","setBscCovalentData","bscCovalentIsLoading","setBscCovalentIsLoading","bscCovalentError","setBscCovalentError","polygonCovalentData","setPolygonCovalentData","polygonCovalentIsLoading","setPolygonCovalentIsLoading","polygonCovalentError","setPolygonCovalentError","solanaCustodyTokens","setSolanaCustodyTokens","solanaCustodyTokensLoading","setSolanaCustodyTokensLoading","solanaCustodyTokensError","setSolanaCustodyTokensError","solanaMetadata","solanaPrices","priceMap","setPriceMap","relevantMarkets","relevantMarket","getPrice","useSolanaPrices","isTerraNativeLoading","terraNativeBalances","terraSwaprates","setTerraSwaprates","TERRA_SWAPRATE_URL","terraTVL","matchingSwap","swap","swaprate","useTerraTVL","isTerraLoading","solanaTVL","metaData","genericMetadata","calcSolanaTVL","ethTVL","bscTVL","polygonTVL","ETH_TOKEN_BRIDGE_ADDRESS","BSC_TOKEN_BRIDGE_ADDRESS","POLYGON_TOKEN_BRIDGE_ADDRESS","SOL_CUSTODY_ADDRESS","tvlArray","TablePaginationActions","useTheme","count","page","rowsPerPage","onPageChange","direction","Math","ceil","max","stopProp","EnhancedTable","columns","skipPageReset","useTable","autoResetPage","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","getTableProps","headerGroups","prepareRow","gotoPage","setPageSize","rows","pageIndex","pageSize","TableContainer","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","getSortByToggleProps","Header","TableSortLabel","active","isSorted","isSortedDesc","render","canGroupBy","getGroupByToggleProps","isGrouped","RemoveCircleOutline","AddCircleOutline","TableBody","row","i","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","KeyboardArrowRight","subRows","isAggregated","isPlaceholder","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onRowsPerPageChange","ActionsComponent","flexBox","explainerContainer","CustodyAddresses","nftAddress","SOL_NFT_CUSTODY_ADDRESS","tvlColumns","accessor","disableGroupBy","Cell","original","table","MuiReactTable","nftData","useNFTTVL","ETH_NFT_BRIDGE_ADDRESS","BSC_NFT_BRIDGE_ADDRESS","POLYGON_NFT_BRIDGE_ADDRESS","ALLOW_LIST","logoPositioner","tokenContainer","totalContainer","tableBox","randomButton","randomNftContainer","tableContainer","NFTStats","nftTVL","randomNumber","setRandomNumber","randomNft","genRandomNumber","found","nextNumber","floor","random","nfts","contractAddress","numeral","format","sortBy","desc","randomNFTContent","useTransactionCount","totals","setTotals","recents","setRecents","loadingTotals","setLoadingTotals","loadingRecents","setLoadingRecents","totalsError","setTotalsError","recentsError","setRecentsError","TOTAL_TRANSACTIONS_WORMHOLE","RECENT_TRANSACTIONS_WORMHOLE","totalAllTime","total24h","VAA_EMITTER_ADDRESSES","totalAll","TotalCount","total24","LastDayCount","mostRecent","mergeResults","totalsBox","typog","TransactionMetrics","transactionCount","networkExplorer","WORMHOLE_EXPLORER_BASE","StatsRoot","tvl","sortTokens","rowA","rowB","sortType","aggregate","leafValues","Aggregated","p","v","tvlString","sum","val","toUpperCase","getOriginalAssetToken","foreignNativeStringAddress","getOriginalAssetNFT","uint8ArrayToNative","SOLANA_SYSTEM_PROGRAM_ADDRESS","useOriginalAsset","foreignAddress","setOriginAddress","setOriginTokenId","setOriginChain","getOriginalAsset","centered","arrowIcon","resultContainer","PrimaryAssetInfomation","nativeContent","wrapped","SecondaryAssetInformation","originAssetInfo","tokenArray","TokenOriginVerifier","primaryLookupChain","setPrimaryLookupChain","primaryLookupAsset","setPrimaryLookupAsset","secondaryLookupChain","setSecondaryLookupChain","primaryLookupChainOptions","secondaryLookupChainOptions","handlePrimaryLookupChainChange","handleSecondaryLookupChainChange","handlePrimaryLookupAssetChange","primaryWalletIsActive","secondaryWalletIsActive","primaryWallet","secondaryWallet","primaryWalletError","originError","primaryError","secondaryWalletError","foreignError","secondaryError","primaryContent","secondaryContent","SolanaMigrationLineItem","migratorInfo","getNotReadyCause","fromAssociatedTokenAccountExists","toAssociatedTokenAccountExists","fromAssociatedTokenAccount","toAssociatedTokenAccount","fromAssociatedTokenAccountBalance","toAssociatedTokenAccountBalance","fromName","fromLogo","toName","toLogo","useSolanaMigratorInformation","fromMintKey","toMintKey","defaultFromTokenAccount","migrationError","setMigrationError","handleMigrateClick","precheckError","getTokenBalances","fromAccountInfo","SolanaQuickMigrate","appBar","typography","body1","text","primary","bg","up","brandLink","brandText","h5","iconButton","gradientButton","backgroundImage","nearBlack","boxShadow","betaBanner","App","isHomepage","useRouteMatch","path","exact","pathname","useLocation","handleTabChange","AppBar","Toolbar","Hidden","implementation","xsDown","NavLink","BarChart","HelpOutline","smUp","Tabs","indicatorColor","Tab","Recovery","Migration","Stats","holeOuterContainer","holeInnerContainer","left","holeImage","blurred","BackgroundImage","ErrorBoundary","hasError","errorInfo","React","Component","store","configureStore","reducer","attest","attestReducer","nftReducer","transferReducer","tokenReducer","ReactDOM","ThemeProvider","CssBaseline","maxSnack","BetaContext","document","getElementById","sourceParsedTokenAccounts","selectNFTSignedVAAHex","lte","indexOf","sourceError","UNREGISTERED_ERROR_MESSAGE","selectTransferSignedVAAHex","listItemIcon","rest","filteredChains","createChainMenuItem","CURRENT_WORMHOLE_RPC_HOST","getNextRpcHost","WORMHOLE_RPC_HOSTS","emitterChain","retryAttempts","attempts","getSignedVAA","createContext","BetaContextProvider","isBetaEnabled","setIsBetaEnabled","userEntered","secretSequence","secretListener","k","keyCode","prev","addEventListener","removeEventListener","Provider","useContext","disconnect","providerError","connected","disconnectButton","startIcon","STORE","MetadataKey","base58","require","METADATA_REPLACE","RegExp","METADATA_PREFIX","EDITION","PubKeysInternedMap","toPublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","METADATA_PROGRAM_ID","METAPLEX_ID","SYSTEM","programIds","associatedToken","bpf_upgrade_loader","system","memo","vault","auction","findProgramAddress","seeds","agg","cached","localStorage","getItem","JSON","parse","parseInt","nonce","setItem","stringify","toBase58","getEdition","tokenMint","PROGRAM_IDS","Buffer","toBuffer","Creator","args","verified","share","Data","sellerFeeBasisPoints","creators","Metadata","updateAuthority","primarySaleHappened","isMutable","editionNonce","masterEdition","edition","MetadataV1","METADATA_SCHEMA","kind","fields","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","MasterEditionV2","parent","EditionV1","ledger","EditionMarker","editionOffset","indexOffset","positionInBitsetFromRight","mask","pow","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","encode","writePubkeyAsString","decode","buffer","deserializeUnchecked","transferSlice","decrementStep","prevSourceChain","isWrapped","prevTargetChain","setIsRedeeming","setRedeemTx","setRecoveryVaa","vaa","parsedPayload","ToggleConnectedButton","is0x","localnet","chainID","URL","walletConnectChainIds","TerraWalletContext","TerraWalletWrapper","useWallet","setWallet","setConnected","availableConnectTypes","contextValue","TerraWalletProvider","defaultNetwork","useTerraWallet","EthereumProviderContext","EthereumProviderProvider","setProviderError","setProvider","setChainId","setSigner","setSignerAddress","detectedProvider","providers","Web3Provider","send","getNetwork","network","getSigner","on","createWalletStatus","forceNetworkSwitch","enableNetworkAutoswitch","autoSwitch","hasTerraWallet","hasEthInfo","correctEvmNetwork","hexStripZeros","hexlify","nftSlice","attestSlice","setCreateTx","textTransform","loader","bottom","signedVAA","updateWrappedOnEth","createWrappedOnEth","signTransaction","postVaaSolana","updateWrappedOnSolana","createWrappedOnSolana","updateWrappedOnTerra","createWrappedOnTerra","useAttestSignedVAA","handleCreateClick","redeemOnEth","getClaimAddressSolana","claimAddress","redeemOnSolana","isNFTVAASolanaNative","parse_vaa","parsedVAA","parseNFTPayload","Uint8Array","getForeignAssetSol","metadataAddress","createMetaOnSolana","useNFTSignedVAA","handleRedeemClick","advancedContainer","getTransactionReceipt","txInfo","setType","recoverySourceChain","setRecoverySourceChain","recoverySourceTx","setRecoverySourceTx","recoverySourceTxIsLoading","setRecoverySourceTxIsLoading","recoverySourceTxError","setRecoverySourceTxError","recoverySignedVAA","setRecoverySignedVAA","recoveryParsedVAA","setRecoveryParsedVAA","walletConnectError","parseTransferPayload","handleTypeChange","prevChain","handleSourceChainChange","handleSourceTxChange","trim","handleSignedVAAChange","parsedPayloadTargetChain","enableRecovery","handleRecoverClick","setRecoveryNFTVaa","helperText","expandIcon","my","emitter_chain","emitter_address","timestamp","toLocaleString","redeemOnEthNative","redeemAndUnwrapOnSolana","redeemOnTerra","useTransferSignedVAA","handleRedeemNativeClick","signed","sendRawTransaction","serialize","confirmTransaction","mintInfo","MintLayout","uintArray","reverse","pubkeys","commitment","chunks","chunk","getMultipleAccountsInfo","flat","apply","_","gray","greenWithTransparency","lightGreen","lightBlue","red","darkRed","responsiveFontSizes","createTheme","default","paper","main","secondary","fontFamily","h1","h2","h4","overrides","MuiCssBaseline","scrollbarWidth","scrollbarColor","MuiAccordion","rounded","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","MuiAlert","MuiButton","MuiLink","MuiPaper","MuiStepper","MuiStep","MuiStepConnector","lineVertical","borderLeftWidth","MuiStepContent","MuiStepLabel","MuiTab","terraIcon","oasisIcon","ETH_NETWORK_CHAIN_ID","ROPSTEN_ETH_NETWORK_CHAIN_ID","BSC_NETWORK_CHAIN_ID","POLYGON_NETWORK_CHAIN_ID","process","ETH_BRIDGE_ADDRESS","BSC_BRIDGE_ADDRESS","POLYGON_BRIDGE_ADDRESS","ROPSTEN_ETH_BRIDGE_ADDRESS","ROPSTEN_ETH_NFT_BRIDGE_ADDRESS","ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS","TERRA_BRIDGE_ADDRESS","COVALENT_BSC","COVALENT_POLYGON","noNftMetadata","chainNum","TERRA_GAS_PRICES_URL","EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v","Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB","SolanaWalletProvider","wallets","getPhantomWallet","getSolflareWallet","getMathWallet","getSolletWallet","TerraWalletKey","MM_ERR_WITH_INFO_START","unit","isValidTerra","code","raw_log","startsWithTerra","isParseable","isLength20","gasPrices","estimateFee","feeDenoms","feeEstimate","post","fee"],"mappings":"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","file":"static/js/main.95c77627.chunk.js","sourcesContent":["import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport { COLORS } from \"../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  centeredContainer: {\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n  header: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(4),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginBottom: theme.spacing(4),\n    },\n  },\n  linearGradient: {\n    background: `linear-gradient(to left, ${COLORS.blue}, ${COLORS.green});`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n  },\n}));\n\nexport default function HeaderText({\n  children,\n  white,\n  small,\n}: {\n  children: ReactChild;\n  white?: boolean;\n  small?: boolean;\n}) {\n  const classes = useStyles();\n  return (\n    <div className={classes.centeredContainer}>\n      <Typography\n        variant={small ? \"h2\" : \"h1\"}\n        component=\"h1\"\n        className={clsx(classes.header, { [classes.linearGradient]: !white })}\n      >\n        {children}\n      </Typography>\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToUint8Array,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type ForeignAssetInfo = {\n  doesExist: boolean;\n  address: string | null;\n};\n\nfunction useFetchForeignAsset(\n  originChain: ChainId,\n  originAsset: string,\n  foreignChain: ChainId\n): DataWrapper<ForeignAssetInfo> {\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const correctEvmNetwork = getEvmChainId(foreignChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const [assetAddress, setAssetAddress] = useState<string | null>(null);\n  const [doesExist, setDoesExist] = useState<boolean | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const originAssetHex = useMemo(() => {\n    try {\n      return nativeToHexString(originAsset, originChain);\n    } catch (e) {\n      return null;\n    }\n  }, [originAsset, originChain]);\n  const [previousArgs, setPreviousArgs] = useState<{\n    originChain: ChainId;\n    originAsset: string;\n    foreignChain: ChainId;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.originChain === originChain &&\n    previousArgs.originAsset === originAsset &&\n    previousArgs.foreignChain === foreignChain;\n  const setArgs = useCallback(() => {\n    setPreviousArgs({ foreignChain, originChain, originAsset });\n  }, [foreignChain, originChain, originAsset]);\n\n  const argumentError = useMemo(\n    () =>\n      !originChain ||\n      !originAsset ||\n      !foreignChain ||\n      !originAssetHex ||\n      foreignChain === originChain ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && !hasCorrectEvmNetwork) ||\n      argsEqual,\n    [\n      isReady,\n      foreignChain,\n      originAsset,\n      originChain,\n      hasCorrectEvmNetwork,\n      originAssetHex,\n      argsEqual,\n    ]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setAssetAddress(null);\n      setError(\"\");\n      setDoesExist(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError || !originAssetHex) {\n      return;\n    }\n\n    let cancelled = false;\n    setIsLoading(true);\n    try {\n      const getterFunc: () => Promise<string | null> = isEVMChain(foreignChain)\n        ? () =>\n            getForeignAssetEth(\n              getTokenBridgeAddressForChain(foreignChain),\n              provider as any, //why does this typecheck work elsewhere?\n              originChain,\n              hexToUint8Array(originAssetHex)\n            )\n        : foreignChain === CHAIN_ID_TERRA\n        ? () => {\n            const lcd = new LCDClient(TERRA_HOST);\n            return getForeignAssetTerra(\n              TERRA_TOKEN_BRIDGE_ADDRESS,\n              lcd,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : () => {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            return getForeignAssetSolana(\n              connection,\n              SOL_TOKEN_BRIDGE_ADDRESS,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          };\n\n      getterFunc()\n        .then((result) => {\n          if (!cancelled) {\n            if (\n              result &&\n              !(\n                isEVMChain(foreignChain) &&\n                result === ethers.constants.AddressZero\n              )\n            ) {\n              setArgs();\n              setDoesExist(true);\n              setIsLoading(false);\n              setAssetAddress(result);\n            } else {\n              setArgs();\n              setDoesExist(false);\n              setIsLoading(false);\n              setAssetAddress(null);\n            }\n          }\n        })\n        .catch((e) => {\n          if (!cancelled) {\n            setError(\"Could not retrieve the foreign asset.\");\n            setIsLoading(false);\n          }\n        });\n    } catch (e) {\n      //This catch mostly just detects poorly formatted addresses\n      if (!cancelled) {\n        setError(\"Could not retrieve the foreign asset.\");\n        setIsLoading(false);\n      }\n    }\n  }, [\n    argumentError,\n    foreignChain,\n    originAssetHex,\n    originChain,\n    provider,\n    setArgs,\n    argsEqual,\n  ]);\n\n  const compoundError = useMemo(() => {\n    return error ? error : \"\";\n  }, [error]); //now swallows wallet errors\n\n  const output: DataWrapper<ForeignAssetInfo> = useMemo(\n    () => ({\n      error: compoundError,\n      isFetching: isLoading,\n      data:\n        (assetAddress !== null && assetAddress !== undefined) ||\n        (doesExist !== null && doesExist !== undefined)\n          ? { address: assetAddress, doesExist: !!doesExist }\n          : null,\n      receivedAt: null,\n    }),\n    [compoundError, isLoading, assetAddress, doesExist]\n  );\n\n  return output;\n}\n\nexport default useFetchForeignAsset;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferIsApproving,\n  selectTransferIsRedeeming,\n  selectTransferIsSending,\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport const WAITING_FOR_WALLET_AND_CONF =\n  \"Waiting for wallet approval (likely in a popup) and confirmation...\";\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isApproving = useSelector(selectTransferIsApproving);\n  const isSending = useSelector(selectTransferIsSending);\n  const transferTx = useSelector(selectTransferTransferTx);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const showWarning =\n    isApproving || (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestAttestTx,\n  selectAttestCreateTx,\n  selectAttestIsCreating,\n  selectAttestIsSending,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isSending = useSelector(selectAttestIsSending);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const createTx = useSelector(selectAttestCreateTx);\n  const showWarning = (isSending && !attestTx) || (isCreating && !createTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isCreating\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport useFetchForeignAsset from \"../../hooks/useFetchForeignAsset\";\nimport { useHandleCreateWrapped } from \"../../hooks/useHandleCreateWrapped\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  spacer: {\n    height: theme.spacing(2),\n  },\n}));\n\nfunction Create() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const originAsset = useSelector(selectAttestSourceAsset);\n  const originChain = useSelector(selectAttestSourceChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  const foreignAssetInfo = useFetchForeignAsset(\n    originChain,\n    originAsset,\n    targetChain\n  );\n  const shouldUpdate = foreignAssetInfo.data?.doesExist;\n  const error = foreignAssetInfo.error || statusMessage;\n  const { handleClick, disabled, showLoader } = useHandleCreateWrapped(\n    shouldUpdate || false\n  );\n\n  console.log(\"foreign asset info\", foreignAssetInfo);\n\n  return (\n    <>\n      <KeyAndBalance chainId={targetChain} />\n\n      {foreignAssetInfo.isFetching ? (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={classes.alignCenter} />\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={!isReady || disabled}\n            onClick={handleClick}\n            showLoader={showLoader}\n            error={error}\n          >\n            {shouldUpdate ? \"Update\" : \"Create\"}\n          </ButtonWithLoader>\n          <WaitingForWalletMessage />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Create;\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function ShowTx({\n  chainId,\n  tx,\n}: {\n  chainId: ChainId;\n  tx: Transaction;\n}) {\n  const classes = useStyles();\n  const showExplorerLink =\n    CLUSTER === \"testnet\" ||\n    CLUSTER === \"mainnet\" ||\n    (CLUSTER === \"devnet\" &&\n      (chainId === CHAIN_ID_SOLANA || chainId === CHAIN_ID_TERRA));\n  const explorerAddress =\n    chainId === CHAIN_ID_ETH\n      ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? `https://${CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_BSC\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}bscscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_POLYGON\n      ? `https://${CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"}polygonscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_SOLANA\n      ? `https://explorer.solana.com/tx/${tx?.id}${\n          CLUSTER === \"testnet\"\n            ? \"?cluster=devnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n            : \"\"\n        }`\n      : chainId === CHAIN_ID_TERRA\n      ? `https://finder.terra.money/${\n          CLUSTER === \"devnet\"\n            ? \"localterra\"\n            : CLUSTER === \"testnet\"\n            ? \"bombay-12\"\n            : \"columbus-5\"\n        }/tx/${tx?.id}`\n      : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  return (\n    <div className={classes.tx}>\n      <Typography noWrap component=\"div\" variant=\"body2\">\n        {tx.id}\n      </Typography>\n      {showExplorerLink && explorerAddress ? (\n        <Button\n          href={explorerAddress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          size=\"small\"\n          variant=\"outlined\"\n          className={classes.viewButton}\n        >\n          View on {explorerName}\n        </Button>\n      ) : null}\n    </div>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectAttestCreateTx,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/attestSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport { useHistory } from \"react-router\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function CreatePreview() {\n  const { push } = useHistory();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const createTx = useSelector(selectAttestCreateTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const handleReturnClick = useCallback(() => {\n    dispatch(reset());\n    push(\"/transfer\");\n  }, [dispatch, push]);\n\n  const explainerString =\n    \"Success! The create wrapped transaction was submitted.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {createTx ? <ShowTx chainId={targetChain} tx={createTx} /> : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Attest Another Token!\n      </ButtonWithLoader>\n      <ButtonWithLoader onClick={handleReturnClick}>\n        Return to Transfer\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  attestFromEth,\n  attestFromSolana,\n  attestFromTerra,\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setAttestTx,\n  setIsSending,\n  setSignedVAAHex,\n} from \"../store/attestSlice\";\nimport {\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n  selectAttestIsTargetComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  sourceAsset: string,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await attestFromEth(\n      getTokenBridgeAddressForChain(chainId),\n      signer,\n      sourceAsset\n    );\n    dispatch(\n      setAttestTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  solPK: PublicKey,\n  sourceAsset: string,\n  wallet: WalletContextState\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const transaction = await attestFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_TOKEN_BRIDGE_ADDRESS,\n      solPK.toString(),\n      sourceAsset\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      // TODO: error state\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setAttestTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const msg = await attestFromTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      asset\n    );\n    const result = await postWithFees(wallet, [msg], \"Create Wrapped\");\n    const info = await waitForTerraExecution(result);\n    dispatch(setAttestTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleAttest() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleAttestClick = useCallback(() => {\n    if (isEVMChain(sourceChain) && !!signer) {\n      evm(dispatch, enqueueSnackbar, signer, sourceAsset, sourceChain);\n    } else if (sourceChain === CHAIN_ID_SOLANA && !!solanaWallet && !!solPK) {\n      solana(dispatch, enqueueSnackbar, solPK, sourceAsset, solanaWallet);\n    } else if (sourceChain === CHAIN_ID_TERRA && !!terraWallet) {\n      terra(dispatch, enqueueSnackbar, terraWallet, sourceAsset);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceAsset,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleAttestClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleAttestClick, disabled, isSending]\n  );\n}\n","import { ChainId, CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { LinearProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CHAINS_BY_ID, SOLANA_HOST } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n    textAlign: \"center\",\n  },\n  message: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function TransactionProgress({\n  chainId,\n  tx,\n  isSendComplete,\n}: {\n  chainId: ChainId;\n  tx: Transaction | undefined;\n  isSendComplete: boolean;\n}) {\n  const classes = useStyles();\n  const { provider } = useEthereumProvider();\n  const [currentBlock, setCurrentBlock] = useState(0);\n  useEffect(() => {\n    if (isSendComplete || !tx) return;\n    if (isEVMChain(chainId) && provider) {\n      let cancelled = false;\n      (async () => {\n        while (!cancelled) {\n          await new Promise((resolve) => setTimeout(resolve, 500));\n          try {\n            const newBlock = await provider.getBlockNumber();\n            if (!cancelled) {\n              setCurrentBlock(newBlock);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n    if (chainId === CHAIN_ID_SOLANA) {\n      let cancelled = false;\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const sub = connection.onSlotChange((slotInfo) => {\n        if (!cancelled) {\n          setCurrentBlock(slotInfo.slot);\n        }\n      });\n      return () => {\n        cancelled = true;\n        connection.removeSlotChangeListener(sub);\n      };\n    }\n  }, [isSendComplete, chainId, provider, tx]);\n  const blockDiff =\n    tx && tx.block && currentBlock ? currentBlock - tx.block : undefined;\n  const expectedBlocks =\n    chainId === CHAIN_ID_SOLANA ? 32 : isEVMChain(chainId) ? 15 : 1;\n  if (\n    !isSendComplete &&\n    (chainId === CHAIN_ID_SOLANA || isEVMChain(chainId)) &&\n    blockDiff !== undefined\n  ) {\n    return (\n      <div className={classes.root}>\n        <LinearProgress\n          value={\n            blockDiff < expectedBlocks ? (blockDiff / expectedBlocks) * 75 : 75\n          }\n          variant=\"determinate\"\n        />\n        <Typography variant=\"body2\" className={classes.message}>\n          {blockDiff < expectedBlocks\n            ? `Waiting for ${blockDiff} / ${expectedBlocks} confirmations on ${CHAINS_BY_ID[chainId].name}...`\n            : `Waiting for Wormhole Network consensus...`}\n        </Typography>\n      </div>\n    );\n  }\n  return null;\n}\n","import { useSelector } from \"react-redux\";\nimport { useHandleAttest } from \"../../hooks/useHandleAttest\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectAttestAttestTx,\n  selectAttestIsSendComplete,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleAttest();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n\n  return (\n    <>\n      <KeyAndBalance chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Attest\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={attestTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceChain,\n  selectAttestAttestTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n\n  const explainerString = \"The token has been attested!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {attestTx ? <ShowTx chainId={sourceChain} tx={attestTx} /> : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Typography } from \"@material-ui/core\";\nimport { LocalGasStation } from \"@material-ui/icons\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  getDefaultNativeCurrencySymbol,\n  SOLANA_HOST,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\nimport { NATIVE_TERRA_DECIMALS } from \"../utils/terra\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport { LCDClient } from \"@terra-money/terra.js\";\n\nexport type GasEstimate = {\n  currentGasPrice: string;\n  lowEstimate: string;\n  highEstimate: string;\n};\n\nexport type MethodType = \"nft\" | \"createWrapped\" | \"transfer\";\n\n//It's difficult to project how many fees the user will accrue during the\n//workflow, as a variable number of transactions can be sent, and different\n//execution paths can be hit in the smart contracts, altering gas used.\n//As such, for the moment it is best to just check for a reasonable 'low balance' threshold.\n//Still it would be good to calculate a reasonable value at runtime based off current gas prices,\n//rather than a hardcoded value.\nconst SOLANA_THRESHOLD_LAMPORTS: bigint = BigInt(300000);\nconst ETHEREUM_THRESHOLD_WEI: bigint = BigInt(35000000000000000);\nconst TERRA_THRESHOLD_ULUNA: bigint = BigInt(500000);\n\nconst isSufficientBalance = (chainId: ChainId, balance: bigint | undefined) => {\n  if (balance === undefined || !chainId) {\n    return true;\n  }\n  if (CHAIN_ID_SOLANA === chainId) {\n    return balance > SOLANA_THRESHOLD_LAMPORTS;\n  }\n  if (isEVMChain(chainId)) {\n    return balance > ETHEREUM_THRESHOLD_WEI;\n  }\n  if (CHAIN_ID_TERRA === chainId) {\n    return balance > TERRA_THRESHOLD_ULUNA;\n  }\n\n  return true;\n};\n\n//TODO move to more generic location\nconst getBalanceSolana = async (walletAddress: string) => {\n  const connection = new Connection(SOLANA_HOST);\n  return getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]).then(\n    (results) => {\n      if (results.length && results[0]) {\n        return BigInt(results[0].lamports);\n      }\n    },\n    (error) => {\n      return BigInt(0);\n    }\n  );\n};\n\nconst getBalanceEvm = async (walletAddress: string, provider: Provider) => {\n  return provider.getBalance(walletAddress).then((result) => result.toBigInt());\n};\n\nconst getBalanceTerra = async (walletAddress: string) => {\n  const TARGET_DENOM = \"uluna\";\n\n  const lcd = new LCDClient(TERRA_HOST);\n  return lcd.bank\n    .balance(walletAddress)\n    .then((coins) => {\n      // coins doesn't support reduce\n      const balancePairs = coins.map(({ amount, denom }) => [denom, amount]);\n      const targetCoin = balancePairs.find((coin) => coin[0] === TARGET_DENOM);\n      if (targetCoin) {\n        return BigInt(targetCoin[1].toString());\n      } else {\n        return Promise.reject();\n      }\n    })\n    .catch((e) => {\n      return Promise.reject();\n    });\n};\n\nconst toBalanceString = (balance: bigint | undefined, chainId: ChainId) => {\n  if (!chainId || balance === undefined) {\n    return \"\";\n  }\n  if (isEVMChain(chainId)) {\n    return formatUnits(balance, 18); //wei decimals\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return formatUnits(balance, 9); //lamports to sol decmals\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return formatUnits(balance, NATIVE_TERRA_DECIMALS);\n  }\n};\n\nexport default function useTransactionFees(chainId: ChainId) {\n  const { walletAddress, isReady } = useIsWalletReady(chainId);\n  const { provider } = useEthereumProvider();\n  const [balance, setBalance] = useState<bigint | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loadStart = useCallback(() => {\n    setBalance(undefined);\n    setIsLoading(true);\n    setError(\"\");\n  }, []);\n\n  useEffect(() => {\n    if (chainId === CHAIN_ID_SOLANA && isReady && walletAddress) {\n      loadStart();\n      getBalanceSolana(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    } else if (isEVMChain(chainId) && isReady && walletAddress) {\n      if (provider) {\n        loadStart();\n        getBalanceEvm(walletAddress, provider).then(\n          (result) => {\n            const adjustedresult =\n              result === undefined || result === null ? BigInt(0) : result;\n            setIsLoading(false);\n            setBalance(adjustedresult);\n          },\n          (error) => {\n            setIsLoading(false);\n            setError(\"Cannot load wallet balance\");\n          }\n        );\n      }\n    } else if (chainId === CHAIN_ID_TERRA && isReady && walletAddress) {\n      loadStart();\n      getBalanceTerra(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    }\n  }, [provider, walletAddress, isReady, chainId, loadStart]);\n\n  const results = useMemo(() => {\n    return {\n      isSufficientBalance: isSufficientBalance(chainId, balance),\n      balance,\n      balanceString: toBalanceString(balance, chainId),\n      isLoading,\n      error,\n    };\n  }, [balance, chainId, isLoading, error]);\n\n  return results;\n}\n\nexport function useEthereumGasPrice(contract: MethodType, chainId: ChainId) {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [estimateResults, setEstimateResults] = useState<GasEstimate | null>(\n    null\n  );\n\n  useEffect(() => {\n    if (provider && isReady && !estimateResults) {\n      getGasEstimates(provider, contract).then(\n        (results) => {\n          setEstimateResults(results);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n    }\n  }, [provider, isReady, estimateResults, contract]);\n\n  const results = useMemo(() => estimateResults, [estimateResults]);\n  return results;\n}\n\nfunction EthGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  const estimate = useEthereumGasPrice(methodType, chainId);\n  if (!estimate) {\n    return null;\n  }\n\n  return (\n    <Typography\n      component=\"div\"\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        marginTop: 8,\n        flexWrap: \"wrap\",\n      }}\n    >\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <LocalGasStation fontSize=\"inherit\" />\n        &nbsp;{estimate.currentGasPrice}\n      </div>\n      <div>&nbsp;&nbsp;&nbsp;</div>\n      <div>\n        Est. Fees: {estimate.lowEstimate} - {estimate.highEstimate}{\" \"}\n        {getDefaultNativeCurrencySymbol(chainId)}\n      </div>\n    </Typography>\n  );\n}\n\nconst terraEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(50000),\n    highGasEstimate: BigInt(90000),\n  },\n};\n\nconst evmEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(80000),\n    highGasEstimate: BigInt(130000),\n  },\n  nft: {\n    lowGasEstimate: BigInt(350000),\n    highGasEstimate: BigInt(500000),\n  },\n  createWrapped: {\n    lowGasEstimate: BigInt(450000),\n    highGasEstimate: BigInt(700000),\n  },\n};\n\nexport async function getGasEstimates(\n  provider: Provider,\n  contract: MethodType\n): Promise<GasEstimate | null> {\n  const lowEstimateGasAmount = evmEstimatesByContract[contract].lowGasEstimate;\n  const highEstimateGasAmount =\n    evmEstimatesByContract[contract].highGasEstimate;\n\n  let lowEstimate;\n  let highEstimate;\n  let currentGasPrice;\n  if (provider) {\n    const priceInWei = await provider.getGasPrice();\n    if (priceInWei) {\n      lowEstimate = parseFloat(\n        formatUnits(lowEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      highEstimate = parseFloat(\n        formatUnits(highEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      currentGasPrice = parseFloat(formatUnits(priceInWei, \"gwei\")).toFixed(0);\n    }\n  }\n\n  const output =\n    currentGasPrice && highEstimate && lowEstimate\n      ? {\n          currentGasPrice,\n          lowEstimate,\n          highEstimate,\n        }\n      : null;\n\n  return output;\n}\n\nfunction TerraGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (methodType === \"transfer\") {\n    const lowEstimate = formatUnits(\n      terraEstimatesByContract.transfer.lowGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    const highEstimate = formatUnits(\n      terraEstimatesByContract.transfer.highGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    return (\n      <Typography\n        component=\"div\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          marginTop: 8,\n          flexWrap: \"wrap\",\n        }}\n      >\n        <div>\n          Est. Fees: {lowEstimate} - {highEstimate}{\" \"}\n          {getDefaultNativeCurrencySymbol(chainId)}\n        </div>\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function GasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (isEVMChain(chainId)) {\n    return <EthGasEstimateSummary chainId={chainId} methodType={methodType} />;\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <TerraGasEstimateSummary chainId={chainId} methodType={methodType} />\n    );\n  } else {\n    return null;\n  }\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useTransactionFees from \"../hooks/useTransactionFees\";\nimport { getDefaultNativeCurrencySymbol } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction LowBalanceWarning({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { isReady } = useIsWalletReady(chainId);\n  const transactionFeeWarning = useTransactionFees(chainId);\n  const displayWarning =\n    isReady &&\n    transactionFeeWarning.balanceString &&\n    transactionFeeWarning.isSufficientBalance === false;\n  const warningMessage = `This wallet has a very low ${getDefaultNativeCurrencySymbol(\n    chainId\n  )} balance and may not be able to pay for the upcoming transaction fees.`;\n\n  const content = (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">{warningMessage}</Typography>\n      <Typography variant=\"body1\">\n        {\"Current balance: \" + transactionFeeWarning.balanceString}\n      </Typography>\n    </Alert>\n  );\n\n  return displayWarning ? content : null;\n}\n\nexport default LowBalanceWarning;\n","import { makeStyles, TextField } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  incrementStep,\n  setSourceAsset,\n  setSourceChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestIsSourceComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isSourceComplete = useSelector(selectAttestIsSourceComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAssetChange = useCallback(\n    (event) => {\n      dispatch(setSourceAsset(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS}\n      />\n      <KeyAndBalance chainId={sourceChain} />\n      <TextField\n        label=\"Asset\"\n        variant=\"outlined\"\n        fullWidth\n        className={classes.transferField}\n        value={sourceAsset}\n        onChange={handleAssetChange}\n        disabled={shouldLockFields}\n      />\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { Alert } from \"@material-ui/lab\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback } from \"react\";\nimport pushToClipboard from \"../utils/pushToClipboard\";\n\nexport default function useCopyToClipboard(content: string) {\n  const { enqueueSnackbar } = useSnackbar();\n  return useCallback(() => {\n    pushToClipboard(content)?.then(() => {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"success\">Copied.</Alert>,\n      });\n    });\n  }, [content, enqueueSnackbar]);\n}\n","export default function pushToClipboard(content: any) {\n  if (!navigator.clipboard) {\n    // Clipboard API not available\n    return;\n  }\n  return navigator.clipboard.writeText(content);\n}\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isNativeDenom,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Tooltip, Typography } from \"@material-ui/core\";\nimport { FileCopy, OpenInNew } from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport useCopyToClipboard from \"../hooks/useCopyToClipboard\";\nimport { ParsedTokenAccount } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\nimport { shortenAddress } from \"../utils/solana\";\nimport { formatNativeDenom } from \"../utils/terra\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainTypog: {\n    display: \"inline-block\",\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    textDecoration: \"underline\",\n    textUnderlineOffset: \"2px\",\n  },\n  noGutter: {\n    marginLeft: 0,\n    marginRight: 0,\n  },\n  noUnderline: {\n    textDecoration: \"none\",\n  },\n  buttons: {\n    marginLeft: \".5rem\",\n    marginRight: \".5rem\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    textAlign: \"center\",\n    \"& > *\": {\n      margin: \".25rem\",\n    },\n  },\n};\n\n// @ts-ignore\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nexport default function SmartAddress({\n  chainId,\n  parsedTokenAccount,\n  address,\n  symbol,\n  tokenName,\n  variant,\n  noGutter,\n  noUnderline,\n  extraContent,\n}: {\n  chainId: ChainId;\n  parsedTokenAccount?: ParsedTokenAccount;\n  address?: string;\n  logo?: string;\n  tokenName?: string;\n  symbol?: string;\n  variant?: any;\n  noGutter?: boolean;\n  noUnderline?: boolean;\n  extraContent?: ReactChild;\n}) {\n  const classes = useStyles();\n  const isNativeTerra = chainId === CHAIN_ID_TERRA && isNativeDenom(address);\n  const useableAddress = parsedTokenAccount?.mintKey || address || \"\";\n  const useableSymbol = isNativeTerra\n    ? formatNativeDenom(address)\n    : parsedTokenAccount?.symbol || symbol || \"\";\n  // const useableLogo = logo || isNativeTerra ? getNativeTerraIcon(useableSymbol) : null\n  const isNative = parsedTokenAccount?.isNativeAsset || isNativeTerra || false;\n  const addressShort = shortenAddress(useableAddress) || \"\";\n\n  const useableName = isNative\n    ? \"Native Currency\"\n    : parsedTokenAccount?.name\n    ? parsedTokenAccount.name\n    : tokenName\n    ? tokenName\n    : \"\";\n  const explorerAddress = isNative\n    ? null\n    : chainId === CHAIN_ID_ETH\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"goerli.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_BSC\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }bscscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_POLYGON\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"\n      }polygonscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_SOLANA\n    ? `https://explorer.solana.com/address/${useableAddress}${\n        CLUSTER === \"testnet\"\n          ? \"?cluster=devnet\"\n          : CLUSTER === \"devnet\"\n          ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n          : \"\"\n      }`\n    : chainId === CHAIN_ID_TERRA\n    ? `https://finder.terra.money/${\n        CLUSTER === \"devnet\"\n          ? \"localterra\"\n          : CLUSTER === \"testnet\"\n          ? \"bombay-12\"\n          : \"columbus-5\"\n      }/address/${useableAddress}`\n    : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  const copyToClipboard = useCopyToClipboard(useableAddress);\n\n  const explorerButton = !explorerAddress ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      endIcon={<OpenInNew />}\n      className={classes.buttons}\n      href={explorerAddress}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {\"View on \" + explorerName}\n    </Button>\n  );\n  //TODO add icon here\n  const copyButton = isNative ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      endIcon={<FileCopy />}\n      onClick={copyToClipboard}\n      className={classes.buttons}\n    >\n      Copy\n    </Button>\n  );\n\n  const tooltipContent = (\n    <>\n      {useableName && <Typography>{useableName}</Typography>}\n      {useableSymbol && !isNative && (\n        <Typography noWrap variant=\"body2\">\n          {addressShort}\n        </Typography>\n      )}\n      <div>\n        {explorerButton}\n        {copyButton}\n      </div>\n      {extraContent ? extraContent : null}\n    </>\n  );\n\n  return (\n    <StyledTooltip\n      title={tooltipContent}\n      interactive={true}\n      className={classes.mainTypog}\n    >\n      <Typography\n        variant={variant || \"body1\"}\n        className={clsx(classes.mainTypog, {\n          [classes.noGutter]: noGutter,\n          [classes.noUnderline]: noUnderline,\n        })}\n        component=\"div\"\n      >\n        {useableSymbol || addressShort}\n      </Typography>\n    </StyledTooltip>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n\n  const explainerContent =\n    sourceChain && sourceAsset ? (\n      <>\n        <span>You will attest</span>\n        <SmartAddress chainId={sourceChain} address={sourceAsset} />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/attestSlice\";\nimport {\n  selectAttestIsTargetComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={shouldLockFields}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to attest this token.{\" \"}\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary\n            methodType=\"createWrapped\"\n            chainId={targetChain}\n          />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestTargetChain } from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n\n  const explainerString = `to ${CHAINS_BY_ID[targetChain].name}`;\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerString}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setStep } from \"../../store/attestSlice\";\nimport {\n  selectAttestActiveStep,\n  selectAttestIsCreateComplete,\n  selectAttestIsCreating,\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n} from \"../../store/selectors\";\nimport HeaderText from \"../HeaderText\";\nimport Create from \"./Create\";\nimport CreatePreview from \"./CreatePreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Attest() {\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectAttestActiveStep);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const isCreateComplete = useSelector(selectAttestIsCreateComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isCreating) && !isCreateComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white small>\n        Token Registration\n      </HeaderText>\n      <Alert severity=\"info\">\n        This form allows you to register a token on a new foreign chain. Tokens\n        must be registered before they can be transferred.\n      </Alert>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))}>Target</StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton onClick={() => dispatch(setStep(2))}>\n            Send attestation\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n          >\n            Create wrapped token\n          </StepButton>\n          <StepContent>\n            {isCreateComplete ? <CreatePreview /> : <Create />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Attest;\n","export default __webpack_public_path__ + \"static/media/Discord.3cc30da6.svg\";","export default __webpack_public_path__ + \"static/media/Github.cf553f61.svg\";","export default __webpack_public_path__ + \"static/media/Medium.a9e68aca.svg\";","export default __webpack_public_path__ + \"static/media/Telegram.86d97a48.svg\";","export default __webpack_public_path__ + \"static/media/Twitter.06e4f08c.svg\";","export default __webpack_public_path__ + \"static/media/wormhole-network.5bb90ed1.svg\";","import { IconButton, makeStyles, Typography } from \"@material-ui/core\";\nimport Discord from \"../icons/Discord.svg\";\nimport Github from \"../icons/Github.svg\";\nimport Medium from \"../icons/Medium.svg\";\nimport Telegram from \"../icons/Telegram.svg\";\nimport Twitter from \"../icons/Twitter.svg\";\nimport Wormhole from \"../icons/wormhole-network.svg\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    margin: theme.spacing(2, 0, 2),\n    textAlign: \"center\",\n  },\n  socialIcon: {\n    \"& img\": {\n      height: 24,\n      width: 24,\n    },\n  },\n  builtWithContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    opacity: 0.5,\n    marginTop: theme.spacing(1),\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <div>\n        <IconButton\n          href=\"https://discord.gg/xsT8qrHAvV\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Discord} alt=\"Discord\" />\n        </IconButton>\n        <IconButton\n          href=\"https://github.com/certusone/wormhole\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Github} alt=\"Github\" />\n        </IconButton>\n        <IconButton\n          href=\"http://wormholecrypto.medium.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Medium} alt=\"Medium\" />\n        </IconButton>\n        <IconButton\n          href=\"https://t.me/wormholecrypto\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Telegram} alt=\"Telegram\" />\n        </IconButton>\n        <IconButton\n          href=\"https://twitter.com/wormholecrypto\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Twitter} alt=\"Twitter\" />\n        </IconButton>\n      </div>\n      <div className={classes.builtWithContainer}>\n        <div>\n          <a\n            href=\"https://wormholenetwork.com/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={Wormhole}\n              alt=\"Wormhole\"\n              className={classes.wormholeIcon}\n            />\n          </a>\n        </div>\n        <div>\n          <Typography variant=\"body2\">Open Source</Typography>\n          <Typography variant=\"body2\">Built with &#10084;</Typography>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import {\n  Card,\n  Chip,\n  Container,\n  Link,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { COLORS } from \"../../muiTheme\";\nimport { BETA_CHAINS, CHAINS, COMING_SOON_CHAINS } from \"../../utils/consts\";\nimport HeaderText from \"../HeaderText\";\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    marginTop: theme.spacing(12),\n    marginBottom: theme.spacing(8),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginBottom: theme.spacing(6),\n    },\n  },\n  description: {\n    marginBottom: theme.spacing(2),\n  },\n  button: {\n    marginBottom: theme.spacing(4),\n  },\n  overview: {\n    marginTop: theme.spacing(6),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(2),\n    },\n    maxWidth: \"100%\",\n  },\n  mainCard: {\n    padding: theme.spacing(8),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  spacer: {\n    height: theme.spacing(5),\n  },\n  chainList: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    margin: theme.spacing(-1, -1, 8),\n    [theme.breakpoints.down(\"sm\")]: {\n      margin: theme.spacing(-1, -1, 6),\n    },\n  },\n  chainCard: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    borderRadius: 8,\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: theme.spacing(1),\n    minHeight: \"100%\",\n    padding: theme.spacing(2),\n    width: 149, // makes it square\n    maxWidth: 149,\n    [theme.breakpoints.down(\"sm\")]: {\n      padding: theme.spacing(1.5),\n      width: 141, // keeps it square\n      maxWidth: 141,\n    },\n  },\n  chainLogoWrapper: {\n    position: \"relative\",\n    textAlign: \"center\",\n  },\n  chainLogo: {\n    height: 64,\n    maxWidth: 64,\n  },\n  chainName: {\n    marginTop: theme.spacing(1),\n    flex: \"1\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    minHeight: 40, // 2 lines\n  },\n  chip: {\n    backgroundColor: COLORS.blueWithTransparency,\n    position: \"absolute\",\n    top: \"50%\",\n    right: \"50%\",\n    transform: \"translate(50%, -50%)\",\n  },\n}));\n\nfunction Home() {\n  const classes = useStyles();\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <div className={classes.header}>\n          <HeaderText>The Portal is Open</HeaderText>\n        </div>\n      </Container>\n      <Container maxWidth=\"md\">\n        <div className={classes.chainList}>\n          {CHAINS.filter(({ id }) => !BETA_CHAINS.includes(id)).map((chain) => (\n            <div key={chain.id} className={classes.chainCard}>\n              <div className={classes.chainLogoWrapper}>\n                <img\n                  src={chain.logo}\n                  alt={chain.name}\n                  className={classes.chainLogo}\n                />\n              </div>\n              <Typography\n                variant=\"body2\"\n                component=\"div\"\n                className={classes.chainName}\n              >\n                <div>{chain.name}</div>\n              </Typography>\n            </div>\n          ))}\n          {COMING_SOON_CHAINS.map((item) => (\n            <div className={classes.chainCard}>\n              <div className={classes.chainLogoWrapper}>\n                <img\n                  src={item.logo}\n                  alt={item.name}\n                  className={classes.chainLogo}\n                />\n                <Chip\n                  label=\"Coming soon\"\n                  size=\"small\"\n                  className={classes.chip}\n                />\n              </div>\n              <Typography\n                variant=\"body2\"\n                component=\"div\"\n                className={classes.chainName}\n              >\n                <div>{item.name}</div>\n              </Typography>\n            </div>\n          ))}\n        </div>\n      </Container>\n      <Container maxWidth=\"md\">\n        <Card className={classes.mainCard}>\n          <Typography variant=\"h4\" className={classes.description}>\n            Wormhole v2 is here!\n          </Typography>\n          <Typography variant=\"h6\" className={classes.description}>\n            The Wormhole Token Bridge allows you to seamlessly transfer\n            tokenized assets across Solana, Ethereum, BSC, Terra, and Polygon.\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            If you transferred assets using the previous version of Wormhole,\n            most assets can be migrated to v2 on the{\" \"}\n            <Link component={RouterLink} to=\"/transfer\" noWrap>\n              transfer page\n            </Link>\n            .\n          </Typography>\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            For assets that don't support the migration, the v1 UI can be found\n            at{\" \"}\n            <Link href=\"https://v1.wormholebridge.com\">\n              v1.wormholebridge.com\n            </Link>\n          </Typography>\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            To learn more about the Wormhole Protocol that powers it, visit{\" \"}\n            <Link href=\"https://wormholenetwork.com/en/\">\n              wormholenetwork.com\n            </Link>\n          </Typography>\n        </Card>\n      </Container>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Connection } from \"@solana/web3.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { SOLANA_HOST } from \"../utils/consts\";\nimport {\n  decodeMetadata,\n  getMetadataAddress,\n  Metadata,\n} from \"../utils/metaplex\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\n\nexport const getMetaplexData = async (mintAddresses: string[]) => {\n  const promises = [];\n  for (const address of mintAddresses) {\n    promises.push(getMetadataAddress(address));\n  }\n  const metaAddresses = await Promise.all(promises);\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  const results = await getMultipleAccountsRPC(\n    connection,\n    metaAddresses.map((pair) => pair && pair[0])\n  );\n\n  const output = results.map((account) => {\n    if (account === null) {\n      return undefined;\n    } else {\n      if (account.data) {\n        try {\n          const MetadataParsed = decodeMetadata(account.data);\n          return MetadataParsed;\n        } catch (e) {\n          console.error(e);\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  });\n\n  return output;\n};\n\nconst createResultMap = (\n  addresses: string[],\n  metadatas: (Metadata | undefined)[]\n) => {\n  const output = new Map<string, Metadata | undefined>();\n\n  addresses.forEach((address) => {\n    const metadata = metadatas.find((x) => x?.mint === address);\n    if (metadata) {\n      output.set(address, metadata);\n    } else {\n      output.set(address, undefined);\n    }\n  });\n\n  return output;\n};\n\nconst useMetaplexData = (\n  addresses: string[]\n): DataWrapper<Map<string, Metadata | undefined> | undefined> => {\n  const [results, setResults] = useState<\n    Map<string, Metadata | undefined> | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [receivedAt, setReceivedAt] = useState<string | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    setIsLoading(true);\n    getMetaplexData(addresses).then(\n      (results) => {\n        if (!cancelled) {\n          setResults(createResultMap(addresses, results));\n          setIsLoading(false);\n          setError(\"\");\n          setReceivedAt(new Date().toISOString());\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setResults(undefined);\n          setIsLoading(false);\n          setError(\"Failed to fetch Metaplex data.\");\n          setReceivedAt(new Date().toISOString());\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, setResults, setIsLoading, setError]);\n\n  const output = useMemo(\n    () => ({\n      data: results,\n      isFetching: isLoading,\n      error,\n      receivedAt,\n    }),\n    [results, isLoading, error, receivedAt]\n  );\n  return output;\n};\n\nexport default useMetaplexData;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { TerraTokenMap } from \"../hooks/useTerraTokenMap\";\nimport { MarketsMap } from \"../hooks/useMarketsMap\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nexport interface TokenMetadataState {\n  solanaTokenMap: DataWrapper<TokenInfo[]>;\n  terraTokenMap: DataWrapper<TerraTokenMap>; //TODO make a decent type for this.\n  marketsMap: DataWrapper<MarketsMap>;\n}\n\nconst initialState: TokenMetadataState = {\n  solanaTokenMap: getEmptyDataWrapper(),\n  terraTokenMap: getEmptyDataWrapper(),\n  marketsMap: getEmptyDataWrapper(),\n};\n\nexport const tokenSlice = createSlice({\n  name: \"tokenInfos\",\n  initialState,\n  reducers: {\n    receiveSolanaTokenMap: (state, action: PayloadAction<TokenInfo[]>) => {\n      state.solanaTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchSolanaTokenMap: (state) => {\n      state.solanaTokenMap = fetchDataWrapper();\n    },\n    errorSolanaTokenMap: (state, action: PayloadAction<string>) => {\n      state.solanaTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveTerraTokenMap: (state, action: PayloadAction<TerraTokenMap>) => {\n      state.terraTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchTerraTokenMap: (state) => {\n      state.terraTokenMap = fetchDataWrapper();\n    },\n    errorTerraTokenMap: (state, action: PayloadAction<string>) => {\n      state.terraTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveMarketsMap: (state, action: PayloadAction<MarketsMap>) => {\n      state.marketsMap = receiveDataWrapper(action.payload);\n    },\n    fetchMarketsMap: (state) => {\n      state.marketsMap = fetchDataWrapper();\n    },\n    errorMarketsMap: (state, action: PayloadAction<string>) => {\n      state.marketsMap = errorDataWrapper(action.payload);\n    },\n\n    reset: () => initialState,\n  },\n});\n\nexport const {\n  receiveSolanaTokenMap,\n  fetchSolanaTokenMap,\n  errorSolanaTokenMap,\n  receiveTerraTokenMap,\n  fetchTerraTokenMap,\n  errorTerraTokenMap,\n  receiveMarketsMap,\n  fetchMarketsMap,\n  errorMarketsMap,\n  reset,\n} = tokenSlice.actions;\n\nexport default tokenSlice.reducer;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport { ENV, TokenInfo, TokenListProvider } from \"@solana/spl-token-registry\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectSolanaTokenMap } from \"../store/selectors\";\nimport {\n  errorSolanaTokenMap,\n  fetchSolanaTokenMap,\n  receiveSolanaTokenMap,\n} from \"../store/tokenSlice\";\nimport { CLUSTER } from \"../utils/consts\";\n\nconst environment = CLUSTER === \"testnet\" ? ENV.Testnet : ENV.MainnetBeta;\n\nconst useSolanaTokenMap = (): DataWrapper<TokenInfo[]> => {\n  const tokenMap = useSelector(selectSolanaTokenMap);\n  const dispatch = useDispatch();\n  const shouldFire =\n    tokenMap.data === undefined ||\n    (tokenMap.data === null && !tokenMap.isFetching);\n\n  useEffect(() => {\n    if (shouldFire) {\n      getSolanaTokenMap(dispatch);\n    }\n  }, [dispatch, shouldFire]);\n\n  return tokenMap;\n};\n\nconst getSolanaTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchSolanaTokenMap());\n\n  new TokenListProvider().resolve().then(\n    (tokens) => {\n      const tokenList = tokens.filterByChainId(environment).getList();\n      dispatch(receiveSolanaTokenMap(tokenList));\n    },\n    (error) => {\n      console.error(error);\n      dispatch(errorSolanaTokenMap(\"Failed to retrieve the Solana token map.\"));\n    }\n  );\n};\n\nexport default useSolanaTokenMap;\n","import {\n  Button,\n  InputAdornment,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\n\nexport default function NumberTextField({\n  onMaxClick,\n  ...props\n}: TextFieldProps & { onMaxClick?: () => void }) {\n  return (\n    <TextField\n      type=\"number\"\n      {...props}\n      InputProps={{\n        endAdornment: onMaxClick ? (\n          <InputAdornment position=\"end\">\n            <Button\n              onClick={onMaxClick}\n              disabled={props.disabled}\n              variant=\"outlined\"\n            >\n              Max\n            </Button>\n          </InputAdornment>\n        ) : undefined,\n        ...(props?.InputProps || {}),\n      }}\n    ></TextField>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getForeignAssetSolana,\n  hexToNativeString,\n  hexToUint8Array,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetAddressHex,\n} from \"../store/selectors\";\nimport { SOLANA_HOST, SOL_TOKEN_BRIDGE_ADDRESS } from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport SmartAddress from \"./SmartAddress\";\n\nexport function useAssociatedAccountExistsState(\n  targetChain: ChainId,\n  mintAddress: string | null | undefined,\n  readableTargetAddress: string | undefined\n) {\n  const [associatedAccountExists, setAssociatedAccountExists] = useState(true); // for now, assume it exists until we confirm it doesn't\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  useEffect(() => {\n    setAssociatedAccountExists(true);\n    if (\n      targetChain !== CHAIN_ID_SOLANA ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    let cancelled = false;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          if (!cancelled) {\n            setAssociatedAccountExists(false);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [targetChain, mintAddress, readableTargetAddress, solPK]);\n  return useMemo(\n    () => ({ associatedAccountExists, setAssociatedAccountExists }),\n    [associatedAccountExists]\n  );\n}\n\nexport default function SolanaCreateAssociatedAddress({\n  mintAddress,\n  readableTargetAddress,\n  associatedAccountExists,\n  setAssociatedAccountExists,\n}: {\n  mintAddress: string;\n  readableTargetAddress: string;\n  associatedAccountExists: boolean;\n  setAssociatedAccountExists: (associatedAccountExists: boolean) => void;\n}) {\n  const [isCreating, setIsCreating] = useState(false);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleClick = useCallback(() => {\n    if (\n      associatedAccountExists ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          setIsCreating(true);\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setIsCreating(false);\n          setAssociatedAccountExists(true);\n        } else {\n          console.log(\"Account already exists.\");\n        }\n      }\n    })();\n  }, [\n    associatedAccountExists,\n    setAssociatedAccountExists,\n    mintAddress,\n    solPK,\n    readableTargetAddress,\n    solanaWallet,\n  ]);\n  if (associatedAccountExists) return null;\n  return (\n    <>\n      <Typography color=\"error\" variant=\"body2\">\n        This associated token account doesn't exist.\n      </Typography>\n      <ButtonWithLoader\n        disabled={\n          !mintAddress || !readableTargetAddress || !solPK || isCreating\n        }\n        onClick={handleClick}\n        showLoader={isCreating}\n      >\n        Create Associated Token Account\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport function SolanaCreateAssociatedAddressAlternate() {\n  const { enqueueSnackbar } = useSnackbar();\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const addressHex = useSelector(selectTransferTargetAddressHex);\n  const base58TargetAddress = useMemo(\n    () => hexToNativeString(addressHex, CHAIN_ID_SOLANA) || \"\",\n    [addressHex]\n  );\n  const base58OriginAddress = useMemo(\n    () => hexToNativeString(originAsset, CHAIN_ID_SOLANA) || \"\",\n    [originAsset]\n  );\n  const connection = useMemo(() => new Connection(SOLANA_HOST), []);\n  const [targetAsset, setTargetAsset] = useState<string | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (!(originChain && originAsset && addressHex && base58TargetAddress)) {\n      setTargetAsset(null);\n    } else if (originChain === CHAIN_ID_SOLANA && base58OriginAddress) {\n      setTargetAsset(base58OriginAddress);\n    } else {\n      getForeignAssetSolana(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAsset)\n      ).then((result) => {\n        if (!cancelled) {\n          setTargetAsset(result);\n        }\n      });\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    originChain,\n    originAsset,\n    addressHex,\n    base58TargetAddress,\n    connection,\n    base58OriginAddress,\n  ]);\n\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      CHAIN_ID_SOLANA,\n      targetAsset,\n      base58TargetAddress\n    );\n\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleForceCreateClick = useCallback(() => {\n    if (!targetAsset || !base58TargetAddress || !solPK) return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(targetAsset);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === base58TargetAddress;\n      if (match) {\n        try {\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setAssociatedAccountExists(true);\n          enqueueSnackbar(null, {\n            content: (\n              <Alert severity=\"success\">\n                Successfully created associated token account\n              </Alert>\n            ),\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n          });\n        }\n      } else {\n        enqueueSnackbar(null, {\n          content: (\n            <Alert severity=\"error\">\n              Derived address does not match the target address. Do you have the\n              same wallet connected?\n            </Alert>\n          ),\n        });\n      }\n    })();\n  }, [\n    setAssociatedAccountExists,\n    targetAsset,\n    solPK,\n    base58TargetAddress,\n    solanaWallet,\n    enqueueSnackbar,\n  ]);\n\n  return targetAsset ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"subtitle2\">Recipient Address:</Typography>\n      <Typography component=\"div\">\n        <SmartAddress\n          chainId={CHAIN_ID_SOLANA}\n          address={base58TargetAddress}\n          variant=\"h6\"\n          extraContent={\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={handleForceCreateClick}\n              disabled={!targetAsset || !base58TargetAddress || !solPK}\n            >\n              Force Create Account\n            </Button>\n          }\n        />\n      </Typography>\n      {associatedAccountExists ? null : (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={base58TargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      )}\n    </div>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSolanaWallet } from \"../../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { COLORS } from \"../../muiTheme\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../../utils/solana\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\n//TODO move to utils/solana\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\n//TODO move to utils/solana\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\nexport default function Workflow({\n  fromMint,\n  toMint,\n  fromTokenAccount,\n}: {\n  fromMint: string;\n  toMint: string;\n  fromTokenAccount: string;\n}) {\n  const classes = useStyles();\n\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet?.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet?.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet?.publicKey]);\n  /*\n    End effects\n    */\n\n  const migrateTokens = useCallback(async () => {\n    try {\n      setError(\"\");\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet?.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(migrationAmount, fromMintDecimals).toBigInt()\n      );\n      setMigrationIsProcessing(true);\n      signSendAndConfirm(wallet, connection, instruction).then(\n        (transaction: any) => {\n          setMigrationIsProcessing(false);\n          setTransaction(transaction);\n        },\n        (error) => {\n          console.log(error);\n          setError(\"Could not complete the migrateTokens transaction.\");\n          setMigrationIsProcessing(false);\n        }\n      );\n    } catch (e) {\n      console.log(e);\n      setError(\"Could not complete the migrateTokens transaction.\");\n      setMigrationIsProcessing(false);\n    }\n  }, [\n    connection,\n    fromMint,\n    fromTokenAccount,\n    migrationAmount,\n    toMint,\n    toTokenAccount,\n    wallet,\n    fromMintDecimals,\n  ]);\n\n  const fromParse = (amount: string) => {\n    try {\n      return parseUnits(amount, fromMintDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n  const accountsReady =\n    fromTokenAccountExists && toTokenAccountExists && poolExists;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromTokenAccountBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromTokenAccountBalance);\n  const sufficientPoolBalance =\n    toCustodyBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(toCustodyBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    accountsReady &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!fromMint || !toMint || !poolAddress || !poolExists) {\n      return \"This asset is not supported.\";\n    } else if (!isReady) {\n      return \"Wallet is not connected.\";\n    } else if (!toTokenAccountExists || !fromTokenAccountExists) {\n      return \"You have not created the necessary token accounts.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"Enter an amount greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromTokenAccountBalance) {\n      setMigrationAmount(fromTokenAccountBalance);\n    }\n  }, [fromTokenAccountBalance]);\n\n  const getMetadata = (address: string) => {\n    const tokenMapItem = solanaTokenMap.data?.find(\n      (x) => x.address === address\n    );\n    const metaplexItem = metaplexData.data?.get(address);\n\n    return {\n      symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n      name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n      logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n    };\n  };\n\n  const toMetadata = getMetadata(toMint);\n  const fromMetadata = getMetadata(fromMint);\n\n  const toMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={toMint}\n      symbol={toMetadata?.symbol}\n      tokenName={toMetadata?.name}\n    />\n  );\n  const fromMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={fromMint}\n      symbol={fromMetadata?.symbol}\n      tokenName={fromMetadata?.name}\n    />\n  );\n\n  return (\n    <div>\n      <SolanaWalletKey />\n      <div className={classes.spacer} />\n      {fromTokenAccount && toTokenAccount ? (\n        <>\n          <Typography variant=\"body2\" component=\"div\">\n            <span>This will migrate</span>\n            {fromMintPretty}\n            <span>tokens in this account:</span>\n          </Typography>\n          <Typography variant=\"h5\">\n            <SmartAddress\n              address={fromTokenAccount}\n              chainId={CHAIN_ID_SOLANA}\n            />\n            {`(Balance: ${fromTokenAccountBalance}${\n              fromMetadata.symbol && \" \" + fromMetadata.symbol\n            })`}\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"body2\" component=\"div\">\n            <span>into </span>\n            {toMintPretty}\n            <span> tokens in this account:</span>\n          </Typography>\n          <Typography\n            variant=\"h5\"\n            color={toTokenAccountExists ? \"textPrimary\" : \"textSecondary\"}\n          >\n            <SmartAddress address={toTokenAccount} chainId={CHAIN_ID_SOLANA} />\n            <span>\n              {toTokenAccountExists\n                ? ` (Balance: ${toTokenAccountBalance}${\n                    (toMetadata.symbol && \" \" + toMetadata.symbol) || \"\"\n                  })`\n                : \" (Not created yet)\"}\n            </span>\n          </Typography>\n          <SolanaCreateAssociatedAddress\n            mintAddress={toMint}\n            readableTargetAddress={toTokenAccount}\n            associatedAccountExists={toTokenAccountExists}\n            setAssociatedAccountExists={setToTokenAccountExists}\n          />\n          {poolAddress && toCustodyAddress && toCustodyBalance ? (\n            <>\n              <div className={classes.spacer} />\n              <Typography variant=\"body2\" component=\"div\">\n                <span>Using pool </span>\n                <SmartAddress address={poolAddress} chainId={CHAIN_ID_SOLANA} />\n                <span> holding tokens in this account:</span>\n              </Typography>\n              <Typography variant=\"h5\">\n                <SmartAddress\n                  address={toCustodyAddress}\n                  chainId={CHAIN_ID_SOLANA}\n                />\n                <span>{` (Balance: ${toCustodyBalance}${\n                  toMetadata.symbol && \" \" + toMetadata.symbol\n                })`}</span>\n              </Typography>\n            </>\n          ) : null}\n        </>\n      ) : null}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromTokenAccountBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx\n            tx={{ id: transaction, block: 1 }}\n            chainId={CHAIN_ID_SOLANA}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n","import {\n  Migrator,\n  Migrator__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport type EthMigrationInfo = {\n  isLoading: boolean;\n  error: string;\n  data: RequisiteData | null;\n};\n\nexport type RequisiteData = {\n  poolAddress: string;\n  fromAddress: string;\n  toAddress: string;\n  fromToken: TokenImplementation;\n  toToken: TokenImplementation;\n  migrator: Migrator;\n  fromSymbol: string;\n  toSymbol: string;\n  fromDecimals: number;\n  toDecimals: number;\n  sharesDecimals: number;\n  fromWalletBalance: string;\n  toWalletBalance: string;\n  fromPoolBalance: string;\n  toPoolBalance: string;\n  walletSharesBalance: string;\n};\n\nconst getRequisiteData = async (\n  migrator: Migrator,\n  signer: Signer,\n  signerAddress: string\n): Promise<RequisiteData> => {\n  try {\n    const poolAddress = migrator.address;\n    const fromAddress = await migrator.fromAsset();\n    const toAddress = await migrator.toAsset();\n\n    const fromToken = TokenImplementation__factory.connect(fromAddress, signer);\n    const toToken = TokenImplementation__factory.connect(toAddress, signer);\n\n    const fromSymbol = await fromToken.symbol();\n    const toSymbol = await toToken.symbol();\n\n    const fromDecimals = await (await migrator.fromDecimals()).toNumber();\n    const toDecimals = await (await migrator.toDecimals()).toNumber();\n    const sharesDecimals = await migrator.decimals();\n\n    const fromWalletBalance = formatUnits(\n      await fromToken.balanceOf(signerAddress),\n      fromDecimals\n    );\n    const toWalletBalance = formatUnits(\n      await toToken.balanceOf(signerAddress),\n      toDecimals\n    );\n\n    const fromPoolBalance = formatUnits(\n      await fromToken.balanceOf(poolAddress),\n      fromDecimals\n    );\n    const toPoolBalance = formatUnits(\n      await toToken.balanceOf(poolAddress),\n      toDecimals\n    );\n\n    const walletSharesBalance = formatUnits(\n      await migrator.balanceOf(signerAddress),\n      sharesDecimals\n    );\n\n    return {\n      poolAddress,\n      fromAddress,\n      toAddress,\n      fromToken,\n      toToken,\n      migrator,\n      fromSymbol,\n      toSymbol,\n      fromDecimals,\n      toDecimals,\n      fromWalletBalance,\n      toWalletBalance,\n      fromPoolBalance,\n      toPoolBalance,\n      walletSharesBalance,\n      sharesDecimals,\n    };\n  } catch (e) {\n    return Promise.reject(\"Failed to retrieve required data.\");\n  }\n};\n\nfunction useEthereumMigratorInformation(\n  migratorAddress: string | undefined,\n  signer: Signer | undefined,\n  signerAddress: string | undefined,\n  toggleRefresh: boolean\n): EthMigrationInfo {\n  const migrator = useMemo(\n    () =>\n      migratorAddress &&\n      signer &&\n      Migrator__factory.connect(migratorAddress, signer),\n    [migratorAddress, signer]\n  );\n  const [data, setData] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!signer || !migrator || !signerAddress) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n    getRequisiteData(migrator, signer, signerAddress).then(\n      (result) => {\n        if (!cancelled) {\n          setData(result);\n          setIsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Failed to retrieve necessary data.\");\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [migrator, signer, signerAddress, toggleRefresh]);\n\n  return useMemo(() => {\n    if (!migratorAddress || !signer || !signerAddress) {\n      return {\n        isLoading: false,\n        error:\n          !signer || !signerAddress\n            ? \"Wallet not connected\"\n            : !migratorAddress\n            ? \"No contract address\"\n            : \"Error\",\n        data: null,\n      };\n    } else {\n      return {\n        isLoading,\n        error,\n        data,\n      };\n    }\n  }, [isLoading, error, data, migratorAddress, signer, signerAddress]);\n}\n\nexport default useEthereumMigratorInformation;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function EvmWorkflow({\n  chainId,\n  migratorAddress,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [toggleRefresh, setToggleRefresh] = useState(false);\n  const forceRefresh = useCallback(\n    () => setToggleRefresh((prevState) => !prevState),\n    []\n  );\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    toggleRefresh\n  );\n  const fromWalletBalance = poolInfo.data?.fromWalletBalance;\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  const fromParse = (amount: string) => {\n    try {\n      if (!poolInfo.data?.fromDecimals || !migrationAmount) {\n        return BigInt(0);\n      }\n      return parseUnits(amount, poolInfo.data.fromDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = poolInfo.data;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromWalletBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromWalletBalance);\n  const sufficientPoolBalance =\n    poolInfo.data?.toPoolBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(poolInfo.data.toPoolBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!isReady) {\n      return \"Connect your wallet to proceed.\";\n    } else if (poolInfo.error) {\n      return \"Unable to retrieve necessary information. This asset may not be supported.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"The transfer amount must be greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromWalletBalance) {\n      setMigrationAmount(fromWalletBalance);\n    }\n  }, [fromWalletBalance]);\n\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      setMigrationIsProcessing(true);\n      setError(\"\");\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      forceRefresh();\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, migrationAmount, enqueueSnackbar, forceRefresh]);\n\n  //TODO tokenName\n  const toTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.toAddress}\n      symbol={poolInfo.data?.toSymbol}\n    />\n  );\n  const fromTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.fromAddress}\n      symbol={poolInfo.data?.fromSymbol}\n    />\n  );\n  const poolPretty = (\n    <SmartAddress chainId={chainId} address={poolInfo.data?.poolAddress} />\n  );\n\n  const fatalError = poolInfo.error\n    ? \"Unable to retrieve necessary information. This asset may not be supported.\"\n    : null;\n\n  const explainerContent = (\n    <div>\n      <Typography>This action will convert</Typography>\n      <Typography variant=\"h6\">\n        {fromTokenPretty} {`(Balance: ${fromWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>to</Typography>\n      <Typography variant=\"h6\">\n        {toTokenPretty} {`(Balance: ${poolInfo.data?.toWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>Utilizing this pool</Typography>\n      <Typography variant=\"h6\">\n        {poolPretty} {`(Balance: ${poolInfo.data?.toPoolBalance || \"\"})`}\n      </Typography>\n    </div>\n  );\n\n  const mainWorkflow = (\n    <>\n      {explainerContent}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromWalletBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx tx={{ id: transaction, block: 1 }} chainId={chainId} />\n        </>\n      ) : null}\n    </>\n  );\n\n  return (\n    <div className={classes.containerDiv}>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : poolInfo.isLoading ? (\n        <CircularProgress />\n      ) : fatalError ? (\n        <Typography variant=\"h6\">{fatalError}</Typography>\n      ) : (\n        mainWorkflow\n      )}\n    </div>\n  );\n}\n","import {\n  Container,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { getMigrationAssetMap, MIGRATION_ASSET_MAP } from \"../../utils/consts\";\nimport SolanaWorkflow from \"./SolanaWorkflow\";\nimport { withRouter } from \"react-router\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_BSC,\n} from \"@certusone/wormhole-sdk\";\nimport EvmWorkflow from \"./EvmWorkflow\";\nimport { getAddress } from \"@ethersproject/address\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\ninterface RouteParams {\n  legacyAsset: string;\n  fromTokenAccount: string;\n}\n\ninterface Migration extends RouteComponentProps<RouteParams> {\n  chainId: ChainId;\n}\n\nconst SolanaRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const fromTokenAccount: string = props.match.params.fromTokenAccount;\n  const targetAsset: string | undefined = MIGRATION_ASSET_MAP.get(legacyAsset);\n\n  let fromMint: string | undefined = \"\";\n  let toMint: string | undefined = \"\";\n  let fromTokenAcct: string | undefined = \"\";\n  try {\n    fromMint = legacyAsset && new PublicKey(legacyAsset).toString();\n    toMint = targetAsset && new PublicKey(targetAsset).toString();\n    fromTokenAcct =\n      fromTokenAccount && new PublicKey(fromTokenAccount).toString();\n  } catch (e) {}\n\n  let content = null;\n\n  if (!fromMint || !toMint) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else if (!fromTokenAcct) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        Invalid token account.\n      </Typography>\n    );\n  } else {\n    content = (\n      <SolanaWorkflow\n        fromMint={fromMint}\n        toMint={toMint}\n        fromTokenAccount={fromTokenAcct}\n      />\n    );\n  }\n\n  return content;\n};\n\nconst EthereumRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const assetMap = getMigrationAssetMap(props.chainId);\n  const targetPool = assetMap.get(getAddress(legacyAsset));\n\n  let content = null;\n  if (!legacyAsset || !targetPool) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else {\n    content = (\n      <EvmWorkflow migratorAddress={targetPool} chainId={props.chainId} />\n    );\n  }\n\n  return content;\n};\n\nconst MigrationRoot: React.FC<Migration> = (props) => {\n  const classes = useStyles();\n  let content = null;\n\n  if (props.chainId === CHAIN_ID_SOLANA) {\n    content = <SolanaRoot {...props} />;\n  } else if (props.chainId === CHAIN_ID_ETH || props.chainId === CHAIN_ID_BSC) {\n    content = <EthereumRoot {...props} />;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>\n        <Typography variant=\"h5\">Migrate Assets</Typography>\n        <Typography variant=\"subtitle2\">\n          Convert assets from other bridges to Wormhole V2 tokens\n        </Typography>\n        <Divider className={classes.divider} />\n        {content}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default withRouter(MigrationRoot);\n","import { ChainId, TokenImplementation__factory } from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { COLORS } from \"../../muiTheme\";\nimport { CHAINS_BY_ID, getMigrationAssetMap } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\n//TODO move elsewhere\nexport const compareWithDecimalOffset = (\n  valueA: string,\n  decimalsA: number,\n  valueB: string,\n  decimalsB: number\n) => {\n  //find which is larger, and offset by that amount\n  const decimalsBasis = decimalsA > decimalsB ? decimalsA : decimalsB;\n  const normalizedA = parseUnits(valueA, decimalsBasis).toBigInt();\n  const normalizedB = parseUnits(valueB, decimalsBasis).toBigInt();\n\n  if (normalizedA < normalizedB) {\n    return -1;\n  } else if (normalizedA === normalizedB) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\nfunction EvmMigrationLineItem({\n  chainId,\n  migratorAddress,\n  onLoadComplete,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    false\n  );\n  const [loaded, setLoaded] = useState(false);\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const fromSymbol = poolInfo?.data?.fromSymbol;\n  const toSymbol = poolInfo?.data?.toSymbol;\n\n  const sufficientPoolBalance =\n    poolInfo.data &&\n    compareWithDecimalOffset(\n      poolInfo.data.fromWalletBalance,\n      poolInfo.data.fromDecimals,\n      poolInfo.data.toPoolBalance,\n      poolInfo.data.toDecimals\n    ) !== 1;\n\n  useEffect(() => {\n    if (!loaded && (poolInfo.data || poolInfo.error)) {\n      onLoadComplete();\n      setLoaded(true);\n    }\n  }, [loaded, poolInfo, onLoadComplete]);\n\n  //TODO use transaction loader\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      const migrationAmountAbs = parseUnits(\n        poolInfo.data.fromWalletBalance,\n        poolInfo.data.fromDecimals\n      );\n      setMigrationIsProcessing(true);\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        migrationAmountAbs\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        migrationAmountAbs\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, enqueueSnackbar]);\n\n  if (!poolInfo.data) {\n    return null;\n  } else if (transaction) {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx chainId={chainId} tx={{ id: transaction, block: 1 }} />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.fromAddress}\n            symbol={fromSymbol || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.toAddress}\n            symbol={toSymbol || undefined}\n          />\n        </div>\n        <div className={classes.convertButton}>\n          <ButtonWithLoader\n            showLoader={migrationIsProcessing}\n            onClick={migrateTokens}\n            error={\n              error\n                ? error\n                : !sufficientPoolBalance\n                ? \"The swap pool has insufficient funds.\"\n                : \"\"\n            }\n            disabled={!sufficientPoolBalance || migrationIsProcessing}\n          >\n            Convert\n          </ButtonWithLoader>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getAddressBalances = async (\n  signer: Signer,\n  signerAddress: string,\n  addresses: string[]\n): Promise<Map<string, BigNumber | null>> => {\n  try {\n    const promises: Promise<any>[] = [];\n    const output = new Map<string, BigNumber | null>();\n    addresses.forEach((address) => {\n      const factory = TokenImplementation__factory.connect(address, signer);\n      promises.push(\n        factory.balanceOf(signerAddress).then(\n          (result) => {\n            output.set(address, result);\n          },\n          (error) => {\n            output.set(address, null);\n          }\n        )\n      );\n    });\n    await Promise.all(promises);\n    return output;\n  } catch (e) {\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function EvmQuickMigrate({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const eligibleTokens = useMemo(\n    () => Array.from(migrationMap.keys()),\n    [migrationMap]\n  );\n  const [migrators, setMigrators] = useState<string[] | null>(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && signer && signerAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getAddressBalances(signer, signerAddress, eligibleTokens).then(\n        (result) => {\n          if (!cancelled) {\n            const migratorAddresses = [];\n            for (const tokenAddress of result.keys()) {\n              if (result.get(tokenAddress) && result.get(tokenAddress)?.gt(0)) {\n                const migratorAddress = migrationMap.get(\n                  getAddress(tokenAddress)\n                );\n                if (migratorAddress) {\n                  migratorAddresses.push(migratorAddress);\n                }\n              }\n            }\n            setMigratorsFinishedLoading(0);\n            setMigrators(migratorAddresses);\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, signer, signerAddress, eligibleTokens, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((address) => {\n              return (\n                <EvmMigrationLineItem\n                  key={address}\n                  chainId={chainId}\n                  migratorAddress={address}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  isEVMChain,\n  uint8ArrayToHex,\n  WormholeWrappedInfo,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { setSourceWormholeWrappedInfo as setNFTSourceWormholeWrappedInfo } from \"../store/nftSlice\";\nimport {\n  selectNFTIsRecovery,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferIsRecovery,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n} from \"../store/selectors\";\nimport { setSourceWormholeWrappedInfo as setTransferSourceWormholeWrappedInfo } from \"../store/transferSlice\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\n\nexport interface StateSafeWormholeWrappedInfo {\n  isWrapped: boolean;\n  chainId: ChainId;\n  assetAddress: string;\n  tokenId?: string;\n}\n\nconst makeStateSafe = (\n  info: WormholeWrappedInfo\n): StateSafeWormholeWrappedInfo => ({\n  ...info,\n  assetAddress: uint8ArrayToHex(info.assetAddress),\n});\n\n// Check if the tokens in the configured source chain/address are wrapped\n// tokens. Wrapped tokens are tokens that are non-native, I.E, are locked up on\n// a different chain than this one.\nfunction useCheckIfWormholeWrapped(nft?: boolean) {\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceAsset = useSelector(\n    nft ? selectNFTSourceAsset : selectTransferSourceAsset\n  );\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const tokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const setSourceWormholeWrappedInfo = nft\n    ? setNFTSourceWormholeWrappedInfo\n    : setTransferSourceWormholeWrappedInfo;\n  const { provider } = useEthereumProvider();\n  const isRecovery = useSelector(\n    nft ? selectNFTIsRecovery : selectTransferIsRecovery\n  );\n  useEffect(() => {\n    if (isRecovery) {\n      return;\n    }\n    // TODO: loading state, error state\n    let cancelled = false;\n    (async () => {\n      if (isEVMChain(sourceChain) && provider && sourceAsset) {\n        const wrappedInfo = makeStateSafe(\n          await (nft\n            ? getOriginalAssetEthNFT(\n                getNFTBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                tokenId,\n                sourceChain\n              )\n            : getOriginalAssetEth(\n                getTokenBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                sourceChain\n              ))\n        );\n        if (!cancelled) {\n          dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n        }\n      }\n      if (sourceChain === CHAIN_ID_SOLANA && sourceAsset) {\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const wrappedInfo = makeStateSafe(\n            await (nft\n              ? getOriginalAssetSolNFT(\n                  connection,\n                  SOL_NFT_BRIDGE_ADDRESS,\n                  sourceAsset\n                )\n              : getOriginalAssetSol(\n                  connection,\n                  SOL_TOKEN_BRIDGE_ADDRESS,\n                  sourceAsset\n                ))\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_TERRA && sourceAsset) {\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetTerra(lcd, sourceAsset)\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isRecovery,\n    sourceChain,\n    sourceAsset,\n    provider,\n    nft,\n    setSourceWormholeWrappedInfo,\n    tokenId,\n  ]);\n}\n\nexport default useCheckIfWormholeWrapped;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getForeignAssetEth as getForeignAssetEthNFT,\n  getForeignAssetSol as getForeignAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { setTargetAsset as setNFTTargetAsset } from \"../store/nftSlice\";\nimport {\n  selectNFTIsRecovery,\n  selectNFTIsSourceAssetWormholeWrapped,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTTargetChain,\n  selectTransferIsRecovery,\n  selectTransferIsSourceAssetWormholeWrapped,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetAsset as setTransferTargetAsset } from \"../store/transferSlice\";\nimport {\n  getEvmChainId,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\n\nfunction useFetchTargetAsset(nft?: boolean) {\n  const dispatch = useDispatch();\n  const isSourceAssetWormholeWrapped = useSelector(\n    nft\n      ? selectNFTIsSourceAssetWormholeWrapped\n      : selectTransferIsSourceAssetWormholeWrapped\n  );\n  const originChain = useSelector(\n    nft ? selectNFTOriginChain : selectTransferOriginChain\n  );\n  const originAsset = useSelector(\n    nft ? selectNFTOriginAsset : selectTransferOriginAsset\n  );\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const tokenId = originTokenId || \"\"; // this should exist by this step for NFT transfers\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const setTargetAsset = nft ? setNFTTargetAsset : setTransferTargetAsset;\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const correctEvmNetwork = getEvmChainId(targetChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n  const isRecovery = useSelector(\n    nft ? selectNFTIsRecovery : selectTransferIsRecovery\n  );\n  const [lastSuccessfulArgs, setLastSuccessfulArgs] = useState<{\n    isSourceAssetWormholeWrapped: boolean | undefined;\n    originChain: ChainId | undefined;\n    originAsset: string | undefined;\n    targetChain: ChainId;\n    nft?: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsMatchLastSuccess =\n    !!lastSuccessfulArgs &&\n    lastSuccessfulArgs.isSourceAssetWormholeWrapped ===\n      isSourceAssetWormholeWrapped &&\n    lastSuccessfulArgs.originChain === originChain &&\n    lastSuccessfulArgs.originAsset === originAsset &&\n    lastSuccessfulArgs.targetChain === targetChain &&\n    lastSuccessfulArgs.nft === nft &&\n    lastSuccessfulArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () =>\n      setLastSuccessfulArgs({\n        isSourceAssetWormholeWrapped,\n        originChain,\n        originAsset,\n        targetChain,\n        nft,\n        tokenId,\n      }),\n    [\n      isSourceAssetWormholeWrapped,\n      originChain,\n      originAsset,\n      targetChain,\n      nft,\n      tokenId,\n    ]\n  );\n  useEffect(() => {\n    if (isRecovery || argsMatchLastSuccess) {\n      return;\n    }\n    setLastSuccessfulArgs(null);\n    if (isSourceAssetWormholeWrapped && originChain === targetChain) {\n      dispatch(\n        setTargetAsset(\n          receiveDataWrapper({\n            doesExist: true,\n            address: hexToNativeString(originAsset, originChain) || null,\n          })\n        )\n      );\n      setArgs();\n      return;\n    }\n    let cancelled = false;\n    (async () => {\n      if (\n        isEVMChain(targetChain) &&\n        provider &&\n        hasCorrectEvmNetwork &&\n        originChain &&\n        originAsset\n      ) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const asset = await (nft\n            ? getForeignAssetEthNFT(\n                getNFTBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              )\n            : getForeignAssetEth(\n                getTokenBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: asset !== ethers.constants.AddressZero,\n                  address: asset,\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_SOLANA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const asset = await (nft\n            ? getForeignAssetSolNFT(\n                SOL_NFT_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset),\n                arrayify(BigNumber.from(tokenId || \"0\"))\n              )\n            : getForeignAssetSolana(\n                connection,\n                SOL_TOKEN_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_TERRA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const asset = await getForeignAssetTerra(\n            TERRA_TOKEN_BRIDGE_ADDRESS,\n            lcd,\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isRecovery,\n    isSourceAssetWormholeWrapped,\n    originChain,\n    originAsset,\n    targetChain,\n    provider,\n    nft,\n    setTargetAsset,\n    tokenId,\n    hasCorrectEvmNetwork,\n    argsMatchLastSuccess,\n    setArgs,\n  ]);\n}\n\nexport default useFetchTargetAsset;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginBottom: theme.spacing(4),\n  },\n}));\n\nexport default function StepDescription({\n  children,\n}: {\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <Typography component=\"div\" variant=\"body2\" className={classes.description}>\n      {children}\n    </Typography>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTIsRedeeming,\n  selectNFTIsSending,\n  selectNFTRedeemTx,\n  selectNFTSourceChain,\n  selectNFTTargetChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const isSending = useSelector(selectNFTIsSending);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const showWarning = (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : isEVMChain(sourceChain) && isSending\n        ? \"Note: there will be two transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { useSelector } from \"react-redux\";\nimport { useHandleNFTRedeem } from \"../../hooks/useHandleNFTRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { selectNFTTargetChain } from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport StepDescription from \"../StepDescription\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Redeem() {\n  const { handleClick, disabled, showLoader } = useHandleNFTRedeem();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  return (\n    <>\n      <StepDescription>Receive the NFT on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n    </>\n  );\n}\n\nexport default Redeem;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectNFTRedeemTx, selectNFTTargetChain } from \"../../store/selectors\";\nimport { reset } from \"../../store/nftSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The NFT will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer Another NFT!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  transferFromEth,\n  transferFromSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { BigNumber, Signer } from \"ethers\";\nimport { arrayify, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectNFTTargetChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTTargetAddressHex from \"./useNFTTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  tokenId: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await transferFromEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      tokenAddress,\n      tokenId,\n      recipientChain,\n      recipientAddress\n    );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getNFTBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  originAddressStr?: string,\n  originChain?: ChainId,\n  originTokenId?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const transaction = await transferFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_NFT_BRIDGE_ADDRESS,\n      payerAddress,\n      fromAddress,\n      mintAddress,\n      targetAddress,\n      targetChain,\n      originAddress,\n      originChain,\n      arrayify(BigNumber.from(originTokenId || \"0\"))\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleNFTTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceAsset = useSelector(selectNFTSourceAsset);\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useNFTTargetAddressHex();\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      !!sourceTokenId &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        sourceTokenId,\n        targetChain,\n        targetAddress,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        targetChain,\n        targetAddress,\n        originAsset,\n        originChain,\n        originTokenId\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    sourceTokenPublicKey,\n    sourceAsset,\n    sourceTokenId,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    originTokenId,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTTargetAddressHex() {\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTTransfer } from \"../../hooks/useHandleNFTTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectNFTSourceWalletAddress,\n  selectNFTSourceChain,\n  selectNFTTargetError,\n  selectNFTTransferTx,\n  selectNFTIsSendComplete,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport StepDescription from \"../StepDescription\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleNFTTransfer();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const error = useSelector(selectNFTTargetError);\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectNFTSourceWalletAddress);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const isDisabled = !isReady || isWrongWallet || disabled;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || undefined;\n  return (\n    <>\n      <StepDescription>\n        Transfer the NFT to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      <ButtonWithLoader\n        disabled={isDisabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={errorMessage}\n      >\n        Transfer\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const transferTx = useSelector(selectNFTTransferTx);\n\n  const explainerString = \"The NFT has been sent!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/bnb.d8c61230.svg\";","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  WSOL_ADDRESS,\n  WSOL_DECIMALS,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  errorSourceParsedTokenAccounts as errorSourceParsedTokenAccountsNFT,\n  fetchSourceParsedTokenAccounts as fetchSourceParsedTokenAccountsNFT,\n  NFTParsedTokenAccount,\n  receiveSourceParsedTokenAccounts as receiveSourceParsedTokenAccountsNFT,\n  setSourceParsedTokenAccount as setSourceParsedTokenAccountNFT,\n  setSourceParsedTokenAccounts as setSourceParsedTokenAccountsNFT,\n  setSourceWalletAddress as setSourceWalletAddressNFT,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccounts,\n  selectNFTSourceWalletAddress,\n  selectSourceWalletAddress,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccounts,\n} from \"../store/selectors\";\nimport {\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  ParsedTokenAccount,\n  receiveSourceParsedTokenAccounts,\n  setAmount,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  setSourceWalletAddress,\n} from \"../store/transferSlice\";\nimport {\n  COVALENT_GET_TOKENS_URL,\n  logoOverrides,\n  ROPSTEN_WETH_ADDRESS,\n  ROPSTEN_WETH_DECIMALS,\n  SOLANA_HOST,\n  WBNB_ADDRESS,\n  WBNB_DECIMALS,\n  WETH_ADDRESS,\n  WETH_DECIMALS,\n  WMATIC_ADDRESS,\n  WMATIC_DECIMALS,\n} from \"../utils/consts\";\nimport {\n  ExtractedMintInfo,\n  extractMintInfo,\n  getMultipleAccountsRPC,\n} from \"../utils/solana\";\nimport bnbIcon from \"../icons/bnb.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\n\nexport function createParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  symbol?: string,\n  name?: string,\n  logo?: string,\n  isNativeAsset?: boolean\n): ParsedTokenAccount {\n  return {\n    publicKey: publicKey,\n    mintKey: mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    symbol,\n    name,\n    logo,\n    isNativeAsset,\n  };\n}\n\nexport function createNFTParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  tokenId: string,\n  symbol?: string,\n  name?: string,\n  uri?: string,\n  animation_url?: string,\n  external_url?: string,\n  image?: string,\n  image_256?: string,\n  nftName?: string,\n  description?: string\n): NFTParsedTokenAccount {\n  return {\n    publicKey,\n    mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    tokenId,\n    uri,\n    animation_url,\n    external_url,\n    image,\n    image_256,\n    symbol,\n    name,\n    nftName,\n    description,\n  };\n}\n\nconst createParsedTokenAccountFromInfo = (\n  pubkey: PublicKey,\n  item: AccountInfo<ParsedAccountData>\n): ParsedTokenAccount => {\n  return {\n    publicKey: pubkey?.toString(),\n    mintKey: item.data.parsed?.info?.mint?.toString(),\n    amount: item.data.parsed?.info?.tokenAmount?.amount,\n    decimals: item.data.parsed?.info?.tokenAmount?.decimals,\n    uiAmount: item.data.parsed?.info?.tokenAmount?.uiAmount,\n    uiAmountString: item.data.parsed?.info?.tokenAmount?.uiAmountString,\n  };\n};\n\nconst createParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData\n): ParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: covalent.balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(formatUnits(covalent.balance, covalent.contract_decimals)),\n    uiAmountString: formatUnits(covalent.balance, covalent.contract_decimals),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: logoOverrides.get(covalent.contract_address) || covalent.logo_url,\n  };\n};\n\nconst createNativeSolParsedTokenAccount = async (\n  connection: Connection,\n  walletAddress: string\n) => {\n  // const walletAddress = \"H69q3Q8E74xm7swmMQpsJLVp2Q9JuBwBbxraAMX5Drzm\" // known solana mainnet wallet with tokens\n  const fetchAccounts = await getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]);\n  if (!fetchAccounts || !fetchAccounts.length || !fetchAccounts[0]) {\n    return null;\n  } else {\n    return createParsedTokenAccount(\n      walletAddress, //publicKey\n      WSOL_ADDRESS, //Mint key\n      fetchAccounts[0].lamports.toString(), //amount\n      WSOL_DECIMALS, //decimals, 9\n      parseFloat(formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS)),\n      formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS).toString(),\n      \"SOL\",\n      \"Solana\",\n      undefined, //TODO logo. It's in the solana token map, so we could potentially use that URL.\n      true\n    );\n  }\n};\n\nconst createNativeEthParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeEthRopstenParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          ROPSTEN_WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          ROPSTEN_WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeBscParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WBNB_ADDRESS, //Mint key, On the other side this will be WBNB, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WBNB_DECIMALS, //Luckily both BNB and WBNB have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"BNB\", //A white lie for display purposes\n          \"Binance Coin\", //A white lie for display purposes\n          bnbIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativePolygonParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WMATIC_ADDRESS, //Mint key, On the other side this will be WMATIC, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WMATIC_DECIMALS, //Luckily both MATIC and WMATIC have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"MATIC\", //A white lie for display purposes\n          \"Matic\", //A white lie for display purposes\n          polygonIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNFTParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData,\n  nft_data: CovalentNFTData\n): NFTParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: nft_data.token_balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(\n      formatUnits(nft_data.token_balance, covalent.contract_decimals)\n    ),\n    uiAmountString: formatUnits(\n      nft_data.token_balance,\n      covalent.contract_decimals\n    ),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: covalent.logo_url,\n    tokenId: nft_data.token_id,\n    uri: nft_data.token_url,\n    animation_url: nft_data.external_data.animation_url,\n    external_url: nft_data.external_data.external_url,\n    image: nft_data.external_data.image,\n    image_256: nft_data.external_data.image_256,\n    nftName: nft_data.external_data.name,\n    description: nft_data.external_data.description,\n  };\n};\n\nexport type CovalentData = {\n  contract_decimals: number;\n  contract_ticker_symbol: string;\n  contract_name: string;\n  contract_address: string;\n  logo_url: string | undefined;\n  balance: string;\n  quote: number | undefined;\n  quote_rate: number | undefined;\n  nft_data?: CovalentNFTData[];\n};\n\nexport type CovalentNFTExternalData = {\n  animation_url: string | null;\n  external_url: string | null;\n  image: string;\n  image_256: string;\n  name: string;\n  description: string;\n};\n\nexport type CovalentNFTData = {\n  token_id: string;\n  token_balance: string;\n  external_data: CovalentNFTExternalData;\n  token_url: string;\n};\n\nconst getEthereumAccountsCovalent = async (\n  walletAddress: string,\n  nft: boolean,\n  chainId: ChainId\n): Promise<CovalentData[]> => {\n  const url = COVALENT_GET_TOKENS_URL(chainId, walletAddress, nft);\n\n  try {\n    const output = [] as CovalentData[];\n    const response = await axios.get(url);\n    const tokens = response.data.data.items;\n\n    if (tokens instanceof Array && tokens.length) {\n      for (const item of tokens) {\n        // TODO: filter?\n        if (\n          item.contract_decimals !== undefined &&\n          item.contract_address &&\n          item.balance &&\n          item.balance !== \"0\" &&\n          (nft\n            ? item.supports_erc?.includes(\"erc721\")\n            : item.supports_erc?.includes(\"erc20\"))\n        ) {\n          output.push({ ...item } as CovalentData);\n        }\n      }\n    }\n\n    return output;\n  } catch (error) {\n    return Promise.reject(\"Unable to retrieve your Ethereum Tokens.\");\n  }\n};\n\nconst getSolanaParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    //No matter what, we retrieve the spl tokens associated to this address.\n    let splParsedTokenAccounts = await connection\n      .getParsedTokenAccountsByOwner(new PublicKey(walletAddress), {\n        programId: new PublicKey(TOKEN_PROGRAM_ID),\n      })\n      .then((result) => {\n        return result.value.map((item) =>\n          createParsedTokenAccountFromInfo(item.pubkey, item.account)\n        );\n      });\n\n    // uncomment to test token account in picker, useful for debugging\n    // splParsedTokenAccounts.push({\n    //   amount: \"1\",\n    //   decimals: 8,\n    //   mintKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   publicKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   uiAmount: 1,\n    //   uiAmountString: \"1\",\n    //   isNativeAsset: false,\n    // });\n\n    if (nft) {\n      //In the case of NFTs, we are done, and we set the accounts in redux\n      dispatch(receiveSourceParsedTokenAccountsNFT(splParsedTokenAccounts));\n    } else {\n      //In the transfer case, we also pull the SOL balance of the wallet, and prepend it at the beginning of the list.\n      const nativeAccount = await createNativeSolParsedTokenAccount(\n        connection,\n        walletAddress\n      );\n      if (nativeAccount !== null) {\n        splParsedTokenAccounts.unshift(nativeAccount);\n      }\n      dispatch(receiveSourceParsedTokenAccounts(splParsedTokenAccounts));\n    }\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\n/**\n * Fetches the balance of an asset for the connected wallet\n * This should handle every type of chain in the future, but only reads the Transfer state.\n */\nfunction useGetAvailableTokens(nft: boolean = false) {\n  const dispatch = useDispatch();\n\n  const tokenAccounts = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccounts\n      : selectTransferSourceParsedTokenAccounts\n  );\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { provider, signerAddress } = useEthereumProvider();\n\n  const [covalent, setCovalent] = useState<any>(undefined);\n  const [covalentLoading, setCovalentLoading] = useState(false);\n  const [covalentError, setCovalentError] = useState<string | undefined>(\n    undefined\n  );\n\n  const [ethNativeAccount, setEthNativeAccount] = useState<any>(undefined);\n  const [ethNativeAccountLoading, setEthNativeAccountLoading] = useState(false);\n  const [ethNativeAccountError, setEthNativeAccountError] = useState<\n    string | undefined\n  >(undefined);\n\n  const [solanaMintAccounts, setSolanaMintAccounts] = useState<\n    Map<string, ExtractedMintInfo | null> | undefined\n  >(undefined);\n  const [solanaMintAccountsLoading, setSolanaMintAccountsLoading] =\n    useState(false);\n  const [solanaMintAccountsError, setSolanaMintAccountsError] = useState<\n    string | undefined\n  >(undefined);\n\n  const selectedSourceWalletAddress = useSelector(\n    nft ? selectNFTSourceWalletAddress : selectSourceWalletAddress\n  );\n  const currentSourceWalletAddress: string | undefined = isEVMChain(lookupChain)\n    ? signerAddress\n    : lookupChain === CHAIN_ID_SOLANA\n    ? solPK?.toString()\n    : undefined;\n\n  const resetSourceAccounts = useCallback(() => {\n    dispatch(\n      nft\n        ? setSourceWalletAddressNFT(undefined)\n        : setSourceWalletAddress(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountNFT(undefined)\n        : setSourceParsedTokenAccount(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountsNFT(undefined)\n        : setSourceParsedTokenAccounts(undefined)\n    );\n    !nft && dispatch(setAmount(\"\"));\n    setCovalent(undefined); //These need to be included in the reset because they have balances on them.\n    setCovalentLoading(false);\n    setCovalentError(\"\");\n\n    setEthNativeAccount(undefined);\n    setEthNativeAccountLoading(false);\n    setEthNativeAccountError(\"\");\n  }, [setCovalent, dispatch, nft]);\n\n  //TODO this useEffect could be somewhere else in the codebase\n  //It resets the SourceParsedTokens accounts when the wallet changes\n  useEffect(() => {\n    if (\n      selectedSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== selectedSourceWalletAddress\n    ) {\n      resetSourceAccounts();\n      return;\n    } else {\n    }\n  }, [\n    selectedSourceWalletAddress,\n    currentSourceWalletAddress,\n    dispatch,\n    resetSourceAccounts,\n  ]);\n\n  //Solana accountinfos load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_SOLANA && solPK) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getSolanaParsedTokenAccounts(solPK.toString(), dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, solanaWallet, lookupChain, solPK, tokenAccounts, nft]);\n\n  //Solana Mint Accounts lookup\n  useEffect(() => {\n    if (lookupChain !== CHAIN_ID_SOLANA || !tokenAccounts.data?.length) {\n      return () => {};\n    }\n\n    let cancelled = false;\n    setSolanaMintAccountsLoading(true);\n    setSolanaMintAccountsError(undefined);\n    const mintAddresses = tokenAccounts.data.map((x) => x.mintKey);\n    //This is a known wormhole v1 token on testnet\n    // mintAddresses.push(\"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\");\n    //SOLT devnet token\n    // mintAddresses.push(\"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\");\n    // bad monkey \"NFT\"\n    // mintAddresses.push(\"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\");\n    // degenerate monkey NFT\n    // mintAddresses.push(\"EzYsbigNNGbNuANRJ3mnnyJYU2Bk7mBYVsxuonUwAX7r\");\n\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    getMultipleAccountsRPC(\n      connection,\n      mintAddresses.map((x) => new PublicKey(x))\n    ).then(\n      (results) => {\n        if (!cancelled) {\n          const output = new Map<string, ExtractedMintInfo | null>();\n\n          results.forEach((result, index) =>\n            output.set(\n              mintAddresses[index],\n              (result && extractMintInfo(result)) || null\n            )\n          );\n\n          setSolanaMintAccounts(output);\n          setSolanaMintAccountsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setSolanaMintAccounts(undefined);\n          setSolanaMintAccountsLoading(false);\n          setSolanaMintAccountsError(\n            \"Could not retrieve Solana mint accounts.\"\n          );\n        }\n      }\n    );\n\n    return () => (cancelled = true);\n  }, [tokenAccounts.data, lookupChain]);\n\n  //Ethereum native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETH &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum (Ropsten) native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthRopstenParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Binance Smart Chain native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_BSC &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeBscParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your BNB balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Polygon native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_POLYGON &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativePolygonParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your MATIC balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum covalent accounts load\n  useEffect(() => {\n    //const testWallet = \"0xf60c2ea62edbfe808163751dd0d8693dcb30019c\";\n    // const nftTestWallet1 = \"0x3f304c6721f35ff9af00fd32650c8e0a982180ab\";\n    // const nftTestWallet2 = \"0x98ed231428088eb440e8edb5cc8d66dcf913b86e\";\n    // const nftTestWallet3 = \"0xb1fadf677a7e9b90e9d4f31c8ffb3dc18c138c6f\";\n    // const nftBscTestWallet1 = \"0x5f464a652bd1991df0be37979b93b3306d64a909\";\n    let cancelled = false;\n    const walletAddress = signerAddress;\n    if (walletAddress && isEVMChain(lookupChain) && !covalent) {\n      //TODO less cancel\n      !cancelled && setCovalentLoading(true);\n      !cancelled &&\n        dispatch(\n          nft\n            ? fetchSourceParsedTokenAccountsNFT()\n            : fetchSourceParsedTokenAccounts()\n        );\n      getEthereumAccountsCovalent(walletAddress, nft, lookupChain).then(\n        (accounts) => {\n          !cancelled && setCovalentLoading(false);\n          !cancelled && setCovalentError(undefined);\n          !cancelled && setCovalent(accounts);\n          !cancelled &&\n            dispatch(\n              nft\n                ? receiveSourceParsedTokenAccountsNFT(\n                    accounts.reduce((arr, current) => {\n                      if (current.nft_data) {\n                        current.nft_data.forEach((x) =>\n                          arr.push(\n                            createNFTParsedTokenAccountFromCovalent(\n                              walletAddress,\n                              current,\n                              x\n                            )\n                          )\n                        );\n                      }\n                      return arr;\n                    }, [] as NFTParsedTokenAccount[])\n                  )\n                : receiveSourceParsedTokenAccounts(\n                    accounts.map((x) =>\n                      createParsedTokenAccountFromCovalent(walletAddress, x)\n                    )\n                  )\n            );\n        },\n        () => {\n          !cancelled &&\n            dispatch(\n              nft\n                ? errorSourceParsedTokenAccountsNFT(\n                    \"Cannot load your Ethereum NFTs at the moment.\"\n                  )\n                : errorSourceParsedTokenAccounts(\n                    \"Cannot load your Ethereum tokens at the moment.\"\n                  )\n            );\n          !cancelled &&\n            setCovalentError(\"Cannot load your Ethereum tokens at the moment.\");\n          !cancelled && setCovalentLoading(false);\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [lookupChain, provider, signerAddress, dispatch, nft, covalent]);\n\n  //Terra accounts load\n  //At present, we don't have any mechanism for doing this.\n  useEffect(() => {}, []);\n\n  const ethAccounts = useMemo(() => {\n    const output = { ...tokenAccounts };\n    output.data = output.data?.slice() || [];\n    output.isFetching = output.isFetching || ethNativeAccountLoading;\n    output.error = output.error || ethNativeAccountError;\n    ethNativeAccount && output.data && output.data.unshift(ethNativeAccount);\n    return output;\n  }, [\n    ethNativeAccount,\n    ethNativeAccountLoading,\n    ethNativeAccountError,\n    tokenAccounts,\n  ]);\n\n  return lookupChain === CHAIN_ID_SOLANA\n    ? {\n        tokenAccounts: tokenAccounts,\n        mintAccounts: {\n          data: solanaMintAccounts,\n          isFetching: solanaMintAccountsLoading,\n          error: solanaMintAccountsError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : isEVMChain(lookupChain)\n    ? {\n        tokenAccounts: ethAccounts,\n        covalent: {\n          data: covalent,\n          isFetching: covalentLoading,\n          error: covalentError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_TERRA\n    ? {\n        resetAccounts: resetSourceAccounts,\n      }\n    : undefined;\n}\n\nexport default useGetAvailableTokens;\n","import {\n  NFTImplementation,\n  NFTImplementation__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { arrayify, formatUnits } from \"ethers/lib/utils\";\nimport {\n  createNFTParsedTokenAccount,\n  createParsedTokenAccount,\n} from \"../hooks/useGetSourceParsedTokenAccounts\";\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumToken(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = TokenImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function ethTokenToParsedTokenAccount(\n  token: TokenImplementation,\n  signerAddress: string\n) {\n  const decimals = await token.decimals();\n  const balance = await token.balanceOf(signerAddress);\n  const symbol = await token.symbol();\n  const name = await token.name();\n  return createParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    symbol,\n    name\n  );\n}\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumNFT(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = NFTImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function isNFT(token: NFTImplementation) {\n  const erc721 = \"0x80ac58cd\";\n  const erc721metadata = \"0x5b5e139f\";\n  const supportsErc721 = await token.supportsInterface(arrayify(erc721));\n  const supportsErc721Metadata = await token.supportsInterface(\n    arrayify(erc721metadata)\n  );\n  return supportsErc721 && supportsErc721Metadata;\n}\n\nexport async function ethNFTToNFTParsedTokenAccount(\n  token: NFTImplementation,\n  tokenId: string,\n  signerAddress: string\n) {\n  const decimals = 0;\n  const balance = (await token.ownerOf(tokenId)) === signerAddress ? 1 : 0;\n  const symbol = await token.symbol();\n  const name = await token.name();\n  const uri = await token.tokenURI(tokenId);\n  return createNFTParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    tokenId,\n    symbol,\n    name,\n    uri\n  );\n}\n\nexport function isValidEthereumAddress(address: string) {\n  return ethers.utils.isAddress(address);\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectMarketsMap } from \"../store/selectors\";\nimport {\n  errorMarketsMap,\n  fetchMarketsMap,\n  receiveMarketsMap,\n} from \"../store/tokenSlice\";\nimport { FEATURED_MARKETS_JSON_URL } from \"../utils/consts\";\n\nexport type MarketsMap = {\n  markets?: {\n    [index: string]: {\n      name: string;\n      link: string;\n    };\n  };\n  tokens?: {\n    [key in ChainId]?: {\n      [index: string]: {\n        symbol: string;\n        logo: string;\n      };\n    };\n  };\n  tokenMarkets?: {\n    [key in ChainId]?: {\n      [key in ChainId]?: {\n        [index: string]: {\n          symbol: string;\n          logo: string;\n          markets: string[];\n        };\n      };\n    };\n  };\n};\n\nconst useMarketsMap = (shouldFire: boolean): DataWrapper<MarketsMap> => {\n  const marketsMap = useSelector(selectMarketsMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (marketsMap.data === undefined ||\n      (marketsMap.data === null && !marketsMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getMarketsMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return marketsMap;\n};\n\nconst getMarketsMap = (dispatch: Dispatch) => {\n  dispatch(fetchMarketsMap());\n  axios.get(FEATURED_MARKETS_JSON_URL).then(\n    (response) => {\n      dispatch(receiveMarketsMap(response.data as MarketsMap));\n    },\n    (error) => {\n      dispatch(errorMarketsMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useMarketsMap;\n","import {\n  Avatar,\n  Card,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport clsx from \"clsx\";\nimport {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport SmartAddress from \"../SmartAddress\";\nimport bscIcon from \"../../icons/bsc.svg\";\nimport ethIcon from \"../../icons/eth.svg\";\nimport solanaIcon from \"../../icons/solana.svg\";\nimport polygonIcon from \"../../icons/polygon.svg\";\nimport useCopyToClipboard from \"../../hooks/useCopyToClipboard\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Wormhole from \"../../icons/wormhole-network.svg\";\n\nconst safeIPFS = (uri: string) =>\n  uri.startsWith(\"ipfs://ipfs/\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/\")\n    : uri.startsWith(\"ipfs://\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n    : uri.startsWith(\"https://cloudflare-ipfs.com/ipfs/\") // no CORS support?\n    ? uri.replace(\"https://cloudflare-ipfs.com/ipfs/\", \"https://ipfs.io/ipfs/\")\n    : uri;\n\nconst LogoIcon = ({ chainId }: { chainId: ChainId }) =>\n  chainId === CHAIN_ID_SOLANA ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"4px\",\n      }}\n      src={solanaIcon}\n      alt=\"Solana\"\n    />\n  ) : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN ? (\n    <Avatar\n      style={{\n        backgroundColor: \"white\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n      }}\n      src={ethIcon}\n      alt=\"Ethereum\"\n    />\n  ) : chainId === CHAIN_ID_BSC ? (\n    <Avatar\n      style={{\n        backgroundColor: \"rgb(20, 21, 26)\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"2px\",\n      }}\n      src={bscIcon}\n      alt=\"Binance Smart Chain\"\n    />\n  ) : chainId === CHAIN_ID_POLYGON ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={polygonIcon}\n      alt=\"Polygon\"\n    />\n  ) : null;\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    borderRadius: 9,\n    maxWidth: \"100%\",\n    width: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: 8,\n    position: \"relative\",\n    zIndex: 1,\n    transition: \"background-position 1s, transform 0.25s\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n      transform: \"scale(1.25)\",\n    },\n    backgroundSize: \"200% auto\",\n    backgroundColor: \"#ffb347\",\n    background:\n      \"linear-gradient(to right, #ffb347 0%, #ffcc33  51%, #ffb347  100%)\",\n  },\n  silverBorder: {\n    backgroundColor: \"#D9D8D6\",\n    backgroundSize: \"200% auto\",\n    background:\n      \"linear-gradient(to bottom right, #757F9A 0%, #D7DDE8  51%, #757F9A  100%)\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n    },\n  },\n  cardInset: {},\n  textContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    display: \"flex\",\n  },\n  detailsContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    \"&:last-child\": {\n      //override rule\n      paddingBottom: 2,\n    },\n  },\n  title: {\n    flex: 1,\n  },\n  description: {\n    padding: theme.spacing(0.5, 0, 1),\n  },\n  tokenId: {\n    fontSize: \"8px\",\n  },\n  mediaContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"transparent\",\n    margin: theme.spacing(0, 2),\n    \"& > img, & > video\": {\n      border: \"1px solid #ffb347\",\n    },\n  },\n  silverMediaBorder: {\n    \"& > img, & > video\": {\n      borderColor: \"#D7DDE8\",\n    },\n  },\n  // thanks https://cssgradient.io/ and https://htmlcolorcodes.com/color-picker/\n  eth: {\n    // colors from https://en.wikipedia.org/wiki/Ethereum#/media/File:Ethereum-icon-purple.svg\n    backgroundColor: \"rgb(69,74,117)\",\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,1) 0%, rgba(138,146,178,1) 33%, rgba(69,74,117,1) 66%, rgba(98,104,143,1) 100%)\",\n  },\n  bsc: {\n    // color from binance background rgb(20, 21, 26), 2 and 1 tint lighter\n    backgroundColor: \"#F0B90B\",\n    background:\n      \"linear-gradient(160deg, rgb(20, 21, 26) 0%, #4A4D57 33%, rgb(20, 21, 26) 66%, #2C2F3B 100%)\",\n  },\n  polygon: {\n    // color from polygon logo #8247E5 down to 30 lightness\n    backgroundColor: \"#0F0323\",\n    background:\n      \"linear-gradient(160deg, #0F0323 0%, #250957 33%, #0F0323 66%, #0F0323 100%)\",\n  },\n  solana: {\n    // colors from https://solana.com/branding/new/exchange/exchange-sq-black.svg\n    backgroundColor: \"rgb(153,69,255)\",\n    background:\n      \"linear-gradient(45deg, rgba(153,69,255,1) 0%, rgba(121,98,231,1) 20%, rgba(0,209,140,1) 100%)\",\n  },\n  hidden: {\n    display: \"none\",\n  },\n  skeleton: {\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    borderRadius: 9,\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"absolute\",\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    zIndex: 10,\n  },\n  wormholePositioner: {\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"relative\",\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    margin: `${theme.spacing(1)}px auto`,\n  },\n}));\n\nconst ViewerLoader = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.wormholePositioner}>\n      <Skeleton variant=\"rect\" animation=\"wave\" className={classes.skeleton} />\n      <img src={Wormhole} alt=\"Wormhole\" className={classes.wormholeIcon} />\n    </div>\n  );\n};\n\nexport default function NFTViewer({\n  value,\n  chainId,\n}: {\n  value: NFTParsedTokenAccount;\n  chainId: ChainId;\n}) {\n  const uri = safeIPFS(value.uri || \"\");\n  const [metadata, setMetadata] = useState({\n    uri,\n    image: value.image,\n    animation_url: value.animation_url,\n    nftName: value.nftName,\n    description: value.description,\n    isLoading: !!uri,\n  });\n  const [isMediaLoading, setIsMediaLoading] = useState(false);\n  const onLoad = useCallback(() => {\n    setIsMediaLoading(false);\n  }, []);\n  const isLoading = isMediaLoading || metadata.isLoading;\n  useEffect(() => {\n    setMetadata((m) =>\n      m.uri === uri\n        ? m\n        : {\n            uri,\n            image: value.image,\n            animation_url: value.animation_url,\n            nftName: value.nftName,\n            description: value.description,\n            isLoading: !!uri,\n          }\n    );\n  }, [value, uri]);\n  useEffect(() => {\n    if (uri) {\n      let cancelled = false;\n      (async () => {\n        try {\n          const result = await axios.get(uri);\n          if (!cancelled && result && result.data) {\n            // support returns with nested data (e.g. {status: 10000, result: {data: {...}}})\n            const data = result.data.result?.data || result.data;\n            setMetadata({\n              uri,\n              image:\n                data.image ||\n                data.image_url ||\n                data.big_image ||\n                data.small_image,\n              animation_url: data.animation_url,\n              nftName: data.name,\n              description: data.description,\n              isLoading: false,\n            });\n          } else if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        } catch (e) {\n          if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [uri]);\n\n  const classes = useStyles();\n  const animLower = metadata.animation_url?.toLowerCase();\n  // const has3DModel = animLower?.endsWith('gltf') || animLower?.endsWith('glb')\n  const hasVideo =\n    !animLower?.startsWith(\"ipfs://\") && // cloudflare ipfs doesn't support streaming video\n    (animLower?.endsWith(\"webm\") ||\n      animLower?.endsWith(\"mp4\") ||\n      animLower?.endsWith(\"mov\") ||\n      animLower?.endsWith(\"m4v\") ||\n      animLower?.endsWith(\"ogv\") ||\n      animLower?.endsWith(\"ogg\"));\n  const hasAudio =\n    animLower?.endsWith(\"mp3\") ||\n    animLower?.endsWith(\"flac\") ||\n    animLower?.endsWith(\"wav\") ||\n    animLower?.endsWith(\"oga\");\n  const hasImage = metadata.image;\n  const copyTokenId = useCopyToClipboard(value.tokenId || \"\");\n  const videoSrc = hasVideo && safeIPFS(metadata.animation_url || \"\");\n  const imageSrc = hasImage && safeIPFS(metadata.image || \"\");\n  const audioSrc = hasAudio && safeIPFS(metadata.animation_url || \"\");\n\n  //set loading when the media src changes\n  useLayoutEffect(() => {\n    if (videoSrc || imageSrc || audioSrc) {\n      setIsMediaLoading(true);\n    } else {\n      setIsMediaLoading(false);\n    }\n  }, [videoSrc, imageSrc, audioSrc]);\n\n  const image = (\n    <img\n      src={imageSrc}\n      alt={metadata.nftName || \"\"}\n      style={{ maxWidth: \"100%\" }}\n      onLoad={onLoad}\n      onError={onLoad}\n    />\n  );\n  const media = (\n    <>\n      {hasVideo ? (\n        <video\n          autoPlay\n          controls\n          loop\n          style={{ maxWidth: \"100%\" }}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        >\n          <source src={videoSrc || \"\"} />\n          {image}\n        </video>\n      ) : hasImage ? (\n        image\n      ) : null}\n      {hasAudio ? (\n        <audio\n          controls\n          src={audioSrc || \"\"}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        />\n      ) : null}\n    </>\n  );\n\n  return (\n    <>\n      <div className={!isLoading ? classes.hidden : \"\"}>\n        <ViewerLoader />\n      </div>\n      <Card\n        className={clsx(classes.card, {\n          [classes.silverBorder]:\n            chainId === CHAIN_ID_SOLANA || chainId === CHAIN_ID_POLYGON,\n          [classes.hidden]: isLoading,\n        })}\n        elevation={10}\n      >\n        <div\n          className={clsx(classes.cardInset, {\n            [classes.eth]:\n              chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN,\n            [classes.bsc]: chainId === CHAIN_ID_BSC,\n            [classes.solana]: chainId === CHAIN_ID_SOLANA,\n            [classes.polygon]: chainId === CHAIN_ID_POLYGON,\n          })}\n        >\n          <CardContent className={classes.textContent}>\n            {metadata.nftName ? (\n              <Typography className={classes.title}>\n                {metadata.nftName}\n              </Typography>\n            ) : (\n              <div className={classes.title} />\n            )}\n            <SmartAddress\n              chainId={chainId}\n              parsedTokenAccount={value}\n              noGutter\n              noUnderline\n            />\n            <LogoIcon chainId={chainId} />\n          </CardContent>\n          <CardMedia\n            className={clsx(classes.mediaContent, {\n              [classes.silverMediaBorder]:\n                chainId === CHAIN_ID_SOLANA || chainId === CHAIN_ID_POLYGON,\n            })}\n          >\n            {media}\n          </CardMedia>\n          <CardContent className={classes.detailsContent}>\n            {metadata.description ? (\n              <Typography variant=\"body2\" className={classes.description}>\n                {metadata.description}\n              </Typography>\n            ) : null}\n            {value.tokenId ? (\n              <Typography className={classes.tokenId} align=\"right\">\n                <Tooltip title=\"Copy\" arrow>\n                  <span onClick={copyTokenId}>\n                    {value.tokenId.length > 18\n                      ? `#${value.tokenId.substr(0, 16)}...`\n                      : `#${value.tokenId}`}\n                  </span>\n                </Tooltip>\n              </Typography>\n            ) : null}\n          </CardContent>\n        </div>\n      </Card>\n    </>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  Button,\n  CircularProgress,\n  createStyles,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  makeStyles,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { InfoOutlined, Launch } from \"@material-ui/icons\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { AVAILABLE_MARKETS_URL, CHAINS_BY_ID } from \"../../utils/consts\";\nimport { shortenAddress } from \"../../utils/solana\";\nimport NFTViewer from \"./NFTViewer\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    alignCenter: {\n      textAlign: \"center\",\n    },\n    optionContainer: {\n      padding: 0,\n    },\n    optionContent: {\n      padding: theme.spacing(1),\n    },\n    tokenList: {\n      maxHeight: theme.spacing(80), //TODO smarter\n      height: theme.spacing(80),\n      overflow: \"auto\",\n    },\n    dialogContent: {\n      overflowX: \"hidden\",\n    },\n    selectionButtonContainer: {\n      //display: \"flex\",\n      textAlign: \"center\",\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    selectionButton: {\n      maxWidth: \"100%\",\n      width: theme.breakpoints.values.sm,\n    },\n    tokenOverviewContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      \"& div\": {\n        margin: theme.spacing(1),\n        flexBasis: \"25%\",\n        \"&$tokenImageContainer\": {\n          maxWidth: 40,\n        },\n        \"&$tokenMarketsList\": {\n          marginTop: theme.spacing(-0.5),\n          marginLeft: 0,\n          flexBasis: \"100%\",\n        },\n        \"&:last-child\": {\n          textAlign: \"right\",\n        },\n        flexShrink: 1,\n      },\n      flexWrap: \"wrap\",\n    },\n    tokenImageContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: 40,\n    },\n    tokenImage: {\n      maxHeight: \"2.5rem\", //Eyeballing this based off the text size\n    },\n    tokenMarketsList: {\n      order: 1,\n      textAlign: \"left\",\n      width: \"100%\",\n      \"& > .MuiButton-root\": {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n      },\n    },\n    migrationAlert: {\n      width: \"100%\",\n      \"& .MuiAlert-message\": {\n        width: \"100%\",\n      },\n    },\n    flexTitle: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n    grower: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport const balancePretty = (uiString: string) => {\n  const numberString = uiString.split(\".\")[0];\n  const bignum = BigNumber.from(numberString);\n  if (bignum.gte(1000000)) {\n    return numberString.substring(0, numberString.length - 6) + \" M\";\n  } else if (uiString.length > 8) {\n    return uiString.substr(0, 8);\n  } else {\n    return uiString;\n  }\n};\n\nconst noClickThrough = (e: any) => {\n  e.stopPropagation();\n};\n\nexport const BasicAccountRender = (\n  account: MarketParsedTokenAccount,\n  isMigrationEligible: (address: string) => boolean,\n  nft: boolean,\n  displayBalance?: (account: NFTParsedTokenAccount) => boolean\n) => {\n  const { data: marketsData } = useMarketsMap(false);\n  const classes = useStyles();\n  const mintPrettyString = shortenAddress(account.mintKey);\n  const uri = nft ? account.image_256 : account.logo || account.uri;\n  const symbol = account.symbol || \"Unknown\";\n  const name = account.name || \"Unknown\";\n  const tokenId = account.tokenId;\n  const shouldDisplayBalance = !displayBalance || displayBalance(account);\n\n  const nftContent = (\n    <div className={classes.tokenOverviewContainer}>\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography>{symbol}</Typography>\n        <Typography>{name}</Typography>\n      </div>\n      <div>\n        <Typography>{mintPrettyString}</Typography>\n        <Typography style={{ wordBreak: \"break-all\" }}>{tokenId}</Typography>\n      </div>\n    </div>\n  );\n\n  const tokenContent = (\n    <div className={classes.tokenOverviewContainer}>\n      {account.markets ? (\n        <div className={classes.tokenMarketsList}>\n          {account.markets.map((market) =>\n            marketsData?.markets?.[market] ? (\n              <Button\n                key={market}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                endIcon={<Launch />}\n                href={marketsData.markets[market].link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={noClickThrough}\n              >\n                {marketsData.markets[market].name}\n              </Button>\n            ) : null\n          )}\n        </div>\n      ) : null}\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography variant=\"subtitle1\">{symbol}</Typography>\n      </div>\n      <div>\n        {\n          <Typography variant=\"body1\">\n            {account.isNativeAsset ? \"Native\" : mintPrettyString}\n          </Typography>\n        }\n      </div>\n      <div>\n        {shouldDisplayBalance ? (\n          <>\n            <Typography variant=\"body2\">{\"Balance\"}</Typography>\n            <Typography variant=\"h6\">\n              {balancePretty(account.uiAmountString)}\n            </Typography>\n          </>\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n\n  const migrationRender = (\n    <div className={classes.migrationAlert}>\n      <Alert severity=\"warning\">\n        <Typography variant=\"body2\">\n          This is a legacy asset eligible for migration.\n        </Typography>\n        <div>{tokenContent}</div>\n      </Alert>\n    </div>\n  );\n\n  return nft\n    ? nftContent\n    : isMigrationEligible(account.mintKey)\n    ? migrationRender\n    : tokenContent;\n};\n\ninterface MarketParsedTokenAccount extends NFTParsedTokenAccount {\n  markets?: string[];\n}\n\nexport default function TokenPicker({\n  value,\n  options,\n  RenderOption,\n  onChange,\n  isValidAddress,\n  getAddress,\n  disabled,\n  resetAccounts,\n  nft,\n  chainId,\n  error,\n  showLoader,\n  useTokenId,\n}: {\n  value: NFTParsedTokenAccount | null;\n  options: NFTParsedTokenAccount[];\n  RenderOption: ({\n    account,\n  }: {\n    account: NFTParsedTokenAccount;\n  }) => JSX.Element;\n  onChange: (newValue: NFTParsedTokenAccount | null) => Promise<void>;\n  isValidAddress?: (address: string) => boolean;\n  getAddress?: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount>;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  nft: boolean;\n  chainId: ChainId;\n  error?: string;\n  showLoader?: boolean;\n  useTokenId?: boolean;\n}) {\n  const classes = useStyles();\n  const [holderString, setHolderString] = useState(\"\");\n  const [tokenIdHolderString, setTokenIdHolderString] = useState(\"\");\n  const [loadingError, setLoadingError] = useState(\"\");\n  const [isLocalLoading, setLocalLoading] = useState(false);\n  const [dialogIsOpen, setDialogIsOpen] = useState(false);\n  const [selectionError, setSelectionError] = useState(\"\");\n\n  const targetChain = useSelector(selectTransferTargetChain);\n  const { data: marketsData } = useMarketsMap(true);\n\n  const openDialog = useCallback(() => {\n    setHolderString(\"\");\n    setSelectionError(\"\");\n    setDialogIsOpen(true);\n  }, []);\n\n  const closeDialog = useCallback(() => {\n    setDialogIsOpen(false);\n  }, []);\n\n  const handleSelectOption = useCallback(\n    async (option: NFTParsedTokenAccount) => {\n      setSelectionError(\"\");\n      let newOption = null;\n      try {\n        //Covalent balances tend to be stale, so we make an attempt to correct it at selection time.\n        if (getAddress && !option.isNativeAsset) {\n          newOption = await getAddress(option.mintKey, option.tokenId);\n          newOption = {\n            ...option,\n            ...newOption,\n            // keep logo and uri from covalent / market list / etc (otherwise would be overwritten by undefined)\n            logo: option.logo || newOption.logo,\n            uri: option.uri || newOption.uri,\n          } as NFTParsedTokenAccount;\n        } else {\n          newOption = option;\n        }\n        await onChange(newOption);\n        closeDialog();\n      } catch (e) {\n        console.error(e);\n        setSelectionError(\n          \"Unable to retrieve required information about this token. Ensure your wallet is connected, then refresh the list.\"\n        );\n      }\n    },\n    [getAddress, onChange, closeDialog]\n  );\n\n  const resetAccountsWrapper = useCallback(() => {\n    setHolderString(\"\");\n    setTokenIdHolderString(\"\");\n    setSelectionError(\"\");\n    resetAccounts && resetAccounts();\n  }, [resetAccounts]);\n\n  const searchFilter = useCallback(\n    (option: NFTParsedTokenAccount) => {\n      if (!holderString) {\n        return true;\n      }\n      const optionString = (\n        (option.publicKey || \"\") +\n        \" \" +\n        (option.mintKey || \"\") +\n        \" \" +\n        (option.symbol || \"\") +\n        \" \" +\n        (option.name || \" \")\n      ).toLowerCase();\n      const searchString = holderString.toLowerCase();\n      return optionString.includes(searchString);\n    },\n    [holderString]\n  );\n\n  const marketChainTokens = marketsData?.tokens?.[chainId];\n  const featuredMarkets = marketsData?.tokenMarkets?.[chainId]?.[targetChain];\n\n  const featuredOptions = useMemo(() => {\n    // only tokens have featured markets\n    if (!nft && featuredMarkets) {\n      const ownedMarketTokens = options\n        .filter(\n          (option: NFTParsedTokenAccount) => featuredMarkets?.[option.mintKey]\n        )\n        .map(\n          (option) =>\n            ({\n              ...option,\n              markets: featuredMarkets[option.mintKey].markets,\n            } as MarketParsedTokenAccount)\n        );\n      return [\n        ...ownedMarketTokens,\n        ...Object.keys(featuredMarkets)\n          .filter(\n            (mintKey) =>\n              !ownedMarketTokens.find((option) => option.mintKey === mintKey)\n          )\n          .map(\n            (mintKey) =>\n              ({\n                amount: \"0\",\n                decimals: 0,\n                markets: featuredMarkets[mintKey].markets,\n                mintKey,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\", // if we can't look up by address, we can select the market that isn't in the list of holdings, but can't proceed since the balance will be 0\n                symbol: marketChainTokens?.[mintKey]?.symbol,\n                logo: marketChainTokens?.[mintKey]?.logo,\n              } as MarketParsedTokenAccount)\n          ),\n      ].filter(searchFilter);\n    }\n    return [];\n  }, [nft, marketChainTokens, featuredMarkets, options, searchFilter]);\n\n  const nonFeaturedOptions = useMemo(() => {\n    return options.filter(\n      (option: NFTParsedTokenAccount) =>\n        searchFilter(option) &&\n        // only tokens have featured markets\n        (nft || !featuredMarkets?.[option.mintKey])\n    );\n  }, [nft, options, featuredMarkets, searchFilter]);\n\n  const localFind = useCallback(\n    (address: string, tokenIdHolderString: string) => {\n      return options.find(\n        (x) =>\n          x.mintKey === address &&\n          (!tokenIdHolderString || x.tokenId === tokenIdHolderString)\n      );\n    },\n    [options]\n  );\n\n  //This is the effect which allows pasting an address in directly\n  useEffect(() => {\n    if (!isValidAddress || !getAddress) {\n      return;\n    }\n    if (useTokenId && !tokenIdHolderString) {\n      return;\n    }\n    setLoadingError(\"\");\n    let cancelled = false;\n    if (isValidAddress(holderString)) {\n      const option = localFind(holderString, tokenIdHolderString);\n      if (option) {\n        handleSelectOption(option);\n        return () => {\n          cancelled = true;\n        };\n      }\n      setLocalLoading(true);\n      setLoadingError(\"\");\n      getAddress(\n        holderString,\n        useTokenId ? tokenIdHolderString : undefined\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            if (result) {\n              handleSelectOption(result);\n            }\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            setLoadingError(\"Could not find the specified address.\");\n          }\n        }\n      );\n    }\n    return () => (cancelled = true);\n  }, [\n    holderString,\n    isValidAddress,\n    getAddress,\n    handleSelectOption,\n    localFind,\n    tokenIdHolderString,\n    useTokenId,\n  ]);\n\n  //TODO reset button\n  //TODO debounce & save hotloaded options as an option before automatically selecting\n  //TODO sigfigs function on the balance strings\n\n  const localLoader = (\n    <div className={classes.alignCenter}>\n      <CircularProgress />\n      <Typography variant=\"body2\">\n        {showLoader ? \"Loading available tokens\" : \"Searching for results\"}\n      </Typography>\n    </div>\n  );\n\n  const displayLocalError = (\n    <div className={classes.alignCenter}>\n      <Typography variant=\"body2\" color=\"error\">\n        {loadingError || selectionError}\n      </Typography>\n    </div>\n  );\n\n  const dialog = (\n    <Dialog\n      onClose={closeDialog}\n      aria-labelledby=\"simple-dialog-title\"\n      open={dialogIsOpen}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle>\n        <div id=\"simple-dialog-title\" className={classes.flexTitle}>\n          <Typography variant=\"h5\">Select a token</Typography>\n          <div className={classes.grower} />\n          <Tooltip title=\"Reload tokens\">\n            <IconButton onClick={resetAccountsWrapper}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        <Alert severity=\"info\">\n          You should always check for markets and liquidity before sending\n          tokens.{\" \"}\n          <Link\n            href={AVAILABLE_MARKETS_URL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Click here to see available markets for wrapped tokens.\n          </Link>\n        </Alert>\n        <TextField\n          variant=\"outlined\"\n          label=\"Search name or paste address\"\n          value={holderString}\n          onChange={(event) => setHolderString(event.target.value)}\n          fullWidth\n          margin=\"normal\"\n        />\n        {useTokenId ? (\n          <TextField\n            variant=\"outlined\"\n            label=\"Token Id\"\n            value={tokenIdHolderString}\n            onChange={(event) => setTokenIdHolderString(event.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n        ) : null}\n        {isLocalLoading || showLoader ? (\n          localLoader\n        ) : loadingError || selectionError ? (\n          displayLocalError\n        ) : (\n          <List component=\"div\" className={classes.tokenList}>\n            {featuredOptions.length ? (\n              <>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Featured {CHAINS_BY_ID[chainId].name} &gt;{\" \"}\n                  {CHAINS_BY_ID[targetChain].name} markets{\" \"}\n                  <Tooltip\n                    title={`Markets for these ${CHAINS_BY_ID[chainId].name} tokens exist for the corresponding tokens on ${CHAINS_BY_ID[targetChain].name}`}\n                  >\n                    <InfoOutlined\n                      fontSize=\"small\"\n                      style={{ verticalAlign: \"text-bottom\" }}\n                    />\n                  </Tooltip>\n                </Typography>\n                {featuredOptions.map((option) => {\n                  return (\n                    <ListItem\n                      component=\"div\"\n                      button\n                      onClick={() => handleSelectOption(option)}\n                      key={\n                        option.publicKey +\n                        option.mintKey +\n                        (option.tokenId || \"\")\n                      }\n                    >\n                      <RenderOption account={option} />\n                    </ListItem>\n                  );\n                })}\n                {nonFeaturedOptions.length ? (\n                  <>\n                    <Divider style={{ marginTop: 8, marginBottom: 16 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Other Assets\n                    </Typography>\n                  </>\n                ) : null}\n              </>\n            ) : null}\n            {nonFeaturedOptions.map((option) => {\n              return (\n                <ListItem\n                  component=\"div\"\n                  button\n                  onClick={() => handleSelectOption(option)}\n                  key={\n                    option.publicKey + option.mintKey + (option.tokenId || \"\")\n                  }\n                >\n                  <RenderOption account={option} />\n                </ListItem>\n              );\n            })}\n            {featuredOptions.length || nonFeaturedOptions.length ? null : (\n              <div className={classes.alignCenter}>\n                <Typography>No results found</Typography>\n              </div>\n            )}\n          </List>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n\n  const selectionChip = (\n    <div className={classes.selectionButtonContainer}>\n      <Button\n        onClick={openDialog}\n        disabled={disabled}\n        variant=\"outlined\"\n        endIcon={<KeyboardArrowDownIcon />}\n        className={classes.selectionButton}\n      >\n        {value ? (\n          <RenderOption account={value} />\n        ) : (\n          <Typography color=\"textSecondary\">Select a token</Typography>\n        )}\n      </Button>\n    </div>\n  );\n\n  return (\n    <>\n      {dialog}\n      {value && nft ? <NFTViewer value={value} chainId={chainId} /> : null}\n      {selectionChip}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  NFTImplementation,\n  TokenImplementation,\n} from \"@certusone/wormhole-sdk\";\nimport { WormholeAbi__factory } from \"@certusone/wormhole-sdk/lib/esm/ethers-contracts/abi\";\nimport { getAddress as getEthAddress } from \"@ethersproject/address\";\nimport React, { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  getMigrationAssetMap,\n  WORMHOLE_V1_ETH_ADDRESS,\n} from \"../../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  ethTokenToParsedTokenAccount,\n  getEthereumNFT,\n  getEthereumToken,\n  isValidEthereumAddress,\n} from \"../../utils/ethereum\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\nconst isWormholev1 = (provider: any, address: string, chainId: ChainId) => {\n  if (chainId !== CHAIN_ID_ETH) {\n    return Promise.resolve(false);\n  }\n  const connection = WormholeAbi__factory.connect(\n    WORMHOLE_V1_ETH_ADDRESS,\n    provider\n  );\n  return connection.isWrappedAsset(address);\n};\n\ntype EthereumSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  chainId: ChainId;\n  nft?: boolean;\n};\n\nexport default function EvmTokenPicker(\n  props: EthereumSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    tokenAccounts,\n    disabled,\n    resetAccounts,\n    chainId,\n    nft,\n  } = props;\n  const { provider, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const selectedTokenAccount: NFTParsedTokenAccount | undefined = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n\n  const shouldDisplayBalance = useCallback(\n    (tokenAccount: NFTParsedTokenAccount) => {\n      const selectedMintMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.mintKey.toLowerCase() ===\n          tokenAccount.mintKey.toLowerCase();\n      //added just in case we start displaying NFT balances again.\n      const selectedTokenIdMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.tokenId === tokenAccount.tokenId;\n      return !!(\n        tokenAccount.isNativeAsset || //The native asset amount isn't taken from covalent, so can be trusted.\n        (selectedMintMatch && selectedTokenIdMatch)\n      );\n    },\n    [selectedTokenAccount]\n  );\n\n  const isMigrationEligible = useCallback(\n    (address: string) => {\n      const assetMap = getMigrationAssetMap(chainId);\n      return !!assetMap.get(getEthAddress(address));\n    },\n    [chainId]\n  );\n\n  const getAddress: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount> = useCallback(\n    async (address: string, tokenId?: string) => {\n      if (provider && signerAddress && isReady) {\n        try {\n          const tokenAccount = await (nft\n            ? getEthereumNFT(address, provider)\n            : getEthereumToken(address, provider));\n          if (!tokenAccount) {\n            return Promise.reject(\"Could not find the specified token.\");\n          }\n          if (nft && !tokenId) {\n            return Promise.reject(\"Token ID is required.\");\n          } else if (nft && tokenId) {\n            return ethNFTToNFTParsedTokenAccount(\n              tokenAccount as NFTImplementation,\n              tokenId,\n              signerAddress\n            );\n          } else {\n            return ethTokenToParsedTokenAccount(\n              tokenAccount as TokenImplementation,\n              signerAddress\n            );\n          }\n        } catch (e) {\n          return Promise.reject(\"Unable to retrive the specific token.\");\n        }\n      } else {\n        return Promise.reject({ error: \"Wallet is not connected.\" });\n      }\n    },\n    [isReady, nft, provider, signerAddress]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      let v1 = false;\n      try {\n        v1 = await isWormholev1(provider, account.publicKey, chainId);\n      } catch (e) {\n        //For now, just swallow this one.\n      }\n      const migration = isMigrationEligible(account.publicKey);\n      if (v1 === true && !migration) {\n        throw new Error(\n          \"Wormhole v1 assets cannot be transferred with this bridge.\"\n        );\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [chainId, onChange, provider, isMigrationEligible]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(\n        account,\n        isMigrationEligible,\n        nft || false,\n        shouldDisplayBalance\n      );\n    },\n    [nft, isMigrationEligible, shouldDisplayBalance]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      useTokenId={nft}\n      onChange={onChangeWrapper}\n      isValidAddress={isValidEthereumAddress}\n      getAddress={getAddress}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={tokenAccounts?.isFetching}\n      nft={nft || false}\n      chainId={chainId}\n    />\n  );\n}\n","import {\n  createStyles,\n  IconButton,\n  makeStyles,\n  Tooltip,\n} from \"@material-ui/core\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    inlineContentWrapper: {\n      display: \"inline-block\",\n      flexGrow: 1,\n    },\n    flexWrapper: {\n      \"& > *\": {\n        margin: \".5rem\",\n      },\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  })\n);\n\nexport default function RefreshButtonWrapper({\n  children,\n  callback,\n}: {\n  children: JSX.Element;\n  callback: () => any;\n}) {\n  const classes = useStyles();\n\n  const refreshWrapper = (\n    <div className={classes.flexWrapper}>\n      <div className={classes.inlineContentWrapper}>{children}</div>\n      <Tooltip title=\"Reload Tokens\">\n        <IconButton onClick={callback}>\n          <RefreshIcon />\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n\n  return refreshWrapper;\n}\n","import { ParsedTokenAccount } from \"../store/transferSlice\";\n\nexport const sortParsedTokenAccounts = (\n  a: ParsedTokenAccount,\n  b: ParsedTokenAccount\n) =>\n  a.isNativeAsset && !b.isNativeAsset\n    ? -1\n    : !a.isNativeAsset && b.isNativeAsset\n    ? 1\n    : a.symbol && b.symbol\n    ? a.symbol.localeCompare(b.symbol)\n    : a.symbol\n    ? -1\n    : b.symbol\n    ? 1\n    : 0;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport React, { useCallback, useMemo } from \"react\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  MIGRATION_ASSET_MAP,\n  WORMHOLE_V1_MINT_AUTHORITY,\n} from \"../../utils/consts\";\nimport { ExtractedMintInfo } from \"../../utils/solana\";\nimport { sortParsedTokenAccounts } from \"../../utils/sort\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype SolanaSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: NFTParsedTokenAccount | null) => void;\n  accounts: DataWrapper<NFTParsedTokenAccount[]> | null | undefined;\n  disabled: boolean;\n  mintAccounts:\n    | DataWrapper<Map<string, ExtractedMintInfo | null> | undefined>\n    | undefined;\n  resetAccounts: (() => void) | undefined;\n  nft?: boolean;\n};\n\nconst isMigrationEligible = (address: string) => {\n  return !!MIGRATION_ASSET_MAP.get(address);\n};\n\nexport default function SolanaSourceTokenSelector(\n  props: SolanaSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    disabled,\n    resetAccounts,\n    nft,\n    accounts,\n    mintAccounts,\n  } = props;\n  const tokenMap = useSolanaTokenMap();\n  const mintAddresses = useMemo(() => {\n    const output: string[] = [];\n    mintAccounts?.data?.forEach(\n      (mintAuth, mintAddress) => mintAddress && output.push(mintAddress)\n    );\n    return output;\n  }, [mintAccounts?.data]);\n  const metaplex = useMetaplexData(mintAddresses);\n\n  const memoizedTokenMap: Map<String, TokenInfo> = useMemo(() => {\n    const output = new Map<String, TokenInfo>();\n\n    if (tokenMap.data) {\n      for (const data of tokenMap.data) {\n        if (data && data.address) {\n          output.set(data.address, data);\n        }\n      }\n    }\n\n    return output;\n  }, [tokenMap]);\n\n  const getLogo = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.logo) ||\n        memoizedTokenMap.get(account.mintKey)?.logoURI ||\n        metaplex.data?.get(account.mintKey)?.data?.uri ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getSymbol = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.symbol) ||\n        memoizedTokenMap.get(account.mintKey)?.symbol ||\n        metaplex.data?.get(account.mintKey)?.data?.symbol ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getName = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.name) ||\n        memoizedTokenMap.get(account.mintKey)?.name ||\n        metaplex.data?.get(account.mintKey)?.data?.name ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  //This exists to remove NFTs from the list of potential options. It requires reading the metaplex data, so it would be\n  //difficult to do before this point.\n  const filteredOptions = useMemo(() => {\n    const array = accounts?.data || [];\n    const tokenList = array.filter((x) => {\n      const zeroBalance = x.amount === \"0\";\n      if (zeroBalance) {\n        return false;\n      }\n      const isNFT =\n        x.decimals === 0 && metaplex.data?.get(x.mintKey)?.data?.uri;\n      const is721CompatibleNFT =\n        isNFT && mintAccounts?.data?.get(x.mintKey)?.supply === \"1\";\n      return nft ? is721CompatibleNFT : !isNFT;\n    });\n    tokenList.sort(sortParsedTokenAccounts);\n    return tokenList;\n  }, [mintAccounts?.data, metaplex.data, nft, accounts]);\n\n  const accountsWithMetadata = useMemo(() => {\n    return filteredOptions.map((account) => {\n      const logo = getLogo(account);\n      const symbol = getSymbol(account);\n      const name = getName(account);\n\n      const uri = getLogo(account);\n\n      return {\n        ...account,\n        name,\n        symbol,\n        logo,\n        uri,\n      };\n    });\n  }, [filteredOptions, getLogo, getName, getSymbol]);\n\n  const isLoading =\n    accounts?.isFetching || metaplex.isFetching || tokenMap.isFetching;\n\n  const isWormholev1 = useCallback(\n    (address: string) => {\n      //This is a v1 wormhole token on testnet\n      //const testAddress = \"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\";\n\n      if (!props.mintAccounts?.data) {\n        return true; //These should never be null by this point\n      }\n      const mintAuthority = props.mintAccounts.data.get(address)?.mintAuthority;\n\n      if (!mintAuthority) {\n        return true; //We should never fail to pull the mint of an account.\n      }\n\n      if (mintAuthority === WORMHOLE_V1_MINT_AUTHORITY) {\n        return true; //This means the mint was created by the wormhole v1 contract, and we want to disallow its transfer.\n      }\n\n      return false;\n    },\n    [props.mintAccounts]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (newValue: NFTParsedTokenAccount | null) => {\n      let v1 = false;\n      if (newValue === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      try {\n        v1 = isWormholev1(newValue.mintKey);\n      } catch (e) {\n        //swallow for now\n      }\n\n      if (v1) {\n        Promise.reject(\n          \"Wormhole v1 assets should not be transferred with this bridge.\"\n        );\n      }\n\n      onChange(newValue);\n      return Promise.resolve();\n    },\n    [isWormholev1, onChange]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, isMigrationEligible, nft || false);\n    },\n    [nft]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={accountsWithMetadata}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={nft || false}\n      chainId={CHAIN_ID_SOLANA}\n    />\n  );\n}\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { MutableRefObject, useEffect, useMemo, useState } from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport interface TerraNativeBalances {\n  [index: string]: string;\n}\n\nexport default function useTerraNativeBalances(\n  walletAddress?: string,\n  refreshRef?: MutableRefObject<() => void>\n) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [balances, setBalances] = useState<TerraNativeBalances | undefined>({});\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    if (refreshRef) {\n      refreshRef.current = () => {\n        setRefresh(true);\n      };\n    }\n  }, [refreshRef]);\n  useEffect(() => {\n    setRefresh(false);\n    if (walletAddress) {\n      setIsLoading(true);\n      setBalances(undefined);\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.bank\n        .balance(walletAddress)\n        .then((coins) => {\n          // coins doesn't support reduce\n          const balancePairs = coins.map(({ amount, denom }) => [\n            denom,\n            amount,\n          ]);\n          const balance = balancePairs.reduce((obj, current) => {\n            obj[current[0].toString()] = current[1].toString();\n            return obj;\n          }, {} as TerraNativeBalances);\n          setIsLoading(false);\n          setBalances(balance);\n        })\n        .catch((e) => {\n          setIsLoading(false);\n          setBalances(undefined);\n        });\n    } else {\n      setIsLoading(false);\n      setBalances(undefined);\n    }\n  }, [walletAddress, refresh]);\n  const value = useMemo(() => ({ isLoading, balances }), [isLoading, balances]);\n  return value;\n}\n","import { CHAIN_ID_TERRA, isNativeDenom } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useTerraNativeBalances from \"../../hooks/useTerraNativeBalances\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { SUPPORTED_TERRA_TOKENS, TERRA_HOST } from \"../../utils/consts\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  isValidTerraAddress,\n  NATIVE_TERRA_DECIMALS,\n} from \"../../utils/terra\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype TerraTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function TerraTokenPicker(props: TerraTokenPickerProps) {\n  const { value, onChange, disabled } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_TERRA);\n  const nativeRefresh = useRef<() => void>(() => {});\n  const { balances, isLoading: nativeIsLoading } = useTerraNativeBalances(\n    walletAddress,\n    nativeRefresh\n  );\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const terraTokenArray = useMemo(() => {\n    const balancesItems =\n      balances && walletAddress\n        ? Object.keys(balances).map((denom) =>\n            // ({\n            //   protocol: \"native\",\n            //   symbol: formatNativeDenom(denom),\n            //   token: denom,\n            //   icon: getNativeTerraIcon(formatNativeDenom(denom)),\n            //   balance: balances[denom],\n            // } as TerraTokenMetadata)\n\n            //TODO support non-natives in the SUPPORTED_TERRA_TOKENS\n            //This token account makes a lot of assumptions\n            createParsedTokenAccount(\n              walletAddress,\n              denom,\n              balances[denom], //amount\n              NATIVE_TERRA_DECIMALS, //TODO actually get decimals rather than hardcode\n              0, //uiAmount is unused\n              formatUnits(balances[denom], NATIVE_TERRA_DECIMALS), //uiAmountString\n              formatNativeDenom(denom), // symbol\n              undefined, //name\n              getNativeTerraIcon(formatNativeDenom(denom)), //logo\n              true //is native asset\n            )\n          )\n        : [];\n    return balancesItems.filter((metadata) =>\n      SUPPORTED_TERRA_TOKENS.includes(metadata.mintKey)\n    );\n    // const values = tokenMap.data?.mainnet;\n    // const tokenMapItems = Object.values(values || {}) || [];\n    // return [...balancesItems, ...tokenMapItems];\n  }, [\n    walletAddress,\n    balances,\n    // tokenMap\n  ]);\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupTerraAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Wallet not connected\");\n      }\n      const lcd = new LCDClient(TERRA_HOST);\n      return lcd.wasm\n        .contractQuery(lookupAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(lookupAsset, {\n              balance: {\n                address: walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                return createParsedTokenAccount(\n                  walletAddress,\n                  lookupAsset,\n                  balance.balance.toString(),\n                  info.decimals,\n                  Number(formatUnits(balance.balance, info.decimals)),\n                  formatUnits(balance.balance, info.decimals),\n                  info.symbol,\n                  info.name\n                );\n              } else {\n                throw new Error(\"Failed to retrieve Terra account.\");\n              }\n            })\n        )\n        .catch(() => {\n          return Promise.reject();\n        });\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    return isValidTerraAddress(address) && !isNativeDenom(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={terraTokenArray || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupTerraAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_TERRA}\n    />\n  );\n}\n","//import Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetSourceParsedTokens from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  setSourceParsedTokenAccount as setNFTSourceParsedTokenAccount,\n  setSourceWalletAddress as setNFTSourceWalletAddress,\n} from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport {\n  ParsedTokenAccount,\n  setSourceParsedTokenAccount as setTransferSourceParsedTokenAccount,\n  setSourceWalletAddress as setTransferSourceWalletAddress,\n} from \"../../store/transferSlice\";\nimport EvmTokenPicker from \"./EvmTokenPicker\";\nimport RefreshButtonWrapper from \"./RefreshButtonWrapper\";\nimport SolanaTokenPicker from \"./SolanaTokenPicker\";\nimport TerraTokenPicker from \"./TerraTokenPicker\";\n\ntype TokenSelectorProps = {\n  disabled: boolean;\n  nft?: boolean;\n};\n\nexport const TokenSelector = (props: TokenSelectorProps) => {\n  const { disabled, nft } = props;\n  const dispatch = useDispatch();\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceParsedTokenAccount = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n  const walletIsReady = useIsWalletReady(lookupChain);\n\n  const setSourceParsedTokenAccount = nft\n    ? setNFTSourceParsedTokenAccount\n    : setTransferSourceParsedTokenAccount;\n  const setSourceWalletAddress = nft\n    ? setNFTSourceWalletAddress\n    : setTransferSourceWalletAddress;\n\n  const handleOnChange = useCallback(\n    (newTokenAccount: ParsedTokenAccount | null) => {\n      if (!newTokenAccount) {\n        dispatch(setSourceParsedTokenAccount(undefined));\n        dispatch(setSourceWalletAddress(undefined));\n      } else if (newTokenAccount !== undefined && walletIsReady.walletAddress) {\n        dispatch(setSourceParsedTokenAccount(newTokenAccount));\n        dispatch(setSourceWalletAddress(walletIsReady.walletAddress));\n      }\n    },\n    [\n      dispatch,\n      walletIsReady,\n      setSourceParsedTokenAccount,\n      setSourceWalletAddress,\n    ]\n  );\n\n  const maps = useGetSourceParsedTokens(nft);\n  const resetAccountWrapper = maps?.resetAccounts || (() => {}); //This should never happen.\n\n  //This is only for errors so bad that we shouldn't even mount the component\n  const fatalError =\n    isEVMChain(lookupChain) &&\n    lookupChain !== CHAIN_ID_TERRA &&\n    maps?.tokenAccounts?.error; //Terra & ETH can proceed because it has advanced mode\n\n  const content = fatalError ? (\n    <RefreshButtonWrapper callback={resetAccountWrapper}>\n      <Typography>{fatalError}</Typography>\n    </RefreshButtonWrapper>\n  ) : lookupChain === CHAIN_ID_SOLANA ? (\n    <SolanaTokenPicker\n      value={sourceParsedTokenAccount || null}\n      onChange={handleOnChange}\n      disabled={disabled}\n      accounts={maps?.tokenAccounts}\n      mintAccounts={maps?.mintAccounts}\n      resetAccounts={maps?.resetAccounts}\n      nft={nft}\n    />\n  ) : isEVMChain(lookupChain) ? (\n    <EvmTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      tokenAccounts={maps?.tokenAccounts}\n      resetAccounts={maps?.resetAccounts}\n      chainId={lookupChain}\n      nft={nft}\n    />\n  ) : lookupChain === CHAIN_ID_TERRA ? (\n    <TerraTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : (\n    <TextField\n      variant=\"outlined\"\n      placeholder=\"Asset\"\n      fullWidth\n      value={\"Not Implemented\"}\n      disabled={true}\n    />\n  );\n\n  return <div>{content}</div>;\n};\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { incrementStep, setSourceChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsSourceComplete,\n  selectNFTShouldLockFields,\n  selectNFTSourceBalanceString,\n  selectNFTSourceChain,\n  selectNFTSourceError,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const uiAmountString = useSelector(selectNFTSourceBalanceString);\n  const error = useSelector(selectNFTSourceError);\n  const isSourceComplete = useSelector(selectNFTIsSourceComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select an NFT to send through the Wormhole NFT Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/nft-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              endIcon={<VerifiedUser />}\n            >\n              NFT Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS_WITH_NFT_SUPPORT}\n      />\n      {isEVMChain(sourceChain) ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs which implement ERC-721 are supported.\n        </Alert>\n      ) : null}\n      {sourceChain === CHAIN_ID_SOLANA ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs with a supply of 1 are supported.\n        </Alert>\n      ) : null}\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} nft={true} />\n        </div>\n      ) : null}\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer 1 NFT of</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        <span>from</span>\n        <SmartAddress\n          chainId={sourceChain}\n          address={sourceParsedTokenAccount?.publicKey}\n        />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n      {sourceParsedTokenAccount ? (\n        <NFTViewer value={sourceParsedTokenAccount} chainId={sourceChain} />\n      ) : null}\n    </>\n  );\n}\n","import {\n  canonicalAddress,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { arrayify, zeroPad } from \"@ethersproject/bytes\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setTargetAddressHex as setNFTTargetAddressHex } from \"../store/nftSlice\";\nimport {\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n  selectTransferTargetParsedTokenAccount,\n} from \"../store/selectors\";\nimport { setTargetAddressHex as setTransferTargetAddressHex } from \"../store/transferSlice\";\n\nfunction useSyncTargetAddress(shouldFire: boolean, nft?: boolean) {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const { signerAddress } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const targetAsset = useSelector(\n    nft ? selectNFTTargetAsset : selectTransferTargetAsset\n  );\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const targetTokenAccountPublicKey = targetParsedTokenAccount?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const setTargetAddressHex = nft\n    ? setNFTTargetAddressHex\n    : setTransferTargetAddressHex;\n  useEffect(() => {\n    if (shouldFire) {\n      let cancelled = false;\n      if (isEVMChain(targetChain) && signerAddress) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(zeroPad(arrayify(signerAddress), 32))\n          )\n        );\n      }\n      // TODO: have the user explicitly select an account on solana\n      else if (\n        !nft && // only support existing, non-derived token accounts for token transfers (nft flow doesn't check balance)\n        targetChain === CHAIN_ID_SOLANA &&\n        targetTokenAccountPublicKey\n      ) {\n        // use the target's TokenAccount if it exists\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(new PublicKey(targetTokenAccountPublicKey).toBytes(), 32)\n            )\n          )\n        );\n      } else if (targetChain === CHAIN_ID_SOLANA && solPK && targetAsset) {\n        // otherwise, use the associated token account (which we create in the case it doesn't exist)\n        (async () => {\n          try {\n            const associatedTokenAccount =\n              await Token.getAssociatedTokenAddress(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                new PublicKey(targetAsset), // this might error\n                solPK\n              );\n            if (!cancelled) {\n              dispatch(\n                setTargetAddressHex(\n                  uint8ArrayToHex(zeroPad(associatedTokenAccount.toBytes(), 32))\n                )\n              );\n            }\n          } catch (e) {\n            if (!cancelled) {\n              dispatch(setTargetAddressHex(undefined));\n            }\n          }\n        })();\n      } else if (\n        targetChain === CHAIN_ID_TERRA &&\n        terraWallet &&\n        terraWallet.walletAddress\n      ) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(canonicalAddress(terraWallet.walletAddress), 32)\n            )\n          )\n        );\n      } else {\n        dispatch(setTargetAddressHex(undefined));\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    dispatch,\n    shouldFire,\n    targetChain,\n    signerAddress,\n    solPK,\n    targetAsset,\n    targetTokenAccountPublicKey,\n    terraWallet,\n    nft,\n    setTargetAddressHex,\n  ]);\n}\n\nexport default useSyncTargetAddress;\n","import {\n  CHAIN_ID_SOLANA,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTShouldLockFields,\n  selectNFTSourceChain,\n  selectNFTTargetAddressHex,\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectNFTTargetError,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport StepDescription from \"../StepDescription\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const chains = useMemo(\n    () => CHAINS_WITH_NFT_SUPPORT.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAsset = useSelector(selectNFTTargetAsset);\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  let tokenId;\n  try {\n    tokenId =\n      originChain === CHAIN_ID_SOLANA && originAsset\n        ? BigNumber.from(\n            new PublicKey(hexToUint8Array(originAsset)).toBytes()\n          ).toString()\n        : originTokenId;\n  } catch (e) {\n    tokenId = originTokenId;\n  }\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  const error = useSelector(selectNFTTargetError);\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  useSyncTargetAddress(!shouldLockFields, true);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        select\n        fullWidth\n        variant=\"outlined\"\n        value={targetChain}\n        onChange={handleTargetChange}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        className={classes.transferField}\n        value={readableTargetAddress}\n        disabled={true}\n      />\n      {targetAsset !== ethers.constants.AddressZero ? (\n        <>\n          <TextField\n            label=\"Token Address\"\n            fullWidth\n            variant=\"outlined\"\n            className={classes.transferField}\n            value={targetAsset || \"\"}\n            disabled={true}\n          />\n          {isEVMChain(targetChain) ? (\n            <TextField\n              variant=\"outlined\"\n              label=\"TokenId\"\n              fullWidth\n              className={classes.transferField}\n              value={tokenId || \"\"}\n              disabled={true}\n            />\n          ) : null}\n        </>\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your NFT.\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary methodType=\"nft\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete} //|| !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTTargetAddressHex,\n  selectNFTTargetChain,\n} from \"../../store/selectors\";\nimport { hexToNativeString } from \"@certusone/wormhole-sdk\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useSelector(selectNFTTargetAddressHex);\n  const targetAddressNative = hexToNativeString(targetAddress, targetChain);\n\n  const explainerContent =\n    targetChain && targetAddressNative ? (\n      <>\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={targetAddressNative} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport { setStep } from \"../../store/nftSlice\";\nimport {\n  selectNFTActiveStep,\n  selectNFTIsRedeemComplete,\n  selectNFTIsRedeeming,\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n} from \"../../store/selectors\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction NFT() {\n  useCheckIfWormholeWrapped(true);\n  useFetchTargetAsset(true);\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectNFTActiveStep);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const isRedeemComplete = useSelector(selectNFTIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))}>Target</StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled>Send NFT</StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n          >\n            Redeem NFT\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default NFT;\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport {\n  Button,\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { getMetaplexData } from \"../hooks/useMetaplexData\";\nimport { COLORS } from \"../muiTheme\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BETA_CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  getEthereumNFT,\n  isNFT,\n  isValidEthereumAddress,\n} from \"../utils/ethereum\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport NFTViewer from \"./TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  originHeader: {\n    marginTop: theme.spacing(4),\n  },\n  viewButtonWrapper: {\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n  loaderWrapper: {\n    margin: theme.spacing(2),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function NFTOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const { provider, signerAddress } = useEthereumProvider();\n  const [lookupChain, setLookupChain] = useState(CHAIN_ID_ETH);\n  const { isReady, statusMessage } = useIsWalletReady(lookupChain);\n  const [lookupAsset, setLookupAsset] = useState(\"\");\n  const [lookupTokenId, setLookupTokenId] = useState(\"\");\n  const [lookupError, setLookupError] = useState(\"\");\n  const [parsedTokenAccount, setParsedTokenAccount] = useState<\n    NFTParsedTokenAccount | undefined\n  >(undefined);\n  const [originInfo, setOriginInfo] = useState<\n    WormholeWrappedNFTInfo | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleChainChange = useCallback((event) => {\n    setLookupChain(event.target.value);\n  }, []);\n  const handleAssetChange = useCallback((event) => {\n    setLookupAsset(event.target.value);\n  }, []);\n  const handleTokenIdChange = useCallback((event) => {\n    setLookupTokenId(event.target.value);\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    setLookupError(\"\");\n    setParsedTokenAccount(undefined);\n    setOriginInfo(undefined);\n    if (\n      isReady &&\n      provider &&\n      signerAddress &&\n      isEVMChain(lookupChain) &&\n      lookupAsset &&\n      lookupTokenId\n    ) {\n      if (isValidEthereumAddress(lookupAsset)) {\n        (async () => {\n          setIsLoading(true);\n          try {\n            const token = await getEthereumNFT(lookupAsset, provider);\n            const result = await isNFT(token);\n            if (result) {\n              const newParsedTokenAccount = await ethNFTToNFTParsedTokenAccount(\n                token,\n                lookupTokenId,\n                signerAddress\n              );\n              const info = await getOriginalAssetEth(\n                getNFTBridgeAddressForChain(lookupChain),\n                provider,\n                lookupAsset,\n                lookupTokenId,\n                lookupChain\n              );\n              if (!cancelled) {\n                setIsLoading(false);\n                setParsedTokenAccount(newParsedTokenAccount);\n                setOriginInfo(info);\n              }\n            } else if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          } catch (e) {\n            console.error(e);\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          }\n        })();\n      } else {\n        setLookupError(\"Invalid address\");\n      }\n    } else if (lookupChain === CHAIN_ID_SOLANA && lookupAsset) {\n      (async () => {\n        try {\n          setIsLoading(true);\n          const [metadata] = await getMetaplexData([lookupAsset]);\n          if (metadata) {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            const info = await getOriginalAssetSol(\n              connection,\n              SOL_NFT_BRIDGE_ADDRESS,\n              lookupAsset\n            );\n            if (!cancelled) {\n              setIsLoading(false);\n              setParsedTokenAccount({\n                amount: \"0\",\n                decimals: 0,\n                mintKey: lookupAsset,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\",\n                uri: metadata.data.uri,\n              });\n              setOriginInfo(info);\n            }\n          } else {\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\"Error fetching metadata\");\n            }\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            setIsLoading(false);\n            setLookupError(\"Invalid token\");\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    isReady,\n    provider,\n    signerAddress,\n    lookupChain,\n    lookupAsset,\n    lookupTokenId,\n  ]);\n  const readableAddress =\n    originInfo &&\n    originInfo.chainId &&\n    originInfo.assetAddress &&\n    hexToNativeString(\n      uint8ArrayToHex(originInfo.assetAddress),\n      originInfo.chainId\n    );\n  const displayError =\n    (isEVMChain(lookupChain) && statusMessage) || lookupError;\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <HeaderText white small>\n          NFT Origin Verifier\n        </HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>\n          <Alert severity=\"info\" variant=\"outlined\">\n            This page allows you to find where a Wormhole-bridged NFT was\n            originally minted so you can verify its authenticity.\n          </Alert>\n          <TextField\n            select\n            variant=\"outlined\"\n            label=\"Chain\"\n            value={lookupChain}\n            onChange={handleChainChange}\n            fullWidth\n            margin=\"normal\"\n          >\n            {CHAINS_WITH_NFT_SUPPORT.filter(({ id }) =>\n              isBeta ? true : !BETA_CHAINS.includes(id)\n            ).map(({ id, name }) => (\n              <MenuItem key={id} value={id}>\n                {name}\n              </MenuItem>\n            ))}\n          </TextField>\n          {isEVMChain(lookupChain) ? (\n            <KeyAndBalance chainId={lookupChain} />\n          ) : null}\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n            label=\"Paste an address\"\n            value={lookupAsset}\n            onChange={handleAssetChange}\n          />\n          {isEVMChain(lookupChain) ? (\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              label=\"Paste a tokenId\"\n              value={lookupTokenId}\n              onChange={handleTokenIdChange}\n            />\n          ) : null}\n          {displayError ? (\n            <Typography align=\"center\" color=\"error\">\n              {displayError}\n            </Typography>\n          ) : null}\n          {isLoading ? (\n            <div className={classes.loaderWrapper}>\n              <CircularProgress />\n            </div>\n          ) : null}\n          {parsedTokenAccount ? (\n            <NFTViewer value={parsedTokenAccount} chainId={lookupChain} />\n          ) : null}\n          {originInfo ? (\n            <>\n              <Typography\n                variant=\"h5\"\n                gutterBottom\n                className={classes.originHeader}\n              >\n                Origin Info\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Chain: {CHAINS_BY_ID[originInfo.chainId].name}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Address: {readableAddress}\n              </Typography>\n              {originInfo.chainId === CHAIN_ID_SOLANA ? null : (\n                <Typography variant=\"body2\" gutterBottom>\n                  Token ID: {originInfo.tokenId}\n                </Typography>\n              )}\n              <div className={classes.viewButtonWrapper}>\n                {originInfo.chainId === CHAIN_ID_SOLANA ? (\n                  <Button\n                    href={`https://solscan.io/token/${readableAddress}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Solscan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_BSC ? (\n                  <Button\n                    href={`https://bscscan.com/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on BscScan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_POLYGON ? (\n                  <Button\n                    href={`https://opensea.io/assets/matic/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                ) : (\n                  <Button\n                    href={`https://opensea.io/assets/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                )}\n              </div>\n            </>\n          ) : null}\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  WSOL_ADDRESS,\n} from \"@certusone/wormhole-sdk\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { useCallback, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleRedeem } from \"../../hooks/useHandleRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  ROPSTEN_WETH_ADDRESS,\n  WBNB_ADDRESS,\n  WETH_ADDRESS,\n  WMATIC_ADDRESS,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport { SolanaCreateAssociatedAddressAlternate } from \"../SolanaCreateAssociatedAddress\";\nimport StepDescription from \"../StepDescription\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Redeem() {\n  const { handleClick, handleNativeClick, disabled, showLoader } =\n    useHandleRedeem();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  //TODO better check, probably involving a hook & the VAA\n  const isEthNative =\n    targetChain === CHAIN_ID_ETH &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WETH_ADDRESS.toLowerCase();\n  const isEthRopstenNative =\n    targetChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n    targetAsset &&\n    targetAsset.toLowerCase() === ROPSTEN_WETH_ADDRESS.toLowerCase();\n  const isBscNative =\n    targetChain === CHAIN_ID_BSC &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WBNB_ADDRESS.toLowerCase();\n  const isPolygonNative =\n    targetChain === CHAIN_ID_POLYGON &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WMATIC_ADDRESS.toLowerCase();\n  const isSolNative =\n    targetChain === CHAIN_ID_SOLANA &&\n    targetAsset &&\n    targetAsset === WSOL_ADDRESS;\n  const isNativeEligible =\n    isEthNative ||\n    isEthRopstenNative ||\n    isBscNative ||\n    isPolygonNative ||\n    isSolNative;\n  const [useNativeRedeem, setUseNativeRedeem] = useState(true);\n  const toggleNativeRedeem = useCallback(() => {\n    setUseNativeRedeem(!useNativeRedeem);\n  }, [useNativeRedeem]);\n\n  return (\n    <>\n      <StepDescription>Receive the tokens on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      {isNativeEligible && (\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={useNativeRedeem}\n              onChange={toggleNativeRedeem}\n              color=\"primary\"\n            />\n          }\n          label=\"Automatically unwrap to native currency\"\n        />\n      )}\n      {targetChain === CHAIN_ID_SOLANA ? (\n        <SolanaCreateAssociatedAddressAlternate />\n      ) : null}\n\n      <ButtonWithLoader\n        //TODO disable when the associated token account is confirmed to not exist\n        disabled={!isReady || disabled}\n        onClick={\n          isNativeEligible && useNativeRedeem ? handleNativeClick : handleClick\n        }\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n    </>\n  );\n}\n\nexport default Redeem;\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport {\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { getEvmChainId } from \"../../utils/consts\";\nimport {\n  ethTokenToParsedTokenAccount,\n  getEthereumToken,\n} from \"../../utils/ethereum\";\n\nconst useStyles = makeStyles((theme) => ({\n  addButton: {\n    display: \"block\",\n    margin: `${theme.spacing(1)}px auto 0px`,\n  },\n}));\n\nexport default function AddToMetamask() {\n  const classes = useStyles();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const handleClick = useCallback(() => {\n    if (provider && targetAsset && signerAddress && hasCorrectEvmNetwork) {\n      (async () => {\n        try {\n          const token = await getEthereumToken(targetAsset, provider);\n          const { symbol, decimals } = await ethTokenToParsedTokenAccount(\n            token,\n            signerAddress\n          );\n          const ethereum = (await detectEthereumProvider()) as any;\n          ethereum.request({\n            method: \"wallet_watchAsset\",\n            params: {\n              type: \"ERC20\", // In the future, other standards will be supported\n              options: {\n                address: targetAsset, // The address of the token contract\n                symbol: (\n                  symbol ||\n                  sourceParsedTokenAccount?.symbol ||\n                  \"wh\"\n                ).substr(0, 5), // A ticker symbol or shorthand, up to 5 characters\n                decimals, // The number of token decimals\n                // image: string; // A string url of the token logo\n              },\n            },\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      })();\n    }\n  }, [\n    provider,\n    targetAsset,\n    signerAddress,\n    hasCorrectEvmNetwork,\n    sourceParsedTokenAccount,\n  ]);\n  return provider &&\n    signerAddress &&\n    targetAsset &&\n    isEVMChain(targetChain) &&\n    hasCorrectEvmNetwork ? (\n    <Button\n      onClick={handleClick}\n      size=\"small\"\n      variant=\"outlined\"\n      className={classes.addButton}\n    >\n      Add to Metamask\n    </Button>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport AddToMetamask from \"./AddToMetamask\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The tokens will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <AddToMetamask />\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer More Tokens!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  transferFromEth,\n  transferFromEthNative,\n  transferFromSolana,\n  transferFromTerra,\n  transferNativeSol,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { parseUnits, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n  selectTransferIsTargetComplete,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/transferSlice\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport useTransferTargetAddressHex from \"./useTransferTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals);\n    const receipt = isNative\n      ? await transferFromEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        )\n      : await transferFromEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          tokenAddress,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  isNative: boolean,\n  originAddressStr?: string,\n  originChain?: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const amountParsed = parseUnits(amount, decimals).toBigInt();\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const promise = isNative\n      ? transferNativeSol(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          amountParsed,\n          targetAddress,\n          targetChain\n        )\n      : transferFromSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          fromAddress,\n          mintAddress,\n          amountParsed,\n          targetAddress,\n          targetChain,\n          originAddress,\n          originChain\n        );\n    const transaction = await promise;\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals).toString();\n    const msgs = await transferFromTerra(\n      wallet.terraAddress,\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      asset,\n      amountParsed,\n      targetChain,\n      targetAddress\n    );\n\n    const result = await postWithFees(\n      wallet,\n      msgs,\n      \"Wormhole - Initiate Transfer\"\n    );\n\n    const info = await waitForTerraExecution(result);\n    dispatch(setTransferTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const amount = useSelector(selectTransferAmount);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddress = useTransferTargetAddressHex();\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const decimals = sourceParsedTokenAccount?.decimals;\n  const isNative = sourceParsedTokenAccount?.isNativeAsset || false;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        isNative,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress &&\n      decimals !== undefined\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        isNative,\n        originAsset,\n        originChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_TERRA &&\n      !!terraWallet &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceTokenPublicKey,\n    sourceAsset,\n    amount,\n    decimals,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    isNative,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferTargetAddressHex() {\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { ChainId, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type EvmMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst ERC20_BASIC_ABI = [\n  \"function name() view returns (string name)\",\n  \"function symbol() view returns (string symbol)\",\n  \"function decimals() view returns (uint8 decimals)\",\n];\n\nconst handleError = () => {\n  return undefined;\n};\n\nconst fetchSingleMetadata = async (\n  address: string,\n  provider: Provider\n): Promise<EvmMetadata> => {\n  const contract = new ethers.Contract(address, ERC20_BASIC_ABI, provider);\n  const [name, symbol, decimals] = await Promise.all([\n    contract.name().catch(handleError),\n    contract.symbol().catch(handleError),\n    contract.decimals().catch(handleError),\n  ]);\n  return { tokenName: name, symbol, decimals };\n};\n\nconst fetchEthMetadata = async (addresses: string[], provider: Provider) => {\n  const promises: Promise<EvmMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, provider));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, EvmMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useEvmMetadata(\n  addresses: string[],\n  chainId: ChainId\n): DataWrapper<Map<string, EvmMetadata>> {\n  const { isReady } = useIsWalletReady(chainId, false);\n  const { provider } = useEthereumProvider();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, EvmMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length && provider && isReady && isEVMChain(chainId)) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchEthMetadata(addresses, provider).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, provider, isReady, chainId]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useEvmMetadata;\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport type TerraMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (address: string, lcd: LCDClient) =>\n  lcd.wasm\n    .contractQuery(address, {\n      token_info: {},\n    })\n    .then(\n      ({ symbol, name: tokenName, decimals }: any) =>\n        ({\n          symbol,\n          tokenName,\n          decimals,\n        } as TerraMetadata)\n    );\n\nconst fetchTerraMetadata = async (addresses: string[]) => {\n  const lcd = new LCDClient(TERRA_HOST);\n  const promises: Promise<TerraMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, lcd));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, TerraMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useTerraMetadata = (\n  addresses: string[]\n): DataWrapper<Map<string, TerraMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, TerraMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchTerraMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useTerraMetadata;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectTerraTokenMap } from \"../store/selectors\";\nimport {\n  errorTerraTokenMap,\n  fetchTerraTokenMap,\n  receiveTerraTokenMap,\n} from \"../store/tokenSlice\";\nimport { TERRA_TOKEN_METADATA_URL } from \"../utils/consts\";\n\nexport type TerraTokenMetadata = {\n  protocol: string;\n  symbol: string;\n  token: string;\n  icon: string;\n  name?: string;\n  balance?: string; // populated by native tokens, could move to a type that extends this\n};\n\nexport type TerraTokenMap = {\n  mainnet: {\n    [address: string]: TerraTokenMetadata;\n  };\n};\n\nconst useTerraTokenMap = (shouldFire: boolean): DataWrapper<TerraTokenMap> => {\n  const terraTokenMap = useSelector(selectTerraTokenMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (terraTokenMap.data === undefined ||\n      (terraTokenMap.data === null && !terraTokenMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getTerraTokenMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return terraTokenMap;\n};\n\nconst getTerraTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchTerraTokenMap());\n  axios.get(TERRA_TOKEN_METADATA_URL).then(\n    (response) => {\n      dispatch(receiveTerraTokenMap(response.data as TerraTokenMap));\n    },\n    (error) => {\n      dispatch(errorTerraTokenMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useTerraTokenMap;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useMemo } from \"react\";\nimport { DataWrapper, getEmptyDataWrapper } from \"../store/helpers\";\nimport { logoOverrides } from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useEvmMetadata, { EvmMetadata } from \"./useEvmMetadata\";\nimport useMetaplexData from \"./useMetaplexData\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraMetadata, { TerraMetadata } from \"./useTerraMetadata\";\nimport useTerraTokenMap, { TerraTokenMap } from \"./useTerraTokenMap\";\n\nexport type GenericMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  //decimals?: number;\n  //TODO more items\n  raw?: any;\n};\n\nconst constructSolanaMetadata = (\n  addresses: string[],\n  solanaTokenMap: DataWrapper<TokenInfo[]>,\n  metaplexData: DataWrapper<Map<string, Metadata | undefined> | undefined>\n) => {\n  const isFetching = solanaTokenMap.isFetching || metaplexData?.isFetching;\n  const error = solanaTokenMap.error || metaplexData?.isFetching;\n  const receivedAt = solanaTokenMap.receivedAt && metaplexData?.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metaplex = metaplexData?.data?.get(address);\n    const tokenInfo = solanaTokenMap.data?.find((x) => x.address === address);\n    //Both this and the token picker, at present, give priority to the tokenmap\n    const obj = {\n      symbol: metaplex?.data?.symbol || tokenInfo?.symbol || undefined,\n      logo: tokenInfo?.logoURI || undefined, //TODO is URI on metaplex actually the logo? If not, where is it?\n      tokenName: metaplex?.data?.name || tokenInfo?.name || undefined,\n      decimals: tokenInfo?.decimals || undefined, //TODO decimals are actually on the mint, not the metaplex account.\n      raw: metaplex,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructTerraMetadata = (\n  addresses: string[],\n  tokenMap: DataWrapper<TerraTokenMap>,\n  terraMetadata: DataWrapper<Map<string, TerraMetadata>>\n) => {\n  const isFetching = tokenMap.isFetching || terraMetadata.isFetching;\n  const error = tokenMap.error || terraMetadata.error;\n  const receivedAt = tokenMap.receivedAt && terraMetadata.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metadata = terraMetadata.data?.get(address);\n    const tokenInfo = tokenMap.data?.mainnet[address];\n    const obj = {\n      symbol: tokenInfo?.symbol || metadata?.symbol || undefined,\n      logo: tokenInfo?.icon || metadata?.logo || undefined,\n      tokenName: tokenInfo?.name || metadata?.tokenName || undefined,\n      decimals: metadata?.decimals || undefined,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructEthMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, EvmMetadata> | null>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: logoOverrides.get(address) || meta?.logo || undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nexport default function useMetadata(\n  chainId: ChainId,\n  addresses: string[]\n): DataWrapper<Map<string, GenericMetadata>> {\n  const terraTokenMap = useTerraTokenMap(chainId === CHAIN_ID_TERRA);\n  const solanaTokenMap = useSolanaTokenMap();\n\n  const solanaAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_SOLANA ? addresses : [];\n  }, [chainId, addresses]);\n  const terraAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_TERRA ? addresses : [];\n  }, [chainId, addresses]);\n  const ethereumAddresses = useMemo(() => {\n    return isEVMChain(chainId) ? addresses : [];\n  }, [chainId, addresses]);\n\n  const metaplexData = useMetaplexData(solanaAddresses);\n  const terraMetadata = useTerraMetadata(terraAddresses);\n  const ethMetadata = useEvmMetadata(ethereumAddresses, chainId);\n\n  const output: DataWrapper<Map<string, GenericMetadata>> = useMemo(\n    () =>\n      chainId === CHAIN_ID_SOLANA\n        ? constructSolanaMetadata(solanaAddresses, solanaTokenMap, metaplexData)\n        : isEVMChain(chainId)\n        ? constructEthMetadata(ethereumAddresses, ethMetadata)\n        : chainId === CHAIN_ID_TERRA\n        ? constructTerraMetadata(terraAddresses, terraTokenMap, terraMetadata)\n        : getEmptyDataWrapper(),\n    [\n      chainId,\n      solanaAddresses,\n      solanaTokenMap,\n      metaplexData,\n      ethereumAddresses,\n      ethMetadata,\n      terraAddresses,\n      terraMetadata,\n      terraTokenMap,\n    ]\n  );\n\n  return output;\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetParsedTokenAccount } from \"../store/transferSlice\";\nimport { getEvmChainId, SOLANA_HOST, TERRA_HOST } from \"../utils/consts\";\nimport { createParsedTokenAccount } from \"./useGetSourceParsedTokenAccounts\";\nimport useMetadata from \"./useMetadata\";\n\nfunction useGetTargetParsedTokenAccounts() {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetAssetArrayed = useMemo(\n    () => (targetAsset ? [targetAsset] : []),\n    [targetAsset]\n  );\n  const metadata = useMetadata(targetChain, targetAssetArrayed);\n  const tokenName =\n    (targetAsset && metadata.data?.get(targetAsset)?.tokenName) || undefined;\n  const symbol =\n    (targetAsset && metadata.data?.get(targetAsset)?.symbol) || undefined;\n  const logo =\n    (targetAsset && metadata.data?.get(targetAsset)?.logo) || undefined;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const hasResolvedMetadata = metadata.data || metadata.error;\n  useEffect(() => {\n    // targetParsedTokenAccount is cleared on setTargetAsset, but we need to clear it on wallet changes too\n    dispatch(setTargetParsedTokenAccount(undefined));\n    if (!targetAsset || !hasResolvedMetadata) {\n      return;\n    }\n    let cancelled = false;\n\n    if (targetChain === CHAIN_ID_TERRA && terraWallet) {\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.wasm\n        .contractQuery(targetAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(targetAsset, {\n              balance: {\n                address: terraWallet.walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                dispatch(\n                  setTargetParsedTokenAccount(\n                    createParsedTokenAccount(\n                      \"\",\n                      \"\",\n                      balance.balance.toString(),\n                      info.decimals,\n                      Number(formatUnits(balance.balance, info.decimals)),\n                      formatUnits(balance.balance, info.decimals),\n                      symbol,\n                      tokenName,\n                      logo\n                    )\n                  )\n                );\n              }\n            })\n        );\n    }\n    if (targetChain === CHAIN_ID_SOLANA && solPK) {\n      let mint;\n      try {\n        mint = new PublicKey(targetAsset);\n      } catch (e) {\n        return;\n      }\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      connection\n        .getParsedTokenAccountsByOwner(solPK, { mint })\n        .then(({ value }) => {\n          if (!cancelled) {\n            if (value.length) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    value[0].pubkey.toString(),\n                    value[0].account.data.parsed?.info?.mint,\n                    value[0].account.data.parsed?.info?.tokenAmount?.amount,\n                    value[0].account.data.parsed?.info?.tokenAmount?.decimals,\n                    value[0].account.data.parsed?.info?.tokenAmount?.uiAmount,\n                    value[0].account.data.parsed?.info?.tokenAmount\n                      ?.uiAmountString,\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            } else {\n              // TODO: error state\n            }\n          }\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    if (\n      isEVMChain(targetChain) &&\n      provider &&\n      signerAddress &&\n      hasCorrectEvmNetwork\n    ) {\n      const token = TokenImplementation__factory.connect(targetAsset, provider);\n      token\n        .decimals()\n        .then((decimals) => {\n          token.balanceOf(signerAddress).then((n) => {\n            if (!cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  // TODO: verify accuracy\n                  createParsedTokenAccount(\n                    signerAddress,\n                    token.address,\n                    n.toString(),\n                    decimals,\n                    Number(formatUnits(n, decimals)),\n                    formatUnits(n, decimals),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          });\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    targetAsset,\n    targetChain,\n    provider,\n    signerAddress,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    hasCorrectEvmNetwork,\n    hasResolvedMetadata,\n    symbol,\n    tokenName,\n    logo,\n  ]);\n}\n\nexport default useGetTargetParsedTokenAccounts;\n","import { Button } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  setSourceAsset,\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestSignedVAAHex,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { ChainId, hexToNativeString } from \"@certusone/wormhole-sdk\";\n\nexport function RegisterNowButtonCore({\n  originChain,\n  originAsset,\n  targetChain,\n}: {\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  targetChain: ChainId;\n}) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  // user might be in the middle of a different attest\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const canSwitch = originChain && originAsset && !signedVAAHex;\n  const handleClick = useCallback(() => {\n    const nativeAsset =\n      originChain && hexToNativeString(originAsset, originChain);\n    if (originChain && originAsset && nativeAsset && canSwitch) {\n      dispatch(setSourceChain(originChain));\n      dispatch(setSourceAsset(nativeAsset));\n      dispatch(setTargetChain(targetChain));\n      dispatch(setStep(2));\n      history.push(\"/register\");\n    }\n  }, [dispatch, canSwitch, originChain, originAsset, targetChain, history]);\n  if (!canSwitch) return null;\n  return (\n    <Button\n      variant=\"outlined\"\n      size=\"small\"\n      style={{ display: \"block\", margin: \"4px auto 0px\" }}\n      onClick={handleClick}\n    >\n      Register Now\n    </Button>\n  );\n}\n\nexport default function RegisterNowButton() {\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  return (\n    <RegisterNowButtonCore\n      originChain={originChain}\n      originAsset={originAsset}\n      targetChain={targetChain}\n    />\n  );\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  hexToNativeString,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetTargetParsedTokenAccounts from \"../../hooks/useGetTargetParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport {\n  selectTransferAmount,\n  selectTransferIsTargetComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceChain,\n  selectTransferTargetAddressHex,\n  selectTransferTargetAsset,\n  selectTransferTargetAssetWrapper,\n  selectTransferTargetBalanceString,\n  selectTransferTargetChain,\n  selectTransferTargetError,\n  selectTransferTargetParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { incrementStep, setTargetChain } from \"../../store/transferSlice\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport StepDescription from \"../StepDescription\";\nimport RegisterNowButton from \"./RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport const useTargetInfo = () => {\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const tokenName = targetParsedTokenAccount?.name;\n  const symbol = targetParsedTokenAccount?.symbol;\n  const logo = targetParsedTokenAccount?.logo;\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  return useMemo(\n    () => ({\n      targetChain,\n      targetAsset,\n      tokenName,\n      symbol,\n      logo,\n      readableTargetAddress,\n    }),\n    [targetChain, targetAsset, tokenName, symbol, logo, readableTargetAddress]\n  );\n};\n\nfunction Target() {\n  useGetTargetParsedTokenAccounts();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const { error: targetAssetError, data } = useSelector(\n    selectTransferTargetAssetWrapper\n  );\n  const {\n    targetChain,\n    targetAsset,\n    tokenName,\n    symbol,\n    logo,\n    readableTargetAddress,\n  } = useTargetInfo();\n  const uiAmountString = useSelector(selectTransferTargetBalanceString);\n  const transferAmount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferTargetError);\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  const isLoading = !statusMessage && !targetAssetError && !data;\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      targetChain,\n      targetAsset,\n      readableTargetAddress\n    );\n  useSyncTargetAddress(!shouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={true}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      {readableTargetAddress ? (\n        <>\n          {targetAsset ? (\n            <div className={classes.transferField}>\n              <Typography variant=\"subtitle2\">Bridged tokens:</Typography>\n              <Typography component=\"div\">\n                <SmartAddress\n                  chainId={targetChain}\n                  address={targetAsset}\n                  symbol={symbol}\n                  tokenName={tokenName}\n                  logo={logo}\n                  variant=\"h6\"\n                />\n                {`(Amount: ${transferAmount})`}\n              </Typography>\n            </div>\n          ) : null}\n          <div className={classes.transferField}>\n            <Typography variant=\"subtitle2\">Sent to:</Typography>\n            <Typography component=\"div\">\n              <SmartAddress\n                chainId={targetChain}\n                address={readableTargetAddress}\n                variant=\"h6\"\n              />\n              {`(Current balance: ${uiAmountString || \"0\"})`}\n            </Typography>\n          </div>\n        </>\n      ) : null}\n      {targetChain === CHAIN_ID_SOLANA && targetAsset ? (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={readableTargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your tokens.\n        </Typography>\n        {(isEVMChain(targetChain) || targetChain === CHAIN_ID_TERRA) && (\n          <GasEstimateSummary methodType=\"transfer\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete || !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={isLoading}\n        error={\n          statusMessage || (isLoading ? undefined : error || targetAssetError)\n        }\n      >\n        Next\n      </ButtonWithLoader>\n      {!statusMessage && data && !data.doesExist ? <RegisterNowButton /> : null}\n    </>\n  );\n}\n\nexport default Target;\n","import { ChainId, CHAIN_ID_ETH, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Box, Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  AVAILABLE_MARKETS_URL,\n  CHAINS_BY_ID,\n  MULTI_CHAIN_TOKENS,\n} from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    textAlign: \"center\",\n  },\n  line: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction WormholeWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n      <Typography component=\"div\" className={classes.line}>\n        The tokens you will receive are{\" \"}\n        <Box fontWeight={900} display=\"inline\">\n          Wormhole Wrapped Tokens\n        </Box>{\" \"}\n        and will need to be exchanged for native assets.\n      </Typography>\n      <Typography component=\"div\">\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction MultichainWarning({\n  symbol,\n  targetChain,\n}: {\n  symbol: string;\n  targetChain: ChainId;\n}) {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography\n        variant=\"h6\"\n        className={classes.line}\n      >{`You will not receive native ${symbol} on ${CHAINS_BY_ID[targetChain].name}`}</Typography>\n      <Typography\n        className={classes.line}\n      >{`To receive native ${symbol}, you will have to perform a swap with the wrapped tokens once you are done bridging.`}</Typography>\n      <Typography>\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction RewardsWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      Lido stETH rewards can only be received on Ethereum. Use the value\n      accruing wrapper token wstETH instead.\n    </Alert>\n  );\n}\n\nexport default function TokenWarning({\n  sourceChain,\n  sourceAsset,\n  originChain,\n  targetChain,\n  targetAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (\n    !(originChain && targetChain && targetAsset && sourceChain && sourceAsset)\n  ) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const isWormholeWrapped = originChain !== targetChain;\n  const multichainSymbol =\n    MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress] || undefined;\n  const isMultiChain = !!multichainSymbol;\n  const isRewardsToken =\n    searchableAddress === \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\" &&\n    sourceChain === CHAIN_ID_ETH;\n\n  const showMultiChainWarning = isMultiChain && isWormholeWrapped;\n  const showWrappedWarning = !isMultiChain && isWormholeWrapped; //Multichain warning is more important\n  const showRewardsWarning = isRewardsToken;\n\n  return (\n    <>\n      {showMultiChainWarning ? (\n        <MultichainWarning\n          symbol={multichainSymbol || \"tokens\"}\n          targetChain={targetChain}\n        />\n      ) : null}\n      {showWrappedWarning ? <WormholeWrappedWarning /> : null}\n      {showRewardsWarning ? <RewardsWarning /> : null}\n    </>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowDownward } from \"@material-ui/icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferOriginChain,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, MULTI_CHAIN_TOKENS } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\nimport TokenWarning from \"./TokenWarning\";\n\nfunction SendConfirmationContent({\n  open,\n  onClose,\n  onClick,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onClick: () => void;\n}) {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const { targetChain, targetAsset, symbol, tokenName, logo } = useTargetInfo();\n  const originChain = useSelector(selectTransferOriginChain);\n\n  //TODO this check is essentially duplicated.\n  const deservesTimeout = useMemo(() => {\n    if (originChain && sourceParsedTokenAccount?.mintKey) {\n      const searchableAddress = isEVMChain(originChain)\n        ? sourceParsedTokenAccount.mintKey.toLowerCase()\n        : sourceParsedTokenAccount.mintKey;\n      return (\n        originChain !== targetChain &&\n        !!MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress]\n      );\n    } else {\n      return false;\n    }\n  }, [originChain, targetChain, sourceChain, sourceParsedTokenAccount]);\n  const timeoutDuration = 5;\n\n  const [countdown, setCountdown] = useState(\n    deservesTimeout ? timeoutDuration : 0\n  );\n\n  useEffect(() => {\n    if (!deservesTimeout || countdown === 0) {\n      return;\n    }\n    let cancelled = false;\n\n    setInterval(() => {\n      if (!cancelled) {\n        setCountdown((state) => state - 1);\n      }\n    }, 1000);\n\n    return () => {\n      cancelled = true;\n    };\n  }, [deservesTimeout, countdown]);\n\n  useEffect(() => {\n    if (open && deservesTimeout) {\n      //Countdown starts on mount, but we actually want it to start on open\n      setCountdown(timeoutDuration);\n    }\n  }, [open, deservesTimeout]);\n\n  const sendConfirmationContent = (\n    <>\n      <DialogTitle>Are you sure?</DialogTitle>\n      <DialogContent>\n        {targetAsset ? (\n          <div style={{ textAlign: \"center\", marginBottom: 16 }}>\n            <Typography variant=\"subtitle1\" style={{ marginBottom: 8 }}>\n              You are about to perform this transfer:\n            </Typography>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={sourceChain}\n              parsedTokenAccount={sourceParsedTokenAccount}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[sourceChain].name}\n              </Typography>\n            </div>\n            <div style={{ paddingTop: 4 }}>\n              <ArrowDownward fontSize=\"inherit\" />\n            </div>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[targetChain].name}\n              </Typography>\n            </div>\n          </div>\n        ) : null}\n        <TokenWarning\n          sourceAsset={sourceParsedTokenAccount?.mintKey}\n          sourceChain={sourceChain}\n          originChain={originChain}\n          targetAsset={targetAsset ?? undefined}\n          targetChain={targetChain}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClick}\n          size={\"medium\"}\n          disabled={!!countdown}\n        >\n          {!!countdown ? countdown.toString() : \"Confirm\"}\n        </Button>\n      </DialogActions>\n    </>\n  );\n\n  return sendConfirmationContent;\n}\n\nexport default function SendConfirmationDialog({\n  open,\n  onClick,\n  onClose,\n}: {\n  open: boolean;\n  onClick: () => void;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <SendConfirmationContent\n        open={open}\n        onClose={onClose}\n        onClick={onClick}\n      />\n    </Dialog>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useAllowance from \"../../hooks/useAllowance\";\nimport { useHandleTransfer } from \"../../hooks/useHandleTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetError,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport StepDescription from \"../StepDescription\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport SendConfirmationDialog from \"./SendConfirmationDialog\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleTransfer();\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n  const handleTransferClick = useCallback(() => {\n    setIsConfirmOpen(true);\n  }, []);\n  const handleConfirmClick = useCallback(() => {\n    handleClick();\n    setIsConfirmOpen(false);\n  }, [handleClick]);\n  const handleConfirmClose = useCallback(() => {\n    setIsConfirmOpen(false);\n  }, []);\n\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const sourceAmount = useSelector(selectTransferAmount);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceDecimals = sourceParsedTokenAccount?.decimals;\n  const sourceIsNative = sourceParsedTokenAccount?.isNativeAsset;\n  const sourceAmountParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    sourceAmount &&\n    parseUnits(sourceAmount, sourceDecimals).toBigInt();\n  const oneParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    parseUnits(\"1\", sourceDecimals).toBigInt();\n  const transferTx = useSelector(selectTransferTransferTx);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n\n  const error = useSelector(selectTransferTargetError);\n  const [allowanceError, setAllowanceError] = useState(\"\");\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const [shouldApproveUnlimited, setShouldApproveUnlimited] = useState(false);\n  const toggleShouldApproveUnlimited = useCallback(\n    () => setShouldApproveUnlimited(!shouldApproveUnlimited),\n    [shouldApproveUnlimited]\n  );\n\n  const {\n    sufficientAllowance,\n    isAllowanceFetching,\n    isApproveProcessing,\n    approveAmount,\n  } = useAllowance(\n    sourceChain,\n    sourceAsset,\n    sourceAmountParsed || undefined,\n    sourceIsNative\n  );\n\n  const approveButtonNeeded = isEVMChain(sourceChain) && !sufficientAllowance;\n  const notOne = shouldApproveUnlimited || sourceAmountParsed !== oneParsed;\n  const isDisabled =\n    !isReady ||\n    isWrongWallet ||\n    disabled ||\n    isAllowanceFetching ||\n    isApproveProcessing;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || allowanceError || undefined;\n\n  const approveExactAmount = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(BigInt(sourceAmountParsed)).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount, sourceAmountParsed]);\n  const approveUnlimited = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(ethers.constants.MaxUint256.toBigInt()).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount]);\n\n  return (\n    <>\n      <StepDescription>\n        Transfer the tokens to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {approveButtonNeeded ? (\n        <>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={shouldApproveUnlimited}\n                onChange={toggleShouldApproveUnlimited}\n                color=\"primary\"\n              />\n            }\n            label=\"Approve Unlimited Tokens\"\n          />\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={\n              shouldApproveUnlimited ? approveUnlimited : approveExactAmount\n            }\n            showLoader={isAllowanceFetching || isApproveProcessing}\n            error={errorMessage}\n          >\n            {\"Approve \" +\n              (shouldApproveUnlimited ? \"Unlimited\" : sourceAmount) +\n              ` Token${notOne ? \"s\" : \"\"}`}\n          </ButtonWithLoader>\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={handleTransferClick}\n            showLoader={showLoader}\n            error={errorMessage}\n          >\n            Transfer\n          </ButtonWithLoader>\n          <SendConfirmationDialog\n            open={isConfirmOpen}\n            onClick={handleConfirmClick}\n            onClose={handleConfirmClose}\n          />\n        </>\n      )}\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import {\n  approveEth,\n  ChainId,\n  getAllowanceEth,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { selectTransferIsApproving } from \"../store/selectors\";\nimport { setIsApproving } from \"../store/transferSlice\";\nimport { getTokenBridgeAddressForChain } from \"../utils/consts\";\n\nexport default function useAllowance(\n  chainId: ChainId,\n  tokenAddress?: string,\n  transferAmount?: BigInt,\n  sourceIsNative?: boolean\n) {\n  const dispatch = useDispatch();\n  const [allowance, setAllowance] = useState<BigInt | null>(null);\n  const [isAllowanceFetching, setIsAllowanceFetching] = useState(false);\n  const isApproveProcessing = useSelector(selectTransferIsApproving);\n  const { signer } = useEthereumProvider();\n  const sufficientAllowance =\n    !isEVMChain(chainId) ||\n    sourceIsNative ||\n    (allowance && transferAmount && allowance >= transferAmount);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (isEVMChain(chainId) && tokenAddress && signer && !isApproveProcessing) {\n      setIsAllowanceFetching(true);\n      getAllowanceEth(\n        getTokenBridgeAddressForChain(chainId),\n        tokenAddress,\n        signer\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            setAllowance(result.toBigInt());\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            //setError(\"Unable to retrieve allowance\"); //TODO set an error\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [chainId, tokenAddress, signer, isApproveProcessing]);\n\n  const approveAmount: (amount: BigInt) => Promise<any> = useMemo(() => {\n    return !isEVMChain(chainId) || !tokenAddress || !signer\n      ? (amount: BigInt) => {\n          return Promise.resolve();\n        }\n      : (amount: BigInt) => {\n          dispatch(setIsApproving(true));\n          return approveEth(\n            getTokenBridgeAddressForChain(chainId),\n            tokenAddress,\n            signer,\n            BigNumber.from(amount)\n          ).then(\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.resolve();\n            },\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.reject();\n            }\n          );\n        };\n  }, [chainId, tokenAddress, signer, dispatch]);\n\n  return useMemo(\n    () => ({\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    }),\n    [\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    ]\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferSourceChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const transferTx = useSelector(selectTransferTransferTx);\n\n  const explainerString = \"The tokens have entered the bridge!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { ArrowForward, VerifiedUser } from \"@material-ui/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSourceComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceBalanceString,\n  selectTransferSourceChain,\n  selectTransferSourceError,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  incrementStep,\n  setAmount,\n  setSourceChain,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport {\n  BSC_MIGRATION_ASSET_MAP,\n  CHAINS,\n  ETH_MIGRATION_ASSET_MAP,\n  MIGRATION_ASSET_MAP,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport NumberTextField from \"../NumberTextField\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n  chainSelectWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  chainSelectContainer: {\n    flexBasis: \"100%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n  chainSelectArrow: {\n    position: \"relative\",\n    top: \"12px\",\n    [theme.breakpoints.down(\"sm\")]: { transform: \"rotate(90deg)\" },\n  },\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetChainOptions = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const parsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const hasParsedTokenAccount = !!parsedTokenAccount;\n  const isSolanaMigration =\n    sourceChain === CHAIN_ID_SOLANA &&\n    !!parsedTokenAccount &&\n    !!MIGRATION_ASSET_MAP.get(parsedTokenAccount.mintKey);\n  const isEthereumMigration =\n    sourceChain === CHAIN_ID_ETH &&\n    !!parsedTokenAccount &&\n    !!ETH_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isBscMigration =\n    sourceChain === CHAIN_ID_BSC &&\n    !!parsedTokenAccount &&\n    !!BSC_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isMigrationAsset =\n    isSolanaMigration || isEthereumMigration || isBscMigration;\n  const uiAmountString = useSelector(selectTransferSourceBalanceString);\n  const amount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferSourceError);\n  const isSourceComplete = useSelector(selectTransferIsSourceComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleMigrationClick = useCallback(() => {\n    if (sourceChain === CHAIN_ID_SOLANA) {\n      history.push(\n        `/migrate/Solana/${parsedTokenAccount?.mintKey}/${parsedTokenAccount?.publicKey}`\n      );\n    } else if (sourceChain === CHAIN_ID_ETH) {\n      history.push(`/migrate/Ethereum/${parsedTokenAccount?.mintKey}`);\n    } else if (sourceChain === CHAIN_ID_BSC) {\n      history.push(`/migrate/BinanceSmartChain/${parsedTokenAccount?.mintKey}`);\n    }\n  }, [history, parsedTokenAccount, sourceChain]);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAmountChange = useCallback(\n    (event) => {\n      dispatch(setAmount(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (uiAmountString) {\n      dispatch(setAmount(uiAmountString));\n    }\n  }, [dispatch, uiAmountString]);\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select tokens to send through the Wormhole Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/token-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              endIcon={<VerifiedUser />}\n            >\n              Token Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <div className={classes.chainSelectWrapper}>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Source</Typography>\n          <ChainSelect\n            select\n            variant=\"outlined\"\n            fullWidth\n            value={sourceChain}\n            onChange={handleSourceChange}\n            disabled={shouldLockFields}\n            chains={CHAINS}\n          />\n        </div>\n        <div className={classes.chainSelectArrow}>\n          <ArrowForward style={{ margin: \"0px 8px\" }} />\n        </div>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Target</Typography>\n          <ChainSelect\n            variant=\"outlined\"\n            select\n            fullWidth\n            value={targetChain}\n            onChange={handleTargetChange}\n            disabled={shouldLockFields}\n            chains={targetChainOptions}\n          />\n        </div>\n      </div>\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} />\n        </div>\n      ) : null}\n      {isMigrationAsset ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={handleMigrationClick}\n        >\n          Go to Migration Page\n        </Button>\n      ) : (\n        <>\n          <LowBalanceWarning chainId={sourceChain} />\n          {hasParsedTokenAccount ? (\n            <NumberTextField\n              variant=\"outlined\"\n              label=\"Amount\"\n              fullWidth\n              className={classes.transferField}\n              value={amount}\n              onChange={handleAmountChange}\n              disabled={shouldLockFields}\n              onMaxClick={\n                uiAmountString && !parsedTokenAccount.isNativeAsset\n                  ? handleMaxClick\n                  : undefined\n              }\n            />\n          ) : null}\n          <ButtonWithLoader\n            disabled={!isSourceComplete}\n            onClick={handleNextClick}\n            showLoader={false}\n            error={statusMessage || error}\n          >\n            Next\n          </ButtonWithLoader>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  const sourceAmount = useSelector(selectTransferAmount);\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer {sourceAmount}</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        {sourceWalletAddress ? (\n          <>\n            <span>from</span>\n            <SmartAddress chainId={sourceChain} address={sourceWalletAddress} />\n          </>\n        ) : null}\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n    </>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const {\n    targetChain,\n    readableTargetAddress,\n    targetAsset,\n    symbol,\n    tokenName,\n    logo,\n  } = useTargetInfo();\n\n  const explainerContent =\n    targetChain && readableTargetAddress ? (\n      <>\n        {targetAsset ? (\n          <>\n            <span>and receive</span>\n            <SmartAddress\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n          </>\n        ) : null}\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={readableTargetAddress} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport {\n  selectTransferActiveStep,\n  selectTransferIsRedeemComplete,\n  selectTransferIsRedeeming,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n} from \"../../store/selectors\";\nimport { setStep } from \"../../store/transferSlice\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Transfer() {\n  useCheckIfWormholeWrapped();\n  useFetchTargetAsset();\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectTransferActiveStep);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const isRedeemComplete = useSelector(selectTransferIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton\n            disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n            onClick={() => dispatch(setStep(1))}\n          >\n            Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled>Send tokens</StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n          >\n            Redeem tokens\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Transfer;\n","import { MARKETS } from \"@project-serum/serum\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport interface Markets {\n  [coin: string]: {\n    publicKey?: PublicKey;\n    name: string;\n    deprecated?: boolean;\n  };\n}\n\nexport const serumMarkets = (() => {\n  const m: Markets = {};\n  MARKETS.forEach((market) => {\n    const coin = market.name.split(\"/\")[0];\n    if (m[coin]) {\n      // Only override a market if it's not deprecated\t.\n      if (!m.deprecated) {\n        m[coin] = {\n          publicKey: market.address,\n          name: market.name.split(\"/\").join(\"\"),\n        };\n      }\n    } else {\n      m[coin] = {\n        publicKey: market.address,\n        name: market.name.split(\"/\").join(\"\"),\n      };\n    }\n  });\n\n  m[\"USDC\"] = m[\"USDT\"];\n\n  return m;\n})();\n\n// Create a cached API wrapper to avoid rate limits.\nclass PriceStore {\n  cache: Map<String, number | undefined>;\n\n  constructor() {\n    this.cache = new Map();\n  }\n\n  async getPrice(\n    connection: Connection,\n    marketName: string\n  ): Promise<number | undefined> {\n    return new Promise((resolve, reject) => {\n      if (this.cache.get(marketName) === undefined) {\n        fetch(`https://serum-api.bonfida.com/orderbooks/${marketName}`).then(\n          (resp) => {\n            resp.json().then((resp) => {\n              if (resp.data.asks === null || resp.data.bids === null) {\n                resolve(undefined);\n              } else if (\n                resp.data.asks.length === 0 &&\n                resp.data.bids.length === 0\n              ) {\n                resolve(undefined);\n              } else if (resp.data.asks.length === 0) {\n                resolve(resp.data.bids[0].price);\n              } else if (resp.data.bids.length === 0) {\n                resolve(resp.data.asks[0].price);\n              } else {\n                const mid =\n                  (resp.data.asks[0].price + resp.data.bids[0].price) / 2.0;\n                this.cache.set(marketName, mid);\n                resolve(this.cache.get(marketName));\n              }\n            });\n          }\n        );\n      } else {\n        return resolve(this.cache.get(marketName));\n      }\n    });\n  }\n}\n\nexport const priceStore = new PriceStore();\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  BSC_TOKEN_BRIDGE_ADDRESS,\n  CHAINS_BY_ID,\n  COVALENT_GET_TOKENS_URL,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n  logoOverrides,\n  POLYGON_TOKEN_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_CUSTODY_ADDRESS,\n  TERRA_SWAPRATE_URL,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { priceStore, serumMarkets } from \"../utils/SolanaPriceStore\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  NATIVE_TERRA_DECIMALS,\n} from \"../utils/terra\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraNativeBalances from \"./useTerraNativeBalances\";\n\nexport type TVL = {\n  logo?: string;\n  symbol?: string;\n  name?: string;\n  amount: string;\n  totalValue?: number;\n  quotePrice?: number;\n  assetAddress: string;\n  originChainId: ChainId;\n  originChain: string;\n  decimals?: number;\n};\n\nconst BAD_PRICES_BY_CHAIN = {\n  [CHAIN_ID_BSC]: [\n    \"0x04132bf45511d03a58afd4f1d36a29d229ccc574\",\n    \"0xa79bd679ce21a2418be9e6f88b2186c9986bbe7d\",\n    \"0x931c3987040c90b6db09981c7c91ba155d3fa31f\",\n  ],\n  [CHAIN_ID_ETH]: [\"0x3845badade8e6dff049820680d1f14bd3903a5d0\"],\n};\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): TVL[] => {\n  const output: TVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    if (item.balance > 0 && item.contract_address) {\n      const hasUnreliablePrice =\n        BAD_PRICES_BY_CHAIN[chainId]?.includes(item.contract_address) ||\n        item.quote_rate > 1000000;\n      output.push({\n        logo:\n          logoOverrides.get(item.contract_address) ||\n          item.logo_url ||\n          undefined,\n        symbol: item.contract_ticker_symbol || undefined,\n        name: item.contract_name || undefined,\n        amount: formatUnits(item.balance, item.contract_decimals),\n        totalValue: hasUnreliablePrice ? 0 : item.quote,\n        quotePrice: hasUnreliablePrice ? 0 : item.quote_rate,\n        assetAddress: item.contract_address,\n        originChainId: chainId,\n        originChain: CHAINS_BY_ID[chainId].name,\n        decimals: item.contract_decimals,\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>,\n  solanaPrices: DataWrapper<Map<string, number | undefined>>\n) => {\n  const output: TVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data ||\n    solanaPrices.isFetching ||\n    !solanaPrices.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const mint = item.account.data.parsed?.info?.mint?.toString();\n    const price = solanaPrices?.data?.get(mint);\n    output.push({\n      logo: genericMetadata?.logo || undefined,\n      symbol: genericMetadata?.symbol || undefined,\n      name: genericMetadata?.tokenName || undefined,\n      amount: item.account.data.parsed?.info?.tokenAmount?.uiAmount || \"0\", //Should always be defined.\n      totalValue: price\n        ? parseFloat(\n            item.account.data.parsed?.info?.tokenAmount?.uiAmount || \"0\"\n          ) * price\n        : undefined,\n      quotePrice: price,\n      assetAddress: mint,\n      originChainId: CHAIN_ID_SOLANA,\n      originChain: \"Solana\",\n      decimals: item.account.data.parsed?.info?.tokenAmount?.decimals,\n    });\n  });\n\n  return output;\n};\n\nconst useTerraTVL = () => {\n  const { isLoading: isTerraNativeLoading, balances: terraNativeBalances } =\n    useTerraNativeBalances(TERRA_TOKEN_BRIDGE_ADDRESS);\n  const [terraSwaprates, setTerraSwaprates] = useState<any[]>([]);\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      try {\n        const result = await axios.get(TERRA_SWAPRATE_URL);\n        if (!cancelled && result && result.data) {\n          setTerraSwaprates(result.data);\n        }\n      } catch (e) {}\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n  const terraTVL = useMemo(() => {\n    const arr: TVL[] = [];\n    if (terraNativeBalances) {\n      const denoms = Object.keys(terraNativeBalances);\n      denoms.forEach((denom) => {\n        const amount = formatUnits(\n          terraNativeBalances[denom],\n          NATIVE_TERRA_DECIMALS\n        );\n        const symbol = formatNativeDenom(denom);\n        let matchingSwap = undefined;\n        let quotePrice = 0;\n        let totalValue = 0;\n        try {\n          matchingSwap = terraSwaprates.find((swap) => swap.denom === denom);\n          quotePrice =\n            denom === \"uusd\"\n              ? 1\n              : matchingSwap\n              ? 1 / Number(matchingSwap.swaprate)\n              : 0;\n          totalValue =\n            denom === \"uusd\"\n              ? Number(\n                  formatUnits(terraNativeBalances[denom], NATIVE_TERRA_DECIMALS)\n                )\n              : matchingSwap\n              ? Number(amount) / Number(matchingSwap.swaprate)\n              : 0;\n        } catch (e) {}\n        arr.push({\n          amount,\n          assetAddress: denom,\n          originChain: CHAINS_BY_ID[CHAIN_ID_TERRA].name,\n          originChainId: CHAIN_ID_TERRA,\n          quotePrice,\n          totalValue,\n          logo: getNativeTerraIcon(symbol),\n          symbol,\n          decimals: NATIVE_TERRA_DECIMALS,\n        });\n      });\n    }\n    return arr;\n  }, [terraNativeBalances, terraSwaprates]);\n  return useMemo(\n    () => ({ terraTVL, isLoading: isTerraNativeLoading }),\n    [isTerraNativeLoading, terraTVL]\n  );\n};\n\nconst useSolanaPrices = (\n  mintAddresses: string[],\n  tokenMap: DataWrapper<TokenInfo[]>\n) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [priceMap, setPriceMap] = useState<Map<\n    string,\n    number | undefined\n  > | null>(null);\n  const [error] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!mintAddresses || !mintAddresses.length || !tokenMap.data) {\n      return;\n    }\n\n    const relevantMarkets: {\n      publicKey?: PublicKey;\n      name: string;\n      deprecated?: boolean;\n      mintAddress: string;\n    }[] = [];\n    mintAddresses.forEach((address) => {\n      const tokenInfo = tokenMap.data?.find((x) => x.address === address);\n      const relevantMarket = tokenInfo && serumMarkets[tokenInfo.symbol];\n      if (relevantMarket) {\n        relevantMarkets.push({ ...relevantMarket, mintAddress: address });\n      }\n    });\n\n    setIsLoading(true);\n    const priceMap: Map<string, number | undefined> = new Map();\n    const connection = new Connection(SOLANA_HOST);\n    const promises: Promise<void>[] = [];\n    //Load all the revelevant markets into the priceMap\n    relevantMarkets.forEach((market) => {\n      const marketName: string = market.name;\n      promises.push(\n        priceStore\n          .getPrice(connection, marketName)\n          .then((result) => {\n            priceMap.set(market.mintAddress, result);\n          })\n          .catch((e) => {\n            //Do nothing, we just won't load this price.\n            return Promise.resolve();\n          })\n      );\n    });\n\n    Promise.all(promises).then(() => {\n      //By this point all the relevant markets are loaded.\n      if (!cancelled) {\n        setPriceMap(priceMap);\n        setIsLoading(false);\n      }\n    });\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [mintAddresses, tokenMap.data]);\n\n  return useMemo(() => {\n    return {\n      isFetching: isLoading,\n      data: priceMap || null,\n      error: error,\n      receivedAt: null,\n    };\n  }, [error, priceMap, isLoading]);\n};\n\nconst useTVL = (): DataWrapper<TVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n  const solanaTokenMap = useSolanaTokenMap();\n  const solanaPrices = useSolanaPrices(mintAddresses, solanaTokenMap);\n\n  const { isLoading: isTerraLoading, terraTVL } = useTerraTVL();\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata, solanaPrices),\n    [solanaCustodyTokens, solanaMetadata, solanaPrices]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_ETH, ETH_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_BSC, BSC_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_TOKEN_BRIDGE_ADDRESS,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [\n      ...ethTVL,\n      ...bscTVL,\n      ...polygonTVL,\n      ...solanaTVL,\n      ...terraTVL,\n    ];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        solanaCustodyTokensLoading ||\n        isTerraLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    polygonTVL,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n    isTerraLoading,\n    terraTVL,\n  ]);\n};\n\nexport default useTVL;\n","import React from \"react\";\n\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst TablePaginationActions = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n};\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nexport default TablePaginationActions;\n","import { IconButton } from \"@material-ui/core\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {\n  AddCircleOutline,\n  KeyboardArrowDown,\n  KeyboardArrowRight,\n  RemoveCircleOutline,\n} from \"@material-ui/icons\";\nimport React from \"react\";\nimport {\n  useExpanded,\n  useGlobalFilter,\n  useGroupBy,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport TablePaginationActions from \"./TablePaginationActions\";\n\nconst stopProp = (e) => {\n  e.stopPropagation();\n};\n\nconst EnhancedTable = ({ columns, data, skipPageReset, initialState = {} }) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    rows,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: !skipPageReset,\n      initialState,\n    },\n    useGlobalFilter,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination\n  );\n\n  const handlePageChange = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (event) => {\n    setPageSize(Number(event.target.value));\n  };\n\n  // Render the UI for your table\n  return (\n    <>\n      <TableContainer>\n        <MaUTable {...getTableProps()}>\n          <TableHead>\n            {headerGroups.map((headerGroup) => (\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <TableCell\n                    {...(column.id === \"selection\"\n                      ? column.getHeaderProps()\n                      : column.getHeaderProps(column.getSortByToggleProps()))}\n                    align={\n                      // TODO: better way to get column?\n                      columns.find((c) => c.Header === column.Header)?.align ||\n                      \"left\"\n                    }\n                  >\n                    {column.id !== \"selection\" ? (\n                      <TableSortLabel\n                        active={column.isSorted}\n                        // react-table has a unsorted state which is not treated here\n                        direction={column.isSortedDesc ? \"desc\" : \"asc\"}\n                      >\n                        {column.render(\"Header\")}\n                      </TableSortLabel>\n                    ) : (\n                      column.render(\"Header\")\n                    )}\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span onClick={stopProp}>\n                        <IconButton\n                          size=\"small\"\n                          {...column.getGroupByToggleProps()}\n                        >\n                          {column.isGrouped ? (\n                            <RemoveCircleOutline fontSize=\"inherit\" />\n                          ) : (\n                            <AddCircleOutline fontSize=\"inherit\" />\n                          )}\n                        </IconButton>\n                      </span>\n                    ) : null}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {page.map((row, i) => {\n              prepareRow(row);\n              return (\n                <TableRow {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <TableCell\n                        {...cell.getCellProps()}\n                        align={cell.column.align || \"left\"}\n                      >\n                        {cell.isGrouped ? (\n                          // If it's a grouped cell, add an expander and row count\n                          <>\n                            <IconButton\n                              size=\"small\"\n                              {...row.getToggleRowExpandedProps()}\n                            >\n                              {row.isExpanded ? (\n                                <KeyboardArrowDown fontSize=\"inherit\" />\n                              ) : (\n                                <KeyboardArrowRight fontSize=\"inherit\" />\n                              )}\n                            </IconButton>{\" \"}\n                            {cell.render(\"Cell\")} ({row.subRows.length})\n                          </>\n                        ) : cell.isAggregated ? (\n                          // If the cell is aggregated, use the Aggregated\n                          // renderer for cell\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                          // Otherwise, just render the regular cell\n                          cell.render(\"Cell\")\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </MaUTable>\n      </TableContainer>\n      <TablePagination\n        component=\"div\"\n        rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: rows.length }]}\n        count={rows.length}\n        rowsPerPage={pageSize}\n        page={pageIndex}\n        SelectProps={{\n          inputProps: { \"aria-label\": \"rows per page\" },\n          native: true,\n        }}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleRowsPerPageChange}\n        ActionsComponent={TablePaginationActions}\n      />\n    </>\n  );\n};\n\nexport default EnhancedTable;\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOL_CUSTODY_ADDRESS,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n}));\n\nconst CustodyAddresses: React.FC<any> = () => {\n  const classes = useStyles();\n  const data = useMemo(() => {\n    return [\n      {\n        chainName: \"Ethereum\",\n        chainId: CHAIN_ID_ETH,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_ETH),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_ETH),\n      },\n      {\n        chainName: \"Solana\",\n        chainId: CHAIN_ID_SOLANA,\n        tokenAddress: SOL_CUSTODY_ADDRESS,\n        nftAddress: SOL_NFT_CUSTODY_ADDRESS,\n      },\n      {\n        chainName: \"Binance Smart Chain\",\n        chainId: CHAIN_ID_BSC,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_BSC),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_BSC),\n      },\n      {\n        chainName: \"Terra\",\n        chainId: CHAIN_ID_TERRA,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_TERRA),\n        nftAddress: null,\n      },\n      {\n        chainName: \"Polygon\",\n        chainId: CHAIN_ID_POLYGON,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_POLYGON),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_POLYGON),\n      },\n    ];\n  }, []);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      {\n        Header: \"Token Address\",\n        id: \"tokenAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.tokenAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.tokenAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n      {\n        Header: \"NFT Address\",\n        id: \"nftAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nftAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.nftAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h5\">Custody Addresses</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          These are the custody addresses which hold collateralized assets for\n          the token bridge.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{}}\n    />\n  );\n\n  return (\n    <>\n      {header}\n      {table}\n    </>\n  );\n};\n\nexport default CustodyAddresses;\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BSC_NFT_BRIDGE_ADDRESS,\n  COVALENT_GET_TOKENS_URL,\n  ETH_NFT_BRIDGE_ADDRESS,\n  getNFTBridgeAddressForChain,\n  POLYGON_NFT_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\n\nexport type NFTTVL = NFTParsedTokenAccount & { chainId: ChainId };\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): NFTTVL[] => {\n  const output: NFTTVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    //TODO remove non nfts\n    if (item.balance > 0 && item.contract_address && item.nft_data) {\n      item.nft_data.forEach((nftData: any) => {\n        if (nftData.token_id) {\n          output.push({\n            amount: item.balance,\n            mintKey: item.contract_address,\n            tokenId: nftData.token_id,\n            publicKey: getNFTBridgeAddressForChain(chainId),\n            decimals: 0,\n            uiAmount: 0,\n            uiAmountString: item.balance.toString(),\n            chainId: chainId,\n            uri: nftData.token_url,\n            animation_url: nftData.external_data?.animation_url,\n            external_url: nftData.external_data?.external_url,\n            image: nftData.external_data?.image,\n            image_256: nftData.external_data?.image_256,\n            nftName: nftData.external_data?.name,\n            description: nftData.external_data?.description,\n          });\n        }\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>\n) => {\n  const output: NFTTVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const raw: Metadata | undefined = genericMetadata?.raw;\n\n    if (\n      item.account.data.parsed?.info?.tokenAmount?.uiAmount > 0 &&\n      item.account.data.parsed?.info?.tokenAmount?.decimals === 0\n    ) {\n      output.push({\n        amount: item.account.data.parsed?.info?.tokenAmount?.amount,\n        mintKey: item.account.data.parsed?.info?.mint,\n        publicKey: getNFTBridgeAddressForChain(CHAIN_ID_SOLANA),\n        decimals: 0,\n        uiAmount: 0,\n        uiAmountString:\n          item.account.data.parsed?.info?.tokenAmount?.uiAmountString,\n        chainId: CHAIN_ID_SOLANA,\n        uri: raw?.data?.uri,\n        symbol: raw?.data?.symbol,\n        // external_url: nftData.external_data?.external_url,\n        // image: nftData.external_data?.image,\n        // image_256: nftData.external_data?.image_256,\n        // nftName: nftData.external_data?.name,\n        // description: nftData.external_data?.description,\n      });\n    }\n  });\n\n  return output;\n};\n\nconst useNFTTVL = (): DataWrapper<NFTTVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata),\n    [solanaCustodyTokens, solanaMetadata]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_ETH,\n          ETH_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_BSC,\n          BSC_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_NFT_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [...ethTVL, ...bscTVL, ...polygonTVL, ...solanaTVL];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        solanaCustodyTokensLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonTVL,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n  ]);\n};\n\nexport default useNFTTVL;\n","export const DENY_LIST = [\n  \"D9cX654dGb4GFzqq3RY7rhZbRkQqUkfggDZdnYxqv97g\",\n  \"0xfeA43A080297B02F2eBB88a27Cb0FA6DB1b33B1d\",\n  \"GUSNP2z7nXjMpmYWeFbS819VwHb5tp7VoGbC6iGHtXmE\",\n  \"ERfkrhhgBB6zRo3x4XAcQKjhxu1JdX1PBfdj1RbHsfc7\",\n  \"f8DrFDG8dd6kV34WdjoEZd9vZin2pJAck8eMFUXZv1G\",\n  \"0x72b6dc1003e154ac71c76d3795a3829cfd5e33b9\",\n];\n\nexport const ALLOW_LIST: string[] = [\n  \"0x915bcb55faf663429fcc1efeb4e346703a91e4b2\",\n  \"0xf642d8a98845a25844d3911fa1da1d70587c0acc\",\n  \"0x1c60841b70821dca733c9b1a26dbe1a33338bd43\",\n  \"0x5603172654f37b509d74c6fe3a3fc087104100d9\",\n  \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n  \"0xd136ad9eb0a53633156972e3f746ab10d6dced7d\",\n  \"0x68d5d4ff0274dd95760e300ef16b81c5eed09842\",\n  \"0x4961db588dd962abb20927aa38fa33e5225b3be2\",\n  \"0x2e956ed3d7337f4ed4316a6e8f2edf74bf84bb54\",\n  \"0xb411d36e034d87558c3f96636dd7f7b62e093a1e\",\n  \"0x7592e2f251a7f7da27211625d652092769f43a60\",\n  \"0x21b999ec13828edefa243675c64324298c03b831\",\n  \"0xad5f6cdda157694439ef9f6dd409424321c74628\",\n  \"0x9cf63efbe189091b7e3d364c7f6cfbe06997872b\",\n  \"0x7581f8e289f00591818f6c467939da7f9ab5a777\",\n  \"0x93b1077d163365e05c9421e8f72547e2fe1e0a5b\",\n  \"0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625\",\n  \"0x2fb5b875a85713cba312c097d16838c242cadaec\",\n  \"0x1e988ba4692e52bc50b375bcc8585b95c48aad77\",\n  \"0x0ae3c3a1504e41a6877de1b854c000ec64894bea\",\n  \"0xc6904fb685b4dfbdb98a5b70e40863cd9aef33dc\",\n  \"0xd58434f33a20661f186ff67626ea6bdf41b80bca\",\n  \"0x9bb7da8f68f15ece32fe323246e7a1abac6d895d\",\n  \"0xb7f7f6c52f2e2fdb1963eab30438024864c313f6\",\n  \"0x2a281305a50627a22ec3e7d82ae656adfee6d964\",\n  \"0x346868f7e783e8206335bb14f74ba59a87c44f35\",\n  \"0x549d38f104ac46d856c1b2bf2a20d170efdb2a8d\",\n  \"0x138ff21a21dfc06fbfccf15f2d9fd290a660e152\",\n  \"0x15533781a650f0c34f587cdb60965cdfd16ff624\",\n  \"0xaae71bbbaa359be0d81d5cbc9b1e88a8b7c58a94\",\n  \"0x4721d66937b16274fac603509e9d61c5372ff220\",\n  \"0x72dcccb74cade0aca67739fe0a7956c5dead4a8a\",\n  \"0x07fe07226a376e8b74e4da2094537843fdf16318\",\n  \"0x1ddb2c0897daf18632662e71fdd2dbdc0eb3a9ec\",\n  \"0x2d956093d27621ec0c4628b77eaeac6c734da02c\",\n  \"0x312b151a0e87785649ed835d946c2b0de5745c30\",\n  \"0x32afc8dc2ff4af284fa5341954050f917357a5f1\",\n  \"0x4ba782b05c7d580ab6b896c6a63b8e5de53738b3\",\n  \"0x5bc94e9347f3b9be8415bdfd24af16666704e44f\",\n  \"0x5ddff6f22ee5df31403b9de994b4c70c8755a8ac\",\n  \"0x61f4a37676700f6e9bcbaeb05ff6c2f701c1c702\",\n  \"0xcb1f79791088d0f4397c35ec241f91c3727a6dba\",\n  \"0xd279d7e46f73961812c4853e065d0096a2657a71\",\n  \"0xd901b0618ce2b7f61457ced5621bea4820954ce4\",\n  \"0xdf7952b35f24acf7fc0487d01c8d5690a60dba07\",\n  \"0xf5db804101d8600c26598a1ba465166c33cdaa4b\",\n  \"0x299b6f57922533e1dd9edb8fe76ef632fb2b081e\",\n  \"0x36a8377e2bb3ec7d6b0f1675e243e542eb6a4764\",\n  \"0x4173eff368153f1f1c87be05226ebca9e5f5748b\",\n  \"0x684cd10b02cdade20f1858c6315052d66d1eafc2\",\n  \"0x7227e371540cf7b8e512544ba6871472031f3335\",\n  \"0xd317cfff093c08a43062b39075e51ac2060317f2\",\n  \"FxN1Q3vzdUmkx3qVgsnLiQtRWfYK1MAejEjret9dY68E\",\n  \"4V8LnMchSg7LpgNNJxGrcJaheeW5eSiJKRuocxf4YvXn\",\n  \"9ayoVUQVpHRcDyrdJ1dDUmkxtY74SYgEo7fMRSbW7GQ6\",\n  \"83ENiVFRQvVLAsP2gp4pW9EDphsiorgXaZjSuaWwjQEq\",\n  \"2nVCGdoR6xehmoPfTAof7xSvdnGaEKhvXi48BeaXbxNW\",\n  \"3mUeDoxSzSpBudaWVygwszkVSHUkeJ7q4C5DGjhi9twL\",\n  \"J1JLJjYotfACqTQ8g1vWUW9BHRSkJ3NxTqJiukf3aTmn\",\n  \"CECj5imCnAv7avNjSETanhRMxWz5yR2ZN5jfFqAijzmK\",\n  \"GHVaMJPwJYrqDaHCGLksvsfGoNaS6NVHL5wc31osASYZ\",\n  \"85d8VHCBpER7NeT8Quzcos7iGoZouLkaZNfqfQ5VN3kP\",\n  \"EBDEioh6L5UZxuyPPZ9gY3H6fsRqmPEvSXL2EKv588qz\",\n  \"BZM9yMv9CXZDYV2JGNWSdNJc6xWGfEHY4vUWX9rc4W4n\",\n  \"4cc5svLcu1xyYCGcfwDop64ZMs6WJiCY6JrKF711GDLu\",\n  \"8cWC1faRe7fkTMu5wAVQoSbkYChJUNTTCneLhZprqMBj\",\n  \"F14j998PJo8CdNU4aS7vEWqm8duNuZAZ6bgrAJhJHPNw\",\n  \"DZUjZ8p3QtuSnozqFsuHYTjPFCWkgkgWhD7b71AvbKEC\",\n  \"AtjDYmFmnjhh8VMJHAEY3CYMdWCPEDzJzxjjTrMrcY4K\",\n  \"GwBPGaMyR8cDKVuGgFUdLqevDkMbKNNKRerhvqJD6hL3\",\n  \"B3fYjDpfJ9q7YJfnrjeFgALaiLn5DaobPje3VQZ8zk4a\",\n  \"3KeSd9UcWFWq7DQnUWT9tXkgb54yUUCynLzJZkaMoqEX\",\n  \"XUhiSfF7NN3s8T4gZByoae7sKKuLfffkgF14G6PYHPH\",\n  \"2BLYg54F2ejko6Dz6gDPDDGUMxFPHe4v6oNTsshRnS9S\",\n  \"HEr369zRti7fShFufrxg7zpmGsRcWey8XNoGdr6bfFHp\",\n  \"997VfMfoCp6uh8ZjJZeSm7yDEP9x2iJVPqrLk2M6XBx4\",\n  \"BuUUVQeiCNoChQ2CRAgVuXCS56ZF5m8AtGen8LtcjdTv\",\n  \"DHUFjTnK94Yx9MybaosFxFFa4pmvxoo2toHxDXZisthU\",\n  \"73nxe85cw4XqQ2o5znPCZDVXL5zf3wpM59boCqnhRzqz\",\n  \"BbMsktYU3XDZNTB2jNU75RZPak2pu75jDRudHtjbLBMD\",\n  \"2K8p6q9KVkDBcedrXpVgAkr4AH9BAZf2BvvXkQvgC3L1\",\n  \"G1k5umwEmgziVLAetgmuGRw6sBRodRCGviRNT5HW3CK6\",\n  \"2XNvSJhJjpXBbvmhrnbx3BNMTC3JhAmyC11nkmWkTtuM\",\n  \"FBoetbUNf5GVJfnCXDf5uo9HMVwmvuSYBMmEVKTKDFd3\",\n  \"8TgS1Z1H3YM2qer6wQfVgfs1zrrkEhN8jwqZwEkuaoQs\",\n  \"2P2hiNdVyn6BhC4zhGiT1Ct2Jm47F8eShfkwwEDeerCu\",\n  \"8nTjurPHAGSttLJHhfPws5wqnPF2ogNg2BWGyJV9Tpt\",\n  \"gJbDs6Mp78jMV2vuwZei6oRaPfVQycYxvZXkc8emKoi\",\n  \"55VXhAfPKEG5LhQyakH3eUrxy3zrC6pryQSPy5SMDpRW\",\n  \"FKxYYQNyigzTfyig4Gyvxkcq9wFb4FEQPq9KvNLoMQ2R\",\n  \"9fhR7uHDtJEWBzE9hiwCemggMiKiZGzMmMS22mG3DNuN\",\n  \"Cjduv1s4nUkt8i7syFr8yjUvYa5GiNASVKPnNorPSjyo\",\n  \"5Gak12U6pxnyh8akeDY4jdaUBJ6FziEVSTDFDSX97acs\",\n  \"8Urs8EzwgvNSyRXgSVkuBAD4B5odLfKih6rTn75YnXes\",\n  \"Ft4y4KR1Vf45js7RBWbuT7nTFaZmty11sCTGcfJ4fAsx\",\n  \"4iKnL1CTvA3yrcchB17vz3yBSmaj2aLvhxPhtBEXvtdd\",\n  \"2KfyLN3iyBHYGajiHzEj75aZqeNM22FA9jh8QaKQbwD2\",\n  \"5tBZ5feptkoEWiGhisi1y81gzYg3PAJ9v5QbY6uJ4P9a\",\n  \"AJnfVpnmtN3oo5jMT1Rxr9VQdVxLUuF6U35oSFRMtten\",\n  \"8TEPXUw4vtZuy2xizHfDcccCfsNMxpADrEBw9FJXe3tJ\",\n  \"CVsnX3yUwQoe2WappLEhBbu4vxZAE6Bym33UkKuYgKqf\",\n  \"8TxaeiYDUhVL6cJVxHeS5Gx6UpE3G4zsQJMaejHttb5x\",\n  \"5usxCLasTHRAJqC2kzqboAzQQA4jibxWPCbb3Xtc5r7z\",\n  \"FsBzFoC4YYeAvdRX1d4AmYcwtZbcp3ctGs137AsGzLRe\",\n  \"CYPz33SnBXkCf1SfsN5yWk5jRCU7r4m4m236K7LYQYUn\",\n  \"DmGzNiorJqWac5cNejfUkk3vxYPkbarsB29y3ZdZ2chi\",\n  \"6Z551xuQRipV5tfiLawgALuufBtMYRhHiL8Mco1uoQHp\",\n  \"8QFELiySN2tQutqamND7v557BpuE3Nu4h5KLxnaLa92K\",\n  \"HciHdyzYoCuhFCgYCvCYsXssJuxkHhE68anbgBvqsa4Y\",\n  \"AsVWRy4KfRErkcyif5ZXXvVdTeeWLKJaLo5ZKAfYxuFe\",\n  \"DNKy4mE6onmzDYYGd4vP9BuJByDoPYdoFKvHUtveCarn\",\n  \"EBms1LbV3o6h4eCTAzyZ4xoBmJ1T4SuhQLLguCJ88LBA\",\n  \"7xaMEDQ1gTJhXTZ1LYgoMBEeGXiZNmY3QhPxcnBKjkcS\",\n  \"71hXBp4hbpYrVSsKMuFACF5UJMBasCmPybpN3dyNdFxJ\",\n  \"EstAdgD62RLLPCsLVgJWxxQAeQAJ8iX7Yid9EJp99CQ7\",\n  \"HHodYwygcTYuxBNrQx1aLwfQLkJaAMcioXvMs7LNK6Jf\",\n  \"AkydeQuFwTsWj8YrmKdhV4TE1w5Nc9DF5ipgfNGs2k8q\",\n  \"AmJ52MAQXAjtFkFdAYkLWKZU3zp2BDryLcbQQ1hMSBcp\",\n  \"BQHvhpAwZr83joHaEJrKUY4Lij4ZXqKgi9MzeBeiatbX\",\n  \"7oEGhi9YJECDHvfbp41spBwGU1pEfgS5mHo8cXGwfxug\",\n  \"364ue6kuFJM6reWX7Lz8LwCxA7TeVbWuMXBFrv1EZYWS\",\n  \"88R54Zx8TLM4roQPTrHSpA5BfLFQVu5CcH9DyxWmfxDV\",\n  \"F11NLrf3w5WuR8kyPFfgpdG9qMM7QoS9JdkMyFu9B6z\",\n  \"DzgpaoTtvcxmfAuceZR3Q4xAJjjHCcFURJ4orMiAP1oB\",\n  \"8iNwAG4LCFoxZWmpAPq2AUXmdBAeeGNgxUZnRNJ2oaxZ\",\n  \"Jzv1Tp99guHWs4WxmcSV3ty3UHhqwv312Wb7A59Cm6B\",\n  \"HqTSsezCJ49VjpcRvGtN4WbLHgywkpqrQZAPPR4sid7P\",\n  \"7b9xH9DZ5EjehncbST6Cw2cVVVmJccYsoYa7CmVxV74w\",\n  \"FE5zmTuD1zaaDheJf8HxDJS8HFVHaFTHbeonxqrBMYhm\",\n  \"JD9NiPVbSHGAanmxnXCcmYaXfa56rWwzvB6TVAXkirYS\",\n  \"F2kkKqoUr8gCfjXTUknLQZ8TEvedkNA5s6Ne6XS4CPQf\",\n  \"38QnWX1xq83uspnp9nY6cEhdcRcx1dw5VJwxudZ7ugDM\",\n  \"Gzkr9pHFCQ3WqkyRMZobPSXZNheFQKYrjJCVs1Xmhj6R\",\n  \"jfLuStusES8VBAHqFSBB9XXX5vQjjWxZGyEYdDRS2yz\",\n  \"9dFPAaubJzhHFpsc8s4qbSepMFEKecaQYHrUKQMRoZcs\",\n  \"6yCBHAmvBAZkFSXi7u8Sj7n9pNPuDFrGahNnLxpAk9YJ\",\n  \"A2SgMawSkCjdhQpBypwRpCSryAPa6B65dRetu3YGX4ay\",\n  \"9wPZRx3jrYQ2U3AwrxRJ8dQXFgVt8Qc5BxjD2reAD81\",\n  \"C6FGVFzzwGqxEGnEqQva4zZ6tdVXHDY4KsPuDFMKQipA\",\n  \"28awX2aLeyDik4aYtLe3xgvx5rnA9PeJrUmEepbps1XU\",\n  \"7B3esUC5uCw3yLcpvU91q3poeVENLpyfLU7SCZxy7YnF\",\n  \"5qoDyfChkPokzd5BXGcbNmqFYwF3dYerLfnN2ujxTCjU\",\n  \"5K5hobUAQLYTiKMGqJBJauZWbQJHLnjmwfbYRu3Kdt59\",\n  \"pavej29HVNfxHEkDxR9fE8zgCozmFuCFFCk7u9dUfci\",\n  \"4hKuAuo8dXgkRLfz78qNHNGs188epLoVmcKPKuDDKFNj\",\n  \"AzX2c2bFMeZcnj1Y6DokKAacDnsRzAo6pyVJmMiVUuVQ\",\n  \"D6uV9j31HV2yv6Cg6uuJuAeSMVdJ7PpVrzRtm1d5N3pV\",\n  \"2VNQusXvHEjMBTkY4gYUUhvdkCMc9DADSSxbdS7sJ1CK\",\n  \"Cug1VKTudanAUbUMh4sw1bicJgcfXqs8x4tjHHPtqkEA\",\n  \"HQnijpcihTRLRaQpywJfo4cM5pZHBffvTATFiomE8g8u\",\n  \"73kJkeEFQYPxT3cHDRG8iiyvUhmSBY2Nc33JpB6DFK2R\",\n  \"4rZifPfY8DdPkWv4mqvctLgcGaBScBQHMCPguZQC28C4\",\n  \"GZivmjaWrg2Va9seuxY4D7SGPP8WnKsKwwc5a87hMAgn\",\n  \"9rMUmiujvmthZoVBaFff2Jf8YW2cX4SzWDK2nritZXK3\",\n  \"CkAD1HLVnqhfMeCXzKuEuhjFd4FmTXRtCVe535jJKVH2\",\n  \"8tfmWiyX4efiXb3P9ti4GfCZZ5FNcwbRZgzfA688K9tC\",\n  \"HXrkcTcRNF6EnvfFaXMpqbSeik7fgbn9DLraBaNmRD5u\",\n  \"59j1gA2ANhYkzvvCZauoisnpfnVk6UbycFHMNBij2jy\",\n  \"5Dot4FyLAdx9LkxrmG4zi6nrRQQcPZjvBAjZ5VmvYWpp\",\n  \"BbL5V1TJuLnMonChPVAfP3uarM5G2XKCfcEaTxzXEqPK\",\n  \"4hmEUPcgHimQ1vNrr3WNGYb1RezmRLD6fVv9TVwAU9yj\",\n  \"Gnmnh3LNaaQ1UmnQMkdGTH7ja2aTHQyxkS7tCfYkxvtD\",\n  \"9BUEx9ULoTQhs3QVzyQvSecxfbTPV8PcuHkHeuRE8LF8\",\n  \"6UF8mqUg1aGakkW2yS4oRPiX1YNBJiqxcoyN9u6pBYo9\",\n  \"7vEHTQ9mmy7T7fkhns3fBFrWqRhXPTZUPgn64QxVirhY\",\n  \"71HGRqeeDwcXJs9CxzPyTurLNdwYwsBBb17CmxoW4VTD\",\n  \"5v2fhVgjH2Xv2v78ysSZWvhZ5wu8ycD4pJE6LRBbaf1G\",\n  \"7rjPaxZ5p5jzZFhEZwVFCsLwvxppmJ8nmsrgxmRMeKMq\",\n  \"7JHruL5Baoqj66RniPDpB1SiKz8jegNuiKLxcvCDVYCa\",\n  \"3xA3wJk9YpgwxNuSc9GHQ6E1Wt8zeKC5oK8yQLg2JzrF\",\n  \"3c7r6ZtTDxN1fxc1ixM8Ay26hTyfnucs3yx42vVH4LM3\",\n  \"4jsaQWBKn3aSpZbwboxiNRRiagY2xdkoSomfoBRDrdcs\",\n  \"B9txgFSjNXjFQv5VTCu2vhMyCEWnyp9UQWpeZzTLdeKP\",\n  \"96GjikTDDt1FuznnmwE9rzKi2i7gZ3gYwW7g2daW8s2r\",\n  \"C4otrRtEHVeeTkkmMy6WkLkMEbtK49BUgkfYXMNiJhGq\",\n  \"Dtesdhkc5WFDHvjy7JzrpSL7xbN7DHsQhrK5i8vgzogi\",\n  \"Cf2fzzcUhBqtXokdEEg4HVuc4dNmgrsz2J8QsvPwMnFU\",\n  \"DoqovGZ86RjsFZd3TGaLDwaU8mXmw3C195BfV31UuG85\",\n  \"Au3h7j9twciHo6YQ9vznx97rC1D82dcqdBgBqkzwKMGm\",\n  \"93N68g43aiDTJTTQdJL5djSBytTCSqL62woXubFrX2vJ\",\n  \"6WwzhMYbAWem22ZcVcS2NohsccjmrWZbq1aHDySABTZ2\",\n  \"DGkYVSFoq5cafZJZboHPuzdrKtVYrm4R5oS18nEuZaGu\",\n  \"8MLm9nLqLsDQgoN7nHkUoeu2oqe8J3cuZKc2KCX8Zde2\",\n  \"9Zn1R4fdAHZSrq6hrXdQWdRVJhAUEtpU9gT26KRgRjCb\",\n  \"6j53Ln8GvosfZXar1WCNrmURVxjR8GV9Es2HE6fTvkz9\",\n  \"9Kevoh8H31NQV8kB89aocRTrkt2UGqbs7Ani73WkACrf\",\n  \"8MTsYKzp4qNEFXzM6nWhRk759qqSMbur5DXjbWwDNFCj\",\n  \"CcCVqUaMsKNcQwWHHA3H5yydjcspcD3LhBYP9aYrmweK\",\n  \"FCiSbFdcZSpx1YZFfUCV56KQ34C8CJY9A3JrnMGopNip\",\n  \"5R5cr6dq3v25Z4Cq7qM2dG4hxN5gbY5eUKzETRnBYXUf\",\n  \"DeQDKoAuR1BYvspX8dHehyua3VRuCmD2zbEvZ97NLjas\",\n  \"C6nyuPc5wZLB1c3rFvchbF4aLZBn4yujtDyeqsJDhXSL\",\n  \"7vzFUmX9qZiznTikem4Eu2v2aa1BkqDsuT3gvYLq2rRT\",\n  \"Nf2WRYpG8hquo3BsvioYxKZmDECvuS7HmDhHrpQrdYv\",\n  \"Fz5jKMiXi5SN4TqQ12fYm49QFxJkeLoyYEZWVwRwyBCC\",\n  \"FCs3xYBoo55HenGpeNETpuWjuPfzegHhDQFzEuu3HWuM\",\n  \"CC56nm4aRSd7RzcnrX9VH5VXnfj5Bq1XLGRxXy9oDm2p\",\n  \"BLJg1tgRZdzPxXhJngtbCnuJ8PtsVpFjFcoUby2NXxjH\",\n  \"4Y3Lfzeh9m45GomuKpqjj6bVRLpNnn7wyosPzRyx8bQW\",\n  \"8GCrwThSdG2JUXwwisFtwEs5gkGGxjNKQYArRtq6bEPc\",\n  \"78wF4F64K31GbbC9jhi3me4kSqznGtf6KHFLTUTkrEjB\",\n  \"Cy57RjcnLmWhY2ccjEwcFu6SvoySbq6mevDhY54DxVLh\",\n  \"FVTRVzRagRDQj7Lp2n1GyRJ85TNSErhYk4xf283Svnrn\",\n  \"rMH5QQxx9WNZYeCgTEr7TogXT1rnATDaibWcvibHxRp\",\n  \"ENFgBr93NsoG9QHUTHbfEobWtnFmV1fEsAuiaNq1Qxiv\",\n  \"454LshEu93z3auzq2cMbA7PsSw9v8zhuvQRGkfP6eGMx\",\n  \"aHe1GAdAVgijtp55eUmPe6DdUYonRVw6Xdq1QpTmVeM\",\n  \"4BG5Yo4o2nHGDgA1AqH94oUk2CouLuGCSK7ZjqHQaT2J\",\n  \"CCDKm4AEVxeeNVdYNM7X8CBQmtNpySEhBvp1yQ93jjdY\",\n  \"27XFvenPT5LpkJ8FVJdHf3CPaARqgCWm1EsSRt2HrDcH\",\n  \"DqH8Q3e5Bts3rCsC6UpTP18Hf1fD7dfGaP71uR6HpxRg\",\n  \"FPfgDLbWDjSx1FnEdeM5DWqJNpRqv5oDqpmvW18Ef5QQ\",\n  \"6u1TPKaTboYQ8gU7DF7AgEp5cP9N3FTuxxsu5oWi5uJ5\",\n  \"CCg1C49hNR91425PeS1HatXobQkAniJ775N6pjWAiqp2\",\n  \"ENxmdaEsTWXkufsTLngp3sZ89dFZWNoke7F95aVE67Kz\",\n  \"39h7MdBeuMFvcBz5FKGQBqnqR7BSAfp4ob8qLphLc4yo\",\n  \"CRGEVCx5HrRjsbX71RM8acuydKHiXwRwWysF9BJvYTG9\",\n  \"3mzktRHfhxjPirgHF9sjbXf2kwW1RZSudaRpyc478BAA\",\n  \"9J7F9nx2UyVYPuTk21ni2jxprgBpzfMpN7HxJqgKUWxd\",\n  \"3K8NyBHkMdWX672bqqtJC5mZASvqCHtZXPRMhKz8iP2x\",\n  \"65sAs4U5puLv3UC8f5y1DVCGAhpMtTRUoKpMdUMFY1sY\",\n  \"Dxb5mPASvxsoDRhHZEu2arYRqvYByYgyvrtUYxnFJsGg\",\n  \"GF2hTcNvU7HFj5682KBVpffoS223aVhYaaCcM9ngxehs\",\n  \"BBF6JkFMRLMqW5F4Ri8VUNnAK5T2n9MLmRhtuXQNJmZh\",\n  \"8x8J5MGViuLTtxwjwnrLM29USZqx7TcbGvqdaNfA1m8X\",\n  \"U4Babgbjm7ciqth5XDJppzVk7WhGnHNZUGvPL2ox8HB\",\n  \"3Y9f4MxYEvjWfiBJexTSnRQcKVD8e1aSUs4Z6FZYj5K1\",\n  \"CZZ5B1Az9kW2nyRHM5mABS2NWuStoHCPcfh75KFo2UsN\",\n  \"tRKmpQWu48phJXR7W4d2skG9W4nvb5cb976bkGQYAuN\",\n  \"3iAabhw1Rdu2HimbzT9gDCDcuod7TmBtcZwFWxGQyFfQ\",\n  \"5TTRcMNMwhiGUZ8JtTnqB6sW3g6P4fAFhWLsV2kJWEsg\",\n  \"8B8VaqcxunjTnbq4mGhPW3C2eHuByWVBRjqKthwX2aRQ\",\n  \"9hi9yukj5ZjtD2Z73zRLca8kARChJmgEaMtYefx454Q3\",\n  \"DTrqt4Wb1H16hdrLwEfFkNVwGYWPqnghb3pREEZejhtS\",\n  \"EitHiKHGWWadEhZahZLHURVoxPqAUofKLEXfYU9NsvMp\",\n  \"4ZscrWACeLLYrsFLQjX16bdjCqLy6vkKuHa2w3fsakDe\",\n  \"FuPR7rUMzphpQ3YhmENUJUt5gvtDpJDbUqSa6FA82U6p\",\n  \"2o9C56tqnc54QF54MxGn38DNNEa9vAMow3bc5VMqogMV\",\n  \"Ffgr3YTKvhWkdv2pSW2F5VEVvLQvnatje1ookcuJpBAF\",\n  \"J9rKCnTuERL9G95FmFQnYDeLVYrNa7pQBiL13oqGgH3t\",\n  \"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\",\n  \"779kNT4696bMaAkeAHxezAuniTrVjfvrp3vABvhdPGWs\",\n  \"4fA5U4w4DfmNojhKKBCVHeAY5VQ4dYpx5uFQSsrknSFA\",\n  \"BU2oyceVSZXYzxURwhAvfULBSe59v22LQfuYgS585L1g\",\n  \"3BApsMpiSaHfF2a59aW9XAPfGQ8WMaQd7Q1F9rTbhGqv\",\n  \"5oWeivCzcQrcmueDbUAfPQRfjGeDqkVDxErchHUz8NCh\",\n  \"2rrZbBRpt5o7GKnTHusTqRANsj1vs5t4WC9CQPt2cujb\",\n  \"CbN1vKsz99qbQidVR5RfBLmrxPoYbJguEAnsFi5BN5WU\",\n  \"CTwRHSdPNGucwLuLqUMSc5ddJbnSN7GjKFYfm91wJHVo\",\n  \"6NKWLHZENHKvditMFu7z97qJypmJTsz1PbjFVpsmrXMY\",\n  \"5D2kc7J4RNcMzfoAQz1E4NWjLS7GzTnJKvTV3HiospCZ\",\n  \"9hrjJvaYETxp6VcRRX4yzT8jtH6gzoVtFUqdaCksisx4\",\n  \"2kUMSNYvpWXqrpSV2L1GV5UWYH3CFXF7F9QbGkgv9kNw\",\n  \"8nRkgYkufaLQVtuaaPGwrKJBSS7tu55YWx3EiRufD9uU\",\n  \"7aLAz1NE2hx7adjrgDs87GT49gwTkmW2n8gHSRJUVzHa\",\n  \"G2kuL2iKEdYmZBnM1a8rA5j5si4AqySJUq3ujPaJxkDk\",\n  \"FQJUJSHQACz7WLHVM7iS2dKnZVWwFHTuwUdtByLMxXF8\",\n  \"AhtJTzNB7zwLB7RxqbYcpAKBeEfxYrczz12Nn4FgVb2y\",\n  \"7zEHcoELyPvmipqXL297edddhxLfx25UGTvY8dMrZqzT\",\n  \"38mqzHtHLmUMCZyuZKEQB8Zkg2fGkToYw4gVwPC3NoH3\",\n  \"3kL3aPezAbZxzamMurWvjMpXkVQgLAgrh9wT1CeS3CnK\",\n  \"EB7hzkjRjV3AFCfQDuPK8joneM6dW2a96rJCHvc7p1fW\",\n  \"AVbSKg271GmzqrtPmU5fRza9uR2HGLhTy3yiM1mMPTpw\",\n  \"CoVJmrq8KeRZGAcKa6h6mueQsFotVkibehWeKGCZBXe\",\n  \"5bwpMvAA65frL4A1B3nYQcQjLHGUzHhkHX5FV4CVi1s8\",\n  \"Kyi9YmFqBARjW8KwS192hyrfzwyQbCR6utt5yr6hoNg\",\n  \"ESrJ2tXdmkGv81FNJmJcezunQLz3fP6WFzfmZd6d4FPn\",\n  \"8qMsDP7hFWZAKGA2taL7u8rERH4te4D4i8cxzHKtAMcA\",\n  \"5c1ymadNzqM9cE8K8gqDguNYg2jWnGcNBV5S3tGGdhM2\",\n  \"Gx4Y9M67BPsAViveoBcm4JocVh82S7pZsaXc4PH9EibE\",\n  \"5Xb7BoMNP19cXPgLdzrAkJCarznkYAfpmyyCvynJam7K\",\n  \"EZH44QW2BzUijN79rrngRUoGHCJGWitabxkVkT82XpeA\",\n];\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useNFTTVL from \"../../hooks/useNFTTVL\";\nimport {\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n} from \"../../utils/consts\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport {\n  //DENY_LIST,\n  ALLOW_LIST,\n} from \"./nftLists\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  tableBox: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    flexWrap: \"wrap\",\n  },\n  randomButton: {\n    margin: \"0px auto 8px\",\n    display: \"block\",\n  },\n  randomNftContainer: {\n    minHeight: \"550px\",\n    maxWidth: \"100%\",\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n  tableContainer: {\n    flexGrow: 1,\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n  },\n}));\n\nconst NFTStats: React.FC<any> = () => {\n  const classes = useStyles();\n  const nftTVL = useNFTTVL();\n\n  //Disable this to quickly turn off\n  //TODO also change what data is fetched off this\n  const enableRandomNFT = true;\n\n  const [randomNumber, setRandomNumber] = useState<number | null>(null);\n  const randomNft = useMemo(\n    () =>\n      (randomNumber !== null && nftTVL.data && nftTVL.data[randomNumber]) ||\n      null,\n    [randomNumber, nftTVL.data]\n  );\n  const genRandomNumber = useCallback(() => {\n    if (!nftTVL || !nftTVL.data || !nftTVL.data?.length || nftTVL.isFetching) {\n      setRandomNumber(null);\n    } else {\n      let found = false;\n      let nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n\n      while (!found) {\n        if (!nftTVL.data) {\n          return null;\n        }\n        const item = nftTVL?.data[nextNumber]?.mintKey?.toLowerCase() || null;\n        if (ALLOW_LIST.find((x) => x.toLowerCase() === item)) {\n          found = true;\n        } else {\n          nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n        }\n      }\n\n      setRandomNumber(nextNumber);\n    }\n  }, [nftTVL]);\n  useEffect(() => {\n    genRandomNumber();\n  }, [nftTVL.isFetching, genRandomNumber]);\n\n  const data = useMemo(() => {\n    const output: any[] = [];\n    if (nftTVL.data && !nftTVL.isFetching) {\n      CHAINS_WITH_NFT_SUPPORT.forEach((chain) => {\n        output.push({\n          nfts: nftTVL?.data?.filter((x) => x.chainId === chain.id),\n          chainName: chain.name,\n          chainId: chain.id,\n          chainLogo: chain.logo,\n          contractAddress: getNFTBridgeAddressForChain(chain.id),\n        });\n      });\n    }\n\n    return output;\n  }, [nftTVL]);\n\n  //Generate allow list\n  // useEffect(() => {\n  //   const output: string[] = [];\n  //   if (nftTVL.data) {\n  //     nftTVL.data.forEach((item) => {\n  //       if (\n  //         !DENY_LIST.find((x) => x.toLowerCase() === item.mintKey.toLowerCase())\n  //       ) {\n  //         if (!output.includes(item.mintKey)) {\n  //           output.push(item.mintKey);\n  //         }\n  //       }\n  //     });\n  //   }\n  //   console.log(JSON.stringify(output));\n  // }, [nftTVL.data]);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      // {\n      //   Header: \"Address\",\n      //   accessor: \"contractAddress\",\n      //   disableGroupBy: true,\n      //   Cell: (value: any) =>\n      //     value.row?.original?.contractAddress &&\n      //     value.row?.original?.chainId ? (\n      //       <SmartAddress\n      //         chainId={value.row?.original?.chainId}\n      //         address={value.row?.original?.contractAddress}\n      //       />\n      //     ) : (\n      //       \"\"\n      //     ),\n      // },\n      {\n        Header: \"NFTs Locked\",\n        id: \"nftCount\",\n        accessor: \"nftCount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nfts?.length !== undefined\n            ? numeral(value.row?.original?.nfts?.length).format(\"0 a\")\n            : \"\",\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h5\">Total NFTs Locked</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          These NFTs are currently locked by the NFT Bridge contracts.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n      {!nftTVL.isFetching ? (\n        <div\n          className={clsx(classes.explainerContainer, classes.totalContainer)}\n        >\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"div\"\n            noWrap\n          >\n            {\"Total \"}\n          </Typography>\n          <Typography\n            variant=\"h3\"\n            component=\"div\"\n            noWrap\n            className={classes.totalValue}\n          >\n            {nftTVL.data?.length || \"0\"}\n          </Typography>\n        </div>\n      ) : null}\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{ sortBy: [{ id: \"nftCount\", desc: true }] }}\n    />\n  );\n\n  const randomNFTContent =\n    enableRandomNFT && randomNft ? (\n      <div className={classes.randomNftContainer}>\n        <Button\n          className={classes.randomButton}\n          variant=\"contained\"\n          onClick={genRandomNumber}\n          color=\"primary\"\n        >\n          Load Random Wormhole NFT\n        </Button>\n        <NFTViewer chainId={randomNft.chainId} value={randomNft} />\n      </div>\n    ) : null;\n\n  // const allNfts =\n  //   nftTVL?.data?.map((thing) => (\n  //     <NFTViewer chainId={thing.chainId} value={thing} />\n  //   )) || [];\n\n  return (\n    <>\n      {header}\n      {nftTVL.isFetching ? (\n        <CircularProgress className={classes.alignCenter} />\n      ) : (\n        <div className={classes.tableBox}>\n          <div className={classes.tableContainer}>{table}</div>\n          {randomNFTContent}\n        </div>\n      )}\n      {/* {allNfts} */}\n    </>\n  );\n};\n\nexport default NFTStats;\n","import axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  RECENT_TRANSACTIONS_WORMHOLE,\n  TOTAL_TRANSACTIONS_WORMHOLE,\n  VAA_EMITTER_ADDRESSES,\n} from \"../utils/consts\";\n\nexport type TransactionCount = {\n  totalAllTime: number;\n  total24h: number;\n  mostRecent: any; //This will be a signedVAA\n};\n\nconst mergeResults = (totals: any, recents: any): TransactionCount | null => {\n  let totalAllTime = 0;\n  let total24h = 0;\n  VAA_EMITTER_ADDRESSES.forEach((address: string) => {\n    let totalAll = (totals?.TotalCount && totals.TotalCount[address]) || 0;\n    let total24 = (totals?.LastDayCount && totals.LastDayCount[address]) || 0;\n\n    totalAllTime += totalAll;\n    total24h += total24;\n  });\n\n  return {\n    totalAllTime,\n    total24h,\n    mostRecent: null,\n  };\n};\n\nconst useTransactionCount = (): DataWrapper<TransactionCount> => {\n  const [totals, setTotals] = useState(null);\n  const [recents, setRecents] = useState(null);\n\n  const [loadingTotals, setLoadingTotals] = useState(false);\n  const [loadingRecents, setLoadingRecents] = useState(false);\n\n  const [totalsError, setTotalsError] = useState(\"\");\n  const [recentsError, setRecentsError] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingTotals(true);\n    axios.get(TOTAL_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setTotals(results.data);\n          setLoadingTotals(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setTotalsError(\"Unable to retrieve transaction totals.\");\n          setLoadingTotals(false);\n        }\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingRecents(true);\n    axios.get(RECENT_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setRecents(results.data);\n          setLoadingRecents(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setRecentsError(\"Unable to retrieve recent transactions.\");\n          setLoadingRecents(false);\n        }\n      }\n    );\n  }, []);\n\n  return useMemo(() => {\n    const data = mergeResults(totals, recents);\n    return {\n      isFetching: loadingRecents || loadingTotals,\n      error: totalsError || recentsError,\n      receivedAt: null,\n      data: data,\n    };\n  }, [\n    totals,\n    recents,\n    loadingRecents,\n    loadingTotals,\n    recentsError,\n    totalsError,\n  ]);\n};\n\nexport default useTransactionCount;\n","import {\n  CircularProgress,\n  Link,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport useTransactionCount from \"../../hooks/useTransactionCount\";\nimport { WORMHOLE_EXPLORER_BASE } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  totalsBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n  },\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  typog: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nconst TransactionMetrics: React.FC<any> = () => {\n  const transactionCount = useTransactionCount();\n  const classes = useStyles();\n  const isFetching = transactionCount.isFetching;\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div>\n        <Typography variant=\"h5\">Transaction Count</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          This is how many transactions the Token Bridge has processed.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const content = (\n    <div className={classes.totalsBox}>\n      <div className={classes.totalContainer}>\n        <Typography\n          variant=\"body2\"\n          color=\"textSecondary\"\n          component=\"div\"\n          noWrap\n        >\n          {\"Last 48 Hours\"}\n        </Typography>\n        <Typography\n          variant=\"h3\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {transactionCount.data?.total24h || \"0\"}\n        </Typography>\n      </div>\n      <div className={classes.totalContainer}>\n        <Typography\n          variant=\"body2\"\n          color=\"textSecondary\"\n          component=\"div\"\n          noWrap\n        >\n          {\"All Time\"}\n        </Typography>\n        <Typography\n          variant=\"h3\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {transactionCount.data?.totalAllTime || \"0\"}\n        </Typography>\n      </div>\n    </div>\n  );\n\n  const networkExplorer = (\n    <Typography\n      variant=\"subtitle1\"\n      className={clsx(classes.alignCenter, classes.typog)}\n    >\n      To see metrics for the entire Wormhole Network (not just this bridge),\n      check out the{\" \"}\n      <Link href={WORMHOLE_EXPLORER_BASE} target=\"_blank\">\n        Wormhole Network Explorer\n      </Link>\n    </Typography>\n  );\n\n  return (\n    <>\n      {header}\n      {isFetching ? (\n        <CircularProgress className={classes.alignCenter} />\n      ) : (\n        <>\n          {content}\n          {networkExplorer}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default TransactionMetrics;\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { formatUnits, parseUnits } from \"@ethersproject/units\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useMemo } from \"react\";\nimport useTVL from \"../../hooks/useTVL\";\nimport { COLORS } from \"../../muiTheme\";\nimport SmartAddress from \"../SmartAddress\";\nimport { balancePretty } from \"../TokenSelectors/TokenPicker\";\nimport CustodyAddresses from \"./CustodyAddresses\";\nimport NFTStats from \"./NFTStats\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport TransactionMetrics from \"./TransactionMetrics\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(2),\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n}));\n\nconst StatsRoot: React.FC<any> = () => {\n  const classes = useStyles();\n  const tvl = useTVL();\n\n  const sortTokens = useMemo(() => {\n    return (rowA: any, rowB: any) => {\n      if (rowA.isGrouped && rowB.isGrouped) {\n        return rowA.values.assetAddress > rowB.values.assetAddress ? 1 : -1;\n      } else if (rowA.isGrouped && !rowB.isGrouped) {\n        return 1;\n      } else if (!rowA.isGrouped && rowB.isGrouped) {\n        return -1;\n      } else if (rowA.original.symbol && !rowB.original.symbol) {\n        return 1;\n      } else if (rowB.original.symbol && !rowA.original.symbol) {\n        return -1;\n      } else if (rowA.original.symbol && rowB.original.symbol) {\n        return rowA.original.symbol > rowB.original.symbol ? 1 : -1;\n      } else {\n        return rowA.original.assetAddress > rowB.original.assetAddress ? 1 : -1;\n      }\n    };\n  }, []);\n  const tvlColumns = useMemo(() => {\n    return [\n      {\n        Header: \"Token\",\n        id: \"assetAddress\",\n        sortType: sortTokens,\n        disableGroupBy: true,\n        accessor: (value: any) => ({\n          chainId: value.originChainId,\n          symbol: value.symbol,\n          name: value.name,\n          logo: value.logo,\n          assetAddress: value.assetAddress,\n        }),\n        aggregate: (leafValues: any) => leafValues.length,\n        Aggregated: ({ value }: { value: any }) =>\n          `${value} Token${value === 1 ? \"\" : \"s\"}`,\n        Cell: (value: any) => (\n          <div className={classes.tokenContainer}>\n            <div className={classes.logoPositioner}>\n              {value.row?.original?.logo ? (\n                <img\n                  src={value.row?.original?.logo}\n                  alt=\"\"\n                  className={classes.logo}\n                />\n              ) : null}\n            </div>\n            <SmartAddress\n              chainId={value.row?.original?.originChainId}\n              address={value.row?.original?.assetAddress}\n              symbol={value.row?.original?.symbol}\n              tokenName={value.row?.original?.name}\n            />\n          </div>\n        ),\n      },\n      { Header: \"Chain\", accessor: \"originChain\" },\n      {\n        Header: \"Amount\",\n        accessor: \"amount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.amount !== undefined\n            ? numeral(value.row?.original?.amount).format(\"0,0.00\")\n            : \"\",\n      },\n      {\n        Header: \"Total Value (USD)\",\n        id: \"totalValue\",\n        accessor: \"totalValue\",\n        align: \"right\",\n        disableGroupBy: true,\n        aggregate: (leafValues: any) =>\n          balancePretty(\n            formatUnits(\n              leafValues.reduce(\n                (p: BigNumber, v: number | null | undefined) =>\n                  v ? p.add(parseUnits(v.toFixed(18).toString(), 18)) : p,\n                BigNumber.from(0)\n              ),\n              18\n            )\n          ),\n        Aggregated: ({ value }: { value: any }) => value,\n        Cell: (value: any) =>\n          value.row?.original?.totalValue !== undefined\n            ? numeral(value.row?.original?.totalValue).format(\"0.0 a\")\n            : \"\",\n      },\n      {\n        Header: \"Unit Price (USD)\",\n        accessor: \"quotePrice\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.quotePrice !== undefined\n            ? numeral(value.row?.original?.quotePrice).format(\"0,0.00\")\n            : \"\",\n      },\n    ];\n  }, [\n    classes.logo,\n    classes.tokenContainer,\n    classes.logoPositioner,\n    sortTokens,\n  ]);\n  const tvlString = useMemo(() => {\n    if (!tvl.data) {\n      return \"\";\n    } else {\n      let sum = 0;\n      tvl.data.forEach((val) => {\n        if (val.totalValue) sum += val.totalValue;\n      });\n      return numeral(sum).format(\"0 a\").toUpperCase();\n    }\n  }, [tvl.data]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Paper className={classes.mainPaper}>\n        <>\n          <div className={classes.flexBox}>\n            <div className={classes.explainerContainer}>\n              <Typography variant=\"h5\">Total Value Locked</Typography>\n              <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                These assets are currently locked by the Token Bridge contracts.\n              </Typography>\n            </div>\n            <div className={classes.grower} />\n            {!tvl.isFetching ? (\n              <div\n                className={clsx(\n                  classes.explainerContainer,\n                  classes.totalContainer\n                )}\n              >\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  component=\"div\"\n                  noWrap\n                >\n                  {\"Total (USD)\"}\n                </Typography>\n                <Typography\n                  variant=\"h3\"\n                  component=\"div\"\n                  noWrap\n                  className={classes.totalValue}\n                >\n                  {tvlString}\n                </Typography>\n              </div>\n            ) : null}\n          </div>\n          {!tvl.isFetching ? (\n            <MuiReactTable\n              columns={tvlColumns}\n              data={tvl.data}\n              skipPageReset={false}\n              initialState={{ sortBy: [{ id: \"totalValue\", desc: true }] }}\n            />\n          ) : (\n            <CircularProgress className={classes.alignCenter} />\n          )}\n        </>\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <NFTStats />\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <TransactionMetrics />\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <CustodyAddresses />\n      </Paper>\n    </Container>\n  );\n};\n\nexport default StatsRoot;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n  uint8ArrayToNative,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOLANA_SYSTEM_PROGRAM_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type OriginalAssetInfo = {\n  originChain: ChainId | null;\n  originAddress: string | null;\n  originTokenId: string | null;\n};\n\nexport async function getOriginalAssetToken(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  provider?: Web3Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider) {\n      promise = await getOriginalAssetEth(\n        getTokenBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = await getOriginalAssetSol(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    } else if (foreignChain === CHAIN_ID_TERRA) {\n      const lcd = new LCDClient(TERRA_HOST);\n      promise = await getOriginalAssetTerra(lcd, foreignNativeStringAddress);\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\nexport async function getOriginalAssetNFT(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  tokenId?: string,\n  provider?: Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider && tokenId) {\n      promise = getOriginalAssetEthNFT(\n        getNFTBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        tokenId,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = getOriginalAssetSolNFT(\n        connection,\n        SOL_NFT_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\n//TODO refactor useCheckIfWormholeWrapped to use this function, and probably move to SDK\nexport async function getOriginalAsset(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  nft: boolean,\n  tokenId?: string,\n  provider?: Provider\n): Promise<WormholeWrappedNFTInfo> {\n  const result = nft\n    ? await getOriginalAssetNFT(\n        foreignChain,\n        foreignNativeStringAddress,\n        tokenId,\n        provider\n      )\n    : await getOriginalAssetToken(\n        foreignChain,\n        foreignNativeStringAddress,\n        provider\n      );\n\n  if (\n    isEVMChain(result.chainId) &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      ethers.constants.AddressZero\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n  if (\n    result.chainId === CHAIN_ID_SOLANA &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      SOLANA_SYSTEM_PROGRAM_ADDRESS\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n\n  return result;\n}\n\n//This potentially returns the same chain as the foreign chain, in the case where the asset is native\nfunction useOriginalAsset(\n  foreignChain: ChainId,\n  foreignAddress: string,\n  nft: boolean,\n  tokenId?: string\n): DataWrapper<OriginalAssetInfo> {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const [originAddress, setOriginAddress] = useState<string | null>(null);\n  const [originTokenId, setOriginTokenId] = useState<string | null>(null);\n  const [originChain, setOriginChain] = useState<ChainId | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previousArgs, setPreviousArgs] = useState<{\n    foreignChain: ChainId;\n    foreignAddress: string;\n    nft: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.foreignChain === foreignChain &&\n    previousArgs.foreignAddress === foreignAddress &&\n    previousArgs.nft === nft &&\n    previousArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () => setPreviousArgs({ foreignChain, foreignAddress, nft, tokenId }),\n    [foreignChain, foreignAddress, nft, tokenId]\n  );\n\n  const argumentError = useMemo(\n    () =>\n      !foreignChain ||\n      !foreignAddress ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && nft && !tokenId) ||\n      argsEqual,\n    [isReady, nft, tokenId, argsEqual, foreignChain, foreignAddress]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setError(\"\");\n      setOriginAddress(null);\n      setOriginTokenId(null);\n      setOriginChain(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n\n    getOriginalAsset(foreignChain, foreignAddress, nft, tokenId, provider)\n      .then((result) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setArgs();\n          setOriginAddress(\n            hexToNativeString(\n              uint8ArrayToHex(result.assetAddress),\n              result.chainId\n            ) || null\n          );\n          setOriginTokenId(result.tokenId || null);\n          setOriginChain(result.chainId);\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Unable to determine original asset.\");\n        }\n      });\n  }, [\n    foreignChain,\n    foreignAddress,\n    nft,\n    provider,\n    setArgs,\n    argumentError,\n    tokenId,\n    argsEqual,\n  ]);\n\n  const output: DataWrapper<OriginalAssetInfo> = useMemo(\n    () => ({\n      error: error,\n      isFetching: isLoading,\n      data:\n        originChain || originAddress || originTokenId\n          ? { originChain, originAddress, originTokenId }\n          : null,\n      receivedAt: null,\n    }),\n    [isLoading, originAddress, originChain, originTokenId, error]\n  );\n\n  return output;\n}\n\nexport default useOriginalAsset;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport useFetchForeignAsset, {\n  ForeignAssetInfo,\n} from \"../hooks/useFetchForeignAsset\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetadata from \"../hooks/useMetadata\";\nimport useOriginalAsset, { OriginalAssetInfo } from \"../hooks/useOriginalAsset\";\nimport { COLORS } from \"../muiTheme\";\nimport { BETA_CHAINS, CHAINS, CHAINS_BY_ID } from \"../utils/consts\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport SmartAddress from \"./SmartAddress\";\nimport { RegisterNowButtonCore } from \"./Transfer/RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(2),\n    },\n  },\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  spacer: {\n    height: theme.spacing(3),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  arrowIcon: {\n    margin: \"0 auto\",\n    fontSize: \"70px\",\n  },\n  resultContainer: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction PrimaryAssetInfomation({\n  lookupChain,\n  lookupAsset,\n  originChain,\n  originAsset,\n  showLoader,\n}: {\n  lookupChain: ChainId;\n  lookupAsset: string;\n  originChain: ChainId;\n  originAsset: string;\n  showLoader: boolean;\n}) {\n  const classes = useStyles();\n  const tokenArray = useMemo(() => [originAsset], [originAsset]);\n  const metadata = useMetadata(originChain, tokenArray);\n  const nativeContent = (\n    <div>\n      <Typography>{`This is not a Wormhole wrapped token.`}</Typography>\n    </div>\n  );\n  const wrapped = (\n    <div>\n      <Typography>{`This is wrapped by Wormhole! Here is the original token: `}</Typography>\n      <div className={classes.flexBox}>\n        <Typography>{`Chain: ${CHAINS_BY_ID[originChain].name}`}</Typography>\n        <div>\n          <Typography component=\"div\">\n            {\"Token: \"}\n            <SmartAddress\n              address={originAsset}\n              chainId={originChain}\n              symbol={metadata.data?.get(originAsset)?.symbol}\n              tokenName={metadata.data?.get(originAsset)?.tokenName}\n            />\n          </Typography>\n        </div>\n      </div>\n    </div>\n  );\n  return lookupChain === originChain ? nativeContent : wrapped;\n}\n\nfunction SecondaryAssetInformation({\n  chainId,\n  foreignAssetInfo,\n  originAssetInfo,\n}: {\n  chainId: ChainId;\n  foreignAssetInfo?: ForeignAssetInfo;\n  originAssetInfo?: OriginalAssetInfo;\n}) {\n  const classes = useStyles();\n  const tokenArray: string[] = useMemo(() => {\n    //Saved to a variable to help typescript cope\n    const originAddress = originAssetInfo?.originAddress;\n    return originAddress && chainId === originAssetInfo?.originChain\n      ? [originAddress]\n      : foreignAssetInfo?.address\n      ? [foreignAssetInfo?.address]\n      : [];\n  }, [foreignAssetInfo, originAssetInfo, chainId]);\n  const metadata = useMetadata(chainId, tokenArray);\n  //TODO when this is the origin chain\n  return !originAssetInfo ? null : chainId === originAssetInfo.originChain ? (\n    <div>\n      <Typography>{`Transferring to ${CHAINS_BY_ID[chainId].name} will unwrap the token:`}</Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={originAssetInfo.originAddress || undefined}\n          symbol={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")\n              ?.tokenName || undefined\n          }\n        />\n      </div>\n    </div>\n  ) : !foreignAssetInfo ? null : foreignAssetInfo.doesExist === false ? (\n    <div>\n      <Typography>{`This token has not yet been registered on ${CHAINS_BY_ID[chainId].name}`}</Typography>\n      <RegisterNowButtonCore\n        originChain={originAssetInfo?.originChain || undefined}\n        originAsset={\n          nativeToHexString(\n            originAssetInfo?.originAddress || undefined,\n            originAssetInfo?.originChain || CHAIN_ID_SOLANA // this should exist\n          ) || undefined\n        }\n        targetChain={chainId}\n      />\n    </div>\n  ) : (\n    <div>\n      <Typography>When bridged, this asset becomes: </Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={foreignAssetInfo.address || undefined}\n          symbol={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.tokenName ||\n            undefined\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function TokenOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n\n  const [primaryLookupChain, setPrimaryLookupChain] = useState(CHAIN_ID_SOLANA);\n  const [primaryLookupAsset, setPrimaryLookupAsset] = useState(\"\");\n\n  const [secondaryLookupChain, setSecondaryLookupChain] =\n    useState(CHAIN_ID_TERRA);\n\n  const primaryLookupChainOptions = useMemo(\n    () => (isBeta ? CHAINS.filter((x) => !BETA_CHAINS.includes(x.id)) : CHAINS),\n    [isBeta]\n  );\n  const secondaryLookupChainOptions = useMemo(\n    () =>\n      isBeta\n        ? CHAINS.filter(\n            (x) => !BETA_CHAINS.includes(x.id) && x.id !== primaryLookupChain\n          )\n        : CHAINS.filter((x) => x.id !== primaryLookupChain),\n    [isBeta, primaryLookupChain]\n  );\n\n  const handlePrimaryLookupChainChange = useCallback(\n    (e) => {\n      setPrimaryLookupChain(e.target.value);\n      if (secondaryLookupChain === e.target.value) {\n        setSecondaryLookupChain(\n          e.target.value === CHAIN_ID_SOLANA ? CHAIN_ID_TERRA : CHAIN_ID_SOLANA\n        );\n      }\n      setPrimaryLookupAsset(\"\");\n    },\n    [secondaryLookupChain]\n  );\n  const handleSecondaryLookupChainChange = useCallback((e) => {\n    setSecondaryLookupChain(e.target.value);\n  }, []);\n  const handlePrimaryLookupAssetChange = useCallback((event) => {\n    setPrimaryLookupAsset(event.target.value);\n  }, []);\n\n  const originInfo = useOriginalAsset(\n    primaryLookupChain,\n    primaryLookupAsset,\n    false\n  );\n  const foreignAssetInfo = useFetchForeignAsset(\n    originInfo.data?.originChain || 1,\n    originInfo.data?.originAddress || \"\",\n    secondaryLookupChain\n  );\n\n  const primaryWalletIsActive = !originInfo.data;\n  const secondaryWalletIsActive = !primaryWalletIsActive;\n\n  const primaryWallet = useIsWalletReady(\n    primaryLookupChain,\n    primaryWalletIsActive\n  );\n  const secondaryWallet = useIsWalletReady(\n    secondaryLookupChain,\n    secondaryWalletIsActive\n  );\n\n  const primaryWalletError =\n    isEVMChain(primaryLookupChain) &&\n    primaryLookupAsset &&\n    !originInfo.data &&\n    !originInfo.error &&\n    (!primaryWallet.isReady ? primaryWallet.statusMessage : \"\");\n  const originError = originInfo.error;\n  const primaryError = primaryWalletError || originError;\n\n  const secondaryWalletError =\n    isEVMChain(secondaryLookupChain) &&\n    originInfo.data?.originAddress &&\n    originInfo.data?.originChain &&\n    !foreignAssetInfo.data &&\n    (!secondaryWallet.isReady ? secondaryWallet.statusMessage : \"\");\n  const foreignError = foreignAssetInfo.error;\n  const secondaryError = secondaryWalletError || foreignError;\n\n  const primaryContent = (\n    <>\n      <Typography variant=\"h5\">Source Information</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Enter a token from any supported chain to get started.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Chain\"\n        value={primaryLookupChain}\n        onChange={handlePrimaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {primaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        label=\"Paste an address\"\n        value={primaryLookupAsset}\n        onChange={handlePrimaryLookupAssetChange}\n      />\n      <div className={classes.centered}>\n        {isEVMChain(primaryLookupChain) ? (\n          <KeyAndBalance chainId={primaryLookupChain} />\n        ) : null}\n        {primaryError ? (\n          <Typography color=\"error\">{primaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {originInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <PrimaryAssetInfomation\n            lookupAsset={primaryLookupAsset}\n            lookupChain={primaryLookupChain}\n            originChain={originInfo.data.originChain}\n            originAsset={originInfo.data.originAddress}\n            showLoader={originInfo.isFetching}\n          />\n        ) : null}\n      </div>\n    </>\n  );\n\n  const secondaryContent = originInfo.data ? (\n    <>\n      <Typography variant=\"h5\">Bridge Results</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Select a chain to see the result of bridging this token.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Other Chain\"\n        value={secondaryLookupChain}\n        onChange={handleSecondaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {secondaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <div className={classes.centered}>\n        {isEVMChain(secondaryLookupChain) ? (\n          <KeyAndBalance chainId={secondaryLookupChain} />\n        ) : null}\n        {secondaryError ? (\n          <Typography color=\"error\">{secondaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {foreignAssetInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <SecondaryAssetInformation\n            foreignAssetInfo={foreignAssetInfo.data || undefined}\n            originAssetInfo={originInfo.data || undefined}\n            chainId={secondaryLookupChain}\n          />\n        ) : null}\n      </div>\n    </>\n  ) : null;\n\n  const content = (\n    <div>\n      <Container maxWidth=\"md\" className={classes.centered}>\n        <HeaderText white small>\n          Token Origin Verifier\n        </HeaderText>\n        <div className={classes.spacer} />\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>{primaryContent}</Card>\n        {secondaryContent ? (\n          <>\n            <div className={classes.centered}>\n              <ArrowDropDownIcon className={classes.arrowIcon} />\n            </div>\n            <Card className={classes.mainCard}>{secondaryContent}</Card>\n          </>\n        ) : null}\n      </Container>\n    </div>\n  );\n\n  return content;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useAssociatedAccountExistsState } from \"../components/SolanaCreateAssociatedAddress\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../utils/solana\";\n\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\n//If the pool doesn't exist in this app, it's an error.\nexport type SolanaMigratorInformation = {\n  poolAddress: string;\n  fromMint: string;\n  toMint: string;\n  fromMintDecimals: number;\n  fromAssociatedTokenAccountExists: boolean;\n  toAssociatedTokenAccountExists: boolean;\n  setToTokenAccountExists: any;\n  fromAssociatedTokenAccount: string;\n  toAssociatedTokenAccount: string;\n  fromAssociatedTokenAccountBalance: string;\n  toAssociatedTokenAccountBalance: string | null;\n  toCustodyAddress: string;\n  toCustodyBalance: string;\n\n  fromName: string | null;\n  fromSymbol: string | null;\n  fromLogo: string | null;\n  toName: string | null;\n  toSymbol: string | null;\n  toLogo: string | null;\n\n  getNotReadyCause: (amount: string) => string | null;\n\n  migrateTokens: (amount: string) => Promise<string>;\n};\n\n//TODO refactor the workflow page to use this hook\nexport default function useSolanaMigratorInformation(\n  fromMint: string,\n  toMint: string,\n  fromTokenAccount: string\n): DataWrapper<SolanaMigratorInformation> {\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA, false);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [error, setError] = useState(\"\");\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet && wallet.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet]);\n  /*\n      End effects\n      */\n\n  const migrateTokens = useCallback(\n    async (amount) => {\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(amount, fromMintDecimals).toBigInt()\n      );\n      return await signSendAndConfirm(wallet, connection, instruction);\n    },\n    [\n      connection,\n      fromMint,\n      fromTokenAccount,\n      toMint,\n      toTokenAccount,\n      wallet,\n      fromMintDecimals,\n    ]\n  );\n\n  const fromParse = useCallback(\n    (amount: string) => {\n      try {\n        return parseUnits(amount, fromMintDecimals).toBigInt();\n      } catch (e) {\n        return BigInt(0);\n      }\n    },\n    [fromMintDecimals]\n  );\n\n  const getNotReadyCause = useCallback(\n    (amount: string) => {\n      const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n      const accountsReady = fromTokenAccountExists && toTokenAccountExists;\n      const amountGreaterThanZero = fromParse(amount) > BigInt(0);\n      const sufficientFromTokens =\n        fromTokenAccountBalance &&\n        amount &&\n        fromParse(amount) <= fromParse(fromTokenAccountBalance);\n      const sufficientPoolBalance =\n        toCustodyBalance &&\n        amount &&\n        parseFloat(amount) <= parseFloat(toCustodyBalance);\n\n      if (!hasRequisiteData) {\n        return \"This asset is not supported.\";\n      } else if (!isReady) {\n        return \"Wallet is not connected.\";\n      } else if (!accountsReady) {\n        return \"You have not created the necessary token accounts.\";\n      } else if (!amount) {\n        return \"Enter an amount to transfer.\";\n      } else if (!amountGreaterThanZero) {\n        return \"Enter an amount greater than zero.\";\n      } else if (!sufficientFromTokens) {\n        return \"There are not sufficient funds in your wallet for this transfer.\";\n      } else if (!sufficientPoolBalance) {\n        return \"There are not sufficient funds in the pool for this transfer.\";\n      } else {\n        return \"\";\n      }\n    },\n    [\n      fromMint,\n      fromParse,\n      fromTokenAccountBalance,\n      fromTokenAccountExists,\n      isReady,\n      poolAddress,\n      poolExists,\n      toCustodyBalance,\n      toMint,\n      toTokenAccountExists,\n    ]\n  );\n\n  const getMetadata = useCallback(\n    (address: string) => {\n      const tokenMapItem = solanaTokenMap.data?.find(\n        (x) => x.address === address\n      );\n      const metaplexItem = metaplexData.data?.get(address);\n\n      return {\n        symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n        name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n        logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n      };\n    },\n    [metaplexData.data, solanaTokenMap.data]\n  );\n\n  const isFetching = solanaTokenMap.isFetching || metaplexData.isFetching; //TODO add loading state on the actual Solana information\n  const hasRequisiteData = !!(\n    fromMintDecimals !== null &&\n    fromMintDecimals !== undefined &&\n    toTokenAccount &&\n    fromTokenAccountBalance &&\n    toCustodyAddress &&\n    toCustodyBalance\n  );\n\n  const output: DataWrapper<SolanaMigratorInformation> = useMemo(() => {\n    let data: SolanaMigratorInformation | null = null;\n    if (hasRequisiteData) {\n      data = {\n        poolAddress,\n        fromMint,\n        toMint,\n        fromMintDecimals,\n        fromAssociatedTokenAccountExists: fromTokenAccountExists,\n        toAssociatedTokenAccountExists: toTokenAccountExists,\n        fromAssociatedTokenAccount: fromTokenAccount,\n        toAssociatedTokenAccount: toTokenAccount,\n        fromAssociatedTokenAccountBalance: fromTokenAccountBalance,\n        toAssociatedTokenAccountBalance: toTokenAccountBalance || null,\n        toCustodyAddress,\n        toCustodyBalance,\n\n        fromName: getMetadata(fromMint)?.name || null,\n        fromSymbol: getMetadata(fromMint)?.symbol || null,\n        fromLogo: getMetadata(fromMint)?.logo || null,\n        toName: getMetadata(toMint)?.name || null,\n        toSymbol: getMetadata(toMint)?.symbol || null,\n        toLogo: getMetadata(toMint)?.logo || null,\n\n        setToTokenAccountExists,\n\n        getNotReadyCause: getNotReadyCause,\n\n        migrateTokens,\n      };\n    }\n\n    return {\n      isFetching: isFetching,\n      error: error || !hasRequisiteData,\n      receivedAt: null,\n      data,\n    };\n  }, [\n    error,\n    isFetching,\n    hasRequisiteData,\n    poolAddress,\n    fromMint,\n    toMint,\n    fromMintDecimals,\n    fromTokenAccountExists,\n    toTokenAccountExists,\n    fromTokenAccount,\n    toTokenAccount,\n    fromTokenAccountBalance,\n    toTokenAccountBalance,\n    toCustodyAddress,\n    toCustodyBalance,\n    getMetadata,\n    getNotReadyCause,\n    migrateTokens,\n    setToTokenAccountExists,\n  ]);\n\n  return output;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSolanaMigratorInformation from \"../../hooks/useSolanaMigratorInformation\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  CHAINS_BY_ID,\n  getMigrationAssetMap,\n  SOLANA_HOST,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\nfunction SolanaMigrationLineItem({\n  migratorInfo,\n  onLoadComplete,\n}: {\n  migratorInfo: DefaultAssociatedTokenAccountInfo;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const poolInfo = useSolanaMigratorInformation(\n    migratorInfo.fromMintKey,\n    migratorInfo.toMintKey,\n    migratorInfo.defaultFromTokenAccount\n  );\n\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [migrationError, setMigrationError] = useState(\"\");\n\n  const handleMigrateClick = useCallback(() => {\n    if (!poolInfo.data) {\n      return;\n    }\n    setMigrationIsProcessing(true);\n    setMigrationError(\"\");\n    poolInfo.data\n      .migrateTokens(poolInfo.data.fromAssociatedTokenAccountBalance)\n      .then((result) => {\n        setMigrationIsProcessing(false);\n        setTransaction(result);\n      })\n      .catch((e) => {\n        setMigrationError(\"Unable to perform migration.\");\n        setMigrationIsProcessing(false);\n      });\n  }, [poolInfo.data]);\n\n  const precheckError =\n    poolInfo.data &&\n    poolInfo.data.getNotReadyCause(\n      poolInfo.data.fromAssociatedTokenAccountBalance\n    );\n\n  useEffect(() => {\n    if (poolInfo.data || poolInfo.error) {\n      onLoadComplete();\n    }\n  }, [poolInfo, onLoadComplete]);\n\n  if (!poolInfo.data) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Failed to load migration information for token\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={migratorInfo.fromMintKey}\n          />\n        </div>\n      </div>\n    );\n  } else if (transaction) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx\n            chainId={CHAIN_ID_SOLANA}\n            tx={{ id: transaction, block: 1 }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.fromAssociatedTokenAccount}\n            symbol={poolInfo.data.fromSymbol || undefined}\n            tokenName={poolInfo.data.fromName || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.toAssociatedTokenAccount}\n            symbol={poolInfo.data.toSymbol || undefined}\n            tokenName={poolInfo.data.toName || undefined}\n          />\n        </div>\n        {!poolInfo.data.toAssociatedTokenAccountExists ? (\n          <div className={classes.convertButton}>\n            <SolanaCreateAssociatedAddress\n              mintAddress={migratorInfo.toMintKey}\n              readableTargetAddress={poolInfo.data?.toAssociatedTokenAccount}\n              associatedAccountExists={\n                poolInfo.data.toAssociatedTokenAccountExists\n              }\n              setAssociatedAccountExists={poolInfo.data.setToTokenAccountExists}\n            />\n          </div>\n        ) : (\n          <div className={classes.convertButton}>\n            <ButtonWithLoader\n              showLoader={migrationIsProcessing}\n              onClick={handleMigrateClick}\n              error={\n                poolInfo.error\n                  ? poolInfo.error\n                  : migrationError\n                  ? migrationError\n                  : precheckError\n                  ? precheckError\n                  : \"\"\n              }\n              disabled={\n                !!poolInfo.error || !!precheckError || migrationIsProcessing\n              }\n            >\n              Convert\n            </ButtonWithLoader>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\ntype DefaultAssociatedTokenAccountInfo = {\n  fromMintKey: string;\n  toMintKey: string;\n  defaultFromTokenAccount: string;\n  fromAccountInfo: AccountInfo<ParsedAccountData> | null;\n};\n\nconst getTokenBalances = async (\n  walletAddress: string,\n  migrationMap: Map<string, string>\n): Promise<DefaultAssociatedTokenAccountInfo[]> => {\n  try {\n    const connection = new Connection(SOLANA_HOST);\n    const output: DefaultAssociatedTokenAccountInfo[] = [];\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      new PublicKey(walletAddress),\n      { programId: TOKEN_PROGRAM_ID },\n      \"confirmed\"\n    );\n    tokenAccounts.value.forEach((item) => {\n      if (\n        item.account != null &&\n        item.account.data?.parsed?.info?.tokenAmount?.uiAmountString &&\n        item.account.data?.parsed.info?.tokenAmount?.amount !== \"0\"\n      ) {\n        const fromMintKey = item.account.data.parsed.info.mint;\n        const toMintKey = migrationMap.get(fromMintKey);\n        if (toMintKey) {\n          output.push({\n            fromMintKey,\n            toMintKey: toMintKey,\n            defaultFromTokenAccount: item.pubkey.toString(),\n            fromAccountInfo: item.account,\n          });\n        }\n      }\n    });\n\n    return output;\n  } catch (e) {\n    console.error(e);\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function SolanaQuickMigrate() {\n  const chainId = CHAIN_ID_SOLANA;\n  const classes = useStyles();\n  const { isReady, walletAddress } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const [migrators, setMigrators] = useState<\n    DefaultAssociatedTokenAccountInfo[] | null\n  >(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && walletAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getTokenBalances(walletAddress, migrationMap).then(\n        (result) => {\n          if (!cancelled) {\n            setMigratorsFinishedLoading(0);\n            setMigrators(result.filter((x) => x.fromAccountInfo && x));\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, walletAddress, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <SolanaWalletKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((info) => {\n              return (\n                <SolanaMigrationLineItem\n                  migratorInfo={info}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  AppBar,\n  Button,\n  Container,\n  Hidden,\n  IconButton,\n  Link,\n  makeStyles,\n  Tab,\n  Tabs,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { BarChart, HelpOutline, Send } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport { useCallback } from \"react\";\nimport { useHistory, useLocation, useRouteMatch } from \"react-router\";\nimport {\n  Link as RouterLink,\n  NavLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Attest from \"./components/Attest\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./components/Home\";\nimport Migration from \"./components/Migration\";\nimport EvmQuickMigrate from \"./components/Migration/EvmQuickMigrate\";\nimport NFT from \"./components/NFT\";\nimport NFTOriginVerifier from \"./components/NFTOriginVerifier\";\nimport Recovery from \"./components/Recovery\";\nimport Transfer from \"./components/Transfer\";\nimport { useBetaContext } from \"./contexts/BetaContext\";\nimport { COLORS } from \"./muiTheme\";\nimport { CLUSTER } from \"./utils/consts\";\nimport Stats from \"./components/Stats\";\nimport TokenOriginVerifier from \"./components/TokenOriginVerifier\";\nimport SolanaQuickMigrate from \"./components/Migration/SolanaQuickMigrate\";\nimport Wormhole from \"./icons/wormhole-network.svg\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    background: COLORS.nearBlackWithMinorTransparency,\n    \"& > .MuiToolbar-root\": {\n      margin: \"auto\",\n      width: \"100%\",\n      maxWidth: 1100,\n    },\n  },\n  spacer: {\n    flex: 1,\n    width: \"100vw\",\n  },\n  link: {\n    ...theme.typography.body1,\n    color: theme.palette.text.primary,\n    marginLeft: theme.spacing(6),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginLeft: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: theme.spacing(1),\n    },\n    \"&.active\": {\n      color: theme.palette.primary.light,\n    },\n  },\n  bg: {\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,.1) 0%, rgba(138,146,178,.1) 33%, rgba(69,74,117,.1) 66%, rgba(98,104,143,.1) 100%), linear-gradient(45deg, rgba(153,69,255,.1) 0%, rgba(121,98,231,.1) 20%, rgba(0,209,140,.1) 100%)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n  },\n  content: {\n    margin: theme.spacing(2, 0),\n    [theme.breakpoints.up(\"md\")]: {\n      margin: theme.spacing(4, 0),\n    },\n  },\n  brandLink: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    \"&:hover\": {\n      textDecoration: \"none\",\n    },\n  },\n  brandText: {\n    ...theme.typography.h5,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 22,\n    },\n    fontWeight: \"500\",\n    background: `linear-gradient(160deg, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 100%);`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n    letterSpacing: \"3px\",\n    display: \"inline-block\",\n    marginLeft: theme.spacing(0.5),\n  },\n  iconButton: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginRight: theme.spacing(1),\n    },\n  },\n  gradientButton: {\n    backgroundImage: `linear-gradient(45deg, ${COLORS.blue} 0%, ${COLORS.nearBlack}20 50%,  ${COLORS.blue}30 62%, ${COLORS.nearBlack}50  120%)`,\n    transition: \"0.75s\",\n    backgroundSize: \"200% auto\",\n    boxShadow: \"0 0 20px #222\",\n    \"&:hover\": {\n      backgroundPosition:\n        \"right center\" /* change the direction of the change here */,\n    },\n  },\n  betaBanner: {\n    background: `linear-gradient(to left, ${COLORS.blue}40, ${COLORS.green}40);`,\n    padding: theme.spacing(1, 0),\n  },\n  wormholeIcon: {\n    height: 32,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    display: \"inline-block\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const isHomepage = useRouteMatch({ path: \"/\", exact: true });\n  const { push } = useHistory();\n  const { pathname } = useLocation();\n  const handleTabChange = useCallback(\n    (event, value) => {\n      push(value);\n    },\n    [push]\n  );\n  return (\n    <div className={classes.bg}>\n      <AppBar position=\"static\" color=\"inherit\" className={classes.appBar}>\n        <Toolbar>\n          <Link component={RouterLink} to=\"/\" className={classes.brandLink}>\n            <img\n              src={Wormhole}\n              alt=\"Wormhole\"\n              className={classes.wormholeIcon}\n            />\n            <Typography className={clsx(classes.link, classes.brandText)}>\n              wormhole\n            </Typography>\n          </Link>\n          <div className={classes.spacer} />\n          <Hidden implementation=\"css\" xsDown>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              {isHomepage ? (\n                <>\n                  <Tooltip title=\"View wormhole network stats\">\n                    <IconButton\n                      component={NavLink}\n                      to=\"/stats\"\n                      size=\"small\"\n                      className={clsx(classes.link, classes.iconButton)}\n                    >\n                      <BarChart />\n                    </IconButton>\n                  </Tooltip>\n                  <Button\n                    component={RouterLink}\n                    to=\"/transfer\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    className={classes.gradientButton}\n                  >\n                    Transfer Tokens\n                  </Button>\n                </>\n              ) : (\n                <Tooltip title=\"View the FAQ\">\n                  <Button\n                    href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    variant=\"outlined\"\n                    endIcon={<HelpOutline />}\n                  >\n                    FAQ\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          </Hidden>\n          <Hidden implementation=\"css\" smUp>\n            {isHomepage ? (\n              <>\n                <Tooltip title=\"View wormhole network stats\">\n                  <IconButton\n                    component={NavLink}\n                    to=\"/stats\"\n                    size=\"small\"\n                    className={classes.link + \" \" + classes.iconButton}\n                  >\n                    <BarChart />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Transfer tokens to another blockchain\">\n                  <IconButton\n                    component={NavLink}\n                    to=\"/transfer\"\n                    size=\"small\"\n                    className={classes.link}\n                  >\n                    <Send />\n                  </IconButton>\n                </Tooltip>\n              </>\n            ) : (\n              <Tooltip title=\"View the FAQ\">\n                <IconButton\n                  href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  size=\"small\"\n                  className={classes.link}\n                >\n                  <HelpOutline />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Hidden>\n        </Toolbar>\n      </AppBar>\n      {CLUSTER === \"mainnet\" ? null : (\n        <AppBar position=\"static\" className={classes.betaBanner}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You are using the {CLUSTER} build of this app.\n          </Typography>\n        </AppBar>\n      )}\n      {isBeta ? (\n        <AppBar position=\"static\" className={classes.betaBanner}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You have enabled the beta. Enter the secret code again to\n            disable.\n          </Typography>\n        </AppBar>\n      ) : null}\n      <div className={classes.content}>\n        {[\"/transfer\", \"/nft\", \"/redeem\"].includes(pathname) ? (\n          <Container maxWidth=\"md\" style={{ paddingBottom: 24 }}>\n            <Tabs\n              value={pathname}\n              variant=\"fullWidth\"\n              onChange={handleTabChange}\n              indicatorColor=\"primary\"\n            >\n              <Tab label=\"Tokens\" value=\"/transfer\" />\n              <Tab label=\"NFTs\" value=\"/nft\" />\n              <Tab label=\"Redeem\" value=\"/redeem\" to=\"/redeem\" />\n            </Tabs>\n          </Container>\n        ) : null}\n        <Switch>\n          <Route exact path=\"/transfer\">\n            <Transfer />\n          </Route>\n          <Route exact path=\"/nft\">\n            <NFT />\n          </Route>\n          <Route exact path=\"/redeem\">\n            <Recovery />\n          </Route>\n          <Route exact path=\"/nft-origin-verifier\">\n            <NFTOriginVerifier />\n          </Route>\n          <Route exact path=\"/token-origin-verifier\">\n            <TokenOriginVerifier />\n          </Route>\n          <Route exact path=\"/register\">\n            <Attest />\n          </Route>\n          <Route exact path=\"/migrate/Solana/:legacyAsset/:fromTokenAccount\">\n            <Migration chainId={CHAIN_ID_SOLANA} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Solana/\">\n            <SolanaQuickMigrate />\n          </Route>\n          <Route exact path=\"/stats\">\n            <Stats />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route>\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </div>\n      <div className={classes.spacer} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { makeStyles } from \"@material-ui/core\";\n// import { useRouteMatch } from \"react-router\";\n\nconst useStyles = makeStyles((theme) => ({\n  holeOuterContainer: {\n    maxWidth: \"100%\",\n    width: \"100%\",\n    position: \"relative\",\n  },\n  holeInnerContainer: {\n    position: \"absolute\",\n    zIndex: -1,\n    left: \"50%\",\n    transform: \"translate(-50%, 0)\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  holeImage: {\n    width: \"max(1200px, 100vw)\",\n    maxWidth: \"1600px\",\n  },\n  blurred: {\n    filter: \"blur(2px)\",\n    opacity: \".9\",\n  },\n}));\n\nconst BackgroundImage = () => {\n  const classes = useStyles();\n  // const isHomepage = useRouteMatch({ path: \"/\", exact: true });\n\n  return (\n    <div className={classes.holeOuterContainer}>\n      <div className={classes.holeInnerContainer}></div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Typography variant=\"h5\" style={{ textAlign: \"center\", marginTop: 24 }}>\n          An unexpected error has occurred. Please refresh the page.\n        </Typography>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport attestReducer from \"./attestSlice\";\nimport nftReducer from \"./nftSlice\";\nimport transferReducer from \"./transferSlice\";\nimport tokenReducer from \"./tokenSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    attest: attestReducer,\n    nft: nftReducer,\n    transfer: transferReducer,\n    tokens: tokenReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { SnackbarProvider } from \"notistack\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport BackgroundImage from \"./components/BackgroundImage\";\nimport { BetaContextProvider } from \"./contexts/BetaContext\";\nimport { EthereumProviderProvider } from \"./contexts/EthereumProviderContext\";\nimport { SolanaWalletProvider } from \"./contexts/SolanaWalletContext.tsx\";\nimport { TerraWalletProvider } from \"./contexts/TerraWalletContext.tsx\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { theme } from \"./muiTheme\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <ErrorBoundary>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <ErrorBoundary>\n          <SnackbarProvider maxSnack={3}>\n            <BetaContextProvider>\n              <SolanaWalletProvider>\n                <EthereumProviderProvider>\n                  <TerraWalletProvider>\n                    <HashRouter>\n                      <BackgroundImage />\n                      <App />\n                    </HashRouter>\n                  </TerraWalletProvider>\n                </EthereumProviderProvider>\n              </SolanaWalletProvider>\n            </BetaContextProvider>\n          </SnackbarProvider>\n        </ErrorBoundary>\n      </ThemeProvider>\n    </Provider>\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { RootState } from \".\";\n\n/*\n * Attest\n */\n\nexport const selectAttestActiveStep = (state: RootState) =>\n  state.attest.activeStep;\nexport const selectAttestSourceChain = (state: RootState) =>\n  state.attest.sourceChain;\nexport const selectAttestSourceAsset = (state: RootState) =>\n  state.attest.sourceAsset;\nexport const selectAttestTargetChain = (state: RootState) =>\n  state.attest.targetChain;\nexport const selectAttestAttestTx = (state: RootState) => state.attest.attestTx;\nexport const selectAttestSignedVAAHex = (state: RootState) =>\n  state.attest.signedVAAHex;\nexport const selectAttestIsSending = (state: RootState) =>\n  state.attest.isSending;\nexport const selectAttestIsCreating = (state: RootState) =>\n  state.attest.isCreating;\nexport const selectAttestCreateTx = (state: RootState) => state.attest.createTx;\nexport const selectAttestIsSourceComplete = (state: RootState) =>\n  !!state.attest.sourceChain && !!state.attest.sourceAsset;\n// TODO: check wrapped asset exists or is native attest\nexport const selectAttestIsTargetComplete = (state: RootState) =>\n  selectAttestIsSourceComplete(state) && !!state.attest.targetChain;\nexport const selectAttestIsSendComplete = (state: RootState) =>\n  !!selectAttestSignedVAAHex(state);\nexport const selectAttestIsCreateComplete = (state: RootState) =>\n  !!selectAttestCreateTx(state);\nexport const selectAttestShouldLockFields = (state: RootState) =>\n  selectAttestIsSending(state) || selectAttestIsSendComplete(state);\n\n/*\n * NFT\n */\n\nexport const selectNFTActiveStep = (state: RootState) => state.nft.activeStep;\nexport const selectNFTSourceChain = (state: RootState) => state.nft.sourceChain;\nexport const selectNFTSourceAsset = (state: RootState) => {\n  return state.nft.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectNFTIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.nft.isSourceAssetWormholeWrapped;\nexport const selectNFTOriginChain = (state: RootState) => state.nft.originChain;\nexport const selectNFTOriginAsset = (state: RootState) => state.nft.originAsset;\nexport const selectNFTOriginTokenId = (state: RootState) =>\n  state.nft.originTokenId;\nexport const selectNFTSourceWalletAddress = (state: RootState) =>\n  state.nft.sourceWalletAddress;\nexport const selectNFTSourceParsedTokenAccount = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount;\nexport const selectNFTSourceParsedTokenAccounts = (state: RootState) =>\n  state.nft.sourceParsedTokenAccounts;\nexport const selectNFTSourceBalanceString = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectNFTTargetChain = (state: RootState) => state.nft.targetChain;\nexport const selectNFTTargetAddressHex = (state: RootState) =>\n  state.nft.targetAddressHex;\nexport const selectNFTTargetAsset = (state: RootState) =>\n  state.nft.targetAsset.data?.address;\nexport const selectNFTTransferTx = (state: RootState) => state.nft.transferTx;\nexport const selectNFTSignedVAAHex = (state: RootState) =>\n  state.nft.signedVAAHex;\nexport const selectNFTIsSending = (state: RootState) => state.nft.isSending;\nexport const selectNFTIsRedeeming = (state: RootState) => state.nft.isRedeeming;\nexport const selectNFTRedeemTx = (state: RootState) => state.nft.redeemTx;\nexport const selectNFTSourceError = (state: RootState): string | undefined => {\n  if (!state.nft.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.nft.sourceParsedTokenAccount) {\n    return \"Select an NFT\";\n  }\n  if (\n    state.nft.sourceChain === CHAIN_ID_SOLANA &&\n    !state.nft.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.nft.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  if (state.nft.sourceParsedTokenAccount.decimals !== 0) {\n    // TODO: more advanced NFT check - also check supply and uri\n    return \"For non-NFTs, use the Transfer flow\";\n  }\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.nft.sourceParsedTokenAccount.uiAmountString,\n        state.nft.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Balance must be greater than zero\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectNFTIsSourceComplete = (state: RootState) =>\n  !selectNFTSourceError(state);\nexport const selectNFTTargetError = (state: RootState) => {\n  const sourceError = selectNFTSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.nft.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.nft.sourceChain === state.nft.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (\n    state.nft.targetChain === CHAIN_ID_SOLANA &&\n    !selectNFTTargetAsset(state)\n  ) {\n    // target asset is only required for solana\n    // in the cases of new transfers, target asset will not exist and be created on redeem\n    // Solana requires the derived address to derive the associated token account which is the target on the vaa\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.nft.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectNFTIsTargetComplete = (state: RootState) =>\n  !selectNFTTargetError(state);\nexport const selectNFTIsSendComplete = (state: RootState) =>\n  !!selectNFTSignedVAAHex(state);\nexport const selectNFTIsRedeemComplete = (state: RootState) =>\n  !!selectNFTRedeemTx(state);\nexport const selectNFTShouldLockFields = (state: RootState) =>\n  selectNFTIsSending(state) || selectNFTIsSendComplete(state);\nexport const selectNFTIsRecovery = (state: RootState) => state.nft.isRecovery;\n/*\n * Transfer\n */\n\nexport const selectTransferActiveStep = (state: RootState) =>\n  state.transfer.activeStep;\nexport const selectTransferSourceChain = (state: RootState) =>\n  state.transfer.sourceChain;\nexport const selectTransferSourceAsset = (state: RootState) => {\n  return state.transfer.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectTransferIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.transfer.isSourceAssetWormholeWrapped;\nexport const selectTransferOriginChain = (state: RootState) =>\n  state.transfer.originChain;\nexport const selectTransferOriginAsset = (state: RootState) =>\n  state.transfer.originAsset;\nexport const selectSourceWalletAddress = (state: RootState) =>\n  state.transfer.sourceWalletAddress;\nexport const selectTransferSourceParsedTokenAccount = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount;\nexport const selectTransferSourceParsedTokenAccounts = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccounts;\nexport const selectTransferSourceBalanceString = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferAmount = (state: RootState) => state.transfer.amount;\nexport const selectTransferTargetChain = (state: RootState) =>\n  state.transfer.targetChain;\nexport const selectTransferTargetAddressHex = (state: RootState) =>\n  state.transfer.targetAddressHex;\nexport const selectTransferTargetAssetWrapper = (state: RootState) =>\n  state.transfer.targetAsset;\nexport const selectTransferTargetAsset = (state: RootState) =>\n  state.transfer.targetAsset.data?.address;\nexport const selectTransferTargetParsedTokenAccount = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount;\nexport const selectTransferTargetBalanceString = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferTransferTx = (state: RootState) =>\n  state.transfer.transferTx;\nexport const selectTransferSignedVAAHex = (state: RootState) =>\n  state.transfer.signedVAAHex;\nexport const selectTransferIsSending = (state: RootState) =>\n  state.transfer.isSending;\nexport const selectTransferIsRedeeming = (state: RootState) =>\n  state.transfer.isRedeeming;\nexport const selectTransferRedeemTx = (state: RootState) =>\n  state.transfer.redeemTx;\nexport const selectTransferIsApproving = (state: RootState) =>\n  state.transfer.isApproving;\nexport const selectTransferSourceError = (\n  state: RootState\n): string | undefined => {\n  if (!state.transfer.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount) {\n    return \"Select a token\";\n  }\n  if (!state.transfer.amount) {\n    return \"Enter an amount\";\n  }\n  if (\n    state.transfer.sourceChain === CHAIN_ID_SOLANA &&\n    !state.transfer.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  // no NFT check - NFTs should be blocked by all token pickers\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Amount must be greater than zero\";\n    }\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).gt(\n        parseUnits(\n          state.transfer.sourceParsedTokenAccount.uiAmountString,\n          state.transfer.sourceParsedTokenAccount.decimals\n        )\n      )\n    ) {\n      return \"Amount may not be greater than balance\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectTransferIsSourceComplete = (state: RootState) =>\n  !selectTransferSourceError(state);\nexport const UNREGISTERED_ERROR_MESSAGE =\n  \"Target asset unavailable. Is the token registered?\";\nexport const selectTransferTargetError = (state: RootState) => {\n  const sourceError = selectTransferSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.transfer.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.transfer.sourceChain === state.transfer.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (!selectTransferTargetAsset(state)) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (\n    isEVMChain(state.transfer.targetChain) &&\n    selectTransferTargetAsset(state) === ethers.constants.AddressZero\n  ) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.transfer.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectTransferIsTargetComplete = (state: RootState) =>\n  !selectTransferTargetError(state);\nexport const selectTransferIsSendComplete = (state: RootState) =>\n  !!selectTransferSignedVAAHex(state);\nexport const selectTransferIsRedeemComplete = (state: RootState) =>\n  !!selectTransferRedeemTx(state);\nexport const selectTransferShouldLockFields = (state: RootState) =>\n  selectTransferIsSending(state) || selectTransferIsSendComplete(state);\nexport const selectTransferIsRecovery = (state: RootState) =>\n  state.transfer.isRecovery;\n\nexport const selectSolanaTokenMap = (state: RootState) => {\n  return state.tokens.solanaTokenMap;\n};\n\nexport const selectTerraTokenMap = (state: RootState) => {\n  return state.tokens.terraTokenMap;\n};\n\nexport const selectMarketsMap = (state: RootState) => {\n  return state.tokens.marketsMap;\n};\n","import {\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  MenuItem,\n  OutlinedTextFieldProps,\n  TextField,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { useMemo } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { BETA_CHAINS, ChainInfo } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\nconst createChainMenuItem = ({ id, name, logo }: ChainInfo, classes: any) => (\n  <MenuItem key={id} value={id}>\n    <ListItemIcon className={classes.listItemIcon}>\n      <img src={logo} alt={name} className={classes.icon} />\n    </ListItemIcon>\n    <ListItemText>{name}</ListItemText>\n  </MenuItem>\n);\n\ninterface ChainSelectProps extends OutlinedTextFieldProps {\n  chains: ChainInfo[];\n}\n\nexport default function ChainSelect({ chains, ...rest }: ChainSelectProps) {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const filteredChains = useMemo(\n    () =>\n      chains.filter(({ id }) => (isBeta ? true : !BETA_CHAINS.includes(id))),\n    [chains, isBeta]\n  );\n  return (\n    <TextField {...rest} className={clsx(classes.select, rest.className)}>\n      {filteredChains.map((chain) => createChainMenuItem(chain, classes))}\n    </TextField>\n  );\n}\n","import { ChainId, getSignedVAA } from \"@certusone/wormhole-sdk\";\nimport { WORMHOLE_RPC_HOSTS } from \"./consts\";\n\nexport let CURRENT_WORMHOLE_RPC_HOST = -1;\n\nexport const getNextRpcHost = () =>\n  ++CURRENT_WORMHOLE_RPC_HOST % WORMHOLE_RPC_HOSTS.length;\n\nexport async function getSignedVAAWithRetry(\n  emitterChain: ChainId,\n  emitterAddress: string,\n  sequence: string,\n  retryAttempts?: number\n) {\n  let result;\n  let attempts = 0;\n  while (!result) {\n    attempts++;\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      result = await getSignedVAA(\n        WORMHOLE_RPC_HOSTS[getNextRpcHost()],\n        emitterChain,\n        emitterAddress,\n        sequence\n      );\n    } catch (e) {\n      if (retryAttempts !== undefined && attempts > retryAttempts) {\n        throw e;\n      }\n    }\n  }\n  return result;\n}\n","import React, { ReactChildren, useContext, useEffect, useState } from \"react\";\n\nconst BetaContext = React.createContext<boolean>(false);\n\nexport const BetaContextProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [isBetaEnabled, setIsBetaEnabled] = useState(false);\n\n  useEffect(() => {\n    let userEntered = [];\n    const secretSequence = [\n      \"38\",\n      \"38\",\n      \"40\",\n      \"40\",\n      \"37\",\n      \"39\",\n      \"37\",\n      \"39\",\n      \"66\",\n      \"65\",\n    ];\n    const secretListener = (event: KeyboardEvent) => {\n      const k = event.keyCode.toString();\n      if (k === secretSequence[userEntered.length]) {\n        userEntered.push(k);\n        if (userEntered.length === secretSequence.length) {\n          userEntered = [];\n          setIsBetaEnabled((prev) => !prev);\n        }\n      } else {\n        userEntered = [];\n      }\n    };\n    window.addEventListener(\"keydown\", secretListener);\n    return () => {\n      window.removeEventListener(\"keydown\", secretListener);\n    };\n  }, []);\n\n  return (\n    <BetaContext.Provider value={isBetaEnabled}>\n      {children}\n    </BetaContext.Provider>\n  );\n};\n\nexport const useBetaContext = () => {\n  return useContext(BetaContext);\n};\n","export default __webpack_public_path__ + \"static/media/eth.364436c5.svg\";","export default __webpack_public_path__ + \"static/media/polygon.97ff139c.svg\";","import { Typography } from \"@material-ui/core\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst EthereumSignerKey = () => {\n  const { connect, disconnect, signerAddress, providerError } =\n    useEthereumProvider();\n  return (\n    <>\n      <ToggleConnectedButton\n        connect={connect}\n        disconnect={disconnect}\n        connected={!!signerAddress}\n        pk={signerAddress || \"\"}\n      />\n      {providerError ? (\n        <Typography variant=\"body2\" color=\"error\">\n          {providerError}\n        </Typography>\n      ) : null}\n    </>\n  );\n};\n\nexport default EthereumSignerKey;\n","import { makeStyles } from \"@material-ui/core\";\nimport DisconnectIcon from \"@material-ui/icons/LinkOff\";\nimport {\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-material-ui\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: \"center\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  disconnectButton: {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst SolanaWalletKey = () => {\n  const classes = useStyles();\n  const wallet = useSolanaWallet();\n  return (\n    <div className={classes.root}>\n      <WalletMultiButton />\n      {wallet && (\n        <WalletDisconnectButton\n          startIcon={<DisconnectIcon />}\n          className={classes.disconnectButton}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SolanaWalletKey;\n","export default __webpack_public_path__ + \"static/media/bsc.2e866e3f.svg\";","export default __webpack_public_path__ + \"static/media/solana.fa522d66.svg\";","import { PublicKey, AccountInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { deserializeUnchecked } from \"borsh\";\nimport { BinaryReader, BinaryWriter } from \"borsh\";\nconst base58: any = require(\"bs58\");\n\n// eslint-disable-next-line\nexport const METADATA_REPLACE = new RegExp(\"\\u0000\", \"g\");\nexport const EDITION_MARKER_BIT_SIZE = 248;\nexport const METADATA_PREFIX = \"metadata\";\nexport const EDITION = \"edition\";\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = \"\";\n  lamports: number = 0;\n\n  get data() {\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== \"string\") {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nexport const MEMO_ID = new PublicKey(\n  \"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"\n);\n\nexport const METADATA_PROGRAM_ID =\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\" as StringPublicKey;\n\nexport const VAULT_ID =\n  \"vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn\" as StringPublicKey;\n\nexport const AUCTION_ID =\n  \"auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8\" as StringPublicKey;\n\nexport const METAPLEX_ID =\n  \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\" as StringPublicKey;\n\nexport const SYSTEM = new PublicKey(\"11111111111111111111111111111111\");\n\nexport const getStoreID = async (storeOwnerAddress?: string) => {\n  if (!storeOwnerAddress) {\n    return undefined;\n  }\n\n  const programs = await findProgramAddress(\n    [\n      Buffer.from(\"metaplex\"),\n      toPublicKey(METAPLEX_ID).toBuffer(),\n      toPublicKey(storeOwnerAddress).toBuffer(),\n    ],\n    toPublicKey(METAPLEX_ID)\n  );\n  const storeAddress = programs[0];\n\n  return storeAddress;\n};\n\nexport const setProgramIds = async (store?: string) => {\n  STORE = store ? toPublicKey(store) : undefined;\n};\n\nlet STORE: PublicKey | undefined;\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    metadata: METADATA_PROGRAM_ID,\n    memo: MEMO_ID,\n    vault: VAULT_ID,\n    auction: AUCTION_ID,\n    metaplex: METAPLEX_ID,\n    store: STORE,\n  };\n};\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n) => {\n  const key =\n    \"pda-\" +\n    seeds.reduce((agg, item) => agg + item.toString(\"hex\"), \"\") +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\nexport type StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport async function getEdition(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  const PROGRAM_IDS = programIds();\n\n  return (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        toPublicKey(PROGRAM_IDS.metadata).toBuffer(),\n        toPublicKey(tokenMint).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      toPublicKey(PROGRAM_IDS.metadata)\n    )\n  )[0];\n}\n\nclass CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\nclass UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n    this.primarySaleHappened = args.primarySaleHappened;\n  }\n}\n\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n\n  public async init() {\n    const edition = await getEdition(this.mint);\n    this.edition = edition;\n    this.masterEdition = edition;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass MintPrintingTokensArgs {\n  instruction: number = 9;\n  supply: BN;\n\n  constructor(args: { supply: BN }) {\n    this.supply = args.supply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error(\"bad index for edition\");\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    // eslint-disable-next-line\n    return appliedMask != 0;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", Data],\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", { kind: \"option\", type: Data }],\n        [\"updateAuthority\", { kind: \"option\", type: \"pubkeyAsString\" }],\n        [\"primarySaleHappened\", { kind: \"option\", type: \"u8\" }],\n      ],\n    },\n  ],\n\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    MintPrintingTokensArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"supply\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV1,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n        [\"printingMint\", \"pubkeyAsString\"],\n        [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"parent\", \"pubkeyAsString\"],\n        [\"edition\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"ledger\", [31]],\n      ],\n    },\n  ],\n]);\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, \"\");\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, \"\");\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, \"\");\n  return metadata;\n};\n\nexport const getMetadataAddress = async (\n  mintKey: string\n): Promise<[PublicKey, number]> => {\n  const seeds = [\n    Buffer.from(\"metadata\"),\n    new PublicKey(METADATA_PROGRAM_ID).toBuffer(),\n    new PublicKey(mintKey).toBuffer(),\n  ];\n  return PublicKey.findProgramAddress(\n    seeds,\n    new PublicKey(METADATA_PROGRAM_ID)\n  );\n};\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface ParsedTokenAccount {\n  publicKey: string;\n  mintKey: string;\n  amount: string;\n  decimals: number;\n  uiAmount: number;\n  uiAmountString: string;\n  symbol?: string;\n  name?: string;\n  logo?: string;\n  isNativeAsset?: boolean;\n}\n\nexport interface Transaction {\n  id: string;\n  block: number;\n}\n\nexport interface TransferState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: ParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<ParsedTokenAccount[]>;\n  amount: string;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  targetParsedTokenAccount: ParsedTokenAccount | undefined;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isApproving: boolean;\n  isRecovery: boolean;\n}\n\nconst initialState: TransferState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  amount: \"\",\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  targetParsedTokenAccount: undefined,\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isApproving: false,\n  isRecovery: false,\n};\n\nexport const transferSlice = createSlice({\n  name: \"transfer\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setAmount: (state, action: PayloadAction<string>) => {\n      state.amount = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n      state.targetParsedTokenAccount = undefined;\n    },\n    setTargetParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.targetParsedTokenAccount = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    setIsApproving: (state, action: PayloadAction<boolean>) => {\n      state.isApproving = action.payload;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string;\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setAmount,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTargetParsedTokenAccount,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  setIsApproving,\n  reset,\n  setRecoveryVaa,\n} = transferSlice.actions;\n\nexport default transferSlice.reducer;\n","import { Button, makeStyles, Tooltip } from \"@material-ui/core\";\nimport { LinkOff } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n}));\n\nconst ToggleConnectedButton = ({\n  connect,\n  disconnect,\n  connected,\n  pk,\n}: {\n  connect(): any;\n  disconnect(): any;\n  connected: boolean;\n  pk: string;\n}) => {\n  const classes = useStyles();\n  const is0x = pk.startsWith(\"0x\");\n  return connected ? (\n    <Tooltip title={pk}>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        onClick={disconnect}\n        className={classes.button}\n        startIcon={<LinkOff />}\n      >\n        Disconnect {pk.substring(0, is0x ? 6 : 3)}...\n        {pk.substr(pk.length - (is0x ? 4 : 3))}\n      </Button>\n    </Tooltip>\n  ) : (\n    <Button\n      color=\"primary\"\n      variant=\"contained\"\n      size=\"small\"\n      onClick={connect}\n      className={classes.button}\n    >\n      Connect\n    </Button>\n  );\n};\n\nexport default ToggleConnectedButton;\n","import {\n  NetworkInfo,\n  Wallet,\n  WalletProvider,\n  useWallet,\n} from \"@terra-money/wallet-provider\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nconst mainnet = {\n  name: \"mainnet\",\n  chainID: \"columbus-4\",\n  lcd: \"https://lcd.terra.dev\",\n};\n\nconst localnet = {\n  name: \"localnet\",\n  chainID: \"localnet\",\n  lcd: TERRA_HOST.URL,\n};\n\nconst walletConnectChainIds: Record<number, NetworkInfo> = {\n  0: localnet,\n  1: mainnet,\n};\n\ninterface ITerraWalletContext {\n  connect(): void;\n  disconnect(): void;\n  connected: boolean;\n  wallet: any;\n}\n\nconst TerraWalletContext = React.createContext<ITerraWalletContext>({\n  connect: () => {},\n  disconnect: () => {},\n  connected: false,\n  wallet: null,\n});\n\nexport const TerraWalletWrapper = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  // TODO: Use wallet instead of useConnectedWallet.\n  const terraWallet = useWallet();\n  const [, setWallet] = useState<Wallet | undefined>(undefined);\n  const [connected, setConnected] = useState(false);\n\n  const connect = useCallback(() => {\n    const CHROME_EXTENSION = 1;\n    if (terraWallet) {\n      terraWallet.connect(terraWallet.availableConnectTypes[CHROME_EXTENSION]);\n      setWallet(terraWallet);\n      setConnected(true);\n    }\n  }, [terraWallet]);\n\n  const disconnect = useCallback(() => {\n    setConnected(false);\n    setWallet(undefined);\n  }, []);\n\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      connected,\n      wallet: terraWallet,\n    }),\n    [connect, disconnect, connected, terraWallet]\n  );\n\n  return (\n    <TerraWalletContext.Provider value={contextValue}>\n      {children}\n    </TerraWalletContext.Provider>\n  );\n};\n\nexport const TerraWalletProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  return (\n    <WalletProvider\n      defaultNetwork={localnet}\n      walletConnectChainIds={walletConnectChainIds}\n    >\n      <TerraWalletWrapper>{children}</TerraWalletWrapper>\n    </WalletProvider>\n  );\n};\n\nexport const useTerraWallet = () => {\n  return useContext(TerraWalletContext);\n};\n","export type DataWrapper<T> = {\n  data: T | null;\n  error: any | null;\n  isFetching: boolean;\n  receivedAt: string | null;\n  //possibly invalidate\n};\n\nexport function getEmptyDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function receiveDataWrapper<T>(data: T): DataWrapper<T> {\n  return {\n    data,\n    error: null,\n    isFetching: false,\n    receivedAt: new Date().toISOString(),\n  };\n}\n\nexport function errorDataWrapper<T>(error: string): DataWrapper<T> {\n  return {\n    data: null,\n    error,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function fetchDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: true,\n    receivedAt: null,\n  };\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BigNumber, ethers } from \"ethers\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\n\nexport type Provider = ethers.providers.Web3Provider | undefined;\nexport type Signer = ethers.Signer | undefined;\n\ninterface IEthereumProviderContext {\n  connect(): void;\n  disconnect(): void;\n  provider: Provider;\n  chainId: number | undefined;\n  signer: Signer;\n  signerAddress: string | undefined;\n  providerError: string | null;\n}\n\nconst EthereumProviderContext = React.createContext<IEthereumProviderContext>({\n  connect: () => {},\n  disconnect: () => {},\n  provider: undefined,\n  chainId: undefined,\n  signer: undefined,\n  signerAddress: undefined,\n  providerError: null,\n});\nexport const EthereumProviderProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [providerError, setProviderError] = useState<string | null>(null);\n  const [provider, setProvider] = useState<Provider>(undefined);\n  const [chainId, setChainId] = useState<number | undefined>(undefined);\n  const [signer, setSigner] = useState<Signer>(undefined);\n  const [signerAddress, setSignerAddress] = useState<string | undefined>(\n    undefined\n  );\n  const connect = useCallback(() => {\n    setProviderError(null);\n    detectEthereumProvider()\n      .then((detectedProvider) => {\n        if (detectedProvider) {\n          const provider = new ethers.providers.Web3Provider(\n            // @ts-ignore\n            detectedProvider,\n            \"any\"\n          );\n          provider\n            .send(\"eth_requestAccounts\", [])\n            .then(() => {\n              setProviderError(null);\n              setProvider(provider);\n              provider\n                .getNetwork()\n                .then((network) => {\n                  setChainId(network.chainId);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the network\"\n                  );\n                });\n              const signer = provider.getSigner();\n              setSigner(signer);\n              signer\n                .getAddress()\n                .then((address) => {\n                  setSignerAddress(address);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the signer address\"\n                  );\n                });\n              // TODO: try using ethers directly\n              // @ts-ignore\n              if (detectedProvider && detectedProvider.on) {\n                // @ts-ignore\n                detectedProvider.on(\"chainChanged\", (chainId) => {\n                  try {\n                    setChainId(BigNumber.from(chainId).toNumber());\n                  } catch (e) {}\n                });\n                // @ts-ignore\n                detectedProvider.on(\"accountsChanged\", (accounts) => {\n                  try {\n                    const signer = provider.getSigner();\n                    setSigner(signer);\n                    signer\n                      .getAddress()\n                      .then((address) => {\n                        setSignerAddress(address);\n                      })\n                      .catch(() => {\n                        setProviderError(\n                          \"An error occurred while getting the signer address\"\n                        );\n                      });\n                  } catch (e) {}\n                });\n              }\n            })\n            .catch(() => {\n              setProviderError(\n                \"An error occurred while requesting eth accounts\"\n              );\n            });\n        } else {\n          setProviderError(\"Please install MetaMask\");\n        }\n      })\n      .catch(() => {\n        setProviderError(\"Please install MetaMask\");\n      });\n  }, []);\n  const disconnect = useCallback(() => {\n    setProviderError(null);\n    setProvider(undefined);\n    setChainId(undefined);\n    setSigner(undefined);\n    setSignerAddress(undefined);\n  }, []);\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    }),\n    [\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    ]\n  );\n  return (\n    <EthereumProviderContext.Provider value={contextValue}>\n      {children}\n    </EthereumProviderContext.Provider>\n  );\n};\nexport const useEthereumProvider = () => {\n  return useContext(EthereumProviderContext);\n};\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { hexlify, hexStripZeros } from \"@ethersproject/bytes\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useCallback, useMemo } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { CLUSTER, getEvmChainId } from \"../utils/consts\";\n\nconst createWalletStatus = (\n  isReady: boolean,\n  statusMessage: string = \"\",\n  forceNetworkSwitch: () => void,\n  walletAddress?: string\n) => ({\n  isReady,\n  statusMessage,\n  forceNetworkSwitch,\n  walletAddress,\n});\n\nfunction useIsWalletReady(\n  chainId: ChainId,\n  enableNetworkAutoswitch: boolean = true\n): {\n  isReady: boolean;\n  statusMessage: string;\n  walletAddress?: string;\n  forceNetworkSwitch: () => void;\n} {\n  const autoSwitch = enableNetworkAutoswitch;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const hasTerraWallet = !!terraWallet;\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasEthInfo = !!provider && !!signerAddress;\n  const correctEvmNetwork = getEvmChainId(chainId);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const forceNetworkSwitch = useCallback(() => {\n    if (provider && correctEvmNetwork) {\n      if (!isEVMChain(chainId)) {\n        return;\n      }\n      try {\n        provider.send(\"wallet_switchEthereumChain\", [\n          { chainId: hexStripZeros(hexlify(correctEvmNetwork)) },\n        ]);\n      } catch (e) {}\n    }\n  }, [provider, correctEvmNetwork, chainId]);\n\n  return useMemo(() => {\n    if (\n      chainId === CHAIN_ID_TERRA &&\n      hasTerraWallet &&\n      terraWallet?.walletAddress\n    ) {\n      // TODO: terraWallet does not update on wallet changes\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        terraWallet.walletAddress\n      );\n    }\n    if (chainId === CHAIN_ID_SOLANA && solPK) {\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        solPK.toString()\n      );\n    }\n    if (isEVMChain(chainId) && hasEthInfo && signerAddress) {\n      if (hasCorrectEvmNetwork) {\n        return createWalletStatus(\n          true,\n          undefined,\n          forceNetworkSwitch,\n          signerAddress\n        );\n      } else {\n        if (provider && correctEvmNetwork && autoSwitch) {\n          forceNetworkSwitch();\n        }\n        return createWalletStatus(\n          false,\n          `Wallet is not connected to ${CLUSTER}. Expected Chain ID: ${correctEvmNetwork}`,\n          forceNetworkSwitch,\n          undefined\n        );\n      }\n    }\n\n    return createWalletStatus(\n      false,\n      \"Wallet not connected\",\n      forceNetworkSwitch,\n      undefined\n    );\n  }, [\n    chainId,\n    autoSwitch,\n    forceNetworkSwitch,\n    hasTerraWallet,\n    solPK,\n    hasEthInfo,\n    correctEvmNetwork,\n    hasCorrectEvmNetwork,\n    provider,\n    signerAddress,\n    terraWallet,\n  ]);\n}\n\nexport default useIsWalletReady;\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\nimport { ParsedTokenAccount, Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\n// these all are optional so NFT could share TokenSelectors\nexport interface NFTParsedTokenAccount extends ParsedTokenAccount {\n  tokenId?: string;\n  uri?: string;\n  animation_url?: string | null;\n  external_url?: string | null;\n  image?: string;\n  image_256?: string;\n  nftName?: string;\n  description?: string;\n}\n\nexport interface NFTState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  originTokenId: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: NFTParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<NFTParsedTokenAccount[]>;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isRecovery: boolean;\n}\n\nconst initialState: NFTState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  originTokenId: undefined,\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isRecovery: false,\n};\n\nexport const nftSlice = createSlice({\n  name: \"nft\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n      state.originTokenId = action.payload.tokenId;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.originTokenId = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string; //TODO maximum amount of fields\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      state.targetAsset = getEmptyDataWrapper();\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.originTokenId = undefined;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  reset,\n  setRecoveryVaa,\n} = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface AttestState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  sourceAsset: string;\n  targetChain: ChainId;\n  attestTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isCreating: boolean;\n  createTx: Transaction | undefined;\n}\n\nconst initialState: AttestState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  sourceAsset: \"\",\n  targetChain: CHAIN_ID_ETH,\n  attestTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isCreating: false,\n  createTx: undefined,\n};\n\nexport const attestSlice = createSlice({\n  name: \"attest\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceAsset = \"\";\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceAsset: (state, action: PayloadAction<string>) => {\n      state.sourceAsset = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceAsset = \"\";\n      }\n    },\n    setAttestTx: (state, action: PayloadAction<Transaction>) => {\n      state.attestTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsCreating: (state, action: PayloadAction<boolean>) => {\n      state.isCreating = action.payload;\n    },\n    setCreateTx: (state, action: PayloadAction<Transaction>) => {\n      state.createTx = action.payload;\n      state.isCreating = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceAsset,\n  setTargetChain,\n  setAttestTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsCreating,\n  setCreateTx,\n  reset,\n} = attestSlice.actions;\n\nexport default attestSlice.reducer;\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    textTransform: \"none\",\n    width: \"100%\",\n  },\n  loader: {\n    position: \"absolute\",\n    bottom: 0,\n    left: \"50%\",\n    marginLeft: -12,\n    marginBottom: 6,\n  },\n  error: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function ButtonWithLoader({\n  disabled,\n  onClick,\n  showLoader,\n  error,\n  children,\n}: {\n  disabled?: boolean;\n  onClick: () => void;\n  showLoader?: boolean;\n  error?: string;\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.root}>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          className={classes.button}\n          disabled={disabled}\n          onClick={onClick}\n        >\n          {children}\n        </Button>\n        {showLoader ? (\n          <CircularProgress\n            size={24}\n            color=\"inherit\"\n            className={classes.loader}\n          />\n        ) : null}\n      </div>\n      {error ? (\n        <Typography variant=\"body2\" color=\"error\" className={classes.error}>\n          {error}\n        </Typography>\n      ) : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  createWrappedOnEth,\n  createWrappedOnSolana,\n  createWrappedOnTerra,\n  updateWrappedOnEth,\n  updateWrappedOnTerra,\n  updateWrappedOnSolana,\n  postVaaSolana,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useAttestSignedVAA from \"./useAttestSignedVAA\";\nimport { setCreateTx, setIsCreating } from \"../store/attestSlice\";\nimport {\n  selectAttestIsCreating,\n  selectAttestTargetChain,\n} from \"../store/selectors\";\nimport {\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const receipt = shouldUpdate\n      ? await updateWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await createWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setCreateTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, // TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolana(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA)\n    );\n    const transaction = shouldUpdate\n      ? await updateWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await createWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setCreateTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const msg = shouldUpdate\n      ? await updateWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        )\n      : await createWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Create Wrapped\"\n    );\n    dispatch(\n      setCreateTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nexport function useHandleCreateWrapped(shouldUpdate: boolean) {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const signedVAA = useAttestSignedVAA();\n  const isCreating = useSelector(selectAttestIsCreating);\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const handleCreateClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && !!signedVAA) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        signedVAA,\n        targetChain,\n        shouldUpdate\n      );\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        shouldUpdate\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && !!signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA, shouldUpdate);\n    } else {\n      // enqueueSnackbar(\n      //   \"Creating wrapped tokens on this chain is not yet supported\",\n      //   {\n      //     variant: \"error\",\n      //   }\n      // );\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    signedVAA,\n    signer,\n    shouldUpdate,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleCreateClick,\n      disabled: !!isCreating,\n      showLoader: !!isCreating,\n    }),\n    [handleCreateClick, isCreating]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useAttestSignedVAA() {\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getClaimAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  postVaaSolana,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  createMetaOnSolana,\n  getForeignAssetSol,\n  isNFTVAASolanaNative,\n  redeemOnEth,\n  redeemOnSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/nftSlice\";\nimport { selectNFTIsRedeeming, selectNFTTargetChain } from \"../store/selectors\";\nimport {\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getMetadataAddress } from \"../utils/metaplex\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTSignedVAA from \"./useNFTSignedVAA\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = await redeemOnEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      signedVAA\n    );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const claimAddress = await getClaimAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS,\n      signedVAA\n    );\n    const claimInfo = await connection.getAccountInfo(claimAddress);\n    let txid;\n    if (!claimInfo) {\n      await postVaaSolana(\n        connection,\n        wallet.signTransaction,\n        SOL_BRIDGE_ADDRESS,\n        payerAddress,\n        Buffer.from(signedVAA)\n      );\n      // TODO: how do we retry in between these steps\n      const transaction = await redeemOnSolana(\n        connection,\n        SOL_BRIDGE_ADDRESS,\n        SOL_NFT_BRIDGE_ADDRESS,\n        payerAddress,\n        signedVAA\n      );\n      txid = await signSendAndConfirm(wallet, connection, transaction);\n      // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    }\n    const isNative = await isNFTVAASolanaNative(signedVAA);\n    if (!isNative) {\n      const { parse_vaa } = await import(\n        \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n      );\n      const parsedVAA = parse_vaa(signedVAA);\n      const { originChain, originAddress, tokenId } = parseNFTPayload(\n        Buffer.from(new Uint8Array(parsedVAA.payload))\n      );\n      const mintAddress = await getForeignAssetSol(\n        SOL_NFT_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAddress),\n        arrayify(tokenId)\n      );\n      const [metadataAddress] = await getMetadataAddress(mintAddress);\n      const metadata = await connection.getAccountInfo(metadataAddress);\n      if (!metadata) {\n        const transaction = await createMetaOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_NFT_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n        txid = await signSendAndConfirm(wallet, connection, transaction);\n      }\n    }\n    dispatch(setRedeemTx({ id: txid || \"\", block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleNFTRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const signedVAA = useNFTSignedVAA();\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTSignedVAA() {\n  const signedVAAHex = useSelector(selectNFTSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  parseTransferPayload,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Card,\n  CircularProgress,\n  Container,\n  Divider,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { COLORS } from \"../muiTheme\";\nimport { setRecoveryVaa as setRecoveryNFTVaa } from \"../store/nftSlice\";\nimport { setRecoveryVaa } from \"../store/transferSlice\";\nimport {\n  CHAINS,\n  CHAINS_WITH_NFT_SUPPORT,\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n  WORMHOLE_RPC_HOSTS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport ChainSelect from \"./ChainSelect\";\nimport KeyAndBalance from \"./KeyAndBalance\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  advancedContainer: {\n    padding: theme.spacing(2, 0),\n  },\n}));\n\nasync function evm(\n  provider: ethers.providers.Web3Provider,\n  tx: string,\n  enqueueSnackbar: any,\n  chainId: ChainId,\n  nft: boolean\n) {\n  try {\n    const receipt = await provider.getTransactionReceipt(tx);\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      nft\n        ? getNFTBridgeAddressForChain(chainId)\n        : getTokenBridgeAddressForChain(chainId)\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function solana(tx: string, enqueueSnackbar: any, nft: boolean) {\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const info = await connection.getTransaction(tx);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      nft ? SOL_NFT_BRIDGE_ADDRESS : SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function terra(tx: string, enqueueSnackbar: any) {\n  try {\n    const lcd = new LCDClient(TERRA_HOST);\n    const info = await lcd.tx.txInfo(tx);\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence,\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nexport default function Recovery() {\n  const classes = useStyles();\n  const { push } = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const { provider } = useEthereumProvider();\n  const [type, setType] = useState(\"Token\");\n  const isNFT = type === \"NFT\";\n  const [recoverySourceChain, setRecoverySourceChain] =\n    useState(CHAIN_ID_SOLANA);\n  const [recoverySourceTx, setRecoverySourceTx] = useState(\"\");\n  const [recoverySourceTxIsLoading, setRecoverySourceTxIsLoading] =\n    useState(false);\n  const [recoverySourceTxError, setRecoverySourceTxError] = useState(\"\");\n  const [recoverySignedVAA, setRecoverySignedVAA] = useState(\"\");\n  const [recoveryParsedVAA, setRecoveryParsedVAA] = useState<any>(null);\n  const { isReady, statusMessage } = useIsWalletReady(recoverySourceChain);\n  const walletConnectError =\n    isEVMChain(recoverySourceChain) && !isReady ? statusMessage : \"\";\n  const parsedPayload = useMemo(() => {\n    try {\n      return recoveryParsedVAA?.payload\n        ? isNFT\n          ? parseNFTPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n          : parseTransferPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n        : null;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }, [recoveryParsedVAA, isNFT]);\n  useEffect(() => {\n    if (recoverySourceTx && (!isEVMChain(recoverySourceChain) || isReady)) {\n      let cancelled = false;\n      if (isEVMChain(recoverySourceChain) && provider) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await evm(\n            provider,\n            recoverySourceTx,\n            enqueueSnackbar,\n            recoverySourceChain,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_SOLANA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await solana(\n            recoverySourceTx,\n            enqueueSnackbar,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_TERRA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await terra(recoverySourceTx, enqueueSnackbar);\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    recoverySourceChain,\n    recoverySourceTx,\n    provider,\n    enqueueSnackbar,\n    isNFT,\n    isReady,\n  ]);\n  const handleTypeChange = useCallback((event) => {\n    setRecoverySourceChain((prevChain) =>\n      event.target.value === \"NFT\" &&\n      !CHAINS_WITH_NFT_SUPPORT.find((chain) => chain.id === prevChain)\n        ? CHAIN_ID_SOLANA\n        : prevChain\n    );\n    setType(event.target.value);\n  }, []);\n  const handleSourceChainChange = useCallback((event) => {\n    setRecoverySourceTx(\"\");\n    setRecoverySourceChain(event.target.value);\n  }, []);\n  const handleSourceTxChange = useCallback((event) => {\n    setRecoverySourceTx(event.target.value.trim());\n  }, []);\n  const handleSignedVAAChange = useCallback((event) => {\n    setRecoverySignedVAA(event.target.value.trim());\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    if (recoverySignedVAA) {\n      (async () => {\n        try {\n          const { parse_vaa } = await import(\n            \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n          );\n          const parsedVAA = parse_vaa(hexToUint8Array(recoverySignedVAA));\n          if (!cancelled) {\n            setRecoveryParsedVAA(parsedVAA);\n          }\n        } catch (e) {\n          console.log(e);\n          if (!cancelled) {\n            setRecoveryParsedVAA(null);\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [recoverySignedVAA]);\n  const parsedPayloadTargetChain = parsedPayload?.targetChain;\n  const enableRecovery = recoverySignedVAA && parsedPayloadTargetChain;\n  const handleRecoverClick = useCallback(() => {\n    if (enableRecovery && recoverySignedVAA && parsedPayloadTargetChain) {\n      // TODO: make recovery reducer\n      if (isNFT) {\n        dispatch(\n          setRecoveryNFTVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n            },\n          })\n        );\n        push(\"/nft\");\n      } else {\n        dispatch(\n          setRecoveryVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n            },\n          })\n        );\n        push(\"/transfer\");\n      }\n    }\n  }, [\n    dispatch,\n    enableRecovery,\n    recoverySignedVAA,\n    parsedPayloadTargetChain,\n    parsedPayload,\n    isNFT,\n    push,\n  ]);\n  return (\n    <Container maxWidth=\"md\">\n      <Card className={classes.mainCard}>\n        <Alert severity=\"info\" variant=\"outlined\">\n          If you have sent your tokens but have not redeemed them, you may paste\n          in the Source Transaction ID (from Step 3) to resume your transfer.\n        </Alert>\n        <TextField\n          select\n          variant=\"outlined\"\n          label=\"Type\"\n          disabled={!!recoverySignedVAA}\n          value={type}\n          onChange={handleTypeChange}\n          fullWidth\n          margin=\"normal\"\n        >\n          <MenuItem value=\"Token\">Token</MenuItem>\n          <MenuItem value=\"NFT\">NFT</MenuItem>\n        </TextField>\n        <ChainSelect\n          select\n          variant=\"outlined\"\n          label=\"Source Chain\"\n          disabled={!!recoverySignedVAA}\n          value={recoverySourceChain}\n          onChange={handleSourceChainChange}\n          fullWidth\n          margin=\"normal\"\n          chains={isNFT ? CHAINS_WITH_NFT_SUPPORT : CHAINS}\n        />\n        {isEVMChain(recoverySourceChain) ? (\n          <KeyAndBalance chainId={recoverySourceChain} />\n        ) : null}\n        <TextField\n          variant=\"outlined\"\n          label=\"Source Tx (paste here)\"\n          disabled={\n            !!recoverySignedVAA ||\n            recoverySourceTxIsLoading ||\n            !!walletConnectError\n          }\n          value={recoverySourceTx}\n          onChange={handleSourceTxChange}\n          error={!!recoverySourceTxError || !!walletConnectError}\n          helperText={recoverySourceTxError || walletConnectError}\n          fullWidth\n          margin=\"normal\"\n        />\n        <ButtonWithLoader\n          onClick={handleRecoverClick}\n          disabled={!enableRecovery}\n          showLoader={recoverySourceTxIsLoading}\n        >\n          Recover\n        </ButtonWithLoader>\n        <div className={classes.advancedContainer}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              Advanced\n            </AccordionSummary>\n            <AccordionDetails>\n              <div>\n                <Box position=\"relative\">\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Signed VAA (Hex)\"\n                    disabled={recoverySourceTxIsLoading}\n                    value={recoverySignedVAA || \"\"}\n                    onChange={handleSignedVAAChange}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                  {recoverySourceTxIsLoading ? (\n                    <Box\n                      position=\"absolute\"\n                      style={{\n                        top: 0,\n                        right: 0,\n                        left: 0,\n                        bottom: 0,\n                        backgroundColor: \"rgba(0,0,0,0.5)\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <CircularProgress />\n                    </Box>\n                  ) : null}\n                </Box>\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Chain\"\n                  disabled\n                  value={recoveryParsedVAA?.emitter_chain || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Address\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      hexToNativeString(\n                        recoveryParsedVAA.emitter_address,\n                        recoveryParsedVAA.emitter_chain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Sequence\"\n                  disabled\n                  value={recoveryParsedVAA?.sequence || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Timestamp\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      new Date(\n                        recoveryParsedVAA.timestamp * 1000\n                      ).toLocaleString()) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Chain\"\n                  disabled\n                  value={parsedPayload?.originChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Token Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.originAddress,\n                        parsedPayload.originChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Origin Token ID\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.tokenId || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                ) : null}\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Chain\"\n                  disabled\n                  value={parsedPayload?.targetChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.targetAddress,\n                        parsedPayload.targetChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? null : (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Amount\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.amount.toString() || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                )}\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  postVaaSolana,\n  redeemAndUnwrapOnSolana,\n  redeemOnEth,\n  redeemOnEthNative,\n  redeemOnSolana,\n  redeemOnTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport {\n  selectTransferIsRedeeming,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/transferSlice\";\nimport {\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = isNative\n      ? await redeemOnEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await redeemOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  isNative: boolean\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolana(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA)\n    );\n    // TODO: how do we retry in between these steps\n    const transaction = isNative\n      ? await redeemAndUnwrapOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await redeemOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setRedeemTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const msg = await redeemOnTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      signedVAA\n    );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Complete Transfer\"\n    );\n    dispatch(\n      setRedeemTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const signedVAA = useTransferSignedVAA();\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, false, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        false\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n  ]);\n\n  const handleRedeemNativeClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, true, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        true\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA); //TODO isNative = true\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n  ]);\n\n  return useMemo(\n    () => ({\n      handleNativeClick: handleRedeemNativeClick,\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming, handleRedeemNativeClick]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferSignedVAA() {\n  const signedVAAHex = useSelector(selectTransferSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport {\n  AccountInfo,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nexport async function signSendAndConfirm(\n  wallet: WalletContextState,\n  connection: Connection,\n  transaction: Transaction\n) {\n  if (!wallet.signTransaction) {\n    throw new Error(\"wallet.signTransaction is undefined\");\n  }\n  const signed = await wallet.signTransaction(transaction);\n  const txid = await connection.sendRawTransaction(signed.serialize());\n  await connection.confirmTransaction(txid);\n  return txid;\n}\n\nexport interface ExtractedMintInfo {\n  mintAuthority?: string;\n  supply?: string;\n}\n\nexport function extractMintInfo(\n  account: AccountInfo<Buffer>\n): ExtractedMintInfo {\n  const data = Buffer.from(account.data);\n  const mintInfo = MintLayout.decode(data);\n\n  const uintArray = mintInfo?.mintAuthority;\n  const pubkey = new PublicKey(uintArray);\n  const supply = BigNumber.from(mintInfo?.supply.reverse()).toString();\n  const output = {\n    mintAuthority: pubkey?.toString(),\n    supply: supply.toString(),\n  };\n\n  return output;\n}\n\nexport async function getMultipleAccountsRPC(\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  return getMultipleAccounts(connection, pubkeys, \"confirmed\");\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  pubkeys: PublicKey[],\n  commitment: string\n) => {\n  return (\n    await Promise.all(\n      chunks(pubkeys, 99).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk, commitment)\n      )\n    )\n  ).flat();\n};\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function shortenAddress(address: string) {\n  return address.length > 10\n    ? `${address.slice(0, 4)}...${address.slice(-4)}`\n    : address;\n}\n","import { createTheme, responsiveFontSizes } from \"@material-ui/core\";\n\nexport const COLORS = {\n  blue: \"#1975e6\",\n  blueWithTransparency: \"rgba(25, 117, 230, 0.8)\",\n  gray: \"#4e4e54\",\n  green: \"#0ac2af\",\n  greenWithTransparency: \"rgba(10, 194, 175, 0.8)\",\n  lightGreen: \"rgba(51, 242, 223, 1)\",\n  lightBlue: \"#83b9fc\",\n  nearBlack: \"#000008\",\n  nearBlackWithMinorTransparency: \"rgba(0,0,0,.25)\",\n  red: \"#aa0818\",\n  darkRed: \"#810612\",\n};\n\nexport const theme = responsiveFontSizes(\n  createTheme({\n    palette: {\n      type: \"dark\",\n      background: {\n        default: COLORS.nearBlack,\n        paper: COLORS.nearBlack,\n      },\n      divider: COLORS.gray,\n      text: {\n        primary: \"rgba(255,255,255,0.98)\",\n      },\n      primary: {\n        main: COLORS.blueWithTransparency, // #0074FF\n        light: COLORS.lightBlue,\n      },\n      secondary: {\n        main: COLORS.greenWithTransparency, // #00EFD8\n        light: COLORS.lightGreen,\n      },\n      error: {\n        main: COLORS.red,\n      },\n    },\n    typography: {\n      fontFamily: \"'Sora', sans-serif\",\n      h1: {\n        fontWeight: \"200\",\n      },\n      h2: {\n        fontWeight: \"200\",\n      },\n      h4: {\n        fontWeight: \"500\",\n      },\n    },\n    overrides: {\n      MuiCssBaseline: {\n        \"@global\": {\n          \"*\": {\n            scrollbarWidth: \"thin\",\n            scrollbarColor: `${COLORS.gray} ${COLORS.nearBlackWithMinorTransparency}`,\n          },\n          \"*::-webkit-scrollbar\": {\n            width: \"8px\",\n            height: \"8px\",\n            backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          },\n          \"*::-webkit-scrollbar-thumb\": {\n            backgroundColor: COLORS.gray,\n            borderRadius: \"4px\",\n          },\n          \"*::-webkit-scrollbar-corner\": {\n            // this hides an annoying white box which appears when both scrollbars are present\n            backgroundColor: \"transparent\",\n          },\n        },\n      },\n      MuiAccordion: {\n        root: {\n          backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          \"&:before\": {\n            display: \"none\",\n          },\n        },\n        rounded: {\n          \"&:first-child\": {\n            borderTopLeftRadius: \"16px\",\n            borderTopRightRadius: \"16px\",\n          },\n          \"&:last-child\": {\n            borderBottomLeftRadius: \"16px\",\n            borderBottomRightRadius: \"16px\",\n          },\n        },\n      },\n      MuiAlert: {\n        root: {\n          borderRadius: \"8px\",\n          border: \"1px solid\",\n        },\n      },\n      MuiButton: {\n        root: {\n          borderRadius: \"5px\",\n          textTransform: \"none\",\n        },\n      },\n      MuiLink: {\n        root: {\n          color: COLORS.lightBlue,\n        },\n      },\n      MuiPaper: {\n        rounded: {\n          borderRadius: \"16px\",\n        },\n      },\n      MuiStepper: {\n        root: {\n          backgroundColor: \"transparent\",\n          padding: 0,\n        },\n      },\n      MuiStep: {\n        root: {\n          backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          borderRadius: \"16px\",\n          padding: 16,\n        },\n      },\n      MuiStepConnector: {\n        lineVertical: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepContent: {\n        root: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepLabel: {\n        label: {\n          fontSize: 16,\n          fontWeight: \"300\",\n          \"&.MuiStepLabel-active\": {\n            fontWeight: \"300\",\n          },\n          \"&.MuiStepLabel-completed\": {\n            fontWeight: \"300\",\n          },\n        },\n      },\n      MuiTab: {\n        root: {\n          fontSize: 18,\n          fontWeight: \"300\",\n          padding: 12,\n          textTransform: \"none\",\n        },\n      },\n    },\n  })\n);\n","export default __webpack_public_path__ + \"static/media/terra.4c802748.svg\";","export default __webpack_public_path__ + \"static/media/oasis-network-rose-logo.c910dc42.svg\";","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport bscIcon from \"../icons/bsc.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport solanaIcon from \"../icons/solana.svg\";\nimport terraIcon from \"../icons/terra.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\n\nexport type Cluster = \"devnet\" | \"testnet\" | \"mainnet\";\nexport const CLUSTER: Cluster =\n  process.env.REACT_APP_CLUSTER === \"mainnet\"\n    ? \"mainnet\"\n    : process.env.REACT_APP_CLUSTER === \"testnet\"\n    ? \"testnet\"\n    : \"devnet\";\nexport interface ChainInfo {\n  id: ChainId;\n  name: string;\n  logo: string;\n}\nexport const CHAINS =\n  CLUSTER === \"mainnet\"\n    ? [\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum (Goerli)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_ETHEREUM_ROPSTEN,\n          name: \"Ethereum (Ropsten)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : [\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ];\nexport const BETA_CHAINS: ChainId[] = CLUSTER === \"mainnet\" ? [] : [];\nexport const CHAINS_WITH_NFT_SUPPORT = CHAINS.filter(\n  ({ id }) =>\n    id === CHAIN_ID_BSC ||\n    id === CHAIN_ID_ETH ||\n    id === CHAIN_ID_ETHEREUM_ROPSTEN ||\n    id === CHAIN_ID_POLYGON ||\n    id === CHAIN_ID_SOLANA\n);\nexport type ChainsById = { [key in ChainId]: ChainInfo };\nexport const CHAINS_BY_ID: ChainsById = CHAINS.reduce((obj, chain) => {\n  obj[chain.id] = chain;\n  return obj;\n}, {} as ChainsById);\n\nexport const COMING_SOON_CHAINS = [\n  {\n    id: 0,\n    name: \"Oasis\",\n    logo: oasisIcon,\n  },\n];\nexport const getDefaultNativeCurrencySymbol = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? \"SOL\"\n    : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"ETH\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BNB\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"LUNA\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"MATIC\"\n    : \"\";\nexport const getExplorerName = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"Etherscan\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BscScan\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"Finder\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"Polygonscan\"\n    : \"Explorer\";\nexport const WORMHOLE_RPC_HOSTS =\n  CLUSTER === \"mainnet\"\n    ? [\n        \"https://wormhole-v2-mainnet-api.certus.one\",\n        \"https://wormhole.inotel.ro\",\n        \"https://wormhole-v2-mainnet-api.mcf.rocks\",\n        \"https://wormhole-v2-mainnet-api.chainlayer.network\",\n        \"https://wormhole-v2-mainnet-api.staking.fund\",\n        \"https://wormhole-v2-mainnet.01node.com\",\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\"https://wormhole-v2-testnet-api.certus.one\"]\n    : [\"http://localhost:7071\"];\nexport const ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 5 : 1337;\nexport const ROPSTEN_ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 3 : 1337;\nexport const BSC_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 56 : CLUSTER === \"testnet\" ? 97 : 1397;\nexport const POLYGON_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 137 : CLUSTER === \"testnet\" ? 80001 : 1381;\nexport const getEvmChainId = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH\n    ? ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NETWORK_CHAIN_ID\n    : undefined;\nexport const SOLANA_HOST = process.env.REACT_APP_SOLANA_API_URL\n  ? process.env.REACT_APP_SOLANA_API_URL\n  : CLUSTER === \"mainnet\"\n  ? clusterApiUrl(\"mainnet-beta\")\n  : CLUSTER === \"testnet\"\n  ? clusterApiUrl(\"devnet\")\n  : \"http://localhost:8899\";\n\nexport const TERRA_HOST =\n  CLUSTER === \"mainnet\"\n    ? {\n        URL: \"https://lcd.terra.dev\",\n        chainID: \"columbus-5\",\n        name: \"mainnet\",\n      }\n    : CLUSTER === \"testnet\"\n    ? {\n        URL: \"https://bombay-lcd.terra.dev\",\n        chainID: \"bombay-12\",\n        name: \"testnet\",\n      }\n    : {\n        URL: \"http://localhost:1317\",\n        chainID: \"columbus-5\",\n        name: \"localterra\",\n      };\nexport const ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x706abc4E45D419950511e474C7B9Ed348A4a716c\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD8E4C2DbDd2e2bd8F1336EA691dBFF6952B1a6eB\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF890982f9310df57d00f659cf4fd87e65adEd8d7\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const BSC_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const BSC_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xcD16E5613EF35599dc82B24Cb45B5A93D779f1EE\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const BSC_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xB6F6D86a8f9879A9c87f643768d9efc38c1Da6E7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9dcF9D205C9De35334D646BeE44b2D2859712A09\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const POLYGON_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0CBE91CF822c73C2315FB05100C2F714765d5c20\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const POLYGON_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x90BBd86a6Fe93D3bc3ed6335935447E75fAb7fCf\"\n    : CLUSTER === \"testnet\"\n    ? \"0x51a02d0dcb5e52F5b92bdAA38FA013C91c7309A9\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const POLYGON_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x377D55a7928c046E18eEbb61977e714d2a76472a\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const SOL_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth\"\n    : CLUSTER === \"testnet\"\n    ? \"3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5\"\n    : \"Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o\";\nexport const SOL_NFT_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WnFt12ZrnzZrFZkt2xsNsaNWoQribnuQ5B5FrDbwDhD\"\n    : CLUSTER === \"testnet\"\n    ? \"2rHhojZ7hpu1zA91nvZmT8TqWWvMcKmmNBCr2mKTtMq4\"\n    : \"NFTWqJR8YnRVqPDvTJrYuLrQDitTG5AScqbeghi4zSA\";\nexport const SOL_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb\"\n    : CLUSTER === \"testnet\"\n    ? \"DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe\"\n    : \"B6RHG3mfcckmrYN1UhmJzyS1XX3fZKbkeUcpJe9Sy3FE\";\nexport const ROPSTEN_ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x210c5F5e2AF958B4defFe715Dc621b7a3BA888c5\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ROPSTEN_ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x2b048Da40f69c8dc386a56705915f8E966fe1eba\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF174F9A837536C449321df1Ca093Bb96948D5386\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\n\nexport const SOL_CUSTODY_ADDRESS =\n  \"GugU1tP7doLeTw9hQP51xRJyS8Da1fWxuiy2rVrnMD2m\";\nexport const SOL_NFT_CUSTODY_ADDRESS =\n  \"D63bhHo634eXSj4Jq3xgu2fjB5XKc8DFHzDY9iZk7fv1\";\nexport const TERRA_TEST_TOKEN_ADDRESS =\n  \"terra13nkgqrfymug724h8pprpexqj9h629sa3ncw7sh\";\nexport const TERRA_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pd65m0q9tl3v8znnz5f5ltsfegyzah7g42cx5v\"\n    : \"terra18vd8fpwxzck93qlwghaj6arh4p7c5n896xzem5\";\nexport const TERRA_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pseddrv0yfsn76u4zxrjmtf45kdlmalswdv39a\"\n    : \"terra10pyejy66429refv3g35g2t7am0was7ya7kz2a4\";\n\nexport const getBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_BRIDGE_ADDRESS\n    : \"\";\nexport const getNFTBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NFT_BRIDGE_ADDRESS\n    : \"\";\nexport const getTokenBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS\n    : \"\";\n\nexport const COVALENT_API_KEY = process.env.REACT_APP_COVALENT_API_KEY\n  ? process.env.REACT_APP_COVALENT_API_KEY\n  : \"\";\n\nexport const COVALENT_ETHEREUM = 1; // Covalent only supports mainnet and Kovan\nexport const COVALENT_BSC = CLUSTER === \"devnet\" ? 56 : BSC_NETWORK_CHAIN_ID;\nexport const COVALENT_POLYGON =\n  CLUSTER === \"devnet\" ? 137 : POLYGON_NETWORK_CHAIN_ID;\nexport const COVALENT_GET_TOKENS_URL = (\n  chainId: ChainId,\n  walletAddress: string,\n  nft?: boolean,\n  noNftMetadata?: boolean\n) => {\n  const chainNum =\n    chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? COVALENT_ETHEREUM\n      : chainId === CHAIN_ID_BSC\n      ? COVALENT_BSC\n      : chainId === CHAIN_ID_POLYGON\n      ? COVALENT_POLYGON\n      : \"\";\n  // https://www.covalenthq.com/docs/api/#get-/v1/{chain_id}/address/{address}/balances_v2/\n  return `https://api.covalenthq.com/v1/${chainNum}/address/${walletAddress}/balances_v2/?key=${COVALENT_API_KEY}${\n    nft ? \"&nft=true\" : \"\"\n  }${noNftMetadata ? \"&no-nft-fetch=true\" : \"\"}`;\n};\nexport const TERRA_SWAPRATE_URL =\n  \"https://fcd.terra.dev/v1/market/swaprate/uusd\";\n\nexport const WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WETH_DECIMALS = 18;\n\nexport const WBNB_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\n    : CLUSTER === \"testnet\"\n    ? \"0xae13d989dac2f0debff460ac112a837c89baa7cd\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WBNB_DECIMALS = 18;\n\nexport const WMATIC_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WMATIC_DECIMALS = 18;\n\nexport const ROPSTEN_WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc778417e063141139fce010982780140aa0cd5ab\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const ROPSTEN_WETH_DECIMALS = 18;\n\nexport const WORMHOLE_V1_ETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"\n    : CLUSTER === \"testnet\"\n    ? \"0xdae0Cba01eFc4bfEc1F7Fece73Fe8b8d2Eda65B0\"\n    : \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"; //TODO something that doesn't explode in localhost\nexport const WORMHOLE_V1_SOLANA_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC\"\n    : CLUSTER === \"testnet\"\n    ? \"BrdgiFmZN3BKkcY3danbPYyxPKwb8RhQzpM2VY5L97ED\"\n    : \"\";\n\nexport const TERRA_TOKEN_METADATA_URL =\n  \"https://assets.terra.money/cw20/tokens.json\";\n\nexport const WORMHOLE_V1_MINT_AUTHORITY =\n  CLUSTER === \"mainnet\"\n    ? \"9zyPU1mjgzaVyQsYwKJJ7AhVz5bgx5uc1NPABvAcUXsT\"\n    : CLUSTER === \"testnet\"\n    ? \"BJa7dq3bRP216zaTdw4cdcV71WkPc1HXvmnGeFVDi5DC\"\n    : \"\";\n\n// hardcoded addresses for warnings\nexport const SOLANA_TOKENS_THAT_EXIST_ELSEWHERE = [\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\", //  SRM\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n  \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\", //  KIN\n  \"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5\", // renBTC\n  \"8wv2KAykQstNAj2oW6AHANGBiFKVFhvMiyyzzjhkmGvE\", // renLUNA\n  \"G1a6jxYz3m8DVyMqYnuV7s86wD4fvuXYneWSpLJkmsXj\", // renBCH\n  \"FKJvvVJ242tX7zFtzTmzqoA631LqHh4CdgcN8dcfFSju\", // renDGB\n  \"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU\", // renDOGE\n  \"E99CQ2gFMmbiyK2bwiaFNWUUmwz4r8k2CVEFxwuvQ7ue\", // renZEC\n  \"De2bU64vsXKU9jq4bCjeDxNRGPn8nr3euaTK8jBYmD3J\", // renFIL\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", // USDT\n];\nexport const ETH_TOKENS_THAT_EXIST_ELSEWHERE = [\n  getAddress(\"0x476c5E26a75bd202a9683ffD34359C0CC15be0fF\"), // SRM\n  getAddress(\"0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5\"), // KIN\n  getAddress(\"0xeb4c2781e4eba804ce9a9803c67d0893436bb27d\"), // renBTC\n  getAddress(\"0x52d87F22192131636F93c5AB18d0127Ea52CB641\"), // renLUNA\n  getAddress(\"0x459086f2376525bdceba5bdda135e4e9d3fef5bf\"), // renBCH\n  getAddress(\"0xe3cb486f3f5c639e98ccbaf57d95369375687f80\"), // renDGB\n  getAddress(\"0x3832d2F059E55934220881F831bE501D180671A7\"), // renDOGE\n  getAddress(\"0x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2\"), // renZEC\n  getAddress(\"0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5\"), // renFIL\n];\nexport const ETH_TOKENS_THAT_CAN_BE_SWAPPED_ON_SOLANA = [\n  getAddress(\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"), // USDC\n  getAddress(\"0xdac17f958d2ee523a2206206994597c13d831ec7\"), // USDT\n];\nexport const BSC_MARKET_WARNINGS = [\n  getAddress(WBNB_ADDRESS),\n  getAddress(\"0xe9e7cea3dedca5984780bafc599bd69add087d56\"), // BUSD\n  getAddress(\"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"), // USDC\n  getAddress(\"0x55d398326f99059ff775485246999027b3197955\"), // BSC-USD\n];\n\nexport const MIGRATION_PROGRAM_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"whmRZnmyxdr2TkHXcZoFdtvNYRLQ5Jtbkf6ZbGkJjdk\"\n    : CLUSTER === \"testnet\"\n    ? \"\"\n    : \"Ex9bCdVMSfx7EzB3pgSi2R4UHwJAXvTw18rBQm5YQ8gK\";\n\nexport const MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // HUSD\n          \"BybpSTBoZHsmKnfxYG47GDhVPKrnEKX31CScShbrzUhX\",\n          \"7VQo3HFLNH5QqGtM8eC3XQbPkJUu7nS9LeGWjerRh5Sw\",\n        ],\n        [\n          // BUSD\n          \"AJ1W9A9N9dEMdVyoDiam2rV44gnBm2csrPDP7xqcapgX\",\n          \"33fsBLA8djQm82RpHmE3SuVrPGtZBWNYExsEUeKX1HXX\",\n        ],\n        [\n          // HBTC\n          \"8pBc4v9GAwCBNWPB5XKA93APexMGAS4qMr37vNke9Ref\",\n          \"7dVH61ChzgmN9BwG4PkzwRP8PbYwPJ7ZPNF2vamKT2H8\",\n        ],\n        [\n          // DAI\n          \"FYpdBuyAHSbdaAyD1sKkxyLWbAP8uUW9h6uvdhK74ij1\",\n          \"EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o\",\n        ],\n        [\n          // FRAX\n          \"8L8pDf3jutdpdr4m3np68CL9ZroLActrqwxi6s9Ah5xU\",\n          \"FR87nWEUxVgerFGhZM8Y4AggKGLnaXswr1Pd8wZ4kZcp\",\n        ],\n        [\n          // USDK\n          \"2kycGCD8tJbrjJJqWN2Qz5ysN9iB4Bth3Uic4mSB7uak\",\n          \"43m2ewFV5nDepieFjT9EmAQnc1HRtAF247RBpLGFem5F\",\n        ],\n        // [\n        //   // UST\n        //   \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n        //   \"5Un6AdG9GBjxVhTSvvt2x6X6vtN1zrDxkkDpDcShnHfF\",\n        // ],\n        [\n          // UST\n          \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n          \"9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i\",\n        ],\n        // [\n        //   // Wrapped LUNA\n        //   \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n        //   \"EQTV1LW23Mgtjb5LXSg9NGw1J32oqTV4HCPmHCVSGmqD\",\n        // ],\n        [\n          // Wrapped LUNA\n          \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n          \"F6v4wfAdJB8D8p77bMXZgYt8TDKsYxLYxH5AFhUkYx9W\",\n        ],\n        [\n          // FTT\n          \"GbBWwtYTMPis4VHb8MrBbdibPhn28TSrLB53KvUmb7Gi\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // SRM\n          \"2jXy799YnEcRXneFo2GEAB6SDRsAa767HpWmktRr1DaP\",\n          \"xnorPhAzWXUczCP3KjU5yDxmKKZi5cSbxytQ1LgE3kG\",\n        ],\n        [\n          // FTT (Sollet)\n          \"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // WETH (Sollet)\n          \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n          \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n        ],\n        [\n          // UNI (Sollet)\n          \"DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw\",\n          \"8FU95xFJhUUkyyCLU13HSzDLs7oC4QZdXQHL6SCeab36\",\n        ],\n        [\n          // HXRO (Sollet)\n          \"DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc\",\n          \"HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK\",\n        ],\n        [\n          // ALEPH (Sollet)\n          \"CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K\",\n          \"3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x\",\n        ],\n        [\n          // TOMOE (Sollet)\n          \"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd\",\n          \"46AiRdka3HYGkhV6r9gyS6Teo9cojfGXfK8oniALYMZx\",\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\",\n        //   \"GcdupcwxkmVGM6s9F8bHSjNoznXAb3hRJTioABNYkn31\",\n        // ],\n      ]\n);\n\nexport const ETH_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9\"),\n          getAddress(\"0xe76820F1DB773B1d62a3D22F47259705cC5fA4E6\"),\n        ],\n        [\n          // UST\n          getAddress(\"0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\"),\n          getAddress(\"0xF39C29d8f6851d87c40c83b61078EB7384f7Cb51\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const BSC_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xECCF35F941Ab67FfcAA9A1265C2fF88865caA005\"),\n          getAddress(\"0x355A116ef1Cf566B12Ef3a8e409A64e303c53740\"),\n        ],\n        [\n          // UST\n          getAddress(\"0x23396cF899Ca06c4472205fC903bDB4de249D6fC\"),\n          getAddress(\"0x0F98AB919D04a291838B3b075c57181057D4CF75\"),\n        ],\n        [\n          // ORION\n          getAddress(\"0x5530ec23f4ee1521182bd158c09f4ca7efec1ef0\"),\n          getAddress(\"0x084fa354e65b521e6fb9d1602549cf8693cdb4f8\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const getMigrationAssetMap = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_BSC) {\n    return BSC_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_ETH) {\n    return ETH_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return MIGRATION_ASSET_MAP;\n  } else {\n    return new Map<string, string>();\n  }\n};\n\nexport const SUPPORTED_TERRA_TOKENS = [\"uluna\", \"uusd\"];\n\nexport const TERRA_FCD_BASE =\n  CLUSTER === \"mainnet\"\n    ? \"https://fcd.terra.dev\"\n    : CLUSTER === \"testnet\"\n    ? \"https://bombay-fcd.terra.dev\"\n    : \"http://localhost:3060\";\nexport const TERRA_GAS_PRICES_URL = `${TERRA_FCD_BASE}/v1/txs/gas_prices`;\n\nexport const TOTAL_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet/totals?groupBy=address`;\n\nexport const RECENT_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet/recent?groupBy=address&numRows=2`;\n\nexport const VAA_EMITTER_ADDRESSES = [\n  `${CHAIN_ID_SOLANA}:ec7372995d5cc8732397fb0ad35c0121e0eaa90d26f828a534cab54391b3a4f5`, //SOLANA TOKEN\n  `${CHAIN_ID_SOLANA}:0def15a24423e1edd1a5ab16f557b9060303ddbab8c803d2ee48f4b78a1cfd6b`, //SOLAN NFT\n  `${CHAIN_ID_ETH}:0000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585`, //ETH token\n  `${CHAIN_ID_ETH}:0000000000000000000000006ffd7ede62328b3af38fcd61461bbfc52f5651fe`, //ETH NFT\n  `${CHAIN_ID_TERRA}:0000000000000000000000007cf7b764e38a0a5e967972c1df77d432510564e2`, //terra\n  `${CHAIN_ID_BSC}:000000000000000000000000b6f6d86a8f9879a9c87f643768d9efc38c1da6e7`, //bsc\n  `${CHAIN_ID_BSC}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //bsc nft\n  `${CHAIN_ID_POLYGON}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //Polygon\n  `${CHAIN_ID_POLYGON}:00000000000000000000000090bbd86a6fe93d3bc3ed6335935447e75fab7fcf`, //Polygon nft\n];\n\nexport const WORMHOLE_EXPLORER_BASE = \"https://wormholenetwork.com/en/explorer\";\n\nexport type MultiChainInfo = {\n  [key in ChainId]: { [address: string]: string };\n};\nexport const MULTI_CHAIN_TOKENS: MultiChainInfo =\n  //EVM chains should format the addresses to all lowercase\n  CLUSTER === \"mainnet\"\n    ? ({\n        [CHAIN_ID_SOLANA]: {\n          EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: \"USDC\",\n          Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: \"USDT\",\n        },\n        [CHAIN_ID_ETH]: {\n          \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\": \"USDC\",\n          \"0xdac17f958d2ee523a2206206994597c13d831ec7\": \"USDT\",\n        },\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {\n          \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\": \"USDC\",\n          \"0x55d398326f99059ff775485246999027b3197955\": \"USDT\",\n        },\n        [CHAIN_ID_POLYGON]: {\n          \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\": \"USDC\",\n          \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\": \"USDT\",\n        },\n      } as MultiChainInfo)\n    : ({\n        [CHAIN_ID_SOLANA]: {\n          \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\": \"SOLT\",\n        },\n        [CHAIN_ID_ETH]: {},\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {},\n        [CHAIN_ID_POLYGON]: {},\n      } as MultiChainInfo);\n\nexport const AVAILABLE_MARKETS_URL =\n  \"https://docs.wormholenetwork.com/wormhole/overview-liquid-markets\";\n\nexport const SOLANA_SYSTEM_PROGRAM_ADDRESS = \"11111111111111111111111111111111\";\nexport const FEATURED_MARKETS_JSON_URL =\n  \"https://raw.githubusercontent.com/certusone/wormhole-token-list/main/src/markets.json\";\n\nexport const logoOverrides = new Map<string, string>([\n  [\n    \"0x727f064a78dc734d33eec18d5370aef32ffd46e4\",\n    \"https://orion.money/assets/ORION-LOGO-2.1-GREEN@256x256.png\",\n  ],\n]);\n","import { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { useWallet, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getMathWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport React, { FC, useMemo } from \"react\";\n\nexport const SolanaWalletProvider: FC = (props) => {\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you want to instantiate here will be compiled into your application\n  const wallets = useMemo(() => {\n    return [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      // getTorusWallet({\n      //     options: { clientId: 'Go to https://developer.tor.us and create a client ID' }\n      // }),\n      // getLedgerWallet(),\n      // getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ];\n  }, []);\n\n  return (\n    <WalletProvider wallets={wallets}>\n      <WalletDialogProvider>{props.children}</WalletDialogProvider>\n    </WalletProvider>\n  );\n};\n\nexport const useSolanaWallet = useWallet;\n","import { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst TerraWalletKey = () => {\n  const { connect, disconnect, connected, wallet } = useTerraWallet();\n  const pk =\n    (wallet &&\n      wallet.wallets &&\n      wallet.wallets.length > 0 &&\n      wallet.wallets[0].terraAddress) ||\n    \"\";\n  return (\n    <ToggleConnectedButton\n      connect={connect}\n      disconnect={disconnect}\n      connected={connected}\n      pk={pk}\n    />\n  );\n};\n\nexport default TerraWalletKey;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport EthereumSignerKey from \"./EthereumSignerKey\";\nimport SolanaWalletKey from \"./SolanaWalletKey\";\nimport TerraWalletKey from \"./TerraWalletKey\";\n\nfunction KeyAndBalance({ chainId }: { chainId: ChainId }) {\n  if (isEVMChain(chainId)) {\n    return (\n      <>\n        <EthereumSignerKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_SOLANA) {\n    return (\n      <>\n        <SolanaWalletKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <>\n        <TerraWalletKey />\n      </>\n    );\n  }\n  return null;\n}\n\nexport default KeyAndBalance;\n","const MM_ERR_WITH_INFO_START =\n  \"VM Exception while processing transaction: revert \";\nconst parseError = (e: any) =>\n  e?.data?.message?.startsWith(MM_ERR_WITH_INFO_START)\n    ? e.data.message.replace(MM_ERR_WITH_INFO_START, \"\")\n    : e?.response?.data?.error // terra error\n    ? e.response.data.error\n    : e?.message\n    ? e.message\n    : \"An unknown error occurred\";\nexport default parseError;\n","import {\n  canonicalAddress,\n  isNativeDenom,\n  isNativeTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ConnectedWallet, TxResult } from \"@terra-money/wallet-provider\";\nimport axios from \"axios\";\n// import { TerraTokenMetadata } from \"../hooks/useTerraTokenMap\";\nimport { TERRA_GAS_PRICES_URL, TERRA_HOST } from \"./consts\";\n\nexport const NATIVE_TERRA_DECIMALS = 6;\n\nexport const getNativeTerraIcon = (symbol = \"\") =>\n  `https://assets.terra.money/icon/60/${symbol}.png`;\n\n// inspired by https://github.com/terra-money/station/blob/dca7de43958ce075c6e46605622203b9859b0e14/src/lib/utils/format.ts#L38\nexport const formatNativeDenom = (denom = \"\"): string => {\n  const unit = denom.slice(1).toUpperCase();\n  const isValidTerra = isNativeTerra(denom);\n  return denom === \"uluna\"\n    ? \"Luna\"\n    : isValidTerra\n    ? unit.slice(0, 2) + \"T\"\n    : \"\";\n};\n\nexport const formatTerraNativeBalance = (balance = \"\"): string =>\n  formatUnits(balance, 6);\n\nexport async function waitForTerraExecution(transaction: TxResult) {\n  const lcd = new LCDClient(TERRA_HOST);\n  let info;\n  while (!info) {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      info = await lcd.tx.txInfo(transaction.result.txhash);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (info.code !== undefined) {\n    // error code\n    throw new Error(\n      `Tx ${transaction.result.txhash}: error code ${info.code}: ${info.raw_log}`\n    );\n  }\n  return info;\n}\n\nexport const isValidTerraAddress = (address: string) => {\n  if (isNativeDenom(address)) {\n    return true;\n  }\n  try {\n    const startsWithTerra = address && address.startsWith(\"terra\");\n    const isParseable = canonicalAddress(address);\n    const isLength20 = isParseable.length === 20;\n    return !!(startsWithTerra && isParseable && isLength20);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport async function postWithFees(\n  wallet: ConnectedWallet,\n  msgs: any[],\n  memo: string\n) {\n  // don't try/catch, let errors propagate\n  const lcd = new LCDClient(TERRA_HOST);\n  //let gasPrices = await lcd.config.gasPrices //Unsure if the values returned from this are hardcoded or not.\n  //Thus, we are going to pull it directly from the current FCD.\n  let gasPrices = await axios\n    .get(TERRA_GAS_PRICES_URL)\n    .then((result) => result.data);\n\n  const feeEstimate = await lcd.tx.estimateFee(\n    wallet.walletAddress,\n    [...msgs],\n    {\n      memo,\n      feeDenoms: [\"uluna\"],\n      gasPrices,\n    }\n  );\n\n  const result = await wallet.post({\n    msgs: [...msgs],\n    memo,\n    feeDenoms: [\"uluna\"],\n    gasPrices,\n    fee: feeEstimate,\n  });\n\n  return result;\n}\n"],"sourceRoot":""}