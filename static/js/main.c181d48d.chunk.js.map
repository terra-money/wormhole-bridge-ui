{"version":3,"sources":["components/HeaderText.tsx","hooks/useFetchForeignAsset.ts","store/feeSlice.ts","hooks/useTerraNativeBalances.ts","components/TerraFeeDenomPicker.tsx","components/Transfer/WaitingForWalletMessage.tsx","components/Attest/WaitingForWalletMessage.tsx","components/Attest/Create.tsx","components/ShowTx.tsx","components/Attest/CreatePreview.tsx","hooks/useHandleAttest.tsx","hooks/useMetaplexData.ts","components/TransactionProgress.tsx","components/Attest/Send.tsx","components/Attest/SendPreview.tsx","hooks/useTransactionFees.tsx","components/LowBalanceWarning.tsx","components/Attest/Source.tsx","hooks/useCopyToClipboard.tsx","utils/pushToClipboard.ts","components/SmartAddress.tsx","components/Attest/SourcePreview.tsx","components/Attest/Target.tsx","components/Attest/TargetPreview.tsx","components/Attest/index.tsx","icons/Discord.svg","icons/Github.svg","icons/Medium.svg","icons/portal_logo_w.svg","icons/Telegram.svg","icons/Twitter.svg","images/Footer.png","components/Footer.tsx","hooks/useEthereumMigratorInformation.tsx","components/NumberTextField.tsx","components/Migration/EvmWorkflow.tsx","store/tokenSlice.ts","hooks/useSolanaTokenMap.ts","components/SolanaCreateAssociatedAddress.tsx","components/Migration/SolanaWorkflow.tsx","components/Migration/index.tsx","components/Migration/EvmQuickMigrate.tsx","hooks/useSolanaMigratorInformation.tsx","components/Migration/SolanaQuickMigrate.tsx","hooks/useCheckIfWormholeWrapped.ts","hooks/useFetchTargetAsset.ts","components/SolanaTPSWarning.tsx","components/StepDescription.tsx","components/NFT/WaitingForWalletMessage.tsx","components/NFT/Redeem.tsx","components/NFT/RedeemPreview.tsx","hooks/useHandleNFTTransfer.tsx","hooks/useNFTTargetAddress.ts","components/NFT/Send.tsx","components/NFT/SendPreview.tsx","icons/bnb.svg","hooks/useGetSourceParsedTokenAccounts.ts","utils/ethereum.ts","hooks/useMarketsMap.ts","icons/wormhole-network.svg","components/TokenSelectors/NFTViewer.tsx","components/TokenSelectors/TokenPicker.tsx","components/TokenSelectors/EvmTokenPicker.tsx","components/TokenSelectors/RefreshButtonWrapper.tsx","utils/sort.ts","components/TokenSelectors/SolanaTokenPicker.tsx","components/TokenSelectors/TerraTokenPicker.tsx","components/TokenSelectors/SourceTokenSelector.tsx","components/NFT/Source.tsx","components/NFT/SourcePreview.tsx","hooks/useSyncTargetAddress.ts","components/NFT/Target.tsx","components/NFT/TargetPreview.tsx","components/NFT/index.tsx","components/NFTOriginVerifier.tsx","utils/SolanaPriceStore.ts","hooks/useEvmMetadata.ts","hooks/useTerraMetadata.ts","hooks/useTerraTokenMap.ts","hooks/useMetadata.ts","hooks/useTVL.ts","components/Stats/tableComponents/TablePaginationActions.jsx","components/Stats/tableComponents/MuiReactTable.jsx","components/Stats/CustodyAddresses.tsx","hooks/useNFTTVL.ts","components/Stats/nftLists.ts","components/Stats/NFTStats.tsx","hooks/useTransactionCount.ts","components/Stats/TransactionMetrics.tsx","components/Stats/index.tsx","hooks/useOriginalAsset.ts","components/Transfer/RegisterNowButton.tsx","components/TokenOriginVerifier.tsx","components/Transfer/AddToMetamask.tsx","components/Transfer/Redeem.tsx","hooks/useGetIsTransferCompleted.ts","components/Transfer/FeaturedMarkets.tsx","components/Transfer/RedeemPreview.tsx","hooks/useHandleTransfer.tsx","hooks/useTransferTargetAddress.ts","hooks/useGetTargetParsedTokenAccounts.ts","components/Transfer/Target.tsx","components/Transfer/TokenWarning.tsx","components/Transfer/SendConfirmationDialog.tsx","components/Transfer/Send.tsx","hooks/useAllowance.ts","components/Transfer/SendPreview.tsx","components/ChainSelectArrow.tsx","components/Transfer/SourceAssetWarning.tsx","components/Transfer/Source.tsx","components/Transfer/SourcePreview.tsx","components/Transfer/TargetPreview.tsx","components/Transfer/index.tsx","components/WithdrawTokensTerra.tsx","icons/portal_logo.svg","images/Header.png","App.js","components/BackgroundImage.tsx","ErrorBoundary.js","store/index.ts","index.js","store/selectors.ts","components/ChainSelect.tsx","utils/getSignedVAAWithRetry.ts","contexts/BetaContext.tsx","icons/eth.svg","icons/avax.svg","icons/oasis-network-rose-logo.svg","icons/polygon.svg","components/EthereumSignerKey.tsx","components/SolanaWalletKey.tsx","icons/bsc.svg","icons/solana.svg","utils/metaplex.ts","store/transferSlice.ts","components/ToggleConnectedButton.tsx","components/TerraWalletKey.tsx","contexts/TerraWalletContext.tsx","hooks/useTransferSignedVAA.ts","contexts/EthereumProviderContext.tsx","hooks/useIsWalletReady.ts","store/helpers.ts","store/nftSlice.ts","icons/terra.svg","utils/consts.ts","components/ButtonWithLoader.tsx","store/attestSlice.ts","utils/terra.ts","hooks/useHandleCreateWrapped.tsx","hooks/useAttestSignedVAA.ts","hooks/useHandleNFTRedeem.tsx","hooks/useNFTSignedVAA.ts","components/Recovery.tsx","hooks/useHandleRedeem.tsx","utils/solana.ts","contexts/SolanaWalletContext.tsx","components/KeyAndBalance.tsx","utils/parseError.ts","muiTheme.js"],"names":["useStyles","makeStyles","theme","centeredContainer","marginTop","spacing","marginBottom","minHeight","textAlign","width","linearGradient","background","COLORS","blue","green","WebkitBackgroundClip","backgroundClip","WebkitTextFillColor","MozBackgroundClip","MozTextFillColor","HeaderText","children","white","small","subtitle","classes","className","Typography","variant","component","clsx","gutterBottom","useFetchForeignAsset","originChain","originAsset","foreignChain","useEthereumProvider","provider","evmChainId","chainId","isReady","useIsWalletReady","hasCorrectEvmNetwork","getEvmChainId","useState","assetAddress","setAssetAddress","doesExist","setDoesExist","error","setError","isLoading","setIsLoading","originAssetHex","useMemo","nativeToHexString","e","previousArgs","setPreviousArgs","argsEqual","setArgs","useCallback","argumentError","isEVMChain","useEffect","getForeignAssetEth","getTokenBridgeAddressForChain","hexToUint8Array","CHAIN_ID_TERRA","lcd","LCDClient","TERRA_HOST","getForeignAssetTerra","TERRA_TOKEN_BRIDGE_ADDRESS","connection","Connection","SOLANA_HOST","getForeignAssetSolana","SOL_TOKEN_BRIDGE_ADDRESS","then","result","ethers","constants","AddressZero","catch","compoundError","isFetching","data","undefined","address","receivedAt","initialState","terraFeeDenom","TERRA_DEFAULT_FEE_DENOM","feeSlice","createSlice","name","reducers","setTerraFeeDenom","state","action","payload","reset","actions","useTerraNativeBalances","walletAddress","refreshRef","balances","setBalances","refresh","setRefresh","current","bank","balance","coins","map","amount","denom","reduce","obj","toString","feePickerContainer","display","flexDirection","margin","maxWidth","select","alignItems","listItemIcon","minWidth","icon","height","TerraFeeDenomPicker","props","useSelector","selectTerraFeeDenom","wallet","useConnectedWallet","dispatch","useDispatch","feeDenomItems","items","Object","entries","symbol","formatNativeDenom","push","getNativeTerraIcon","find","item","TextField","size","fullWidth","value","onChange","event","target","disabled","MenuItem","ListItemIcon","src","alt","message","color","palette","warning","light","WAITING_FOR_WALLET_AND_CONF","WaitingForWalletMessage","isApproving","selectTransferIsApproving","isSending","selectTransferIsSending","transferTx","selectTransferTransferTx","targetChain","selectTransferTargetChain","isRedeeming","selectTransferIsRedeeming","redeemTx","selectTransferRedeemTx","CHAIN_ID_SOLANA","selectAttestIsSending","attestTx","selectAttestAttestTx","selectAttestTargetChain","isCreating","selectAttestIsCreating","createTx","selectAttestCreateTx","alignCenter","spacer","Create","selectAttestSourceAsset","selectAttestSourceChain","statusMessage","foreignAssetInfo","shouldUpdate","useHandleCreateWrapped","handleClick","showLoader","console","log","KeyAndBalance","CircularProgress","ButtonWithLoader","onClick","tx","viewButton","ShowTx","showExplorerLink","CLUSTER","explorerAddress","CHAIN_ID_ETH","id","CHAIN_ID_ETHEREUM_ROPSTEN","CHAIN_ID_BSC","CHAIN_ID_POLYGON","CHAIN_ID_AVAX","CHAIN_ID_OASIS","explorerName","getExplorerName","noWrap","Button","href","rel","description","alert","CreatePreview","useHistory","handleResetClick","handleReturnClick","howToAddToTokenListUrl","getHowToAddToTokenListUrl","Alert","severity","Link","enqueueSnackbar","signer","sourceAsset","a","setIsSending","attestFromEth","receipt","setAttestTx","transactionHash","block","blockNumber","content","sequence","parseSequenceFromLogEth","getBridgeAddressForChain","emitterAddress","getEmitterAddressEth","getSignedVAAWithRetry","vaaBytes","setSignedVAAHex","uint8ArrayToHex","parseError","solPK","attestFromSolana","SOL_BRIDGE_ADDRESS","transaction","signSendAndConfirm","txid","getTransaction","info","Error","slot","parseSequenceFromLogSolana","getEmitterAddressSolana","asset","feeDenom","attestFromTerra","terraAddress","msg","postWithFees","waitForTerraExecution","txhash","parseSequenceFromLogTerra","getEmitterAddressTerra","useHandleAttest","useSnackbar","sourceChain","isTargetComplete","selectAttestIsTargetComplete","isSendComplete","selectAttestIsSendComplete","solanaWallet","useSolanaWallet","publicKey","terraWallet","handleAttestClick","evm","solana","terra","getMetaplexData","mintAddresses","promises","getMetadataAddress","Promise","all","metaAddresses","getMultipleAccountsRPC","pair","results","output","account","decodeMetadata","useMetaplexData","addresses","setResults","setReceivedAt","useLayoutEffect","cancelled","metadatas","Map","forEach","metadata","x","mint","set","createResultMap","Date","toISOString","root","TransactionProgress","currentBlock","setCurrentBlock","resolve","setTimeout","getBlockNumber","newBlock","sub","onSlotChange","slotInfo","removeSlotChangeListener","blockDiff","expectedBlocks","LinearProgress","CHAINS_BY_ID","SolanaTokenMetadataWarning","sourceAssetArrayed","metaplexData","get","SOLANA_TOKEN_METADATA_PROGRAM_URL","Send","SendPreview","SOLANA_THRESHOLD_LAMPORTS","BigInt","ETHEREUM_THRESHOLD_WEI","TERRA_THRESHOLD_ULUNA","TERRA_THRESHOLD_UUSD","isSufficientBalance","getBalanceSolana","PublicKey","length","lamports","getBalanceEvm","getBalance","toBigInt","getBalancesTerra","TARGET_DENOMS","filter","includes","reject","toBalanceString","formatUnits","NATIVE_TERRA_DECIMALS","useEthereumGasPrice","contract","estimateResults","setEstimateResults","getGasEstimates","EthGasEstimateSummary","methodType","estimate","style","flexWrap","LocalGasStation","fontSize","currentGasPrice","lowEstimate","highEstimate","getDefaultNativeCurrencySymbol","terraEstimatesByContract","transfer","lowGasEstimate","highGasEstimate","evmEstimatesByContract","nft","createWrapped","lowEstimateGasAmount","highEstimateGasAmount","getGasPrice","priceInWei","parseFloat","toFixed","TerraGasEstimateSummary","GasEstimateSummary","LowBalanceWarning","transactionFeeWarning","setBalance","terraBalances","setTerraBalances","loadStart","adjustedresult","adjustedResults","some","balanceString","useTransactionFees","displayWarning","warningMessage","transferField","Source","isSourceComplete","selectAttestIsSourceComplete","shouldLockFields","selectAttestShouldLockFields","handleSourceChange","setSourceChain","handleAssetChange","setSourceAsset","handleNextClick","incrementStep","ChainSelect","chains","CHAINS","label","useCopyToClipboard","navigator","clipboard","writeText","pushToClipboard","mainTypog","marginLeft","marginRight","textDecoration","textUnderlineOffset","noGutter","noUnderline","buttons","StyledTooltip","withStyles","tooltip","Tooltip","SmartAddress","parsedTokenAccount","tokenName","extraContent","isNativeTerra","isNativeDenom","useableAddress","mintKey","useableSymbol","isNative","isNativeAsset","addressShort","shortenAddress","useableName","copyToClipboard","explorerButton","startIcon","OpenInNew","copyButton","FileCopy","tooltipContent","title","interactive","SourcePreview","explainerContent","Target","c","handleTargetChange","setTargetChain","TargetPreview","explainerString","Attest","activeStep","selectAttestActiveStep","isCreateComplete","selectAttestIsCreateComplete","preventNavigation","window","onbeforeunload","Container","Stepper","orientation","Step","expanded","StepButton","setStep","StepContent","footer","position","backdrop","zIndex","footerImg","backgroundRepeat","backgroundPosition","backgroundSize","opacity","breakpoints","up","container","paddingTop","paddingBottom","flex","borderTop","logoWrapper","paddingLeft","flexGrow","linksWrapper","order","mb","linkStyle","linkActiveStyle","socialWrapper","padding","socialHeader","socialIcon","builtWithContainer","justifyContent","wormholeIcon","copyWrapper","flexBasis","Footer","to","Portal","NavLink","underline","activeClassName","IconButton","Discord","Github","Medium","Telegram","Twitter","getRequisiteData","migrator","signerAddress","poolAddress","fromAsset","fromAddress","toAsset","toAddress","fromToken","TokenImplementation__factory","connect","toToken","fromSymbol","toSymbol","fromDecimals","toNumber","toDecimals","decimals","sharesDecimals","balanceOf","fromWalletBalance","toWalletBalance","fromPoolBalance","toPoolBalance","walletSharesBalance","useEthereumMigratorInformation","migratorAddress","toggleRefresh","Migrator__factory","setData","NumberTextField","onMaxClick","type","InputProps","endAdornment","InputAdornment","containerDiv","EvmWorkflow","setToggleRefresh","forceRefresh","prevState","poolInfo","migrationAmount","setMigrationAmount","migrationIsProcessing","setMigrationIsProcessing","setTransaction","fromParse","parseUnits","hasRequisiteData","amountGreaterThanZero","sufficientFromTokens","sufficientPoolBalance","isReadyToTransfer","handleAmountChange","handleMaxClick","migrateTokens","approve","migrate","wait","hash","toTokenPretty","fromTokenPretty","poolPretty","fatalError","mainWorkflow","EthereumSignerKey","solanaTokenMap","getEmptyDataWrapper","terraTokenMap","marketsMap","tokenSlice","receiveSolanaTokenMap","receiveDataWrapper","fetchSolanaTokenMap","fetchDataWrapper","errorSolanaTokenMap","errorDataWrapper","receiveTerraTokenMap","fetchTerraTokenMap","errorTerraTokenMap","receiveMarketsMap","fetchMarketsMap","errorMarketsMap","environment","ENV","Testnet","MainnetBeta","getSolanaTokenMap","TokenListProvider","tokens","tokenList","filterByChainId","getList","useSolanaTokenMap","tokenMap","selectSolanaTokenMap","shouldFire","useAssociatedAccountExistsState","mintAddress","readableTargetAddress","associatedAccountExists","setAssociatedAccountExists","mintPublicKey","payerPublicKey","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","associatedAddress","getAccountInfo","SolanaCreateAssociatedAddress","setIsCreating","Transaction","createAssociatedTokenAccountInstruction","add","getRecentBlockhash","blockhash","recentBlockhash","feePayer","SolanaCreateAssociatedAddressAlternate","selectTransferOriginChain","selectTransferOriginAsset","addressHex","selectTransferTargetAddressHex","base58TargetAddress","hexToNativeString","base58OriginAddress","targetAsset","setTargetAsset","handleForceCreateClick","mainPaper","backgroundColor","whiteWithTransparency","divider","getDecimals","setter","pk","getParsedAccountInfo","parsed","tokenAmount","uiAmountString","Workflow","fromMint","toMint","fromTokenAccount","metaplexArray","setPoolAddress","poolExists","setPoolExists","fromTokenAccountBalance","setFromTokenAccountBalance","toTokenAccount","setToTokenAccount","toTokenAccountBalance","setToTokenAccountBalance","fromMintDecimals","setFromMintDecimals","fromTokenAccountExists","toTokenAccountExists","setToTokenAccountExists","toCustodyAddress","setToCustodyAddress","toCustodyBalance","setToCustodyBalance","getPoolAddress","MIGRATION_PROGRAM_ADDRESS","key","getMultipleAccounts","getToCustodyAddress","migrateTokensTx","instruction","accountsReady","getMetadata","tokenMapItem","metaplexItem","logo","logoURI","uri","toMetadata","fromMetadata","toMintPretty","fromMintPretty","SolanaWalletKey","SolanaRoot","legacyAsset","match","params","MIGRATION_ASSET_MAP","fromTokenAcct","EthereumRoot","targetPool","getMigrationAssetMap","getAddress","withRouter","Paper","lineItem","alignSelf","flewGrow","hidden","convertButton","EvmMigrationLineItem","onLoadComplete","loaded","setLoaded","valueA","decimalsA","valueB","decimalsB","decimalsBasis","normalizedA","normalizedB","compareWithDecimalOffset","migrationAmountAbs","getAddressBalances","factory","EvmQuickMigrate","migrationMap","eligibleTokens","Array","from","keys","migrators","setMigrators","migratorsError","setMigratorsError","migratorsLoading","setMigratorsLoading","migratorsFinishedLoading","setMigratorsFinishedLoading","reportLoadComplete","migratorAddresses","tokenAddress","gt","hasEligibleAssets","chainName","centered","SolanaMigrationLineItem","migratorInfo","getNotReadyCause","fromAssociatedTokenAccountExists","toAssociatedTokenAccountExists","fromAssociatedTokenAccount","toAssociatedTokenAccount","fromAssociatedTokenAccountBalance","toAssociatedTokenAccountBalance","fromName","fromLogo","toName","toLogo","useSolanaMigratorInformation","fromMintKey","toMintKey","defaultFromTokenAccount","migrationError","setMigrationError","handleMigrateClick","precheckError","getTokenBalances","getParsedTokenAccountsByOwner","programId","pubkey","fromAccountInfo","SolanaQuickMigrate","makeStateSafe","useCheckIfWormholeWrapped","selectNFTSourceChain","selectTransferSourceChain","selectNFTSourceAsset","selectTransferSourceAsset","nftSourceParsedTokenAccount","selectNFTSourceParsedTokenAccount","tokenId","setSourceWormholeWrappedInfo","setNFTSourceWormholeWrappedInfo","setTransferSourceWormholeWrappedInfo","isRecovery","selectNFTIsRecovery","selectTransferIsRecovery","getOriginalAssetEthNFT","getNFTBridgeAddressForChain","getOriginalAssetEth","wrappedInfo","getOriginalAssetSolNFT","SOL_NFT_BRIDGE_ADDRESS","getOriginalAssetSol","getOriginalAssetTerra","useFetchTargetAsset","isSourceAssetWormholeWrapped","selectNFTIsSourceAssetWormholeWrapped","selectTransferIsSourceAssetWormholeWrapped","selectNFTOriginChain","selectNFTOriginAsset","selectNFTOriginTokenId","selectNFTTargetChain","setNFTTargetAsset","setTransferTargetAsset","lastSuccessfulArgs","setLastSuccessfulArgs","argsMatchLastSuccess","getForeignAssetEthNFT","getForeignAssetSolNFT","arrayify","BigNumber","SolanaTPSWarning","tps","setTps","interval","setInterval","getRecentPerformanceSamples","samples","short","sample","numTransactions","samplePeriodSecs","avgTps","clearInterval","numeral","format","StepDescription","selectNFTIsSending","selectNFTTransferTx","selectNFTIsRedeeming","selectNFTRedeemTx","Redeem","useHandleNFTRedeem","RedeemPreview","recipientChain","recipientAddress","transferFromEth","setTransferTx","payerAddress","targetAddress","originAddressStr","originTokenId","originAddress","zeroPad","transferFromSolana","useHandleNFTTransfer","sourceTokenId","targetAddressHex","selectNFTTargetAddressHex","useNFTTargetAddressHex","selectNFTIsTargetComplete","selectNFTIsSendComplete","sourceParsedTokenAccount","sourceTokenPublicKey","handleTransferClick","selectNFTTargetError","sourceWalletAddress","selectNFTSourceWalletAddress","isWrongWallet","isDisabled","errorMessage","createParsedTokenAccount","uiAmount","createNFTParsedTokenAccount","animation_url","external_url","image","image_256","nftName","createParsedTokenAccountFromInfo","createParsedTokenAccountFromCovalent","covalent","contract_address","contract_decimals","Number","contract_ticker_symbol","contract_name","logoOverrides","logo_url","createNativeSolParsedTokenAccount","fetchAccounts","WSOL_ADDRESS","WSOL_DECIMALS","createNativeEthParsedTokenAccount","balanceInWei","balanceInEth","utils","formatEther","WETH_ADDRESS","WETH_DECIMALS","ethIcon","createNativeEthRopstenParsedTokenAccount","ROPSTEN_WETH_ADDRESS","ROPSTEN_WETH_DECIMALS","createNativeBscParsedTokenAccount","WBNB_ADDRESS","WBNB_DECIMALS","bnbIcon","createNativePolygonParsedTokenAccount","WMATIC_ADDRESS","WMATIC_DECIMALS","polygonIcon","createNativeAvaxParsedTokenAccount","WAVAX_ADDRESS","WAVAX_DECIMALS","avaxIcon","createNativeOasisParsedTokenAccount","WROSE_ADDRESS","WROSE_DECIMALS","oasisIcon","createNFTParsedTokenAccountFromCovalent","nft_data","token_balance","token_id","token_url","external_data","getEthereumAccountsCovalent","url","COVALENT_GET_TOKENS_URL","axios","response","supports_erc","getSolanaParsedTokenAccounts","fetchSourceParsedTokenAccountsNFT","fetchSourceParsedTokenAccounts","splParsedTokenAccounts","receiveSourceParsedTokenAccountsNFT","nativeAccount","unshift","receiveSourceParsedTokenAccounts","errorSourceParsedTokenAccountsNFT","errorSourceParsedTokenAccounts","useGetAvailableTokens","tokenAccounts","selectNFTSourceParsedTokenAccounts","selectTransferSourceParsedTokenAccounts","lookupChain","setCovalent","covalentLoading","setCovalentLoading","covalentError","setCovalentError","ethNativeAccount","setEthNativeAccount","ethNativeAccountLoading","setEthNativeAccountLoading","ethNativeAccountError","setEthNativeAccountError","solanaMintAccounts","setSolanaMintAccounts","solanaMintAccountsLoading","setSolanaMintAccountsLoading","solanaMintAccountsError","setSolanaMintAccountsError","selectedSourceWalletAddress","selectSourceWalletAddress","currentSourceWalletAddress","resetSourceAccounts","setSourceWalletAddressNFT","setSourceWalletAddress","setSourceParsedTokenAccountNFT","setSourceParsedTokenAccount","setSourceParsedTokenAccountsNFT","setSourceParsedTokenAccounts","setAmount","index","extractMintInfo","accounts","arr","ethAccounts","slice","mintAccounts","resetAccounts","getEthereumToken","token","ethTokenToParsedTokenAccount","getEthereumNFT","NFTImplementation__factory","isNFT","erc721metadata","supportsInterface","supportsErc721","supportsErc721Metadata","ethNFTToNFTParsedTokenAccount","ownerOf","tokenURI","isValidEthereumAddress","isAddress","getMarketsMap","FEATURED_MARKETS_JSON_URL","useMarketsMap","selectMarketsMap","internalShouldFire","safeIPFS","startsWith","replace","LogoIcon","Avatar","solanaIcon","bscIcon","card","borderRadius","transition","transform","silverBorder","cardInset","textContent","detailsContent","mediaContent","border","silverMediaBorder","borderColor","eth","bsc","polygon","skeleton","placeItems","verticalAlign","wormholePositioner","ViewerLoader","Skeleton","animation","Wormhole","NFTViewer","setMetadata","isMediaLoading","setIsMediaLoading","onLoad","m","image_url","big_image","small_image","animLower","toLowerCase","hasVideo","endsWith","hasAudio","hasImage","copyTokenId","videoSrc","imageSrc","audioSrc","onError","media","autoPlay","controls","loop","onLoadedData","Card","elevation","CardContent","CardMedia","align","arrow","substr","createStyles","optionContainer","optionContent","maxHeight","overflow","dialogContent","overflowX","selectionButtonContainer","selectionButton","values","sm","tokenOverviewContainer","flexShrink","tokenImageContainer","tokenImage","tokenMarketsList","migrationAlert","flexTitle","grower","balancePretty","uiString","numberString","split","gte","substring","noClickThrough","stopPropagation","BasicAccountRender","isMigrationEligible","displayBalance","marketsData","mintPrettyString","shouldDisplayBalance","nftContent","wordBreak","tokenContent","markets","market","Launch","link","migrationRender","TokenPicker","options","RenderOption","isValidAddress","useTokenId","holderString","setHolderString","tokenIdHolderString","setTokenIdHolderString","loadingError","setLoadingError","isLocalLoading","setLocalLoading","dialogIsOpen","setDialogIsOpen","selectionError","setSelectionError","openDialog","closeDialog","handleSelectOption","option","newOption","resetAccountsWrapper","searchFilter","optionString","searchString","marketChainTokens","featuredMarkets","tokenMarkets","featuredOptions","ownedMarketTokens","nonFeaturedOptions","localFind","localLoader","displayLocalError","dialog","Dialog","onClose","open","DialogTitle","DialogContent","AVAILABLE_MARKETS_URL","List","InfoOutlined","ListItem","button","Divider","selectionChip","isWormholev1","WormholeAbi__factory","WORMHOLE_V1_ETH_ADDRESS","isWrappedAsset","EvmTokenPicker","selectedTokenAccount","selectTransferSourceParsedTokenAccount","tokenAccount","selectedMintMatch","selectedTokenIdMatch","getEthAddress","onChangeWrapper","v1","migration","RenderComp","inlineContentWrapper","flexWrapper","RefreshButtonWrapper","callback","sortParsedTokenAccounts","b","localeCompare","SolanaSourceTokenSelector","mintAuth","metaplex","memoizedTokenMap","getLogo","getSymbol","getName","filteredOptions","is721CompatibleNFT","supply","sort","accountsWithMetadata","mintAuthority","WORMHOLE_V1_MINT_AUTHORITY","newValue","returnsFalse","TerraTokenPicker","nativeRefresh","useRef","nativeIsLoading","resetAccountWrapper","terraTokenArray","SUPPORTED_TERRA_TOKENS","lookupTerraAddress","lookupAsset","wasm","contractQuery","token_info","isSearchableAddress","isValidTerraAddress","TokenSelector","walletIsReady","setNFTSourceParsedTokenAccount","setTransferSourceParsedTokenAccount","setNFTSourceWalletAddress","setTransferSourceWalletAddress","handleOnChange","newTokenAccount","maps","useGetSourceParsedTokens","placeholder","selectNFTSourceBalanceString","selectNFTSourceError","selectNFTIsSourceComplete","selectNFTShouldLockFields","VerifiedUser","CHAINS_WITH_NFT_SUPPORT","useSyncTargetAddress","selectNFTTargetAsset","selectTransferTargetAsset","targetParsedTokenAccount","selectTransferTargetParsedTokenAccount","targetTokenAccountPublicKey","setTargetAddressHex","setNFTTargetAddressHex","setTransferTargetAddressHex","toBytes","associatedTokenAccount","canonicalAddress","targetAddressNative","NFT","selectNFTActiveStep","isRedeemComplete","selectNFTIsRedeemComplete","search","useLocation","query","URLSearchParams","pathSourceChain","pathTargetChain","completed","mainCard","originHeader","viewButtonWrapper","loaderWrapper","NFTOriginVerifier","isBeta","useBetaContext","setLookupChain","setLookupAsset","lookupTokenId","setLookupTokenId","lookupError","setLookupError","setParsedTokenAccount","originInfo","setOriginInfo","handleChainChange","handleTokenIdChange","newParsedTokenAccount","readableAddress","displayError","BETA_CHAINS","serumMarkets","MARKETS","coin","deprecated","join","PriceStore","cache","this","marketName","fetch","resp","json","asks","bids","price","mid","priceStore","ERC20_BASIC_ABI","handleError","fetchSingleMetadata","Contract","fetchEthMetadata","resultsArray","useEvmMetadata","setIsFetching","fetchTerraMetadata","useTerraMetadata","getTerraTokenMap","TERRA_TOKEN_METADATA_URL","useTerraTokenMap","selectTerraTokenMap","useMetadata","solanaAddresses","terraAddresses","ethereumAddresses","terraMetadata","ethMetadata","tokenInfo","raw","constructSolanaMetadata","metadataMap","meta","constructEthMetadata","mainnet","constructTerraMetadata","BAD_PRICES_BY_CHAIN","calcEvmTVL","covalentReport","hasUnreliablePrice","quote_rate","totalValue","quote","quotePrice","originChainId","useTVL","ethCovalentData","setEthCovalentData","ethCovalentIsLoading","setEthCovalentIsLoading","ethCovalentError","setEthCovalentError","bscCovalentData","setBscCovalentData","bscCovalentIsLoading","setBscCovalentIsLoading","bscCovalentError","setBscCovalentError","polygonCovalentData","setPolygonCovalentData","polygonCovalentIsLoading","setPolygonCovalentIsLoading","polygonCovalentError","setPolygonCovalentError","avaxCovalentData","setAvaxCovalentData","avaxCovalentIsLoading","setAvaxCovalentIsLoading","avaxCovalentError","setAvaxCovalentError","solanaCustodyTokens","setSolanaCustodyTokens","solanaCustodyTokensLoading","setSolanaCustodyTokensLoading","solanaCustodyTokensError","setSolanaCustodyTokensError","solanaMetadata","solanaPrices","priceMap","setPriceMap","relevantMarkets","relevantMarket","getPrice","useSolanaPrices","isTerraNativeLoading","terraNativeBalances","terraSwaprates","setTerraSwaprates","TERRA_SWAPRATE_URL","terraTVL","matchingSwap","swap","swaprate","useTerraTVL","isTerraLoading","solanaTVL","metaData","genericMetadata","calcSolanaTVL","ethTVL","bscTVL","polygonTVL","avaxTVL","ETH_TOKEN_BRIDGE_ADDRESS","BSC_TOKEN_BRIDGE_ADDRESS","POLYGON_TOKEN_BRIDGE_ADDRESS","AVAX_TOKEN_BRIDGE_ADDRESS","SOL_CUSTODY_ADDRESS","tvlArray","TablePaginationActions","useTheme","count","page","rowsPerPage","onPageChange","direction","Math","ceil","max","stopProp","EnhancedTable","columns","skipPageReset","useTable","autoResetPage","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","getTableProps","headerGroups","prepareRow","gotoPage","setPageSize","rows","pageIndex","pageSize","TableContainer","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","getSortByToggleProps","Header","TableSortLabel","active","isSorted","isSortedDesc","render","canGroupBy","getGroupByToggleProps","isGrouped","RemoveCircleOutline","AddCircleOutline","TableBody","row","i","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","KeyboardArrowRight","subRows","isAggregated","isPlaceholder","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onRowsPerPageChange","ActionsComponent","flexBox","down","explainerContainer","CustodyAddresses","nftAddress","SOL_NFT_CUSTODY_ADDRESS","tvlColumns","accessor","disableGroupBy","Cell","original","header","table","MuiReactTable","nftData","useNFTTVL","ETH_NFT_BRIDGE_ADDRESS","BSC_NFT_BRIDGE_ADDRESS","POLYGON_NFT_BRIDGE_ADDRESS","ALLOW_LIST","logoPositioner","tokenContainer","totalContainer","tableBox","randomButton","randomNftContainer","tableContainer","NFTStats","nftTVL","randomNumber","setRandomNumber","randomNft","genRandomNumber","found","nextNumber","floor","random","chain","nfts","chainLogo","contractAddress","sortBy","desc","randomNFTContent","useTransactionCount","totals","setTotals","recents","setRecents","loadingTotals","setLoadingTotals","loadingRecents","setLoadingRecents","totalsError","setTotalsError","recentsError","setRecentsError","TOTAL_TRANSACTIONS_WORMHOLE","RECENT_TRANSACTIONS_WORMHOLE","totalAllTime","total24h","VAA_EMITTER_ADDRESSES","totalAll","TotalCount","total24","LastDayCount","mostRecent","mergeResults","totalsBox","paddingRight","fontWeight","typog","TransactionMetrics","transactionCount","networkExplorer","WORMHOLE_EXPLORER_BASE","StatsRoot","tvl","sortTokens","rowA","rowB","sortType","aggregate","leafValues","Aggregated","p","v","tvlString","sum","val","toUpperCase","getOriginalAssetToken","foreignNativeStringAddress","promise","getOriginalAssetNFT","uint8ArrayToNative","SOLANA_SYSTEM_PROGRAM_ADDRESS","useOriginalAsset","foreignAddress","setOriginAddress","setOriginTokenId","setOriginChain","getOriginalAsset","RegisterNowButtonCore","history","signedVAAHex","selectAttestSignedVAAHex","canSwitch","nativeAsset","RegisterNowButton","arrowIcon","resultContainer","PrimaryAssetInfomation","nativeContent","wrapped","SecondaryAssetInformation","originAssetInfo","tokenArray","TokenOriginVerifier","primaryLookupChain","setPrimaryLookupChain","primaryLookupAsset","setPrimaryLookupAsset","secondaryLookupChain","setSecondaryLookupChain","primaryLookupChainOptions","secondaryLookupChainOptions","handlePrimaryLookupChainChange","handleSecondaryLookupChainChange","handlePrimaryLookupAssetChange","primaryWalletIsActive","secondaryWalletIsActive","primaryWallet","secondaryWallet","primaryWalletError","originError","primaryError","secondaryWalletError","foreignError","secondaryError","primaryContent","secondaryContent","addButton","AddToMetamask","detectEthereumProvider","request","method","useHandleRedeem","handleNativeClick","recoveryOnly","isTransferCompleted","setIsTransferCompleted","signedVAA","useTransferSignedVAA","transferCompleted","getIsTransferCompletedEth","getIsTransferCompletedSolana","lcdClient","getIsTransferCompletedTerra","TERRA_GAS_PRICES_URL","isTransferCompletedLoading","useGetIsTransferCompleted","isEthNative","isEthRopstenNative","isBscNative","isPolygonNative","isAvaxNative","isOasisNative","isSolNative","isNativeEligible","useNativeRedeem","setUseNativeRedeem","toggleNativeRedeem","howToAddTokensUrl","getHowToAddTokensToWalletUrl","FormControlLabel","control","Checkbox","checked","getJupiterSwapUrl","sourceSymbol","targetSymbol","JUPITER_SWAP_BASE_URL","FeaturedMarkets","tokenMarketButtons","marketInfo","amountParsed","transferFromEthNative","transferNativeSol","transferFromTerra","msgs","useHandleTransfer","selectTransferAmount","useTransferTargetAddressHex","selectTransferIsTargetComplete","selectTransferIsSendComplete","useGetTargetParsedTokenAccounts","targetAssetArrayed","hasResolvedMetadata","setTargetParsedTokenAccount","n","useTargetInfo","selectTransferTargetAssetWrapper","targetAssetError","selectTransferTargetBalanceString","transferAmount","selectTransferTargetError","selectTransferShouldLockFields","line","WormholeWrappedWarning","Box","MultichainWarning","RewardsWarning","TokenWarning","searchableAddress","isWormholeWrapped","multichainSymbol","MULTI_CHAIN_TOKENS","isMultiChain","showMultiChainWarning","showWrappedWarning","showRewardsWarning","SendConfirmationContent","deservesTimeout","countdown","setCountdown","ArrowDownward","DialogActions","SendConfirmationDialog","isConfirmOpen","setIsConfirmOpen","handleConfirmClick","handleConfirmClose","sourceAmount","sourceDecimals","sourceIsNative","sourceAmountParsed","oneParsed","allowanceError","setAllowanceError","shouldApproveUnlimited","setShouldApproveUnlimited","toggleShouldApproveUnlimited","allowance","setAllowance","isAllowanceFetching","setIsAllowanceFetching","isApproveProcessing","sufficientAllowance","getAllowanceEth","approveAmount","setIsApproving","approveEth","useAllowance","approveButtonNeeded","notOne","approveExactAmount","approveUnlimited","MaxUint256","ChainSelectArrow","showSwap","setShowSwap","onMouseEnter","onMouseLeave","SwapHoriz","ArrowForward","PolygonTerraWrappedWarning","SoureAssetWarning","showPolygonTerraWrappedWarning","POLYGON_TERRA_WRAPPED_TOKENS","chainSelectWrapper","chainSelectContainer","chainSelectArrow","top","targetChainOptions","hasParsedTokenAccount","isSolanaMigration","isEthereumMigration","ETH_MIGRATION_ASSET_MAP","isBscMigration","BSC_MIGRATION_ASSET_MAP","isMigrationAsset","selectTransferSourceBalanceString","selectTransferSourceError","selectTransferIsSourceComplete","handleMigrationClick","Transfer","selectTransferActiveStep","selectTransferIsRedeemComplete","formControl","withdraw","MsgExecuteContract","withdraw_tokens","native_token","txResult","WithdrawTokensTerra","setToken","TerraWalletKey","FormControl","InputLabel","Select","appBar","typography","body2","bg","headerImage","brandLink","iconButton","betaBanner","App","pathname","handleTabChange","AppBar","Toolbar","RouterLink","Hidden","implementation","xsDown","smUp","HelpOutline","Tabs","indicatorColor","Tab","exact","path","Recovery","Migration","Stats","holeOuterContainer","holeInnerContainer","left","holeImage","blurred","BackgroundImage","ErrorBoundary","hasError","errorInfo","React","Component","store","configureStore","reducer","attest","attestReducer","nftReducer","transferReducer","tokenReducer","fee","feeReducer","ReactDOM","ThemeProvider","CssBaseline","maxSnack","BetaContext","document","getElementById","sourceParsedTokenAccounts","selectNFTSignedVAAHex","lte","indexOf","sourceError","UNREGISTERED_ERROR_MESSAGE","selectTransferSignedVAAHex","rest","filteredChains","createChainMenuItem","CURRENT_WORMHOLE_RPC_HOST","getNextRpcHost","WORMHOLE_RPC_HOSTS","emitterChain","retryAttempts","attempts","getSignedVAA","createContext","BetaContextProvider","isBetaEnabled","setIsBetaEnabled","userEntered","secretSequence","secretListener","k","keyCode","prev","addEventListener","removeEventListener","Provider","useContext","disconnect","providerError","connected","disconnectButton","STORE","MetadataKey","base58","require","METADATA_REPLACE","RegExp","METADATA_PREFIX","EDITION","PubKeysInternedMap","toPublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","METADATA_PROGRAM_ID","METAPLEX_ID","SYSTEM","programIds","associatedToken","bpf_upgrade_loader","system","memo","vault","auction","findProgramAddress","seeds","agg","cached","localStorage","getItem","JSON","parse","parseInt","nonce","setItem","stringify","toBase58","getEdition","tokenMint","PROGRAM_IDS","Buffer","toBuffer","Creator","args","verified","share","Data","sellerFeeBasisPoints","creators","Metadata","updateAuthority","primarySaleHappened","isMutable","editionNonce","masterEdition","edition","MetadataV1","METADATA_SCHEMA","kind","fields","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","MasterEditionV2","parent","EditionV1","ledger","EditionMarker","editionOffset","indexOffset","positionInBitsetFromRight","mask","pow","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","encode","writePubkeyAsString","decode","buffer","deserializeUnchecked","transferSlice","decrementStep","prevSourceChain","isWrapped","prevTargetChain","setIsRedeeming","setRedeemTx","setRecoveryVaa","vaa","parsedPayload","ToggleConnectedButton","is0x","useTerraWallet","wallets","localnet","chainID","URL","walletConnectChainIds","TerraWalletContext","TerraWalletWrapper","useWallet","setWallet","setConnected","availableConnectTypes","contextValue","TerraWalletProvider","defaultNetwork","EthereumProviderContext","EthereumProviderProvider","setProviderError","setProvider","setChainId","setSigner","setSignerAddress","detectedProvider","providers","Web3Provider","send","getNetwork","network","getSigner","on","createWalletStatus","forceNetworkSwitch","enableNetworkAutoswitch","autoSwitch","hasTerraWallet","hasEthInfo","correctEvmNetwork","hexStripZeros","hexlify","nftSlice","terraIcon","ETH_NETWORK_CHAIN_ID","ROPSTEN_ETH_NETWORK_CHAIN_ID","BSC_NETWORK_CHAIN_ID","POLYGON_NETWORK_CHAIN_ID","AVAX_NETWORK_CHAIN_ID","OASIS_NETWORK_CHAIN_ID","process","ETH_BRIDGE_ADDRESS","BSC_BRIDGE_ADDRESS","POLYGON_BRIDGE_ADDRESS","AVAX_BRIDGE_ADDRESS","AVAX_NFT_BRIDGE_ADDRESS","OASIS_BRIDGE_ADDRESS","OASIS_NFT_BRIDGE_ADDRESS","OASIS_TOKEN_BRIDGE_ADDRESS","ROPSTEN_ETH_BRIDGE_ADDRESS","ROPSTEN_ETH_NFT_BRIDGE_ADDRESS","ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS","TERRA_BRIDGE_ADDRESS","COVALENT_BSC","COVALENT_POLYGON","COVALENT_AVAX","noNftMetadata","chainNum","EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v","Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB","MAX_VAA_UPLOAD_RETRIES_SOLANA","loader","bottom","attestSlice","setCreateTx","unit","isValidTerra","txInfo","code","raw_log","startsWithTerra","isParseable","isLength20","feeDenoms","gasPrices","estimateFee","feeEstimate","post","updateWrappedOnEth","createWrappedOnEth","signTransaction","postVaaSolanaWithRetry","updateWrappedOnSolana","createWrappedOnSolana","updateWrappedOnTerra","createWrappedOnTerra","useAttestSignedVAA","handleCreateClick","redeemOnEth","getClaimAddressSolana","claimAddress","redeemOnSolana","isNFTVAASolanaNative","parse_vaa","parsedVAA","parseNFTPayload","Uint8Array","getForeignAssetSol","metadataAddress","createMetaOnSolana","useNFTSignedVAA","handleRedeemClick","advancedContainer","getTransactionReceipt","setType","recoverySourceChain","setRecoverySourceChain","recoverySourceTx","setRecoverySourceTx","recoverySourceTxIsLoading","setRecoverySourceTxIsLoading","recoverySourceTxError","setRecoverySourceTxError","recoverySignedVAA","setRecoverySignedVAA","recoveryParsedVAA","setRecoveryParsedVAA","walletConnectError","parseTransferPayload","pathSourceTransaction","handleTypeChange","prevChain","handleSourceChainChange","handleSourceTxChange","trim","handleSignedVAAChange","parsedPayloadTargetChain","enableRecovery","handleRecoverClick","setRecoveryNFTVaa","helperText","expandIcon","right","my","emitter_chain","emitter_address","timestamp","toLocaleString","redeemOnEthNative","redeemAndUnwrapOnSolana","redeemOnTerra","handleRedeemNativeClick","signed","sendRawTransaction","serialize","confirmTransaction","mintInfo","MintLayout","uintArray","reverse","pubkeys","commitment","chunks","chunk","getMultipleAccountsInfo","flat","apply","_","SolanaWalletProvider","getPhantomWallet","getSolflareWallet","getMathWallet","getSolletWallet","MM_ERR_WITH_INFO_START","blueWithTransparency","gray","greenWithTransparency","lightGreen","lightBlue","nearBlack","nearBlackWithMinorTransparency","red","darkRed","responsiveFontSizes","createTheme","default","paper","text","primary","main","secondary","fontFamily","h1","h2","h4","overrides","MuiCssBaseline","scrollbarWidth","scrollbarColor","MuiAccordion","rounded","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","MuiAlert","MuiButton","letterSpacing","outlinedSizeSmall","MuiLink","MuiPaper","backdropFilter","MuiStepper","MuiStep","MuiStepConnector","lineVertical","borderLeftWidth","MuiStepContent","MuiStepLabel","textTransform","MuiTabs","borderBottom","indicator","MuiTab","textColorInherit","MuiTableCell"],"mappings":"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","file":"static/js/main.c181d48d.chunk.js","sourcesContent":["import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport { COLORS } from \"../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  centeredContainer: {\n    marginTop: theme.spacing(14),\n    marginBottom: theme.spacing(26),\n    minHeight: 208,\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n  linearGradient: {\n    background: `linear-gradient(to left, ${COLORS.blue}, ${COLORS.green});`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n  },\n}));\n\nexport default function HeaderText({\n  children,\n  white,\n  small,\n  subtitle,\n}: {\n  children: ReactChild;\n  white?: boolean;\n  small?: boolean;\n  subtitle?: string;\n}) {\n  const classes = useStyles();\n  return (\n    <div className={classes.centeredContainer}>\n      <Typography\n        variant={small ? \"h2\" : \"h1\"}\n        component=\"h1\"\n        className={clsx({ [classes.linearGradient]: !white })}\n        gutterBottom={!!subtitle}\n      >\n        {children}\n      </Typography>\n      {subtitle ? <Typography>{subtitle}</Typography> : null}\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToUint8Array,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type ForeignAssetInfo = {\n  doesExist: boolean;\n  address: string | null;\n};\n\nfunction useFetchForeignAsset(\n  originChain: ChainId,\n  originAsset: string,\n  foreignChain: ChainId\n): DataWrapper<ForeignAssetInfo> {\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const correctEvmNetwork = getEvmChainId(foreignChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const [assetAddress, setAssetAddress] = useState<string | null>(null);\n  const [doesExist, setDoesExist] = useState<boolean | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const originAssetHex = useMemo(() => {\n    try {\n      return nativeToHexString(originAsset, originChain);\n    } catch (e) {\n      return null;\n    }\n  }, [originAsset, originChain]);\n  const [previousArgs, setPreviousArgs] = useState<{\n    originChain: ChainId;\n    originAsset: string;\n    foreignChain: ChainId;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.originChain === originChain &&\n    previousArgs.originAsset === originAsset &&\n    previousArgs.foreignChain === foreignChain;\n  const setArgs = useCallback(() => {\n    setPreviousArgs({ foreignChain, originChain, originAsset });\n  }, [foreignChain, originChain, originAsset]);\n\n  const argumentError = useMemo(\n    () =>\n      !originChain ||\n      !originAsset ||\n      !foreignChain ||\n      !originAssetHex ||\n      foreignChain === originChain ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && !hasCorrectEvmNetwork) ||\n      argsEqual,\n    [\n      isReady,\n      foreignChain,\n      originAsset,\n      originChain,\n      hasCorrectEvmNetwork,\n      originAssetHex,\n      argsEqual,\n    ]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setAssetAddress(null);\n      setError(\"\");\n      setDoesExist(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError || !originAssetHex) {\n      return;\n    }\n\n    let cancelled = false;\n    setIsLoading(true);\n    try {\n      const getterFunc: () => Promise<string | null> = isEVMChain(foreignChain)\n        ? () =>\n            getForeignAssetEth(\n              getTokenBridgeAddressForChain(foreignChain),\n              provider as any, //why does this typecheck work elsewhere?\n              originChain,\n              hexToUint8Array(originAssetHex)\n            )\n        : foreignChain === CHAIN_ID_TERRA\n        ? () => {\n            const lcd = new LCDClient(TERRA_HOST);\n            return getForeignAssetTerra(\n              TERRA_TOKEN_BRIDGE_ADDRESS,\n              lcd,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : () => {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            return getForeignAssetSolana(\n              connection,\n              SOL_TOKEN_BRIDGE_ADDRESS,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          };\n\n      getterFunc()\n        .then((result) => {\n          if (!cancelled) {\n            if (\n              result &&\n              !(\n                isEVMChain(foreignChain) &&\n                result === ethers.constants.AddressZero\n              )\n            ) {\n              setArgs();\n              setDoesExist(true);\n              setIsLoading(false);\n              setAssetAddress(result);\n            } else {\n              setArgs();\n              setDoesExist(false);\n              setIsLoading(false);\n              setAssetAddress(null);\n            }\n          }\n        })\n        .catch((e) => {\n          if (!cancelled) {\n            setError(\"Could not retrieve the foreign asset.\");\n            setIsLoading(false);\n          }\n        });\n    } catch (e) {\n      //This catch mostly just detects poorly formatted addresses\n      if (!cancelled) {\n        setError(\"Could not retrieve the foreign asset.\");\n        setIsLoading(false);\n      }\n    }\n  }, [\n    argumentError,\n    foreignChain,\n    originAssetHex,\n    originChain,\n    provider,\n    setArgs,\n    argsEqual,\n  ]);\n\n  const compoundError = useMemo(() => {\n    return error ? error : \"\";\n  }, [error]); //now swallows wallet errors\n\n  const output: DataWrapper<ForeignAssetInfo> = useMemo(\n    () => ({\n      error: compoundError,\n      isFetching: isLoading,\n      data:\n        (assetAddress !== null && assetAddress !== undefined) ||\n        (doesExist !== null && doesExist !== undefined)\n          ? { address: assetAddress, doesExist: !!doesExist }\n          : null,\n      receivedAt: null,\n    }),\n    [compoundError, isLoading, assetAddress, doesExist]\n  );\n\n  return output;\n}\n\nexport default useFetchForeignAsset;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TERRA_DEFAULT_FEE_DENOM } from \"../utils/consts\";\n\nexport interface FeeSliceState {\n  terraFeeDenom: string;\n}\n\nconst initialState: FeeSliceState = {\n  terraFeeDenom: TERRA_DEFAULT_FEE_DENOM,\n};\n\nexport const feeSlice = createSlice({\n  name: \"fee\",\n  initialState,\n  reducers: {\n    setTerraFeeDenom: (state, action: PayloadAction<string>) => {\n      state.terraFeeDenom = action.payload;\n    },\n    reset: () => initialState,\n  },\n});\n\nexport const { setTerraFeeDenom, reset } = feeSlice.actions;\n\nexport default feeSlice.reducer;\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { MutableRefObject, useEffect, useMemo, useState } from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport interface TerraNativeBalances {\n  [index: string]: string;\n}\n\nexport default function useTerraNativeBalances(\n  walletAddress?: string,\n  refreshRef?: MutableRefObject<() => void>\n) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [balances, setBalances] = useState<TerraNativeBalances | undefined>({});\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    if (refreshRef) {\n      refreshRef.current = () => {\n        setRefresh(true);\n      };\n    }\n  }, [refreshRef]);\n  useEffect(() => {\n    setRefresh(false);\n    if (walletAddress) {\n      setIsLoading(true);\n      setBalances(undefined);\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.bank\n        .balance(walletAddress)\n        .then((coins) => {\n          // coins doesn't support reduce\n          const balancePairs = coins.map(({ amount, denom }) => [\n            denom,\n            amount,\n          ]);\n          const balance = balancePairs.reduce((obj, current) => {\n            obj[current[0].toString()] = current[1].toString();\n            return obj;\n          }, {} as TerraNativeBalances);\n          setIsLoading(false);\n          setBalances(balance);\n        })\n        .catch((e) => {\n          setIsLoading(false);\n          setBalances(undefined);\n        });\n    } else {\n      setIsLoading(false);\n      setBalances(undefined);\n    }\n  }, [walletAddress, refresh]);\n  const value = useMemo(() => ({ isLoading, balances }), [isLoading, balances]);\n  return value;\n}\n","import {\n  MenuItem,\n  makeStyles,\n  TextField,\n  Typography,\n  ListItemIcon,\n} from \"@material-ui/core\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setTerraFeeDenom } from \"../store/feeSlice\";\nimport { selectTerraFeeDenom } from \"../store/selectors\";\nimport useTerraNativeBalances from \"../hooks/useTerraNativeBalances\";\nimport { formatNativeDenom, getNativeTerraIcon } from \"../utils/terra\";\n\nconst useStyles = makeStyles((theme) => ({\n  feePickerContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: `${theme.spacing(1)}px auto`,\n    maxWidth: 200,\n    width: \"100%\",\n  },\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\ntype TerraFeeDenomPickerProps = {\n  disabled: boolean;\n};\n\nexport default function TerraFeeDenomPicker(props: TerraFeeDenomPickerProps) {\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const wallet = useConnectedWallet();\n  const { balances } = useTerraNativeBalances(wallet?.walletAddress);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const feeDenomItems = useMemo(() => {\n    const items = [];\n    if (balances) {\n      for (const [denom, amount] of Object.entries(balances)) {\n        if (amount === \"0\") continue;\n        const symbol = formatNativeDenom(denom);\n        if (symbol) {\n          items.push({\n            denom,\n            symbol,\n            icon: getNativeTerraIcon(symbol),\n          });\n        }\n      }\n    }\n    // prevent an out-of-range value from being selected\n    if (!items.find((item) => item.denom === terraFeeDenom)) {\n      const symbol = formatNativeDenom(terraFeeDenom);\n      items.push({\n        denom: terraFeeDenom,\n        symbol,\n        icon: getNativeTerraIcon(symbol),\n      });\n    }\n    return items;\n  }, [balances, terraFeeDenom]);\n\n  return (\n    <div className={classes.feePickerContainer}>\n      <Typography variant=\"caption\">Fee Denomination</Typography>\n      <TextField\n        variant=\"outlined\"\n        size=\"small\"\n        select\n        fullWidth\n        value={terraFeeDenom}\n        onChange={(event) => dispatch(setTerraFeeDenom(event.target.value))}\n        disabled={props.disabled}\n        className={classes.select}\n      >\n        {feeDenomItems.map((item) => {\n          return (\n            <MenuItem key={item.denom} value={item.denom}>\n              <ListItemIcon>\n                <img\n                  src={item.icon}\n                  alt={item.symbol}\n                  className={classes.icon}\n                />\n              </ListItemIcon>\n              {item.symbol}\n            </MenuItem>\n          );\n        })}\n      </TextField>\n    </div>\n  );\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferIsApproving,\n  selectTransferIsRedeeming,\n  selectTransferIsSending,\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport const WAITING_FOR_WALLET_AND_CONF =\n  \"Waiting for wallet approval (likely in a popup) and confirmation...\";\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isApproving = useSelector(selectTransferIsApproving);\n  const isSending = useSelector(selectTransferIsSending);\n  const transferTx = useSelector(selectTransferTransferTx);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const showWarning =\n    isApproving || (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestAttestTx,\n  selectAttestCreateTx,\n  selectAttestIsCreating,\n  selectAttestIsSending,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isSending = useSelector(selectAttestIsSending);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const createTx = useSelector(selectAttestCreateTx);\n  const showWarning = (isSending && !attestTx) || (isCreating && !createTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isCreating\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport useFetchForeignAsset from \"../../hooks/useFetchForeignAsset\";\nimport { useHandleCreateWrapped } from \"../../hooks/useHandleCreateWrapped\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  spacer: {\n    height: theme.spacing(2),\n  },\n}));\n\nfunction Create() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const originAsset = useSelector(selectAttestSourceAsset);\n  const originChain = useSelector(selectAttestSourceChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  const foreignAssetInfo = useFetchForeignAsset(\n    originChain,\n    originAsset,\n    targetChain\n  );\n  const shouldUpdate = foreignAssetInfo.data?.doesExist;\n  const error = foreignAssetInfo.error || statusMessage;\n  const { handleClick, disabled, showLoader } = useHandleCreateWrapped(\n    shouldUpdate || false\n  );\n\n  console.log(\"foreign asset info\", foreignAssetInfo);\n\n  return (\n    <>\n      <KeyAndBalance chainId={targetChain} />\n      {targetChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      {foreignAssetInfo.isFetching ? (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={classes.alignCenter} />\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={!isReady || disabled}\n            onClick={handleClick}\n            showLoader={showLoader}\n            error={error}\n          >\n            {shouldUpdate ? \"Update\" : \"Create\"}\n          </ButtonWithLoader>\n          <WaitingForWalletMessage />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Create;\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function ShowTx({\n  chainId,\n  tx,\n}: {\n  chainId: ChainId;\n  tx: Transaction;\n}) {\n  const classes = useStyles();\n  const showExplorerLink =\n    CLUSTER === \"testnet\" ||\n    CLUSTER === \"mainnet\" ||\n    (CLUSTER === \"devnet\" &&\n      (chainId === CHAIN_ID_SOLANA || chainId === CHAIN_ID_TERRA));\n  const explorerAddress =\n    chainId === CHAIN_ID_ETH\n      ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? `https://${CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_BSC\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}bscscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_POLYGON\n      ? `https://${CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"}polygonscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_AVAX\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}snowtrace.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_OASIS\n      ? `https://${\n          CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n        }explorer.emerald.oasis.dev/tx/${tx?.id}`\n      : chainId === CHAIN_ID_SOLANA\n      ? `https://explorer.solana.com/tx/${tx?.id}${\n          CLUSTER === \"testnet\"\n            ? \"?cluster=devnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n            : \"\"\n        }`\n      : chainId === CHAIN_ID_TERRA\n      ? `https://finder.terra.money/${\n          CLUSTER === \"devnet\"\n            ? \"localterra\"\n            : CLUSTER === \"testnet\"\n            ? \"bombay-12\"\n            : \"columbus-5\"\n        }/tx/${tx?.id}`\n      : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  return (\n    <div className={classes.tx}>\n      <Typography noWrap component=\"div\" variant=\"body2\">\n        {tx.id}\n      </Typography>\n      {showExplorerLink && explorerAddress ? (\n        <Button\n          href={explorerAddress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          size=\"small\"\n          variant=\"outlined\"\n          className={classes.viewButton}\n        >\n          View on {explorerName}\n        </Button>\n      ) : null}\n    </div>\n  );\n}\n","import { Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectAttestCreateTx,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/attestSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport { useHistory } from \"react-router\";\nimport { getHowToAddToTokenListUrl } from \"../../utils/consts\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function CreatePreview() {\n  const { push } = useHistory();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const createTx = useSelector(selectAttestCreateTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const handleReturnClick = useCallback(() => {\n    dispatch(reset());\n    push(\"/transfer\");\n  }, [dispatch, push]);\n\n  const explainerString =\n    \"Success! The create wrapped transaction was submitted.\";\n  const howToAddToTokenListUrl = getHowToAddToTokenListUrl(targetChain);\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {createTx ? <ShowTx chainId={targetChain} tx={createTx} /> : null}\n      {howToAddToTokenListUrl ? (\n        <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n          Remember to add the token to the{\" \"}\n          <Link\n            href={howToAddToTokenListUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            token list\n          </Link>\n          {\".\"}\n        </Alert>\n      ) : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Attest Another Token!\n      </ButtonWithLoader>\n      <ButtonWithLoader onClick={handleReturnClick}>\n        Return to Transfer\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  attestFromEth,\n  attestFromSolana,\n  attestFromTerra,\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setAttestTx,\n  setIsSending,\n  setSignedVAAHex,\n} from \"../store/attestSlice\";\nimport {\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n  selectAttestIsTargetComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectTerraFeeDenom,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  sourceAsset: string,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await attestFromEth(\n      getTokenBridgeAddressForChain(chainId),\n      signer,\n      sourceAsset\n    );\n    dispatch(\n      setAttestTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  solPK: PublicKey,\n  sourceAsset: string,\n  wallet: WalletContextState\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const transaction = await attestFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_TOKEN_BRIDGE_ADDRESS,\n      solPK.toString(),\n      sourceAsset\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      // TODO: error state\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setAttestTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string,\n  feeDenom: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const msg = await attestFromTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      asset\n    );\n    const result = await postWithFees(wallet, [msg], \"Create Wrapped\", [\n      feeDenom,\n    ]);\n    const info = await waitForTerraExecution(result);\n    dispatch(setAttestTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleAttest() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleAttestClick = useCallback(() => {\n    if (isEVMChain(sourceChain) && !!signer) {\n      evm(dispatch, enqueueSnackbar, signer, sourceAsset, sourceChain);\n    } else if (sourceChain === CHAIN_ID_SOLANA && !!solanaWallet && !!solPK) {\n      solana(dispatch, enqueueSnackbar, solPK, sourceAsset, solanaWallet);\n    } else if (sourceChain === CHAIN_ID_TERRA && !!terraWallet) {\n      terra(dispatch, enqueueSnackbar, terraWallet, sourceAsset, terraFeeDenom);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceAsset,\n    terraFeeDenom,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleAttestClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleAttestClick, disabled, isSending]\n  );\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { SOLANA_HOST } from \"../utils/consts\";\nimport {\n  decodeMetadata,\n  getMetadataAddress,\n  Metadata,\n} from \"../utils/metaplex\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\n\nexport const getMetaplexData = async (mintAddresses: string[]) => {\n  const promises = [];\n  for (const address of mintAddresses) {\n    promises.push(getMetadataAddress(address));\n  }\n  const metaAddresses = await Promise.all(promises);\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  const results = await getMultipleAccountsRPC(\n    connection,\n    metaAddresses.map((pair) => pair && pair[0])\n  );\n\n  const output = results.map((account) => {\n    if (account === null) {\n      return undefined;\n    } else {\n      if (account.data) {\n        try {\n          const MetadataParsed = decodeMetadata(account.data);\n          return MetadataParsed;\n        } catch (e) {\n          console.error(e);\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  });\n\n  return output;\n};\n\nconst createResultMap = (\n  addresses: string[],\n  metadatas: (Metadata | undefined)[]\n) => {\n  const output = new Map<string, Metadata | undefined>();\n\n  addresses.forEach((address) => {\n    const metadata = metadatas.find((x) => x?.mint === address);\n    if (metadata) {\n      output.set(address, metadata);\n    } else {\n      output.set(address, undefined);\n    }\n  });\n\n  return output;\n};\n\nconst useMetaplexData = (\n  addresses: string[]\n): DataWrapper<Map<string, Metadata | undefined> | undefined> => {\n  const [results, setResults] = useState<\n    Map<string, Metadata | undefined> | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [receivedAt, setReceivedAt] = useState<string | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    setIsLoading(true);\n    getMetaplexData(addresses).then(\n      (results) => {\n        if (!cancelled) {\n          setResults(createResultMap(addresses, results));\n          setIsLoading(false);\n          setError(\"\");\n          setReceivedAt(new Date().toISOString());\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setResults(undefined);\n          setIsLoading(false);\n          setError(\"Failed to fetch Metaplex data.\");\n          setReceivedAt(new Date().toISOString());\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, setResults, setIsLoading, setError]);\n\n  const output = useMemo(\n    () => ({\n      data: results,\n      isFetching: isLoading,\n      error,\n      receivedAt,\n    }),\n    [results, isLoading, error, receivedAt]\n  );\n  return output;\n};\n\nexport default useMetaplexData;\n","import {\n  ChainId,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { LinearProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CHAINS_BY_ID, SOLANA_HOST } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n    textAlign: \"center\",\n  },\n  message: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function TransactionProgress({\n  chainId,\n  tx,\n  isSendComplete,\n}: {\n  chainId: ChainId;\n  tx: Transaction | undefined;\n  isSendComplete: boolean;\n}) {\n  const classes = useStyles();\n  const { provider } = useEthereumProvider();\n  const [currentBlock, setCurrentBlock] = useState(0);\n  useEffect(() => {\n    if (isSendComplete || !tx) return;\n    if (isEVMChain(chainId) && provider) {\n      let cancelled = false;\n      (async () => {\n        while (!cancelled) {\n          await new Promise((resolve) => setTimeout(resolve, 500));\n          try {\n            const newBlock = await provider.getBlockNumber();\n            if (!cancelled) {\n              setCurrentBlock(newBlock);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n    if (chainId === CHAIN_ID_SOLANA) {\n      let cancelled = false;\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const sub = connection.onSlotChange((slotInfo) => {\n        if (!cancelled) {\n          setCurrentBlock(slotInfo.slot);\n        }\n      });\n      return () => {\n        cancelled = true;\n        connection.removeSlotChangeListener(sub);\n      };\n    }\n  }, [isSendComplete, chainId, provider, tx]);\n  const blockDiff =\n    tx && tx.block && currentBlock ? currentBlock - tx.block : undefined;\n  const expectedBlocks =\n    chainId === CHAIN_ID_POLYGON\n      ? 256 // minimum confirmations enforced by guardians\n      : chainId === CHAIN_ID_SOLANA\n      ? 32\n      : isEVMChain(chainId)\n      ? 15\n      : 1;\n  if (\n    !isSendComplete &&\n    (chainId === CHAIN_ID_SOLANA || isEVMChain(chainId)) &&\n    blockDiff !== undefined\n  ) {\n    return (\n      <div className={classes.root}>\n        <LinearProgress\n          value={\n            blockDiff < expectedBlocks ? (blockDiff / expectedBlocks) * 75 : 75\n          }\n          variant=\"determinate\"\n        />\n        <Typography variant=\"body2\" className={classes.message}>\n          {blockDiff < expectedBlocks\n            ? `Waiting for ${blockDiff} / ${expectedBlocks} confirmations on ${CHAINS_BY_ID[chainId].name}...`\n            : `Waiting for Wormhole Network consensus...`}\n        </Typography>\n      </div>\n    );\n  }\n  return null;\n}\n","import { CHAIN_ID_SOLANA, CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Link, makeStyles } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleAttest } from \"../../hooks/useHandleAttest\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport {\n  selectAttestAttestTx,\n  selectAttestIsSendComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\nimport { SOLANA_TOKEN_METADATA_PROGRAM_URL } from \"../../utils/consts\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nconst SolanaTokenMetadataWarning = () => {\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const sourceAssetArrayed = useMemo(() => {\n    return [sourceAsset];\n  }, [sourceAsset]);\n  const metaplexData = useMetaplexData(sourceAssetArrayed);\n  const classes = useStyles();\n\n  if (metaplexData.isFetching || metaplexData.error) {\n    return null;\n  }\n\n  return !metaplexData.data?.get(sourceAsset) ? (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      This token is missing on-chain (Metaplex) metadata. Without it, the\n      wrapped token's name and symbol will be empty. See the{\" \"}\n      <Link\n        href={SOLANA_TOKEN_METADATA_PROGRAM_URL}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        metaplex repository\n      </Link>{\" \"}\n      for details.\n    </Alert>\n  ) : null;\n};\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleAttest();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n\n  return (\n    <>\n      <KeyAndBalance chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Attest\n      </ButtonWithLoader>\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTokenMetadataWarning />}\n      <WaitingForWalletMessage />\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={attestTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceChain,\n  selectAttestAttestTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n\n  const explainerString = \"The token has been attested!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {attestTx ? <ShowTx chainId={sourceChain} tx={attestTx} /> : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Typography } from \"@material-ui/core\";\nimport { LocalGasStation } from \"@material-ui/icons\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  getDefaultNativeCurrencySymbol,\n  SOLANA_HOST,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\nimport { NATIVE_TERRA_DECIMALS } from \"../utils/terra\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport { LCDClient } from \"@terra-money/terra.js\";\n\nexport type GasEstimate = {\n  currentGasPrice: string;\n  lowEstimate: string;\n  highEstimate: string;\n};\n\nexport type MethodType = \"nft\" | \"createWrapped\" | \"transfer\";\n\n//It's difficult to project how many fees the user will accrue during the\n//workflow, as a variable number of transactions can be sent, and different\n//execution paths can be hit in the smart contracts, altering gas used.\n//As such, for the moment it is best to just check for a reasonable 'low balance' threshold.\n//Still it would be good to calculate a reasonable value at runtime based off current gas prices,\n//rather than a hardcoded value.\nconst SOLANA_THRESHOLD_LAMPORTS: bigint = BigInt(300000);\nconst ETHEREUM_THRESHOLD_WEI: bigint = BigInt(35000000000000000);\nconst TERRA_THRESHOLD_ULUNA: bigint = BigInt(100000);\nconst TERRA_THRESHOLD_UUSD: bigint = BigInt(10000000);\n\nconst isSufficientBalance = (\n  chainId: ChainId,\n  balance: bigint | undefined,\n  terraFeeDenom?: string\n) => {\n  if (balance === undefined || !chainId) {\n    return true;\n  }\n  if (CHAIN_ID_SOLANA === chainId) {\n    return balance > SOLANA_THRESHOLD_LAMPORTS;\n  }\n  if (isEVMChain(chainId)) {\n    return balance > ETHEREUM_THRESHOLD_WEI;\n  }\n  if (terraFeeDenom === \"uluna\") {\n    return balance > TERRA_THRESHOLD_ULUNA;\n  }\n  if (terraFeeDenom === \"uusd\") {\n    return balance > TERRA_THRESHOLD_UUSD;\n  }\n\n  return true;\n};\n\ntype TerraBalance = {\n  denom: string;\n  balance: bigint;\n};\n\nconst isSufficientBalanceTerra = (balances: TerraBalance[]) => {\n  return balances.some(({ denom, balance }) => {\n    if (denom === \"uluna\") {\n      return balance > TERRA_THRESHOLD_ULUNA;\n    }\n    if (denom === \"uusd\") {\n      return balance > TERRA_THRESHOLD_UUSD;\n    }\n    return false;\n  });\n};\n\n//TODO move to more generic location\nconst getBalanceSolana = async (walletAddress: string) => {\n  const connection = new Connection(SOLANA_HOST);\n  return getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]).then(\n    (results) => {\n      if (results.length && results[0]) {\n        return BigInt(results[0].lamports);\n      }\n    },\n    (error) => {\n      return BigInt(0);\n    }\n  );\n};\n\nconst getBalanceEvm = async (walletAddress: string, provider: Provider) => {\n  return provider.getBalance(walletAddress).then((result) => result.toBigInt());\n};\n\nconst getBalancesTerra = async (walletAddress: string) => {\n  const TARGET_DENOMS = [\"uluna\", \"uusd\"];\n\n  const lcd = new LCDClient(TERRA_HOST);\n  return lcd.bank\n    .balance(walletAddress)\n    .then((coins) => {\n      const balances = coins\n        .filter(({ denom }) => {\n          return TARGET_DENOMS.includes(denom);\n        })\n        .map(({ amount, denom }) => {\n          return {\n            denom,\n            balance: BigInt(amount.toString()),\n          };\n        });\n      if (balances) {\n        return balances;\n      } else {\n        return Promise.reject();\n      }\n    })\n    .catch((e) => {\n      return Promise.reject();\n    });\n};\n\nconst toBalanceString = (balance: bigint | undefined, chainId: ChainId) => {\n  if (!chainId || balance === undefined) {\n    return \"\";\n  }\n  if (isEVMChain(chainId)) {\n    return formatUnits(balance, 18); //wei decimals\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return formatUnits(balance, 9); //lamports to sol decmals\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return formatUnits(balance, NATIVE_TERRA_DECIMALS);\n  }\n};\n\nexport default function useTransactionFees(chainId: ChainId) {\n  const { walletAddress, isReady } = useIsWalletReady(chainId);\n  const { provider } = useEthereumProvider();\n  const [balance, setBalance] = useState<bigint | undefined>(undefined);\n  const [terraBalances, setTerraBalances] = useState<TerraBalance[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loadStart = useCallback(() => {\n    setBalance(undefined);\n    setIsLoading(true);\n    setError(\"\");\n  }, []);\n\n  useEffect(() => {\n    if (chainId === CHAIN_ID_SOLANA && isReady && walletAddress) {\n      loadStart();\n      getBalanceSolana(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    } else if (isEVMChain(chainId) && isReady && walletAddress) {\n      if (provider) {\n        loadStart();\n        getBalanceEvm(walletAddress, provider).then(\n          (result) => {\n            const adjustedresult =\n              result === undefined || result === null ? BigInt(0) : result;\n            setIsLoading(false);\n            setBalance(adjustedresult);\n          },\n          (error) => {\n            setIsLoading(false);\n            setError(\"Cannot load wallet balance\");\n          }\n        );\n      }\n    } else if (chainId === CHAIN_ID_TERRA && isReady && walletAddress) {\n      loadStart();\n      getBalancesTerra(walletAddress).then(\n        (results) => {\n          const adjustedResults = results.map(({ denom, balance }) => {\n            return {\n              denom,\n              balance:\n                balance === undefined || balance === null ? BigInt(0) : balance,\n            };\n          });\n          setIsLoading(false);\n          setTerraBalances(adjustedResults);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    }\n  }, [provider, walletAddress, isReady, chainId, loadStart]);\n\n  const results = useMemo(() => {\n    return {\n      isSufficientBalance:\n        chainId === CHAIN_ID_TERRA\n          ? isSufficientBalanceTerra(terraBalances)\n          : isSufficientBalance(chainId, balance),\n      balance,\n      balanceString: toBalanceString(balance, chainId),\n      isLoading,\n      error,\n    };\n  }, [balance, terraBalances, chainId, isLoading, error]);\n\n  return results;\n}\n\nexport function useEthereumGasPrice(contract: MethodType, chainId: ChainId) {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [estimateResults, setEstimateResults] = useState<GasEstimate | null>(\n    null\n  );\n\n  useEffect(() => {\n    if (provider && isReady && !estimateResults) {\n      getGasEstimates(provider, contract).then(\n        (results) => {\n          setEstimateResults(results);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n    }\n  }, [provider, isReady, estimateResults, contract]);\n\n  const results = useMemo(() => estimateResults, [estimateResults]);\n  return results;\n}\n\nfunction EthGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  const estimate = useEthereumGasPrice(methodType, chainId);\n  if (!estimate) {\n    return null;\n  }\n\n  return (\n    <Typography\n      component=\"div\"\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        marginTop: 8,\n        flexWrap: \"wrap\",\n      }}\n    >\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <LocalGasStation fontSize=\"inherit\" />\n        &nbsp;{estimate.currentGasPrice}\n      </div>\n      <div>&nbsp;&nbsp;&nbsp;</div>\n      <div>\n        Est. Fees: {estimate.lowEstimate} - {estimate.highEstimate}{\" \"}\n        {getDefaultNativeCurrencySymbol(chainId)}\n      </div>\n    </Typography>\n  );\n}\n\nconst terraEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(50000),\n    highGasEstimate: BigInt(90000),\n  },\n};\n\nconst evmEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(80000),\n    highGasEstimate: BigInt(130000),\n  },\n  nft: {\n    lowGasEstimate: BigInt(350000),\n    highGasEstimate: BigInt(500000),\n  },\n  createWrapped: {\n    lowGasEstimate: BigInt(450000),\n    highGasEstimate: BigInt(700000),\n  },\n};\n\nexport async function getGasEstimates(\n  provider: Provider,\n  contract: MethodType\n): Promise<GasEstimate | null> {\n  const lowEstimateGasAmount = evmEstimatesByContract[contract].lowGasEstimate;\n  const highEstimateGasAmount =\n    evmEstimatesByContract[contract].highGasEstimate;\n\n  let lowEstimate;\n  let highEstimate;\n  let currentGasPrice;\n  if (provider) {\n    const priceInWei = await provider.getGasPrice();\n    if (priceInWei) {\n      lowEstimate = parseFloat(\n        formatUnits(lowEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      highEstimate = parseFloat(\n        formatUnits(highEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      currentGasPrice = parseFloat(formatUnits(priceInWei, \"gwei\")).toFixed(0);\n    }\n  }\n\n  const output =\n    currentGasPrice && highEstimate && lowEstimate\n      ? {\n          currentGasPrice,\n          lowEstimate,\n          highEstimate,\n        }\n      : null;\n\n  return output;\n}\n\nfunction TerraGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (methodType === \"transfer\") {\n    const lowEstimate = formatUnits(\n      terraEstimatesByContract.transfer.lowGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    const highEstimate = formatUnits(\n      terraEstimatesByContract.transfer.highGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    return (\n      <Typography\n        component=\"div\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          marginTop: 8,\n          flexWrap: \"wrap\",\n        }}\n      >\n        <div>\n          Est. Fees: {lowEstimate} - {highEstimate}{\" \"}\n          {getDefaultNativeCurrencySymbol(chainId)}\n        </div>\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function GasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (isEVMChain(chainId)) {\n    return <EthGasEstimateSummary chainId={chainId} methodType={methodType} />;\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <TerraGasEstimateSummary chainId={chainId} methodType={methodType} />\n    );\n  } else {\n    return null;\n  }\n}\n","import { ChainId, CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useTransactionFees from \"../hooks/useTransactionFees\";\nimport { getDefaultNativeCurrencySymbol } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction LowBalanceWarning({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { isReady } = useIsWalletReady(chainId);\n  const transactionFeeWarning = useTransactionFees(chainId);\n  const displayWarning =\n    isReady &&\n    (chainId === CHAIN_ID_TERRA || transactionFeeWarning.balanceString) &&\n    transactionFeeWarning.isSufficientBalance === false;\n\n  const warningMessage =\n    chainId === CHAIN_ID_TERRA\n      ? \"This wallet may not have sufficient funds to pay for the upcoming transaction fees.\"\n      : `This wallet has a very low ${getDefaultNativeCurrencySymbol(\n          chainId\n        )} balance and may not be able to pay for the upcoming transaction fees.`;\n\n  const content = (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">{warningMessage}</Typography>\n      {chainId !== CHAIN_ID_TERRA ? (\n        <Typography variant=\"body1\">\n          {\"Current balance: \" + transactionFeeWarning.balanceString}\n        </Typography>\n      ) : null}\n    </Alert>\n  );\n\n  return displayWarning ? content : null;\n}\n\nexport default LowBalanceWarning;\n","import { makeStyles, TextField } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  incrementStep,\n  setSourceAsset,\n  setSourceChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestIsSourceComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isSourceComplete = useSelector(selectAttestIsSourceComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAssetChange = useCallback(\n    (event) => {\n      dispatch(setSourceAsset(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS}\n      />\n      <KeyAndBalance chainId={sourceChain} />\n      <TextField\n        label=\"Asset\"\n        variant=\"outlined\"\n        fullWidth\n        className={classes.transferField}\n        value={sourceAsset}\n        onChange={handleAssetChange}\n        disabled={shouldLockFields}\n      />\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { Alert } from \"@material-ui/lab\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback } from \"react\";\nimport pushToClipboard from \"../utils/pushToClipboard\";\n\nexport default function useCopyToClipboard(content: string) {\n  const { enqueueSnackbar } = useSnackbar();\n  return useCallback(() => {\n    pushToClipboard(content)?.then(() => {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"success\">Copied.</Alert>,\n      });\n    });\n  }, [content, enqueueSnackbar]);\n}\n","export default function pushToClipboard(content: any) {\n  if (!navigator.clipboard) {\n    // Clipboard API not available\n    return;\n  }\n  return navigator.clipboard.writeText(content);\n}\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isNativeDenom,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Tooltip, Typography } from \"@material-ui/core\";\nimport { FileCopy, OpenInNew } from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport useCopyToClipboard from \"../hooks/useCopyToClipboard\";\nimport { ParsedTokenAccount } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\nimport { shortenAddress } from \"../utils/solana\";\nimport { formatNativeDenom } from \"../utils/terra\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainTypog: {\n    display: \"inline-block\",\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    textDecoration: \"underline\",\n    textUnderlineOffset: \"2px\",\n  },\n  noGutter: {\n    marginLeft: 0,\n    marginRight: 0,\n  },\n  noUnderline: {\n    textDecoration: \"none\",\n  },\n  buttons: {\n    marginLeft: \".5rem\",\n    marginRight: \".5rem\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    textAlign: \"center\",\n    \"& > *\": {\n      margin: \".25rem\",\n    },\n  },\n};\n\n// @ts-ignore\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nexport default function SmartAddress({\n  chainId,\n  parsedTokenAccount,\n  address,\n  symbol,\n  tokenName,\n  variant,\n  noGutter,\n  noUnderline,\n  extraContent,\n}: {\n  chainId: ChainId;\n  parsedTokenAccount?: ParsedTokenAccount;\n  address?: string;\n  logo?: string;\n  tokenName?: string;\n  symbol?: string;\n  variant?: any;\n  noGutter?: boolean;\n  noUnderline?: boolean;\n  extraContent?: ReactChild;\n}) {\n  const classes = useStyles();\n  const isNativeTerra = chainId === CHAIN_ID_TERRA && isNativeDenom(address);\n  const useableAddress = parsedTokenAccount?.mintKey || address || \"\";\n  const useableSymbol = isNativeTerra\n    ? formatNativeDenom(address)\n    : parsedTokenAccount?.symbol || symbol || \"\";\n  // const useableLogo = logo || isNativeTerra ? getNativeTerraIcon(useableSymbol) : null\n  const isNative = parsedTokenAccount?.isNativeAsset || isNativeTerra || false;\n  const addressShort = shortenAddress(useableAddress) || \"\";\n\n  const useableName = isNative\n    ? \"Native Currency\"\n    : parsedTokenAccount?.name\n    ? parsedTokenAccount.name\n    : tokenName\n    ? tokenName\n    : \"\";\n  const explorerAddress = isNative\n    ? null\n    : chainId === CHAIN_ID_ETH\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"goerli.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_BSC\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }bscscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_POLYGON\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"\n      }polygonscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_AVAX\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }snowtrace.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_OASIS\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }explorer.emerald.oasis.dev/address/${useableAddress}`\n    : chainId === CHAIN_ID_SOLANA\n    ? `https://explorer.solana.com/address/${useableAddress}${\n        CLUSTER === \"testnet\"\n          ? \"?cluster=devnet\"\n          : CLUSTER === \"devnet\"\n          ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n          : \"\"\n      }`\n    : chainId === CHAIN_ID_TERRA\n    ? `https://finder.terra.money/${\n        CLUSTER === \"devnet\"\n          ? \"localterra\"\n          : CLUSTER === \"testnet\"\n          ? \"bombay-12\"\n          : \"columbus-5\"\n      }/address/${useableAddress}`\n    : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  const copyToClipboard = useCopyToClipboard(useableAddress);\n\n  const explorerButton = !explorerAddress ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      startIcon={<OpenInNew />}\n      className={classes.buttons}\n      href={explorerAddress}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {\"View on \" + explorerName}\n    </Button>\n  );\n  //TODO add icon here\n  const copyButton = isNative ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      startIcon={<FileCopy />}\n      onClick={copyToClipboard}\n      className={classes.buttons}\n    >\n      Copy\n    </Button>\n  );\n\n  const tooltipContent = (\n    <>\n      {useableName && <Typography>{useableName}</Typography>}\n      {useableSymbol && !isNative && (\n        <Typography noWrap variant=\"body2\">\n          {addressShort}\n        </Typography>\n      )}\n      <div>\n        {explorerButton}\n        {copyButton}\n      </div>\n      {extraContent ? extraContent : null}\n    </>\n  );\n\n  return (\n    <StyledTooltip\n      title={tooltipContent}\n      interactive={true}\n      className={classes.mainTypog}\n    >\n      <Typography\n        variant={variant || \"body1\"}\n        className={clsx(classes.mainTypog, {\n          [classes.noGutter]: noGutter,\n          [classes.noUnderline]: noUnderline,\n        })}\n        component=\"div\"\n      >\n        {useableSymbol || addressShort}\n      </Typography>\n    </StyledTooltip>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n\n  const explainerContent =\n    sourceChain && sourceAsset ? (\n      <>\n        <span>You will attest</span>\n        <SmartAddress chainId={sourceChain} address={sourceAsset} />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/attestSlice\";\nimport {\n  selectAttestIsTargetComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={shouldLockFields}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to attest this token.{\" \"}\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary\n            methodType=\"createWrapped\"\n            chainId={targetChain}\n          />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestTargetChain } from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n\n  const explainerString = `to ${CHAINS_BY_ID[targetChain].name}`;\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerString}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setStep } from \"../../store/attestSlice\";\nimport {\n  selectAttestActiveStep,\n  selectAttestIsCreateComplete,\n  selectAttestIsCreating,\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n} from \"../../store/selectors\";\nimport HeaderText from \"../HeaderText\";\nimport Create from \"./Create\";\nimport CreatePreview from \"./CreatePreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Attest() {\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectAttestActiveStep);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const isCreateComplete = useSelector(selectAttestIsCreateComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isCreating) && !isCreateComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white>Token Registration</HeaderText>\n      <Alert severity=\"info\">\n        This form allows you to register a token on a new foreign chain. Tokens\n        must be registered before they can be transferred.\n      </Alert>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1. Source\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))} icon={null}>\n            2. Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton onClick={() => dispatch(setStep(2))} icon={null}>\n            3. Send attestation\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n            icon={null}\n          >\n            4. Create wrapped token\n          </StepButton>\n          <StepContent>\n            {isCreateComplete ? <CreatePreview /> : <Create />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Attest;\n","export default __webpack_public_path__ + \"static/media/Discord.9d433876.svg\";","export default __webpack_public_path__ + \"static/media/Github.834f0cd9.svg\";","export default __webpack_public_path__ + \"static/media/Medium.707cd3f2.svg\";","export default __webpack_public_path__ + \"static/media/portal_logo_w.7d00cc65.svg\";","export default __webpack_public_path__ + \"static/media/Telegram.21b850b0.svg\";","export default __webpack_public_path__ + \"static/media/Twitter.ac1250d0.svg\";","export default __webpack_public_path__ + \"static/media/Footer.7e77d3ac.png\";","import { IconButton, Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Link as RouterLink, NavLink } from \"react-router-dom\";\nimport Discord from \"../icons/Discord.svg\";\nimport Github from \"../icons/Github.svg\";\nimport Medium from \"../icons/Medium.svg\";\nimport Portal from \"../icons/portal_logo_w.svg\";\nimport Telegram from \"../icons/Telegram.svg\";\nimport Twitter from \"../icons/Twitter.svg\";\nimport footerImg from \"../images/Footer.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    position: \"relative\",\n  },\n  backdrop: {\n    position: \"absolute\",\n    zIndex: -1,\n    background: `url(${footerImg})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center center\",\n    backgroundSize: \"cover\",\n    width: \"100%\",\n    height: \"100%\",\n    opacity: 0.25,\n    [theme.breakpoints.up(\"md\")]: {\n      backgroundSize: \"auto\",\n      opacity: 1,\n      height: 444,\n      backgroundPosition: \"right bottom -326px\",\n    },\n  },\n  container: {\n    maxWidth: 1100,\n    margin: \"0px auto\",\n    paddingTop: theme.spacing(11),\n    paddingBottom: theme.spacing(6.5),\n    [theme.breakpoints.up(\"md\")]: {\n      paddingBottom: theme.spacing(12),\n    },\n  },\n  flex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginLeft: theme.spacing(3.5),\n    marginRight: theme.spacing(3.5),\n    borderTop: \"1px solid #585587\",\n    paddingTop: theme.spacing(7),\n    [theme.breakpoints.up(\"md\")]: {\n      flexWrap: \"wrap\",\n      flexDirection: \"row\",\n      alignItems: \"unset\",\n    },\n  },\n  logoWrapper: {\n    paddingLeft: theme.spacing(0),\n    paddingBottom: theme.spacing(2),\n    borderTop: \"1px solid #585587\",\n    paddingTop: theme.spacing(7),\n    width: \"100%\",\n    textAlign: \"center\",\n    [theme.breakpoints.up(\"md\")]: {\n      paddingLeft: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n      borderTop: \"none\",\n      paddingTop: theme.spacing(0),\n      width: \"auto\",\n      textAlign: \"left\",\n    },\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  linksWrapper: {\n    paddingLeft: theme.spacing(0),\n    order: -2,\n    textAlign: \"center\",\n    marginBottom: theme.spacing(7),\n    [theme.breakpoints.up(\"md\")]: {\n      paddingLeft: theme.spacing(2),\n      order: 0,\n      textAlign: \"left\",\n      mb: theme.spacing(0),\n    },\n  },\n  linkStyle: {\n    color: \"white\",\n    display: \"block\",\n    marginRight: theme.spacing(0),\n    marginBottom: theme.spacing(1.5),\n    fontSize: 14,\n    textUnderlineOffset: \"6px\",\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(7.5),\n    },\n  },\n  linkActiveStyle: { textDecoration: \"underline\" },\n  socialWrapper: {\n    padding: theme.spacing(0, 2),\n    order: -2,\n    textAlign: \"center\",\n    borderTop: \"1px solid #585587\",\n    paddingTop: theme.spacing(7),\n    width: \"100%\",\n    marginBottom: theme.spacing(7),\n    [theme.breakpoints.up(\"md\")]: {\n      order: 0,\n      textAlign: \"left\",\n      borderTop: \"none\",\n      paddingTop: theme.spacing(0),\n      width: \"auto\",\n      marginBottom: theme.spacing(0),\n    },\n  },\n  socialHeader: {\n    marginBottom: theme.spacing(3),\n  },\n  socialIcon: {\n    padding: theme.spacing(1),\n    \"& img\": {\n      height: 24,\n      width: 24,\n    },\n  },\n  builtWithContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    opacity: 0.5,\n    marginTop: theme.spacing(1),\n  },\n  wormholeIcon: {\n    height: 68,\n    marginTop: -24,\n  },\n  copyWrapper: {\n    flexBasis: \"100%\",\n    paddingTop: theme.spacing(0),\n    textAlign: \"center\",\n    [theme.breakpoints.up(\"md\")]: {\n      paddingTop: theme.spacing(0),\n      textAlign: \"left\",\n    },\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <div className={classes.backdrop} />\n      <div className={classes.container}>\n        <div className={classes.flex}>\n          <div className={classes.logoWrapper}>\n            <RouterLink to={\"/transfer\"}>\n              <img src={Portal} alt=\"Portal\" className={classes.wormholeIcon} />\n            </RouterLink>\n          </div>\n          <div className={classes.spacer} />\n          <div className={classes.linksWrapper}>\n            <div>\n              <Link\n                component={NavLink}\n                to={\"/transfer\"}\n                color=\"inherit\"\n                underline=\"hover\"\n                className={classes.linkStyle}\n                activeClassName={classes.linkActiveStyle}\n              >\n                Bridge\n              </Link>\n              <Link\n                href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                color=\"inherit\"\n                underline=\"hover\"\n                className={classes.linkStyle}\n              >\n                FAQ\n              </Link>\n              <Link\n                component={NavLink}\n                to={\"/stats\"}\n                color=\"inherit\"\n                underline=\"hover\"\n                className={classes.linkStyle}\n                activeClassName={classes.linkActiveStyle}\n              >\n                Stats\n              </Link>\n              <Link\n                href=\"https://wormholenetwork.com/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                color=\"inherit\"\n                underline=\"hover\"\n                className={classes.linkStyle}\n              >\n                Wormhole\n              </Link>\n            </div>\n          </div>\n          <div className={classes.spacer} />\n          <div className={classes.socialWrapper}>\n            <Typography className={classes.socialHeader}>\n              Let's be friends\n            </Typography>\n            <IconButton\n              href=\"https://discord.gg/wormholecrypto\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Discord} alt=\"Discord\" />\n            </IconButton>\n            <IconButton\n              href=\"https://github.com/certusone/wormhole\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Github} alt=\"Github\" />\n            </IconButton>\n            <IconButton\n              href=\"http://wormholecrypto.medium.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Medium} alt=\"Medium\" />\n            </IconButton>\n            <IconButton\n              href=\"https://t.me/wormholecrypto\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Telegram} alt=\"Telegram\" />\n            </IconButton>\n            <IconButton\n              href=\"https://twitter.com/wormholecrypto\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Twitter} alt=\"Twitter\" />\n            </IconButton>\n          </div>\n          <div className={classes.copyWrapper}>\n            <Typography variant=\"body2\">\n              2022 &copy; Wormhole. All Rights Reserved.\n            </Typography>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import {\n  Migrator,\n  Migrator__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport type EthMigrationInfo = {\n  isLoading: boolean;\n  error: string;\n  data: RequisiteData | null;\n};\n\nexport type RequisiteData = {\n  poolAddress: string;\n  fromAddress: string;\n  toAddress: string;\n  fromToken: TokenImplementation;\n  toToken: TokenImplementation;\n  migrator: Migrator;\n  fromSymbol: string;\n  toSymbol: string;\n  fromDecimals: number;\n  toDecimals: number;\n  sharesDecimals: number;\n  fromWalletBalance: string;\n  toWalletBalance: string;\n  fromPoolBalance: string;\n  toPoolBalance: string;\n  walletSharesBalance: string;\n};\n\nconst getRequisiteData = async (\n  migrator: Migrator,\n  signer: Signer,\n  signerAddress: string\n): Promise<RequisiteData> => {\n  try {\n    const poolAddress = migrator.address;\n    const fromAddress = await migrator.fromAsset();\n    const toAddress = await migrator.toAsset();\n\n    const fromToken = TokenImplementation__factory.connect(fromAddress, signer);\n    const toToken = TokenImplementation__factory.connect(toAddress, signer);\n\n    const fromSymbol = await fromToken.symbol();\n    const toSymbol = await toToken.symbol();\n\n    const fromDecimals = await (await migrator.fromDecimals()).toNumber();\n    const toDecimals = await (await migrator.toDecimals()).toNumber();\n    const sharesDecimals = await migrator.decimals();\n\n    const fromWalletBalance = formatUnits(\n      await fromToken.balanceOf(signerAddress),\n      fromDecimals\n    );\n    const toWalletBalance = formatUnits(\n      await toToken.balanceOf(signerAddress),\n      toDecimals\n    );\n\n    const fromPoolBalance = formatUnits(\n      await fromToken.balanceOf(poolAddress),\n      fromDecimals\n    );\n    const toPoolBalance = formatUnits(\n      await toToken.balanceOf(poolAddress),\n      toDecimals\n    );\n\n    const walletSharesBalance = formatUnits(\n      await migrator.balanceOf(signerAddress),\n      sharesDecimals\n    );\n\n    return {\n      poolAddress,\n      fromAddress,\n      toAddress,\n      fromToken,\n      toToken,\n      migrator,\n      fromSymbol,\n      toSymbol,\n      fromDecimals,\n      toDecimals,\n      fromWalletBalance,\n      toWalletBalance,\n      fromPoolBalance,\n      toPoolBalance,\n      walletSharesBalance,\n      sharesDecimals,\n    };\n  } catch (e) {\n    return Promise.reject(\"Failed to retrieve required data.\");\n  }\n};\n\nfunction useEthereumMigratorInformation(\n  migratorAddress: string | undefined,\n  signer: Signer | undefined,\n  signerAddress: string | undefined,\n  toggleRefresh: boolean\n): EthMigrationInfo {\n  const migrator = useMemo(\n    () =>\n      migratorAddress &&\n      signer &&\n      Migrator__factory.connect(migratorAddress, signer),\n    [migratorAddress, signer]\n  );\n  const [data, setData] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!signer || !migrator || !signerAddress) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n    getRequisiteData(migrator, signer, signerAddress).then(\n      (result) => {\n        if (!cancelled) {\n          setData(result);\n          setIsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Failed to retrieve necessary data.\");\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [migrator, signer, signerAddress, toggleRefresh]);\n\n  return useMemo(() => {\n    if (!migratorAddress || !signer || !signerAddress) {\n      return {\n        isLoading: false,\n        error:\n          !signer || !signerAddress\n            ? \"Wallet not connected\"\n            : !migratorAddress\n            ? \"No contract address\"\n            : \"Error\",\n        data: null,\n      };\n    } else {\n      return {\n        isLoading,\n        error,\n        data,\n      };\n    }\n  }, [isLoading, error, data, migratorAddress, signer, signerAddress]);\n}\n\nexport default useEthereumMigratorInformation;\n","import {\n  Button,\n  InputAdornment,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\n\nexport default function NumberTextField({\n  onMaxClick,\n  ...props\n}: TextFieldProps & { onMaxClick?: () => void }) {\n  return (\n    <TextField\n      type=\"number\"\n      {...props}\n      InputProps={{\n        endAdornment: onMaxClick ? (\n          <InputAdornment position=\"end\">\n            <Button\n              onClick={onMaxClick}\n              disabled={props.disabled}\n              variant=\"outlined\"\n            >\n              Max\n            </Button>\n          </InputAdornment>\n        ) : undefined,\n        ...(props?.InputProps || {}),\n      }}\n    ></TextField>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function EvmWorkflow({\n  chainId,\n  migratorAddress,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [toggleRefresh, setToggleRefresh] = useState(false);\n  const forceRefresh = useCallback(\n    () => setToggleRefresh((prevState) => !prevState),\n    []\n  );\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    toggleRefresh\n  );\n  const fromWalletBalance = poolInfo.data?.fromWalletBalance;\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  const fromParse = (amount: string) => {\n    try {\n      if (!poolInfo.data?.fromDecimals || !migrationAmount) {\n        return BigInt(0);\n      }\n      return parseUnits(amount, poolInfo.data.fromDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = poolInfo.data;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromWalletBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromWalletBalance);\n  const sufficientPoolBalance =\n    poolInfo.data?.toPoolBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(poolInfo.data.toPoolBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!isReady) {\n      return \"Connect your wallet to proceed.\";\n    } else if (poolInfo.error) {\n      return \"Unable to retrieve necessary information. This asset may not be supported.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"The transfer amount must be greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromWalletBalance) {\n      setMigrationAmount(fromWalletBalance);\n    }\n  }, [fromWalletBalance]);\n\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      setMigrationIsProcessing(true);\n      setError(\"\");\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      forceRefresh();\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, migrationAmount, enqueueSnackbar, forceRefresh]);\n\n  //TODO tokenName\n  const toTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.toAddress}\n      symbol={poolInfo.data?.toSymbol}\n    />\n  );\n  const fromTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.fromAddress}\n      symbol={poolInfo.data?.fromSymbol}\n    />\n  );\n  const poolPretty = (\n    <SmartAddress chainId={chainId} address={poolInfo.data?.poolAddress} />\n  );\n\n  const fatalError = poolInfo.error\n    ? \"Unable to retrieve necessary information. This asset may not be supported.\"\n    : null;\n\n  const explainerContent = (\n    <div>\n      <Typography>This action will convert</Typography>\n      <Typography variant=\"h6\">\n        {fromTokenPretty} {`(Balance: ${fromWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>to</Typography>\n      <Typography variant=\"h6\">\n        {toTokenPretty} {`(Balance: ${poolInfo.data?.toWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>Utilizing this pool</Typography>\n      <Typography variant=\"h6\">\n        {poolPretty} {`(Balance: ${poolInfo.data?.toPoolBalance || \"\"})`}\n      </Typography>\n    </div>\n  );\n\n  const mainWorkflow = (\n    <>\n      {explainerContent}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromWalletBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx tx={{ id: transaction, block: 1 }} chainId={chainId} />\n        </>\n      ) : null}\n    </>\n  );\n\n  return (\n    <div className={classes.containerDiv}>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : poolInfo.isLoading ? (\n        <CircularProgress />\n      ) : fatalError ? (\n        <Typography variant=\"h6\">{fatalError}</Typography>\n      ) : (\n        mainWorkflow\n      )}\n    </div>\n  );\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { TerraTokenMap } from \"../hooks/useTerraTokenMap\";\nimport { MarketsMap } from \"../hooks/useMarketsMap\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nexport interface TokenMetadataState {\n  solanaTokenMap: DataWrapper<TokenInfo[]>;\n  terraTokenMap: DataWrapper<TerraTokenMap>; //TODO make a decent type for this.\n  marketsMap: DataWrapper<MarketsMap>;\n}\n\nconst initialState: TokenMetadataState = {\n  solanaTokenMap: getEmptyDataWrapper(),\n  terraTokenMap: getEmptyDataWrapper(),\n  marketsMap: getEmptyDataWrapper(),\n};\n\nexport const tokenSlice = createSlice({\n  name: \"tokenInfos\",\n  initialState,\n  reducers: {\n    receiveSolanaTokenMap: (state, action: PayloadAction<TokenInfo[]>) => {\n      state.solanaTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchSolanaTokenMap: (state) => {\n      state.solanaTokenMap = fetchDataWrapper();\n    },\n    errorSolanaTokenMap: (state, action: PayloadAction<string>) => {\n      state.solanaTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveTerraTokenMap: (state, action: PayloadAction<TerraTokenMap>) => {\n      state.terraTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchTerraTokenMap: (state) => {\n      state.terraTokenMap = fetchDataWrapper();\n    },\n    errorTerraTokenMap: (state, action: PayloadAction<string>) => {\n      state.terraTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveMarketsMap: (state, action: PayloadAction<MarketsMap>) => {\n      state.marketsMap = receiveDataWrapper(action.payload);\n    },\n    fetchMarketsMap: (state) => {\n      state.marketsMap = fetchDataWrapper();\n    },\n    errorMarketsMap: (state, action: PayloadAction<string>) => {\n      state.marketsMap = errorDataWrapper(action.payload);\n    },\n\n    reset: () => initialState,\n  },\n});\n\nexport const {\n  receiveSolanaTokenMap,\n  fetchSolanaTokenMap,\n  errorSolanaTokenMap,\n  receiveTerraTokenMap,\n  fetchTerraTokenMap,\n  errorTerraTokenMap,\n  receiveMarketsMap,\n  fetchMarketsMap,\n  errorMarketsMap,\n  reset,\n} = tokenSlice.actions;\n\nexport default tokenSlice.reducer;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport { ENV, TokenInfo, TokenListProvider } from \"@solana/spl-token-registry\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectSolanaTokenMap } from \"../store/selectors\";\nimport {\n  errorSolanaTokenMap,\n  fetchSolanaTokenMap,\n  receiveSolanaTokenMap,\n} from \"../store/tokenSlice\";\nimport { CLUSTER } from \"../utils/consts\";\n\nconst environment = CLUSTER === \"testnet\" ? ENV.Testnet : ENV.MainnetBeta;\n\nconst useSolanaTokenMap = (): DataWrapper<TokenInfo[]> => {\n  const tokenMap = useSelector(selectSolanaTokenMap);\n  const dispatch = useDispatch();\n  const shouldFire =\n    tokenMap.data === undefined ||\n    (tokenMap.data === null && !tokenMap.isFetching);\n\n  useEffect(() => {\n    if (shouldFire) {\n      getSolanaTokenMap(dispatch);\n    }\n  }, [dispatch, shouldFire]);\n\n  return tokenMap;\n};\n\nconst getSolanaTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchSolanaTokenMap());\n\n  new TokenListProvider().resolve().then(\n    (tokens) => {\n      const tokenList = tokens.filterByChainId(environment).getList();\n      dispatch(receiveSolanaTokenMap(tokenList));\n    },\n    (error) => {\n      console.error(error);\n      dispatch(errorSolanaTokenMap(\"Failed to retrieve the Solana token map.\"));\n    }\n  );\n};\n\nexport default useSolanaTokenMap;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getForeignAssetSolana,\n  hexToNativeString,\n  hexToUint8Array,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetAddressHex,\n} from \"../store/selectors\";\nimport { SOLANA_HOST, SOL_TOKEN_BRIDGE_ADDRESS } from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport SmartAddress from \"./SmartAddress\";\n\nexport function useAssociatedAccountExistsState(\n  targetChain: ChainId,\n  mintAddress: string | null | undefined,\n  readableTargetAddress: string | undefined\n) {\n  const [associatedAccountExists, setAssociatedAccountExists] = useState(true); // for now, assume it exists until we confirm it doesn't\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  useEffect(() => {\n    setAssociatedAccountExists(true);\n    if (\n      targetChain !== CHAIN_ID_SOLANA ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    let cancelled = false;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          if (!cancelled) {\n            setAssociatedAccountExists(false);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [targetChain, mintAddress, readableTargetAddress, solPK]);\n  return useMemo(\n    () => ({ associatedAccountExists, setAssociatedAccountExists }),\n    [associatedAccountExists]\n  );\n}\n\nexport default function SolanaCreateAssociatedAddress({\n  mintAddress,\n  readableTargetAddress,\n  associatedAccountExists,\n  setAssociatedAccountExists,\n}: {\n  mintAddress: string;\n  readableTargetAddress: string;\n  associatedAccountExists: boolean;\n  setAssociatedAccountExists: (associatedAccountExists: boolean) => void;\n}) {\n  const [isCreating, setIsCreating] = useState(false);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleClick = useCallback(() => {\n    if (\n      associatedAccountExists ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          setIsCreating(true);\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setIsCreating(false);\n          setAssociatedAccountExists(true);\n        } else {\n          console.log(\"Account already exists.\");\n        }\n      }\n    })();\n  }, [\n    associatedAccountExists,\n    setAssociatedAccountExists,\n    mintAddress,\n    solPK,\n    readableTargetAddress,\n    solanaWallet,\n  ]);\n  if (associatedAccountExists) return null;\n  return (\n    <>\n      <Typography color=\"error\" variant=\"body2\">\n        This associated token account doesn't exist.\n      </Typography>\n      <ButtonWithLoader\n        disabled={\n          !mintAddress || !readableTargetAddress || !solPK || isCreating\n        }\n        onClick={handleClick}\n        showLoader={isCreating}\n      >\n        Create Associated Token Account\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport function SolanaCreateAssociatedAddressAlternate() {\n  const { enqueueSnackbar } = useSnackbar();\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const addressHex = useSelector(selectTransferTargetAddressHex);\n  const base58TargetAddress = useMemo(\n    () => hexToNativeString(addressHex, CHAIN_ID_SOLANA) || \"\",\n    [addressHex]\n  );\n  const base58OriginAddress = useMemo(\n    () => hexToNativeString(originAsset, CHAIN_ID_SOLANA) || \"\",\n    [originAsset]\n  );\n  const connection = useMemo(() => new Connection(SOLANA_HOST), []);\n  const [targetAsset, setTargetAsset] = useState<string | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (!(originChain && originAsset && addressHex && base58TargetAddress)) {\n      setTargetAsset(null);\n    } else if (originChain === CHAIN_ID_SOLANA && base58OriginAddress) {\n      setTargetAsset(base58OriginAddress);\n    } else {\n      getForeignAssetSolana(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAsset)\n      ).then((result) => {\n        if (!cancelled) {\n          setTargetAsset(result);\n        }\n      });\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    originChain,\n    originAsset,\n    addressHex,\n    base58TargetAddress,\n    connection,\n    base58OriginAddress,\n  ]);\n\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      CHAIN_ID_SOLANA,\n      targetAsset,\n      base58TargetAddress\n    );\n\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleForceCreateClick = useCallback(() => {\n    if (!targetAsset || !base58TargetAddress || !solPK) return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(targetAsset);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === base58TargetAddress;\n      if (match) {\n        try {\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setAssociatedAccountExists(true);\n          enqueueSnackbar(null, {\n            content: (\n              <Alert severity=\"success\">\n                Successfully created associated token account\n              </Alert>\n            ),\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n          });\n        }\n      } else {\n        enqueueSnackbar(null, {\n          content: (\n            <Alert severity=\"error\">\n              Derived address does not match the target address. Do you have the\n              same wallet connected?\n            </Alert>\n          ),\n        });\n      }\n    })();\n  }, [\n    setAssociatedAccountExists,\n    targetAsset,\n    solPK,\n    base58TargetAddress,\n    solanaWallet,\n    enqueueSnackbar,\n  ]);\n\n  return targetAsset ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"subtitle2\">Recipient Address:</Typography>\n      <Typography component=\"div\">\n        <SmartAddress\n          chainId={CHAIN_ID_SOLANA}\n          address={base58TargetAddress}\n          variant=\"h6\"\n          extraContent={\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={handleForceCreateClick}\n              disabled={!targetAsset || !base58TargetAddress || !solPK}\n            >\n              Force Create Account\n            </Button>\n          }\n        />\n      </Typography>\n      {associatedAccountExists ? null : (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={base58TargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      )}\n    </div>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSolanaWallet } from \"../../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { COLORS } from \"../../muiTheme\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../../utils/solana\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\n//TODO move to utils/solana\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\n//TODO move to utils/solana\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\nexport default function Workflow({\n  fromMint,\n  toMint,\n  fromTokenAccount,\n}: {\n  fromMint: string;\n  toMint: string;\n  fromTokenAccount: string;\n}) {\n  const classes = useStyles();\n\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet?.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet?.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet?.publicKey]);\n  /*\n    End effects\n    */\n\n  const migrateTokens = useCallback(async () => {\n    try {\n      setError(\"\");\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet?.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(migrationAmount, fromMintDecimals).toBigInt()\n      );\n      setMigrationIsProcessing(true);\n      signSendAndConfirm(wallet, connection, instruction).then(\n        (transaction: any) => {\n          setMigrationIsProcessing(false);\n          setTransaction(transaction);\n        },\n        (error) => {\n          console.log(error);\n          setError(\"Could not complete the migrateTokens transaction.\");\n          setMigrationIsProcessing(false);\n        }\n      );\n    } catch (e) {\n      console.log(e);\n      setError(\"Could not complete the migrateTokens transaction.\");\n      setMigrationIsProcessing(false);\n    }\n  }, [\n    connection,\n    fromMint,\n    fromTokenAccount,\n    migrationAmount,\n    toMint,\n    toTokenAccount,\n    wallet,\n    fromMintDecimals,\n  ]);\n\n  const fromParse = (amount: string) => {\n    try {\n      return parseUnits(amount, fromMintDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n  const accountsReady =\n    fromTokenAccountExists && toTokenAccountExists && poolExists;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromTokenAccountBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromTokenAccountBalance);\n  const sufficientPoolBalance =\n    toCustodyBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(toCustodyBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    accountsReady &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!fromMint || !toMint || !poolAddress || !poolExists) {\n      return \"This asset is not supported.\";\n    } else if (!isReady) {\n      return \"Wallet is not connected.\";\n    } else if (!toTokenAccountExists || !fromTokenAccountExists) {\n      return \"You have not created the necessary token accounts.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"Enter an amount greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromTokenAccountBalance) {\n      setMigrationAmount(fromTokenAccountBalance);\n    }\n  }, [fromTokenAccountBalance]);\n\n  const getMetadata = (address: string) => {\n    const tokenMapItem = solanaTokenMap.data?.find(\n      (x) => x.address === address\n    );\n    const metaplexItem = metaplexData.data?.get(address);\n\n    return {\n      symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n      name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n      logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n    };\n  };\n\n  const toMetadata = getMetadata(toMint);\n  const fromMetadata = getMetadata(fromMint);\n\n  const toMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={toMint}\n      symbol={toMetadata?.symbol}\n      tokenName={toMetadata?.name}\n    />\n  );\n  const fromMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={fromMint}\n      symbol={fromMetadata?.symbol}\n      tokenName={fromMetadata?.name}\n    />\n  );\n\n  return (\n    <div>\n      <SolanaWalletKey />\n      <div className={classes.spacer} />\n      {fromTokenAccount && toTokenAccount ? (\n        <>\n          <Typography variant=\"body2\" component=\"div\">\n            <span>This will migrate</span>\n            {fromMintPretty}\n            <span>tokens in this account:</span>\n          </Typography>\n          <Typography variant=\"h5\">\n            <SmartAddress\n              address={fromTokenAccount}\n              chainId={CHAIN_ID_SOLANA}\n            />\n            {`(Balance: ${fromTokenAccountBalance}${\n              fromMetadata.symbol && \" \" + fromMetadata.symbol\n            })`}\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"body2\" component=\"div\">\n            <span>into </span>\n            {toMintPretty}\n            <span> tokens in this account:</span>\n          </Typography>\n          <Typography\n            variant=\"h5\"\n            color={toTokenAccountExists ? \"textPrimary\" : \"textSecondary\"}\n          >\n            <SmartAddress address={toTokenAccount} chainId={CHAIN_ID_SOLANA} />\n            <span>\n              {toTokenAccountExists\n                ? ` (Balance: ${toTokenAccountBalance}${\n                    (toMetadata.symbol && \" \" + toMetadata.symbol) || \"\"\n                  })`\n                : \" (Not created yet)\"}\n            </span>\n          </Typography>\n          <SolanaCreateAssociatedAddress\n            mintAddress={toMint}\n            readableTargetAddress={toTokenAccount}\n            associatedAccountExists={toTokenAccountExists}\n            setAssociatedAccountExists={setToTokenAccountExists}\n          />\n          {poolAddress && toCustodyAddress && toCustodyBalance ? (\n            <>\n              <div className={classes.spacer} />\n              <Typography variant=\"body2\" component=\"div\">\n                <span>Using pool </span>\n                <SmartAddress address={poolAddress} chainId={CHAIN_ID_SOLANA} />\n                <span> holding tokens in this account:</span>\n              </Typography>\n              <Typography variant=\"h5\">\n                <SmartAddress\n                  address={toCustodyAddress}\n                  chainId={CHAIN_ID_SOLANA}\n                />\n                <span>{` (Balance: ${toCustodyBalance}${\n                  toMetadata.symbol && \" \" + toMetadata.symbol\n                })`}</span>\n              </Typography>\n            </>\n          ) : null}\n        </>\n      ) : null}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromTokenAccountBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx\n            tx={{ id: transaction, block: 1 }}\n            chainId={CHAIN_ID_SOLANA}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { withRouter } from \"react-router\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { COLORS } from \"../../muiTheme\";\nimport { getMigrationAssetMap, MIGRATION_ASSET_MAP } from \"../../utils/consts\";\nimport HeaderText from \"../HeaderText\";\nimport EvmWorkflow from \"./EvmWorkflow\";\nimport SolanaWorkflow from \"./SolanaWorkflow\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\ninterface RouteParams {\n  legacyAsset: string;\n  fromTokenAccount: string;\n}\n\ninterface Migration extends RouteComponentProps<RouteParams> {\n  chainId: ChainId;\n}\n\nconst SolanaRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const fromTokenAccount: string = props.match.params.fromTokenAccount;\n  const targetAsset: string | undefined = MIGRATION_ASSET_MAP.get(legacyAsset);\n\n  let fromMint: string | undefined = \"\";\n  let toMint: string | undefined = \"\";\n  let fromTokenAcct: string | undefined = \"\";\n  try {\n    fromMint = legacyAsset && new PublicKey(legacyAsset).toString();\n    toMint = targetAsset && new PublicKey(targetAsset).toString();\n    fromTokenAcct =\n      fromTokenAccount && new PublicKey(fromTokenAccount).toString();\n  } catch (e) {}\n\n  let content = null;\n\n  if (!fromMint || !toMint) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else if (!fromTokenAcct) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        Invalid token account.\n      </Typography>\n    );\n  } else {\n    content = (\n      <SolanaWorkflow\n        fromMint={fromMint}\n        toMint={toMint}\n        fromTokenAccount={fromTokenAcct}\n      />\n    );\n  }\n\n  return content;\n};\n\nconst EthereumRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const assetMap = getMigrationAssetMap(props.chainId);\n  const targetPool = assetMap.get(getAddress(legacyAsset));\n\n  let content = null;\n  if (!legacyAsset || !targetPool) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else {\n    content = (\n      <EvmWorkflow migratorAddress={targetPool} chainId={props.chainId} />\n    );\n  }\n\n  return content;\n};\n\nconst MigrationRoot: React.FC<Migration> = (props) => {\n  const classes = useStyles();\n  let content = null;\n\n  if (props.chainId === CHAIN_ID_SOLANA) {\n    content = <SolanaRoot {...props} />;\n  } else if (props.chainId === CHAIN_ID_ETH || props.chainId === CHAIN_ID_BSC) {\n    content = <EthereumRoot {...props} />;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText\n        white\n        subtitle=\"Convert assets from other bridges to Wormhole V2 tokens\"\n      >\n        Migrate Assets\n      </HeaderText>\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n};\n\nexport default withRouter(MigrationRoot);\n","import { ChainId, TokenImplementation__factory } from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { COLORS } from \"../../muiTheme\";\nimport { CHAINS_BY_ID, getMigrationAssetMap } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport HeaderText from \"../HeaderText\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\n//TODO move elsewhere\nexport const compareWithDecimalOffset = (\n  valueA: string,\n  decimalsA: number,\n  valueB: string,\n  decimalsB: number\n) => {\n  //find which is larger, and offset by that amount\n  const decimalsBasis = decimalsA > decimalsB ? decimalsA : decimalsB;\n  const normalizedA = parseUnits(valueA, decimalsBasis).toBigInt();\n  const normalizedB = parseUnits(valueB, decimalsBasis).toBigInt();\n\n  if (normalizedA < normalizedB) {\n    return -1;\n  } else if (normalizedA === normalizedB) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\nfunction EvmMigrationLineItem({\n  chainId,\n  migratorAddress,\n  onLoadComplete,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    false\n  );\n  const [loaded, setLoaded] = useState(false);\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const fromSymbol = poolInfo?.data?.fromSymbol;\n  const toSymbol = poolInfo?.data?.toSymbol;\n\n  const sufficientPoolBalance =\n    poolInfo.data &&\n    compareWithDecimalOffset(\n      poolInfo.data.fromWalletBalance,\n      poolInfo.data.fromDecimals,\n      poolInfo.data.toPoolBalance,\n      poolInfo.data.toDecimals\n    ) !== 1;\n\n  useEffect(() => {\n    if (!loaded && (poolInfo.data || poolInfo.error)) {\n      onLoadComplete();\n      setLoaded(true);\n    }\n  }, [loaded, poolInfo, onLoadComplete]);\n\n  //TODO use transaction loader\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      const migrationAmountAbs = parseUnits(\n        poolInfo.data.fromWalletBalance,\n        poolInfo.data.fromDecimals\n      );\n      setMigrationIsProcessing(true);\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        migrationAmountAbs\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        migrationAmountAbs\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, enqueueSnackbar]);\n\n  if (!poolInfo.data) {\n    return null;\n  } else if (transaction) {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx chainId={chainId} tx={{ id: transaction, block: 1 }} />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.fromAddress}\n            symbol={fromSymbol || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.toAddress}\n            symbol={toSymbol || undefined}\n          />\n        </div>\n        <div className={classes.convertButton}>\n          <ButtonWithLoader\n            showLoader={migrationIsProcessing}\n            onClick={migrateTokens}\n            error={\n              error\n                ? error\n                : !sufficientPoolBalance\n                ? \"The swap pool has insufficient funds.\"\n                : \"\"\n            }\n            disabled={!sufficientPoolBalance || migrationIsProcessing}\n          >\n            Convert\n          </ButtonWithLoader>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getAddressBalances = async (\n  signer: Signer,\n  signerAddress: string,\n  addresses: string[]\n): Promise<Map<string, BigNumber | null>> => {\n  try {\n    const promises: Promise<any>[] = [];\n    const output = new Map<string, BigNumber | null>();\n    addresses.forEach((address) => {\n      const factory = TokenImplementation__factory.connect(address, signer);\n      promises.push(\n        factory.balanceOf(signerAddress).then(\n          (result) => {\n            output.set(address, result);\n          },\n          (error) => {\n            output.set(address, null);\n          }\n        )\n      );\n    });\n    await Promise.all(promises);\n    return output;\n  } catch (e) {\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function EvmQuickMigrate({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const eligibleTokens = useMemo(\n    () => Array.from(migrationMap.keys()),\n    [migrationMap]\n  );\n  const [migrators, setMigrators] = useState<string[] | null>(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && signer && signerAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getAddressBalances(signer, signerAddress, eligibleTokens).then(\n        (result) => {\n          if (!cancelled) {\n            const migratorAddresses = [];\n            for (const tokenAddress of result.keys()) {\n              if (result.get(tokenAddress) && result.get(tokenAddress)?.gt(0)) {\n                const migratorAddress = migrationMap.get(\n                  getAddress(tokenAddress)\n                );\n                if (migratorAddress) {\n                  migratorAddresses.push(migratorAddress);\n                }\n              }\n            }\n            setMigratorsFinishedLoading(0);\n            setMigrators(migratorAddresses);\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, signer, signerAddress, eligibleTokens, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((address) => {\n              return (\n                <EvmMigrationLineItem\n                  key={address}\n                  chainId={chainId}\n                  migratorAddress={address}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText\n        white\n        subtitle=\"Convert assets from other bridges to Wormhole V2 tokens\"\n      >\n        Migrate Assets\n      </HeaderText>\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useAssociatedAccountExistsState } from \"../components/SolanaCreateAssociatedAddress\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../utils/solana\";\n\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\n//If the pool doesn't exist in this app, it's an error.\nexport type SolanaMigratorInformation = {\n  poolAddress: string;\n  fromMint: string;\n  toMint: string;\n  fromMintDecimals: number;\n  fromAssociatedTokenAccountExists: boolean;\n  toAssociatedTokenAccountExists: boolean;\n  setToTokenAccountExists: any;\n  fromAssociatedTokenAccount: string;\n  toAssociatedTokenAccount: string;\n  fromAssociatedTokenAccountBalance: string;\n  toAssociatedTokenAccountBalance: string | null;\n  toCustodyAddress: string;\n  toCustodyBalance: string;\n\n  fromName: string | null;\n  fromSymbol: string | null;\n  fromLogo: string | null;\n  toName: string | null;\n  toSymbol: string | null;\n  toLogo: string | null;\n\n  getNotReadyCause: (amount: string) => string | null;\n\n  migrateTokens: (amount: string) => Promise<string>;\n};\n\n//TODO refactor the workflow page to use this hook\nexport default function useSolanaMigratorInformation(\n  fromMint: string,\n  toMint: string,\n  fromTokenAccount: string\n): DataWrapper<SolanaMigratorInformation> {\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA, false);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [error, setError] = useState(\"\");\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet && wallet.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet]);\n  /*\n      End effects\n      */\n\n  const migrateTokens = useCallback(\n    async (amount) => {\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(amount, fromMintDecimals).toBigInt()\n      );\n      return await signSendAndConfirm(wallet, connection, instruction);\n    },\n    [\n      connection,\n      fromMint,\n      fromTokenAccount,\n      toMint,\n      toTokenAccount,\n      wallet,\n      fromMintDecimals,\n    ]\n  );\n\n  const fromParse = useCallback(\n    (amount: string) => {\n      try {\n        return parseUnits(amount, fromMintDecimals).toBigInt();\n      } catch (e) {\n        return BigInt(0);\n      }\n    },\n    [fromMintDecimals]\n  );\n\n  const getNotReadyCause = useCallback(\n    (amount: string) => {\n      const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n      const accountsReady = fromTokenAccountExists && toTokenAccountExists;\n      const amountGreaterThanZero = fromParse(amount) > BigInt(0);\n      const sufficientFromTokens =\n        fromTokenAccountBalance &&\n        amount &&\n        fromParse(amount) <= fromParse(fromTokenAccountBalance);\n      const sufficientPoolBalance =\n        toCustodyBalance &&\n        amount &&\n        parseFloat(amount) <= parseFloat(toCustodyBalance);\n\n      if (!hasRequisiteData) {\n        return \"This asset is not supported.\";\n      } else if (!isReady) {\n        return \"Wallet is not connected.\";\n      } else if (!accountsReady) {\n        return \"You have not created the necessary token accounts.\";\n      } else if (!amount) {\n        return \"Enter an amount to transfer.\";\n      } else if (!amountGreaterThanZero) {\n        return \"Enter an amount greater than zero.\";\n      } else if (!sufficientFromTokens) {\n        return \"There are not sufficient funds in your wallet for this transfer.\";\n      } else if (!sufficientPoolBalance) {\n        return \"There are not sufficient funds in the pool for this transfer.\";\n      } else {\n        return \"\";\n      }\n    },\n    [\n      fromMint,\n      fromParse,\n      fromTokenAccountBalance,\n      fromTokenAccountExists,\n      isReady,\n      poolAddress,\n      poolExists,\n      toCustodyBalance,\n      toMint,\n      toTokenAccountExists,\n    ]\n  );\n\n  const getMetadata = useCallback(\n    (address: string) => {\n      const tokenMapItem = solanaTokenMap.data?.find(\n        (x) => x.address === address\n      );\n      const metaplexItem = metaplexData.data?.get(address);\n\n      return {\n        symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n        name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n        logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n      };\n    },\n    [metaplexData.data, solanaTokenMap.data]\n  );\n\n  const isFetching = solanaTokenMap.isFetching || metaplexData.isFetching; //TODO add loading state on the actual Solana information\n  const hasRequisiteData = !!(\n    fromMintDecimals !== null &&\n    fromMintDecimals !== undefined &&\n    toTokenAccount &&\n    fromTokenAccountBalance &&\n    toCustodyAddress &&\n    toCustodyBalance\n  );\n\n  const output: DataWrapper<SolanaMigratorInformation> = useMemo(() => {\n    let data: SolanaMigratorInformation | null = null;\n    if (hasRequisiteData) {\n      data = {\n        poolAddress,\n        fromMint,\n        toMint,\n        fromMintDecimals,\n        fromAssociatedTokenAccountExists: fromTokenAccountExists,\n        toAssociatedTokenAccountExists: toTokenAccountExists,\n        fromAssociatedTokenAccount: fromTokenAccount,\n        toAssociatedTokenAccount: toTokenAccount,\n        fromAssociatedTokenAccountBalance: fromTokenAccountBalance,\n        toAssociatedTokenAccountBalance: toTokenAccountBalance || null,\n        toCustodyAddress,\n        toCustodyBalance,\n\n        fromName: getMetadata(fromMint)?.name || null,\n        fromSymbol: getMetadata(fromMint)?.symbol || null,\n        fromLogo: getMetadata(fromMint)?.logo || null,\n        toName: getMetadata(toMint)?.name || null,\n        toSymbol: getMetadata(toMint)?.symbol || null,\n        toLogo: getMetadata(toMint)?.logo || null,\n\n        setToTokenAccountExists,\n\n        getNotReadyCause: getNotReadyCause,\n\n        migrateTokens,\n      };\n    }\n\n    return {\n      isFetching: isFetching,\n      error: error || !hasRequisiteData,\n      receivedAt: null,\n      data,\n    };\n  }, [\n    error,\n    isFetching,\n    hasRequisiteData,\n    poolAddress,\n    fromMint,\n    toMint,\n    fromMintDecimals,\n    fromTokenAccountExists,\n    toTokenAccountExists,\n    fromTokenAccount,\n    toTokenAccount,\n    fromTokenAccountBalance,\n    toTokenAccountBalance,\n    toCustodyAddress,\n    toCustodyBalance,\n    getMetadata,\n    getNotReadyCause,\n    migrateTokens,\n    setToTokenAccountExists,\n  ]);\n\n  return output;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSolanaMigratorInformation from \"../../hooks/useSolanaMigratorInformation\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  CHAINS_BY_ID,\n  getMigrationAssetMap,\n  SOLANA_HOST,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport HeaderText from \"../HeaderText\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\nfunction SolanaMigrationLineItem({\n  migratorInfo,\n  onLoadComplete,\n}: {\n  migratorInfo: DefaultAssociatedTokenAccountInfo;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const poolInfo = useSolanaMigratorInformation(\n    migratorInfo.fromMintKey,\n    migratorInfo.toMintKey,\n    migratorInfo.defaultFromTokenAccount\n  );\n\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [migrationError, setMigrationError] = useState(\"\");\n\n  const handleMigrateClick = useCallback(() => {\n    if (!poolInfo.data) {\n      return;\n    }\n    setMigrationIsProcessing(true);\n    setMigrationError(\"\");\n    poolInfo.data\n      .migrateTokens(poolInfo.data.fromAssociatedTokenAccountBalance)\n      .then((result) => {\n        setMigrationIsProcessing(false);\n        setTransaction(result);\n      })\n      .catch((e) => {\n        setMigrationError(\"Unable to perform migration.\");\n        setMigrationIsProcessing(false);\n      });\n  }, [poolInfo.data]);\n\n  const precheckError =\n    poolInfo.data &&\n    poolInfo.data.getNotReadyCause(\n      poolInfo.data.fromAssociatedTokenAccountBalance\n    );\n\n  useEffect(() => {\n    if (poolInfo.data || poolInfo.error) {\n      onLoadComplete();\n    }\n  }, [poolInfo, onLoadComplete]);\n\n  if (!poolInfo.data) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Failed to load migration information for token\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={migratorInfo.fromMintKey}\n          />\n        </div>\n      </div>\n    );\n  } else if (transaction) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx\n            chainId={CHAIN_ID_SOLANA}\n            tx={{ id: transaction, block: 1 }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.fromAssociatedTokenAccount}\n            symbol={poolInfo.data.fromSymbol || undefined}\n            tokenName={poolInfo.data.fromName || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.toAssociatedTokenAccount}\n            symbol={poolInfo.data.toSymbol || undefined}\n            tokenName={poolInfo.data.toName || undefined}\n          />\n        </div>\n        {!poolInfo.data.toAssociatedTokenAccountExists ? (\n          <div className={classes.convertButton}>\n            <SolanaCreateAssociatedAddress\n              mintAddress={migratorInfo.toMintKey}\n              readableTargetAddress={poolInfo.data?.toAssociatedTokenAccount}\n              associatedAccountExists={\n                poolInfo.data.toAssociatedTokenAccountExists\n              }\n              setAssociatedAccountExists={poolInfo.data.setToTokenAccountExists}\n            />\n          </div>\n        ) : (\n          <div className={classes.convertButton}>\n            <ButtonWithLoader\n              showLoader={migrationIsProcessing}\n              onClick={handleMigrateClick}\n              error={\n                poolInfo.error\n                  ? poolInfo.error\n                  : migrationError\n                  ? migrationError\n                  : precheckError\n                  ? precheckError\n                  : \"\"\n              }\n              disabled={\n                !!poolInfo.error || !!precheckError || migrationIsProcessing\n              }\n            >\n              Convert\n            </ButtonWithLoader>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\ntype DefaultAssociatedTokenAccountInfo = {\n  fromMintKey: string;\n  toMintKey: string;\n  defaultFromTokenAccount: string;\n  fromAccountInfo: AccountInfo<ParsedAccountData> | null;\n};\n\nconst getTokenBalances = async (\n  walletAddress: string,\n  migrationMap: Map<string, string>\n): Promise<DefaultAssociatedTokenAccountInfo[]> => {\n  try {\n    const connection = new Connection(SOLANA_HOST);\n    const output: DefaultAssociatedTokenAccountInfo[] = [];\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      new PublicKey(walletAddress),\n      { programId: TOKEN_PROGRAM_ID },\n      \"confirmed\"\n    );\n    tokenAccounts.value.forEach((item) => {\n      if (\n        item.account != null &&\n        item.account.data?.parsed?.info?.tokenAmount?.uiAmountString &&\n        item.account.data?.parsed.info?.tokenAmount?.amount !== \"0\"\n      ) {\n        const fromMintKey = item.account.data.parsed.info.mint;\n        const toMintKey = migrationMap.get(fromMintKey);\n        if (toMintKey) {\n          output.push({\n            fromMintKey,\n            toMintKey: toMintKey,\n            defaultFromTokenAccount: item.pubkey.toString(),\n            fromAccountInfo: item.account,\n          });\n        }\n      }\n    });\n\n    return output;\n  } catch (e) {\n    console.error(e);\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function SolanaQuickMigrate() {\n  const chainId = CHAIN_ID_SOLANA;\n  const classes = useStyles();\n  const { isReady, walletAddress } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const [migrators, setMigrators] = useState<\n    DefaultAssociatedTokenAccountInfo[] | null\n  >(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && walletAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getTokenBalances(walletAddress, migrationMap).then(\n        (result) => {\n          if (!cancelled) {\n            setMigratorsFinishedLoading(0);\n            setMigrators(result.filter((x) => x.fromAccountInfo && x));\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, walletAddress, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <SolanaWalletKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((info) => {\n              return (\n                <SolanaMigrationLineItem\n                  migratorInfo={info}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText\n        white\n        subtitle=\"Convert assets from other bridges to Wormhole V2 tokens\"\n      >\n        Migrate Assets\n      </HeaderText>\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  isEVMChain,\n  uint8ArrayToHex,\n  WormholeWrappedInfo,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { setSourceWormholeWrappedInfo as setNFTSourceWormholeWrappedInfo } from \"../store/nftSlice\";\nimport {\n  selectNFTIsRecovery,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferIsRecovery,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n} from \"../store/selectors\";\nimport { setSourceWormholeWrappedInfo as setTransferSourceWormholeWrappedInfo } from \"../store/transferSlice\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\n\nexport interface StateSafeWormholeWrappedInfo {\n  isWrapped: boolean;\n  chainId: ChainId;\n  assetAddress: string;\n  tokenId?: string;\n}\n\nconst makeStateSafe = (\n  info: WormholeWrappedInfo\n): StateSafeWormholeWrappedInfo => ({\n  ...info,\n  assetAddress: uint8ArrayToHex(info.assetAddress),\n});\n\n// Check if the tokens in the configured source chain/address are wrapped\n// tokens. Wrapped tokens are tokens that are non-native, I.E, are locked up on\n// a different chain than this one.\nfunction useCheckIfWormholeWrapped(nft?: boolean) {\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceAsset = useSelector(\n    nft ? selectNFTSourceAsset : selectTransferSourceAsset\n  );\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const tokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const setSourceWormholeWrappedInfo = nft\n    ? setNFTSourceWormholeWrappedInfo\n    : setTransferSourceWormholeWrappedInfo;\n  const { provider } = useEthereumProvider();\n  const isRecovery = useSelector(\n    nft ? selectNFTIsRecovery : selectTransferIsRecovery\n  );\n  useEffect(() => {\n    if (isRecovery) {\n      return;\n    }\n    // TODO: loading state, error state\n    let cancelled = false;\n    (async () => {\n      if (isEVMChain(sourceChain) && provider && sourceAsset) {\n        const wrappedInfo = makeStateSafe(\n          await (nft\n            ? getOriginalAssetEthNFT(\n                getNFTBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                tokenId,\n                sourceChain\n              )\n            : getOriginalAssetEth(\n                getTokenBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                sourceChain\n              ))\n        );\n        if (!cancelled) {\n          dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n        }\n      }\n      if (sourceChain === CHAIN_ID_SOLANA && sourceAsset) {\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const wrappedInfo = makeStateSafe(\n            await (nft\n              ? getOriginalAssetSolNFT(\n                  connection,\n                  SOL_NFT_BRIDGE_ADDRESS,\n                  sourceAsset\n                )\n              : getOriginalAssetSol(\n                  connection,\n                  SOL_TOKEN_BRIDGE_ADDRESS,\n                  sourceAsset\n                ))\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_TERRA && sourceAsset) {\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetTerra(lcd, sourceAsset)\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isRecovery,\n    sourceChain,\n    sourceAsset,\n    provider,\n    nft,\n    setSourceWormholeWrappedInfo,\n    tokenId,\n  ]);\n}\n\nexport default useCheckIfWormholeWrapped;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getForeignAssetEth as getForeignAssetEthNFT,\n  getForeignAssetSol as getForeignAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { setTargetAsset as setNFTTargetAsset } from \"../store/nftSlice\";\nimport {\n  selectNFTIsSourceAssetWormholeWrapped,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTTargetChain,\n  selectTransferIsSourceAssetWormholeWrapped,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetAsset as setTransferTargetAsset } from \"../store/transferSlice\";\nimport {\n  getEvmChainId,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\n\nfunction useFetchTargetAsset(nft?: boolean) {\n  const dispatch = useDispatch();\n  const isSourceAssetWormholeWrapped = useSelector(\n    nft\n      ? selectNFTIsSourceAssetWormholeWrapped\n      : selectTransferIsSourceAssetWormholeWrapped\n  );\n  const originChain = useSelector(\n    nft ? selectNFTOriginChain : selectTransferOriginChain\n  );\n  const originAsset = useSelector(\n    nft ? selectNFTOriginAsset : selectTransferOriginAsset\n  );\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const tokenId = originTokenId || \"\"; // this should exist by this step for NFT transfers\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const setTargetAsset = nft ? setNFTTargetAsset : setTransferTargetAsset;\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const correctEvmNetwork = getEvmChainId(targetChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n  const [lastSuccessfulArgs, setLastSuccessfulArgs] = useState<{\n    isSourceAssetWormholeWrapped: boolean | undefined;\n    originChain: ChainId | undefined;\n    originAsset: string | undefined;\n    targetChain: ChainId;\n    nft?: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsMatchLastSuccess =\n    !!lastSuccessfulArgs &&\n    lastSuccessfulArgs.isSourceAssetWormholeWrapped ===\n      isSourceAssetWormholeWrapped &&\n    lastSuccessfulArgs.originChain === originChain &&\n    lastSuccessfulArgs.originAsset === originAsset &&\n    lastSuccessfulArgs.targetChain === targetChain &&\n    lastSuccessfulArgs.nft === nft &&\n    lastSuccessfulArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () =>\n      setLastSuccessfulArgs({\n        isSourceAssetWormholeWrapped,\n        originChain,\n        originAsset,\n        targetChain,\n        nft,\n        tokenId,\n      }),\n    [\n      isSourceAssetWormholeWrapped,\n      originChain,\n      originAsset,\n      targetChain,\n      nft,\n      tokenId,\n    ]\n  );\n  useEffect(() => {\n    if (argsMatchLastSuccess) {\n      return;\n    }\n    setLastSuccessfulArgs(null);\n    if (isSourceAssetWormholeWrapped && originChain === targetChain) {\n      dispatch(\n        setTargetAsset(\n          receiveDataWrapper({\n            doesExist: true,\n            address: hexToNativeString(originAsset, originChain) || null,\n          })\n        )\n      );\n      setArgs();\n      return;\n    }\n    let cancelled = false;\n    (async () => {\n      if (\n        isEVMChain(targetChain) &&\n        provider &&\n        hasCorrectEvmNetwork &&\n        originChain &&\n        originAsset\n      ) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const asset = await (nft\n            ? getForeignAssetEthNFT(\n                getNFTBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              )\n            : getForeignAssetEth(\n                getTokenBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: asset !== ethers.constants.AddressZero,\n                  address: asset,\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_SOLANA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const asset = await (nft\n            ? getForeignAssetSolNFT(\n                SOL_NFT_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset),\n                arrayify(BigNumber.from(tokenId || \"0\"))\n              )\n            : getForeignAssetSolana(\n                connection,\n                SOL_TOKEN_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_TERRA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const asset = await getForeignAssetTerra(\n            TERRA_TOKEN_BRIDGE_ADDRESS,\n            lcd,\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isSourceAssetWormholeWrapped,\n    originChain,\n    originAsset,\n    targetChain,\n    provider,\n    nft,\n    setTargetAsset,\n    tokenId,\n    hasCorrectEvmNetwork,\n    argsMatchLastSuccess,\n    setArgs,\n  ]);\n}\n\nexport default useFetchTargetAsset;\n","import { makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport numeral from \"numeral\";\nimport { useEffect, useState } from \"react\";\nimport { SOLANA_HOST } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport default function SolanaTPSWarning() {\n  const classes = useStyles();\n  const [tps, setTps] = useState<number | null>(null);\n  useEffect(() => {\n    let cancelled = false;\n    let interval = setInterval(() => {\n      (async () => {\n        try {\n          const connection = new Connection(SOLANA_HOST);\n          const samples = await connection.getRecentPerformanceSamples(1);\n          if (samples.length >= 1) {\n            let short = samples\n              .filter((sample) => sample.numTransactions !== 0)\n              .map(\n                (sample) => sample.numTransactions / sample.samplePeriodSecs\n              );\n            const avgTps = short[0];\n            if (!cancelled) {\n              setTps(avgTps);\n            }\n          }\n        } catch (e) {}\n      })();\n    }, 5000);\n    return () => {\n      cancelled = true;\n      clearInterval(interval);\n    };\n  }, []);\n  return tps !== null && tps < 1500 ? (\n    <Alert\n      variant=\"outlined\"\n      severity=\"warning\"\n      className={classes.alert}\n    >{`WARNING! The Solana Transactions Per Second (TPS) is below 1500. This is a sign of network congestion. Proceed with caution as you may have difficulty submitting transactions and the guardians may have difficulty witnessing them (this could lead to processing delays). Current TPS: ${numeral(\n      tps\n    ).format(\"0,0\")}`}</Alert>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginBottom: theme.spacing(4),\n  },\n}));\n\nexport default function StepDescription({\n  children,\n}: {\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <Typography component=\"div\" variant=\"body2\" className={classes.description}>\n      {children}\n    </Typography>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTIsRedeeming,\n  selectNFTIsSending,\n  selectNFTRedeemTx,\n  selectNFTSourceChain,\n  selectNFTTargetChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const isSending = useSelector(selectNFTIsSending);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const showWarning = (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : isEVMChain(sourceChain) && isSending\n        ? \"Note: there will be two transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA, CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTRedeem } from \"../../hooks/useHandleNFTRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { selectNFTTargetChain } from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Redeem() {\n  const { handleClick, disabled, showLoader } = useHandleNFTRedeem();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  return (\n    <>\n      <StepDescription>Receive the NFT on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      {targetChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      {targetChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n    </>\n  );\n}\n\nexport default Redeem;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectNFTRedeemTx, selectNFTTargetChain } from \"../../store/selectors\";\nimport { reset } from \"../../store/nftSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The NFT will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer Another NFT!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  transferFromEth,\n  transferFromSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { BigNumber, Signer } from \"ethers\";\nimport { arrayify, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectNFTTargetChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTTargetAddressHex from \"./useNFTTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  tokenId: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await transferFromEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      tokenAddress,\n      tokenId,\n      recipientChain,\n      recipientAddress\n    );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getNFTBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  originAddressStr?: string,\n  originChain?: ChainId,\n  originTokenId?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const transaction = await transferFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_NFT_BRIDGE_ADDRESS,\n      payerAddress,\n      fromAddress,\n      mintAddress,\n      targetAddress,\n      targetChain,\n      originAddress,\n      originChain,\n      arrayify(BigNumber.from(originTokenId || \"0\"))\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleNFTTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceAsset = useSelector(selectNFTSourceAsset);\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useNFTTargetAddressHex();\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      !!sourceTokenId &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        sourceTokenId,\n        targetChain,\n        targetAddress,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        targetChain,\n        targetAddress,\n        originAsset,\n        originChain,\n        originTokenId\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    sourceTokenPublicKey,\n    sourceAsset,\n    sourceTokenId,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    originTokenId,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTTargetAddressHex() {\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { CHAIN_ID_SOLANA, CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTTransfer } from \"../../hooks/useHandleNFTTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectNFTSourceWalletAddress,\n  selectNFTSourceChain,\n  selectNFTTargetError,\n  selectNFTTransferTx,\n  selectNFTIsSendComplete,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleNFTTransfer();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const error = useSelector(selectNFTTargetError);\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectNFTSourceWalletAddress);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const isDisabled = !isReady || isWrongWallet || disabled;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || undefined;\n  return (\n    <>\n      <StepDescription>\n        Transfer the NFT to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={isDisabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={errorMessage}\n      >\n        Transfer\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const transferTx = useSelector(selectNFTTransferTx);\n\n  const explainerString = \"The NFT has been sent!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/bnb.d8c61230.svg\";","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isEVMChain,\n  WSOL_ADDRESS,\n  WSOL_DECIMALS,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  errorSourceParsedTokenAccounts as errorSourceParsedTokenAccountsNFT,\n  fetchSourceParsedTokenAccounts as fetchSourceParsedTokenAccountsNFT,\n  NFTParsedTokenAccount,\n  receiveSourceParsedTokenAccounts as receiveSourceParsedTokenAccountsNFT,\n  setSourceParsedTokenAccount as setSourceParsedTokenAccountNFT,\n  setSourceParsedTokenAccounts as setSourceParsedTokenAccountsNFT,\n  setSourceWalletAddress as setSourceWalletAddressNFT,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccounts,\n  selectNFTSourceWalletAddress,\n  selectSourceWalletAddress,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccounts,\n} from \"../store/selectors\";\nimport {\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  ParsedTokenAccount,\n  receiveSourceParsedTokenAccounts,\n  setAmount,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  setSourceWalletAddress,\n} from \"../store/transferSlice\";\nimport {\n  COVALENT_GET_TOKENS_URL,\n  logoOverrides,\n  ROPSTEN_WETH_ADDRESS,\n  ROPSTEN_WETH_DECIMALS,\n  SOLANA_HOST,\n  WAVAX_ADDRESS,\n  WAVAX_DECIMALS,\n  WBNB_ADDRESS,\n  WBNB_DECIMALS,\n  WETH_ADDRESS,\n  WETH_DECIMALS,\n  WMATIC_ADDRESS,\n  WMATIC_DECIMALS,\n  WROSE_ADDRESS,\n  WROSE_DECIMALS,\n} from \"../utils/consts\";\nimport {\n  ExtractedMintInfo,\n  extractMintInfo,\n  getMultipleAccountsRPC,\n} from \"../utils/solana\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bnbIcon from \"../icons/bnb.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\n\nexport function createParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  symbol?: string,\n  name?: string,\n  logo?: string,\n  isNativeAsset?: boolean\n): ParsedTokenAccount {\n  return {\n    publicKey: publicKey,\n    mintKey: mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    symbol,\n    name,\n    logo,\n    isNativeAsset,\n  };\n}\n\nexport function createNFTParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  tokenId: string,\n  symbol?: string,\n  name?: string,\n  uri?: string,\n  animation_url?: string,\n  external_url?: string,\n  image?: string,\n  image_256?: string,\n  nftName?: string,\n  description?: string\n): NFTParsedTokenAccount {\n  return {\n    publicKey,\n    mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    tokenId,\n    uri,\n    animation_url,\n    external_url,\n    image,\n    image_256,\n    symbol,\n    name,\n    nftName,\n    description,\n  };\n}\n\nconst createParsedTokenAccountFromInfo = (\n  pubkey: PublicKey,\n  item: AccountInfo<ParsedAccountData>\n): ParsedTokenAccount => {\n  return {\n    publicKey: pubkey?.toString(),\n    mintKey: item.data.parsed?.info?.mint?.toString(),\n    amount: item.data.parsed?.info?.tokenAmount?.amount,\n    decimals: item.data.parsed?.info?.tokenAmount?.decimals,\n    uiAmount: item.data.parsed?.info?.tokenAmount?.uiAmount,\n    uiAmountString: item.data.parsed?.info?.tokenAmount?.uiAmountString,\n  };\n};\n\nconst createParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData\n): ParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: covalent.balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(formatUnits(covalent.balance, covalent.contract_decimals)),\n    uiAmountString: formatUnits(covalent.balance, covalent.contract_decimals),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: logoOverrides.get(covalent.contract_address) || covalent.logo_url,\n  };\n};\n\nconst createNativeSolParsedTokenAccount = async (\n  connection: Connection,\n  walletAddress: string\n) => {\n  // const walletAddress = \"H69q3Q8E74xm7swmMQpsJLVp2Q9JuBwBbxraAMX5Drzm\" // known solana mainnet wallet with tokens\n  const fetchAccounts = await getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]);\n  if (!fetchAccounts || !fetchAccounts.length || !fetchAccounts[0]) {\n    return null;\n  } else {\n    return createParsedTokenAccount(\n      walletAddress, //publicKey\n      WSOL_ADDRESS, //Mint key\n      fetchAccounts[0].lamports.toString(), //amount\n      WSOL_DECIMALS, //decimals, 9\n      parseFloat(formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS)),\n      formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS).toString(),\n      \"SOL\",\n      \"Solana\",\n      undefined, //TODO logo. It's in the solana token map, so we could potentially use that URL.\n      true\n    );\n  }\n};\n\nconst createNativeEthParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeEthRopstenParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          ROPSTEN_WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          ROPSTEN_WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeBscParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WBNB_ADDRESS, //Mint key, On the other side this will be WBNB, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WBNB_DECIMALS, //Luckily both BNB and WBNB have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"BNB\", //A white lie for display purposes\n          \"Binance Coin\", //A white lie for display purposes\n          bnbIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativePolygonParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WMATIC_ADDRESS, //Mint key, On the other side this will be WMATIC, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WMATIC_DECIMALS, //Luckily both MATIC and WMATIC have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"MATIC\", //A white lie for display purposes\n          \"Matic\", //A white lie for display purposes\n          polygonIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeAvaxParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WAVAX_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WAVAX_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"AVAX\", //A white lie for display purposes\n          \"Avalanche\", //A white lie for display purposes\n          avaxIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeOasisParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WROSE_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WROSE_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ROSE\", //A white lie for display purposes\n          \"Rose\", //A white lie for display purposes\n          oasisIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNFTParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData,\n  nft_data: CovalentNFTData\n): NFTParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: nft_data.token_balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(\n      formatUnits(nft_data.token_balance, covalent.contract_decimals)\n    ),\n    uiAmountString: formatUnits(\n      nft_data.token_balance,\n      covalent.contract_decimals\n    ),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: covalent.logo_url,\n    tokenId: nft_data.token_id,\n    uri: nft_data.token_url,\n    animation_url: nft_data.external_data.animation_url,\n    external_url: nft_data.external_data.external_url,\n    image: nft_data.external_data.image,\n    image_256: nft_data.external_data.image_256,\n    nftName: nft_data.external_data.name,\n    description: nft_data.external_data.description,\n  };\n};\n\nexport type CovalentData = {\n  contract_decimals: number;\n  contract_ticker_symbol: string;\n  contract_name: string;\n  contract_address: string;\n  logo_url: string | undefined;\n  balance: string;\n  quote: number | undefined;\n  quote_rate: number | undefined;\n  nft_data?: CovalentNFTData[];\n};\n\nexport type CovalentNFTExternalData = {\n  animation_url: string | null;\n  external_url: string | null;\n  image: string;\n  image_256: string;\n  name: string;\n  description: string;\n};\n\nexport type CovalentNFTData = {\n  token_id: string;\n  token_balance: string;\n  external_data: CovalentNFTExternalData;\n  token_url: string;\n};\n\nconst getEthereumAccountsCovalent = async (\n  walletAddress: string,\n  nft: boolean,\n  chainId: ChainId\n): Promise<CovalentData[]> => {\n  const url = COVALENT_GET_TOKENS_URL(chainId, walletAddress, nft);\n\n  try {\n    const output = [] as CovalentData[];\n    const response = await axios.get(url);\n    const tokens = response.data.data.items;\n\n    if (tokens instanceof Array && tokens.length) {\n      for (const item of tokens) {\n        // TODO: filter?\n        if (\n          item.contract_decimals !== undefined &&\n          item.contract_address &&\n          item.balance &&\n          item.balance !== \"0\" &&\n          (nft\n            ? item.supports_erc?.includes(\"erc721\")\n            : item.supports_erc?.includes(\"erc20\"))\n        ) {\n          output.push({ ...item } as CovalentData);\n        }\n      }\n    }\n\n    return output;\n  } catch (error) {\n    return Promise.reject(\"Unable to retrieve your Ethereum Tokens.\");\n  }\n};\n\nconst getSolanaParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    //No matter what, we retrieve the spl tokens associated to this address.\n    let splParsedTokenAccounts = await connection\n      .getParsedTokenAccountsByOwner(new PublicKey(walletAddress), {\n        programId: new PublicKey(TOKEN_PROGRAM_ID),\n      })\n      .then((result) => {\n        return result.value.map((item) =>\n          createParsedTokenAccountFromInfo(item.pubkey, item.account)\n        );\n      });\n\n    // uncomment to test token account in picker, useful for debugging\n    // splParsedTokenAccounts.push({\n    //   amount: \"1\",\n    //   decimals: 8,\n    //   mintKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   publicKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   uiAmount: 1,\n    //   uiAmountString: \"1\",\n    //   isNativeAsset: false,\n    // });\n\n    if (nft) {\n      //In the case of NFTs, we are done, and we set the accounts in redux\n      dispatch(receiveSourceParsedTokenAccountsNFT(splParsedTokenAccounts));\n    } else {\n      //In the transfer case, we also pull the SOL balance of the wallet, and prepend it at the beginning of the list.\n      const nativeAccount = await createNativeSolParsedTokenAccount(\n        connection,\n        walletAddress\n      );\n      if (nativeAccount !== null) {\n        splParsedTokenAccounts.unshift(nativeAccount);\n      }\n      dispatch(receiveSourceParsedTokenAccounts(splParsedTokenAccounts));\n    }\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\n/**\n * Fetches the balance of an asset for the connected wallet\n * This should handle every type of chain in the future, but only reads the Transfer state.\n */\nfunction useGetAvailableTokens(nft: boolean = false) {\n  const dispatch = useDispatch();\n\n  const tokenAccounts = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccounts\n      : selectTransferSourceParsedTokenAccounts\n  );\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { provider, signerAddress } = useEthereumProvider();\n\n  const [covalent, setCovalent] = useState<any>(undefined);\n  const [covalentLoading, setCovalentLoading] = useState(false);\n  const [covalentError, setCovalentError] = useState<string | undefined>(\n    undefined\n  );\n\n  const [ethNativeAccount, setEthNativeAccount] = useState<any>(undefined);\n  const [ethNativeAccountLoading, setEthNativeAccountLoading] = useState(false);\n  const [ethNativeAccountError, setEthNativeAccountError] = useState<\n    string | undefined\n  >(undefined);\n\n  const [solanaMintAccounts, setSolanaMintAccounts] = useState<\n    Map<string, ExtractedMintInfo | null> | undefined\n  >(undefined);\n  const [solanaMintAccountsLoading, setSolanaMintAccountsLoading] =\n    useState(false);\n  const [solanaMintAccountsError, setSolanaMintAccountsError] = useState<\n    string | undefined\n  >(undefined);\n\n  const selectedSourceWalletAddress = useSelector(\n    nft ? selectNFTSourceWalletAddress : selectSourceWalletAddress\n  );\n  const currentSourceWalletAddress: string | undefined = isEVMChain(lookupChain)\n    ? signerAddress\n    : lookupChain === CHAIN_ID_SOLANA\n    ? solPK?.toString()\n    : undefined;\n\n  const resetSourceAccounts = useCallback(() => {\n    dispatch(\n      nft\n        ? setSourceWalletAddressNFT(undefined)\n        : setSourceWalletAddress(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountNFT(undefined)\n        : setSourceParsedTokenAccount(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountsNFT(undefined)\n        : setSourceParsedTokenAccounts(undefined)\n    );\n    !nft && dispatch(setAmount(\"\"));\n    setCovalent(undefined); //These need to be included in the reset because they have balances on them.\n    setCovalentLoading(false);\n    setCovalentError(\"\");\n\n    setEthNativeAccount(undefined);\n    setEthNativeAccountLoading(false);\n    setEthNativeAccountError(\"\");\n  }, [setCovalent, dispatch, nft]);\n\n  //TODO this useEffect could be somewhere else in the codebase\n  //It resets the SourceParsedTokens accounts when the wallet changes\n  useEffect(() => {\n    if (\n      selectedSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== selectedSourceWalletAddress\n    ) {\n      resetSourceAccounts();\n      return;\n    } else {\n    }\n  }, [\n    selectedSourceWalletAddress,\n    currentSourceWalletAddress,\n    dispatch,\n    resetSourceAccounts,\n  ]);\n\n  //Solana accountinfos load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_SOLANA && solPK) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getSolanaParsedTokenAccounts(solPK.toString(), dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, solanaWallet, lookupChain, solPK, tokenAccounts, nft]);\n\n  //Solana Mint Accounts lookup\n  useEffect(() => {\n    if (lookupChain !== CHAIN_ID_SOLANA || !tokenAccounts.data?.length) {\n      return () => {};\n    }\n\n    let cancelled = false;\n    setSolanaMintAccountsLoading(true);\n    setSolanaMintAccountsError(undefined);\n    const mintAddresses = tokenAccounts.data.map((x) => x.mintKey);\n    //This is a known wormhole v1 token on testnet\n    // mintAddresses.push(\"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\");\n    //SOLT devnet token\n    // mintAddresses.push(\"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\");\n    // bad monkey \"NFT\"\n    // mintAddresses.push(\"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\");\n    // degenerate monkey NFT\n    // mintAddresses.push(\"EzYsbigNNGbNuANRJ3mnnyJYU2Bk7mBYVsxuonUwAX7r\");\n\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    getMultipleAccountsRPC(\n      connection,\n      mintAddresses.map((x) => new PublicKey(x))\n    ).then(\n      (results) => {\n        if (!cancelled) {\n          const output = new Map<string, ExtractedMintInfo | null>();\n\n          results.forEach((result, index) =>\n            output.set(\n              mintAddresses[index],\n              (result && extractMintInfo(result)) || null\n            )\n          );\n\n          setSolanaMintAccounts(output);\n          setSolanaMintAccountsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setSolanaMintAccounts(undefined);\n          setSolanaMintAccountsLoading(false);\n          setSolanaMintAccountsError(\n            \"Could not retrieve Solana mint accounts.\"\n          );\n        }\n      }\n    );\n\n    return () => (cancelled = true);\n  }, [tokenAccounts.data, lookupChain]);\n\n  //Ethereum native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETH &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum (Ropsten) native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthRopstenParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Binance Smart Chain native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_BSC &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeBscParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your BNB balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Polygon native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_POLYGON &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativePolygonParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your MATIC balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //TODO refactor all these into an isEVM effect\n  //avax native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_AVAX &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeAvaxParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your AVAX balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_OASIS &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeOasisParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Oasis balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum covalent accounts load\n  useEffect(() => {\n    //const testWallet = \"0xf60c2ea62edbfe808163751dd0d8693dcb30019c\";\n    // const nftTestWallet1 = \"0x3f304c6721f35ff9af00fd32650c8e0a982180ab\";\n    // const nftTestWallet2 = \"0x98ed231428088eb440e8edb5cc8d66dcf913b86e\";\n    // const nftTestWallet3 = \"0xb1fadf677a7e9b90e9d4f31c8ffb3dc18c138c6f\";\n    // const nftBscTestWallet1 = \"0x5f464a652bd1991df0be37979b93b3306d64a909\";\n    let cancelled = false;\n    const walletAddress = signerAddress;\n    if (walletAddress && isEVMChain(lookupChain) && !covalent) {\n      //TODO less cancel\n      !cancelled && setCovalentLoading(true);\n      !cancelled &&\n        dispatch(\n          nft\n            ? fetchSourceParsedTokenAccountsNFT()\n            : fetchSourceParsedTokenAccounts()\n        );\n      getEthereumAccountsCovalent(walletAddress, nft, lookupChain).then(\n        (accounts) => {\n          !cancelled && setCovalentLoading(false);\n          !cancelled && setCovalentError(undefined);\n          !cancelled && setCovalent(accounts);\n          !cancelled &&\n            dispatch(\n              nft\n                ? receiveSourceParsedTokenAccountsNFT(\n                    accounts.reduce((arr, current) => {\n                      if (current.nft_data) {\n                        current.nft_data.forEach((x) =>\n                          arr.push(\n                            createNFTParsedTokenAccountFromCovalent(\n                              walletAddress,\n                              current,\n                              x\n                            )\n                          )\n                        );\n                      }\n                      return arr;\n                    }, [] as NFTParsedTokenAccount[])\n                  )\n                : receiveSourceParsedTokenAccounts(\n                    accounts.map((x) =>\n                      createParsedTokenAccountFromCovalent(walletAddress, x)\n                    )\n                  )\n            );\n        },\n        () => {\n          !cancelled &&\n            dispatch(\n              nft\n                ? errorSourceParsedTokenAccountsNFT(\n                    \"Cannot load your Ethereum NFTs at the moment.\"\n                  )\n                : errorSourceParsedTokenAccounts(\n                    \"Cannot load your Ethereum tokens at the moment.\"\n                  )\n            );\n          !cancelled &&\n            setCovalentError(\"Cannot load your Ethereum tokens at the moment.\");\n          !cancelled && setCovalentLoading(false);\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [lookupChain, provider, signerAddress, dispatch, nft, covalent]);\n\n  //Terra accounts load\n  //At present, we don't have any mechanism for doing this.\n  useEffect(() => {}, []);\n\n  const ethAccounts = useMemo(() => {\n    const output = { ...tokenAccounts };\n    output.data = output.data?.slice() || [];\n    output.isFetching = output.isFetching || ethNativeAccountLoading;\n    output.error = output.error || ethNativeAccountError;\n    ethNativeAccount && output.data && output.data.unshift(ethNativeAccount);\n    return output;\n  }, [\n    ethNativeAccount,\n    ethNativeAccountLoading,\n    ethNativeAccountError,\n    tokenAccounts,\n  ]);\n\n  return lookupChain === CHAIN_ID_SOLANA\n    ? {\n        tokenAccounts: tokenAccounts,\n        mintAccounts: {\n          data: solanaMintAccounts,\n          isFetching: solanaMintAccountsLoading,\n          error: solanaMintAccountsError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : isEVMChain(lookupChain)\n    ? {\n        tokenAccounts: ethAccounts,\n        covalent: {\n          data: covalent,\n          isFetching: covalentLoading,\n          error: covalentError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_TERRA\n    ? {\n        resetAccounts: resetSourceAccounts,\n      }\n    : undefined;\n}\n\nexport default useGetAvailableTokens;\n","import {\n  NFTImplementation,\n  NFTImplementation__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { arrayify, formatUnits } from \"ethers/lib/utils\";\nimport {\n  createNFTParsedTokenAccount,\n  createParsedTokenAccount,\n} from \"../hooks/useGetSourceParsedTokenAccounts\";\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumToken(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = TokenImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function ethTokenToParsedTokenAccount(\n  token: TokenImplementation,\n  signerAddress: string\n) {\n  const decimals = await token.decimals();\n  const balance = await token.balanceOf(signerAddress);\n  const symbol = await token.symbol();\n  const name = await token.name();\n  return createParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    symbol,\n    name\n  );\n}\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumNFT(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = NFTImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function isNFT(token: NFTImplementation) {\n  const erc721 = \"0x80ac58cd\";\n  const erc721metadata = \"0x5b5e139f\";\n  const supportsErc721 = await token.supportsInterface(arrayify(erc721));\n  const supportsErc721Metadata = await token.supportsInterface(\n    arrayify(erc721metadata)\n  );\n  return supportsErc721 && supportsErc721Metadata;\n}\n\nexport async function ethNFTToNFTParsedTokenAccount(\n  token: NFTImplementation,\n  tokenId: string,\n  signerAddress: string\n) {\n  const decimals = 0;\n  const balance = (await token.ownerOf(tokenId)) === signerAddress ? 1 : 0;\n  const symbol = await token.symbol();\n  const name = await token.name();\n  const uri = await token.tokenURI(tokenId);\n  return createNFTParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    tokenId,\n    symbol,\n    name,\n    uri\n  );\n}\n\nexport function isValidEthereumAddress(address: string) {\n  return ethers.utils.isAddress(address);\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectMarketsMap } from \"../store/selectors\";\nimport {\n  errorMarketsMap,\n  fetchMarketsMap,\n  receiveMarketsMap,\n} from \"../store/tokenSlice\";\nimport { FEATURED_MARKETS_JSON_URL } from \"../utils/consts\";\n\nexport type MarketsMap = {\n  markets?: {\n    [index: string]: {\n      name: string;\n      link: string;\n    };\n  };\n  tokens?: {\n    [key in ChainId]?: {\n      [index: string]: {\n        symbol: string;\n        logo: string;\n      };\n    };\n  };\n  tokenMarkets?: {\n    [key in ChainId]?: {\n      [key in ChainId]?: {\n        [index: string]: {\n          symbol: string;\n          logo: string;\n          markets: string[];\n        };\n      };\n    };\n  };\n};\n\nconst useMarketsMap = (shouldFire: boolean): DataWrapper<MarketsMap> => {\n  const marketsMap = useSelector(selectMarketsMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (marketsMap.data === undefined ||\n      (marketsMap.data === null && !marketsMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getMarketsMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return marketsMap;\n};\n\nconst getMarketsMap = (dispatch: Dispatch) => {\n  dispatch(fetchMarketsMap());\n  axios.get(FEATURED_MARKETS_JSON_URL).then(\n    (response) => {\n      dispatch(receiveMarketsMap(response.data as MarketsMap));\n    },\n    (error) => {\n      dispatch(errorMarketsMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useMarketsMap;\n","export default __webpack_public_path__ + \"static/media/wormhole-network.5bb90ed1.svg\";","import {\n  Avatar,\n  Card,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport clsx from \"clsx\";\nimport {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_OASIS,\n} from \"@certusone/wormhole-sdk\";\nimport SmartAddress from \"../SmartAddress\";\nimport avaxIcon from \"../../icons/avax.svg\";\nimport bscIcon from \"../../icons/bsc.svg\";\nimport ethIcon from \"../../icons/eth.svg\";\nimport solanaIcon from \"../../icons/solana.svg\";\nimport polygonIcon from \"../../icons/polygon.svg\";\nimport oasisIcon from \"../../icons/oasis-network-rose-logo.svg\";\nimport useCopyToClipboard from \"../../hooks/useCopyToClipboard\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Wormhole from \"../../icons/wormhole-network.svg\";\n\nconst safeIPFS = (uri: string) =>\n  uri.startsWith(\"ipfs://ipfs/\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/\")\n    : uri.startsWith(\"ipfs://\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n    : uri.startsWith(\"https://cloudflare-ipfs.com/ipfs/\") // no CORS support?\n    ? uri.replace(\"https://cloudflare-ipfs.com/ipfs/\", \"https://ipfs.io/ipfs/\")\n    : uri;\n\nconst LogoIcon = ({ chainId }: { chainId: ChainId }) =>\n  chainId === CHAIN_ID_SOLANA ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"4px\",\n      }}\n      src={solanaIcon}\n      alt=\"Solana\"\n    />\n  ) : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN ? (\n    <Avatar\n      style={{\n        backgroundColor: \"white\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n      }}\n      src={ethIcon}\n      alt=\"Ethereum\"\n    />\n  ) : chainId === CHAIN_ID_BSC ? (\n    <Avatar\n      style={{\n        backgroundColor: \"rgb(20, 21, 26)\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"2px\",\n      }}\n      src={bscIcon}\n      alt=\"Binance Smart Chain\"\n    />\n  ) : chainId === CHAIN_ID_POLYGON ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={polygonIcon}\n      alt=\"Polygon\"\n    />\n  ) : chainId === CHAIN_ID_AVAX ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={avaxIcon}\n      alt=\"Avalanche\"\n    />\n  ) : chainId === CHAIN_ID_OASIS ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={oasisIcon}\n      alt=\"Oasis\"\n    />\n  ) : null;\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    borderRadius: 9,\n    maxWidth: \"100%\",\n    width: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: 8,\n    position: \"relative\",\n    zIndex: 1,\n    transition: \"background-position 1s, transform 0.25s\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n      transform: \"scale(1.25)\",\n    },\n    backgroundSize: \"200% auto\",\n    backgroundColor: \"#ffb347\",\n    background:\n      \"linear-gradient(to right, #ffb347 0%, #ffcc33  51%, #ffb347  100%)\",\n  },\n  silverBorder: {\n    backgroundColor: \"#D9D8D6\",\n    backgroundSize: \"200% auto\",\n    background:\n      \"linear-gradient(to bottom right, #757F9A 0%, #D7DDE8  51%, #757F9A  100%)\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n    },\n  },\n  cardInset: {},\n  textContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    display: \"flex\",\n  },\n  detailsContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    \"&:last-child\": {\n      //override rule\n      paddingBottom: 2,\n    },\n  },\n  title: {\n    flex: 1,\n  },\n  description: {\n    padding: theme.spacing(0.5, 0, 1),\n  },\n  tokenId: {\n    fontSize: \"8px\",\n  },\n  mediaContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"transparent\",\n    margin: theme.spacing(0, 2),\n    \"& > img, & > video\": {\n      border: \"1px solid #ffb347\",\n    },\n  },\n  silverMediaBorder: {\n    \"& > img, & > video\": {\n      borderColor: \"#D7DDE8\",\n    },\n  },\n  // thanks https://cssgradient.io/ and https://htmlcolorcodes.com/color-picker/\n  eth: {\n    // colors from https://en.wikipedia.org/wiki/Ethereum#/media/File:Ethereum-icon-purple.svg\n    backgroundColor: \"rgb(69,74,117)\",\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,1) 0%, rgba(138,146,178,1) 33%, rgba(69,74,117,1) 66%, rgba(98,104,143,1) 100%)\",\n  },\n  bsc: {\n    // color from binance background rgb(20, 21, 26), 2 and 1 tint lighter\n    backgroundColor: \"#F0B90B\",\n    background:\n      \"linear-gradient(160deg, rgb(20, 21, 26) 0%, #4A4D57 33%, rgb(20, 21, 26) 66%, #2C2F3B 100%)\",\n  },\n  polygon: {\n    // color from polygon logo #8247E5 down to 30 lightness\n    backgroundColor: \"#0F0323\",\n    background:\n      \"linear-gradient(160deg, #0F0323 0%, #250957 33%, #0F0323 66%, #0F0323 100%)\",\n  },\n  solana: {\n    // colors from https://solana.com/branding/new/exchange/exchange-sq-black.svg\n    backgroundColor: \"rgb(153,69,255)\",\n    background:\n      \"linear-gradient(45deg, rgba(153,69,255,1) 0%, rgba(121,98,231,1) 20%, rgba(0,209,140,1) 100%)\",\n  },\n  hidden: {\n    display: \"none\",\n  },\n  skeleton: {\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    borderRadius: 9,\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"absolute\",\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    zIndex: 10,\n  },\n  wormholePositioner: {\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"relative\",\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    margin: `${theme.spacing(1)}px auto`,\n  },\n}));\n\nconst ViewerLoader = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.wormholePositioner}>\n      <Skeleton variant=\"rect\" animation=\"wave\" className={classes.skeleton} />\n      <img src={Wormhole} alt=\"Wormhole\" className={classes.wormholeIcon} />\n    </div>\n  );\n};\n\nexport default function NFTViewer({\n  value,\n  chainId,\n}: {\n  value: NFTParsedTokenAccount;\n  chainId: ChainId;\n}) {\n  const uri = safeIPFS(value.uri || \"\");\n  const [metadata, setMetadata] = useState({\n    uri,\n    image: value.image,\n    animation_url: value.animation_url,\n    nftName: value.nftName,\n    description: value.description,\n    isLoading: !!uri,\n  });\n  const [isMediaLoading, setIsMediaLoading] = useState(false);\n  const onLoad = useCallback(() => {\n    setIsMediaLoading(false);\n  }, []);\n  const isLoading = isMediaLoading || metadata.isLoading;\n  useEffect(() => {\n    setMetadata((m) =>\n      m.uri === uri\n        ? m\n        : {\n            uri,\n            image: value.image,\n            animation_url: value.animation_url,\n            nftName: value.nftName,\n            description: value.description,\n            isLoading: !!uri,\n          }\n    );\n  }, [value, uri]);\n  useEffect(() => {\n    if (uri) {\n      let cancelled = false;\n      (async () => {\n        try {\n          const result = await axios.get(uri);\n          if (!cancelled && result && result.data) {\n            // support returns with nested data (e.g. {status: 10000, result: {data: {...}}})\n            const data = result.data.result?.data || result.data;\n            setMetadata({\n              uri,\n              image:\n                data.image ||\n                data.image_url ||\n                data.big_image ||\n                data.small_image,\n              animation_url: data.animation_url,\n              nftName: data.name,\n              description: data.description,\n              isLoading: false,\n            });\n          } else if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        } catch (e) {\n          if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [uri]);\n\n  const classes = useStyles();\n  const animLower = metadata.animation_url?.toLowerCase();\n  // const has3DModel = animLower?.endsWith('gltf') || animLower?.endsWith('glb')\n  const hasVideo =\n    !animLower?.startsWith(\"ipfs://\") && // cloudflare ipfs doesn't support streaming video\n    (animLower?.endsWith(\"webm\") ||\n      animLower?.endsWith(\"mp4\") ||\n      animLower?.endsWith(\"mov\") ||\n      animLower?.endsWith(\"m4v\") ||\n      animLower?.endsWith(\"ogv\") ||\n      animLower?.endsWith(\"ogg\"));\n  const hasAudio =\n    animLower?.endsWith(\"mp3\") ||\n    animLower?.endsWith(\"flac\") ||\n    animLower?.endsWith(\"wav\") ||\n    animLower?.endsWith(\"oga\");\n  const hasImage = metadata.image;\n  const copyTokenId = useCopyToClipboard(value.tokenId || \"\");\n  const videoSrc = hasVideo && safeIPFS(metadata.animation_url || \"\");\n  const imageSrc = hasImage && safeIPFS(metadata.image || \"\");\n  const audioSrc = hasAudio && safeIPFS(metadata.animation_url || \"\");\n\n  //set loading when the media src changes\n  useLayoutEffect(() => {\n    if (videoSrc || imageSrc || audioSrc) {\n      setIsMediaLoading(true);\n    } else {\n      setIsMediaLoading(false);\n    }\n  }, [videoSrc, imageSrc, audioSrc]);\n\n  const image = (\n    <img\n      src={imageSrc}\n      alt={metadata.nftName || \"\"}\n      style={{ maxWidth: \"100%\" }}\n      onLoad={onLoad}\n      onError={onLoad}\n    />\n  );\n  const media = (\n    <>\n      {hasVideo ? (\n        <video\n          autoPlay\n          controls\n          loop\n          style={{ maxWidth: \"100%\" }}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        >\n          <source src={videoSrc || \"\"} />\n          {image}\n        </video>\n      ) : hasImage ? (\n        image\n      ) : null}\n      {hasAudio ? (\n        <audio\n          controls\n          src={audioSrc || \"\"}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        />\n      ) : null}\n    </>\n  );\n\n  return (\n    <>\n      <div className={!isLoading ? classes.hidden : \"\"}>\n        <ViewerLoader />\n      </div>\n      <Card\n        className={clsx(classes.card, {\n          [classes.silverBorder]:\n            chainId === CHAIN_ID_SOLANA ||\n            chainId === CHAIN_ID_POLYGON ||\n            chainId === CHAIN_ID_AVAX,\n          [classes.hidden]: isLoading,\n        })}\n        elevation={10}\n      >\n        <div\n          className={clsx(classes.cardInset, {\n            [classes.eth]:\n              chainId === CHAIN_ID_ETH ||\n              chainId === CHAIN_ID_ETHEREUM_ROPSTEN ||\n              chainId === CHAIN_ID_AVAX || //TODO: give avax it's own bg\n              chainId === CHAIN_ID_OASIS, //TODO: give oasis it's own bg\n            [classes.bsc]: chainId === CHAIN_ID_BSC,\n            [classes.solana]: chainId === CHAIN_ID_SOLANA,\n            [classes.polygon]: chainId === CHAIN_ID_POLYGON,\n          })}\n        >\n          <CardContent className={classes.textContent}>\n            {metadata.nftName ? (\n              <Typography className={classes.title}>\n                {metadata.nftName}\n              </Typography>\n            ) : (\n              <div className={classes.title} />\n            )}\n            <SmartAddress\n              chainId={chainId}\n              parsedTokenAccount={value}\n              noGutter\n              noUnderline\n            />\n            <LogoIcon chainId={chainId} />\n          </CardContent>\n          <CardMedia\n            className={clsx(classes.mediaContent, {\n              [classes.silverMediaBorder]:\n                chainId === CHAIN_ID_SOLANA ||\n                chainId === CHAIN_ID_POLYGON ||\n                chainId === CHAIN_ID_OASIS ||\n                chainId === CHAIN_ID_AVAX,\n            })}\n          >\n            {media}\n          </CardMedia>\n          <CardContent className={classes.detailsContent}>\n            {metadata.description ? (\n              <Typography variant=\"body2\" className={classes.description}>\n                {metadata.description}\n              </Typography>\n            ) : null}\n            {value.tokenId ? (\n              <Typography className={classes.tokenId} align=\"right\">\n                <Tooltip title=\"Copy\" arrow>\n                  <span onClick={copyTokenId}>\n                    {value.tokenId.length > 18\n                      ? `#${value.tokenId.substr(0, 16)}...`\n                      : `#${value.tokenId}`}\n                  </span>\n                </Tooltip>\n              </Typography>\n            ) : null}\n          </CardContent>\n        </div>\n      </Card>\n    </>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  Button,\n  CircularProgress,\n  createStyles,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  makeStyles,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { InfoOutlined, Launch } from \"@material-ui/icons\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { AVAILABLE_MARKETS_URL, CHAINS_BY_ID } from \"../../utils/consts\";\nimport { shortenAddress } from \"../../utils/solana\";\nimport NFTViewer from \"./NFTViewer\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    alignCenter: {\n      textAlign: \"center\",\n    },\n    optionContainer: {\n      padding: 0,\n    },\n    optionContent: {\n      padding: theme.spacing(1),\n    },\n    tokenList: {\n      maxHeight: theme.spacing(80), //TODO smarter\n      height: theme.spacing(80),\n      overflow: \"auto\",\n    },\n    dialogContent: {\n      overflowX: \"hidden\",\n    },\n    selectionButtonContainer: {\n      //display: \"flex\",\n      textAlign: \"center\",\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    selectionButton: {\n      maxWidth: \"100%\",\n      width: theme.breakpoints.values.sm,\n    },\n    tokenOverviewContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      \"& div\": {\n        margin: theme.spacing(1),\n        flexBasis: \"25%\",\n        \"&$tokenImageContainer\": {\n          maxWidth: 40,\n        },\n        \"&$tokenMarketsList\": {\n          marginTop: theme.spacing(-0.5),\n          marginLeft: 0,\n          flexBasis: \"100%\",\n        },\n        \"&:last-child\": {\n          textAlign: \"right\",\n        },\n        flexShrink: 1,\n      },\n      flexWrap: \"wrap\",\n    },\n    tokenImageContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: 40,\n    },\n    tokenImage: {\n      maxHeight: \"2.5rem\", //Eyeballing this based off the text size\n    },\n    tokenMarketsList: {\n      order: 1,\n      textAlign: \"left\",\n      width: \"100%\",\n      \"& > .MuiButton-root\": {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n      },\n    },\n    migrationAlert: {\n      width: \"100%\",\n      \"& .MuiAlert-message\": {\n        width: \"100%\",\n      },\n    },\n    flexTitle: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n    grower: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport const balancePretty = (uiString: string) => {\n  const numberString = uiString.split(\".\")[0];\n  const bignum = BigNumber.from(numberString);\n  if (bignum.gte(1000000)) {\n    return numberString.substring(0, numberString.length - 6) + \" M\";\n  } else if (uiString.length > 8) {\n    return uiString.substr(0, 8);\n  } else {\n    return uiString;\n  }\n};\n\nconst noClickThrough = (e: any) => {\n  e.stopPropagation();\n};\n\nexport const BasicAccountRender = (\n  account: MarketParsedTokenAccount,\n  isMigrationEligible: (address: string) => boolean,\n  nft: boolean,\n  displayBalance?: (account: NFTParsedTokenAccount) => boolean\n) => {\n  const { data: marketsData } = useMarketsMap(false);\n  const classes = useStyles();\n  const mintPrettyString = shortenAddress(account.mintKey);\n  const uri = nft ? account.image_256 : account.logo || account.uri;\n  const symbol = account.symbol || \"Unknown\";\n  const name = account.name || \"Unknown\";\n  const tokenId = account.tokenId;\n  const shouldDisplayBalance = !displayBalance || displayBalance(account);\n\n  const nftContent = (\n    <div className={classes.tokenOverviewContainer}>\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography>{symbol}</Typography>\n        <Typography>{name}</Typography>\n      </div>\n      <div>\n        <Typography>{mintPrettyString}</Typography>\n        <Typography style={{ wordBreak: \"break-all\" }}>{tokenId}</Typography>\n      </div>\n    </div>\n  );\n\n  const tokenContent = (\n    <div className={classes.tokenOverviewContainer}>\n      {account.markets ? (\n        <div className={classes.tokenMarketsList}>\n          {account.markets.map((market) =>\n            marketsData?.markets?.[market] ? (\n              <Button\n                key={market}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<Launch />}\n                href={marketsData.markets[market].link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={noClickThrough}\n              >\n                {marketsData.markets[market].name}\n              </Button>\n            ) : null\n          )}\n        </div>\n      ) : null}\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography variant=\"subtitle1\">{symbol}</Typography>\n      </div>\n      <div>\n        {\n          <Typography variant=\"body1\">\n            {account.isNativeAsset ? \"Native\" : mintPrettyString}\n          </Typography>\n        }\n      </div>\n      <div>\n        {shouldDisplayBalance ? (\n          <>\n            <Typography variant=\"body2\">{\"Balance\"}</Typography>\n            <Typography variant=\"h6\">\n              {balancePretty(account.uiAmountString)}\n            </Typography>\n          </>\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n\n  const migrationRender = (\n    <div className={classes.migrationAlert}>\n      <Alert severity=\"warning\">\n        <Typography variant=\"body2\">\n          This is a legacy asset eligible for migration.\n        </Typography>\n        <div>{tokenContent}</div>\n      </Alert>\n    </div>\n  );\n\n  return nft\n    ? nftContent\n    : isMigrationEligible(account.mintKey)\n    ? migrationRender\n    : tokenContent;\n};\n\ninterface MarketParsedTokenAccount extends NFTParsedTokenAccount {\n  markets?: string[];\n}\n\nexport default function TokenPicker({\n  value,\n  options,\n  RenderOption,\n  onChange,\n  isValidAddress,\n  getAddress,\n  disabled,\n  resetAccounts,\n  nft,\n  chainId,\n  error,\n  showLoader,\n  useTokenId,\n}: {\n  value: NFTParsedTokenAccount | null;\n  options: NFTParsedTokenAccount[];\n  RenderOption: ({\n    account,\n  }: {\n    account: NFTParsedTokenAccount;\n  }) => JSX.Element;\n  onChange: (newValue: NFTParsedTokenAccount | null) => Promise<void>;\n  isValidAddress?: (address: string) => boolean;\n  getAddress?: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount>;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  nft: boolean;\n  chainId: ChainId;\n  error?: string;\n  showLoader?: boolean;\n  useTokenId?: boolean;\n}) {\n  const classes = useStyles();\n  const [holderString, setHolderString] = useState(\"\");\n  const [tokenIdHolderString, setTokenIdHolderString] = useState(\"\");\n  const [loadingError, setLoadingError] = useState(\"\");\n  const [isLocalLoading, setLocalLoading] = useState(false);\n  const [dialogIsOpen, setDialogIsOpen] = useState(false);\n  const [selectionError, setSelectionError] = useState(\"\");\n\n  const targetChain = useSelector(selectTransferTargetChain);\n  const { data: marketsData } = useMarketsMap(true);\n\n  const openDialog = useCallback(() => {\n    setHolderString(\"\");\n    setSelectionError(\"\");\n    setDialogIsOpen(true);\n  }, []);\n\n  const closeDialog = useCallback(() => {\n    setDialogIsOpen(false);\n  }, []);\n\n  const handleSelectOption = useCallback(\n    async (option: NFTParsedTokenAccount) => {\n      setSelectionError(\"\");\n      let newOption = null;\n      try {\n        //Covalent balances tend to be stale, so we make an attempt to correct it at selection time.\n        if (getAddress && !option.isNativeAsset) {\n          newOption = await getAddress(option.mintKey, option.tokenId);\n          newOption = {\n            ...option,\n            ...newOption,\n            // keep logo and uri from covalent / market list / etc (otherwise would be overwritten by undefined)\n            logo: option.logo || newOption.logo,\n            uri: option.uri || newOption.uri,\n          } as NFTParsedTokenAccount;\n        } else {\n          newOption = option;\n        }\n        await onChange(newOption);\n        closeDialog();\n      } catch (e: any) {\n        if (e.message?.includes(\"v1\")) {\n          setSelectionError(e.message);\n        } else {\n          setSelectionError(\n            \"Unable to retrieve required information about this token. Ensure your wallet is connected, then refresh the list.\"\n          );\n        }\n      }\n    },\n    [getAddress, onChange, closeDialog]\n  );\n\n  const resetAccountsWrapper = useCallback(() => {\n    setHolderString(\"\");\n    setTokenIdHolderString(\"\");\n    setSelectionError(\"\");\n    resetAccounts && resetAccounts();\n  }, [resetAccounts]);\n\n  const searchFilter = useCallback(\n    (option: NFTParsedTokenAccount) => {\n      if (!holderString) {\n        return true;\n      }\n      const optionString = (\n        (option.publicKey || \"\") +\n        \" \" +\n        (option.mintKey || \"\") +\n        \" \" +\n        (option.symbol || \"\") +\n        \" \" +\n        (option.name || \" \")\n      ).toLowerCase();\n      const searchString = holderString.toLowerCase();\n      return optionString.includes(searchString);\n    },\n    [holderString]\n  );\n\n  const marketChainTokens = marketsData?.tokens?.[chainId];\n  const featuredMarkets = marketsData?.tokenMarkets?.[chainId]?.[targetChain];\n\n  const featuredOptions = useMemo(() => {\n    // only tokens have featured markets\n    if (!nft && featuredMarkets) {\n      const ownedMarketTokens = options\n        .filter(\n          (option: NFTParsedTokenAccount) => featuredMarkets?.[option.mintKey]\n        )\n        .map(\n          (option) =>\n            ({\n              ...option,\n              markets: featuredMarkets[option.mintKey].markets,\n            } as MarketParsedTokenAccount)\n        );\n      return [\n        ...ownedMarketTokens,\n        ...Object.keys(featuredMarkets)\n          .filter(\n            (mintKey) =>\n              !ownedMarketTokens.find((option) => option.mintKey === mintKey)\n          )\n          .map(\n            (mintKey) =>\n              ({\n                amount: \"0\",\n                decimals: 0,\n                markets: featuredMarkets[mintKey].markets,\n                mintKey,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\", // if we can't look up by address, we can select the market that isn't in the list of holdings, but can't proceed since the balance will be 0\n                symbol: marketChainTokens?.[mintKey]?.symbol,\n                logo: marketChainTokens?.[mintKey]?.logo,\n              } as MarketParsedTokenAccount)\n          ),\n      ].filter(searchFilter);\n    }\n    return [];\n  }, [nft, marketChainTokens, featuredMarkets, options, searchFilter]);\n\n  const nonFeaturedOptions = useMemo(() => {\n    return options.filter(\n      (option: NFTParsedTokenAccount) =>\n        searchFilter(option) &&\n        // only tokens have featured markets\n        (nft || !featuredMarkets?.[option.mintKey])\n    );\n  }, [nft, options, featuredMarkets, searchFilter]);\n\n  const localFind = useCallback(\n    (address: string, tokenIdHolderString: string) => {\n      return options.find(\n        (x) =>\n          x.mintKey === address &&\n          (!tokenIdHolderString || x.tokenId === tokenIdHolderString)\n      );\n    },\n    [options]\n  );\n\n  //This is the effect which allows pasting an address in directly\n  useEffect(() => {\n    if (!isValidAddress || !getAddress) {\n      return;\n    }\n    if (useTokenId && !tokenIdHolderString) {\n      return;\n    }\n    setLoadingError(\"\");\n    let cancelled = false;\n    if (isValidAddress(holderString)) {\n      const option = localFind(holderString, tokenIdHolderString);\n      if (option) {\n        handleSelectOption(option);\n        return () => {\n          cancelled = true;\n        };\n      }\n      setLocalLoading(true);\n      setLoadingError(\"\");\n      getAddress(\n        holderString,\n        useTokenId ? tokenIdHolderString : undefined\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            if (result) {\n              handleSelectOption(result);\n            }\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            setLoadingError(\"Could not find the specified address.\");\n          }\n        }\n      );\n    }\n    return () => (cancelled = true);\n  }, [\n    holderString,\n    isValidAddress,\n    getAddress,\n    handleSelectOption,\n    localFind,\n    tokenIdHolderString,\n    useTokenId,\n  ]);\n\n  //TODO reset button\n  //TODO debounce & save hotloaded options as an option before automatically selecting\n  //TODO sigfigs function on the balance strings\n\n  const localLoader = (\n    <div className={classes.alignCenter}>\n      <CircularProgress />\n      <Typography variant=\"body2\">\n        {showLoader ? \"Loading available tokens\" : \"Searching for results\"}\n      </Typography>\n    </div>\n  );\n\n  const displayLocalError = (\n    <div className={classes.alignCenter}>\n      <Typography variant=\"body2\" color=\"error\">\n        {loadingError || selectionError}\n      </Typography>\n    </div>\n  );\n\n  const dialog = (\n    <Dialog\n      onClose={closeDialog}\n      aria-labelledby=\"simple-dialog-title\"\n      open={dialogIsOpen}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle>\n        <div id=\"simple-dialog-title\" className={classes.flexTitle}>\n          <Typography variant=\"h5\">Select a token</Typography>\n          <div className={classes.grower} />\n          <Tooltip title=\"Reload tokens\">\n            <IconButton onClick={resetAccountsWrapper}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        <Alert severity=\"info\">\n          You should always check for markets and liquidity before sending\n          tokens.{\" \"}\n          <Link\n            href={AVAILABLE_MARKETS_URL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Click here to see available markets for wrapped tokens.\n          </Link>\n        </Alert>\n        <TextField\n          variant=\"outlined\"\n          label=\"Search name or paste address\"\n          value={holderString}\n          onChange={(event) => setHolderString(event.target.value)}\n          fullWidth\n          margin=\"normal\"\n        />\n        {useTokenId ? (\n          <TextField\n            variant=\"outlined\"\n            label=\"Token Id\"\n            value={tokenIdHolderString}\n            onChange={(event) => setTokenIdHolderString(event.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n        ) : null}\n        {isLocalLoading || showLoader ? (\n          localLoader\n        ) : loadingError || selectionError ? (\n          displayLocalError\n        ) : (\n          <List component=\"div\" className={classes.tokenList}>\n            {featuredOptions.length ? (\n              <>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Featured {CHAINS_BY_ID[chainId].name} &gt;{\" \"}\n                  {CHAINS_BY_ID[targetChain].name} markets{\" \"}\n                  <Tooltip\n                    title={`Markets for these ${CHAINS_BY_ID[chainId].name} tokens exist for the corresponding tokens on ${CHAINS_BY_ID[targetChain].name}`}\n                  >\n                    <InfoOutlined\n                      fontSize=\"small\"\n                      style={{ verticalAlign: \"text-bottom\" }}\n                    />\n                  </Tooltip>\n                </Typography>\n                {featuredOptions.map((option) => {\n                  return (\n                    <ListItem\n                      component=\"div\"\n                      button\n                      onClick={() => handleSelectOption(option)}\n                      key={\n                        option.publicKey +\n                        option.mintKey +\n                        (option.tokenId || \"\")\n                      }\n                    >\n                      <RenderOption account={option} />\n                    </ListItem>\n                  );\n                })}\n                {nonFeaturedOptions.length ? (\n                  <>\n                    <Divider style={{ marginTop: 8, marginBottom: 16 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Other Assets\n                    </Typography>\n                  </>\n                ) : null}\n              </>\n            ) : null}\n            {nonFeaturedOptions.map((option) => {\n              return (\n                <ListItem\n                  component=\"div\"\n                  button\n                  onClick={() => handleSelectOption(option)}\n                  key={\n                    option.publicKey + option.mintKey + (option.tokenId || \"\")\n                  }\n                >\n                  <RenderOption account={option} />\n                </ListItem>\n              );\n            })}\n            {featuredOptions.length || nonFeaturedOptions.length ? null : (\n              <div className={classes.alignCenter}>\n                <Typography>No results found</Typography>\n              </div>\n            )}\n          </List>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n\n  const selectionChip = (\n    <div className={classes.selectionButtonContainer}>\n      <Button\n        onClick={openDialog}\n        disabled={disabled}\n        variant=\"outlined\"\n        startIcon={<KeyboardArrowDownIcon />}\n        className={classes.selectionButton}\n      >\n        {value ? (\n          <RenderOption account={value} />\n        ) : (\n          <Typography color=\"textSecondary\">Select a token</Typography>\n        )}\n      </Button>\n    </div>\n  );\n\n  return (\n    <>\n      {dialog}\n      {value && nft ? <NFTViewer value={value} chainId={chainId} /> : null}\n      {selectionChip}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  NFTImplementation,\n  TokenImplementation,\n} from \"@certusone/wormhole-sdk\";\nimport { WormholeAbi__factory } from \"@certusone/wormhole-sdk/lib/esm/ethers-contracts/abi\";\nimport { getAddress as getEthAddress } from \"@ethersproject/address\";\nimport React, { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  getMigrationAssetMap,\n  WORMHOLE_V1_ETH_ADDRESS,\n} from \"../../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  ethTokenToParsedTokenAccount,\n  getEthereumNFT,\n  getEthereumToken,\n  isValidEthereumAddress,\n} from \"../../utils/ethereum\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\nconst isWormholev1 = (provider: any, address: string, chainId: ChainId) => {\n  if (chainId !== CHAIN_ID_ETH) {\n    return Promise.resolve(false);\n  }\n  const connection = WormholeAbi__factory.connect(\n    WORMHOLE_V1_ETH_ADDRESS,\n    provider\n  );\n  return connection.isWrappedAsset(address);\n};\n\ntype EthereumSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  chainId: ChainId;\n  nft?: boolean;\n};\n\nexport default function EvmTokenPicker(\n  props: EthereumSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    tokenAccounts,\n    disabled,\n    resetAccounts,\n    chainId,\n    nft,\n  } = props;\n  const { provider, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const selectedTokenAccount: NFTParsedTokenAccount | undefined = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n\n  const shouldDisplayBalance = useCallback(\n    (tokenAccount: NFTParsedTokenAccount) => {\n      const selectedMintMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.mintKey.toLowerCase() ===\n          tokenAccount.mintKey.toLowerCase();\n      //added just in case we start displaying NFT balances again.\n      const selectedTokenIdMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.tokenId === tokenAccount.tokenId;\n      return !!(\n        tokenAccount.isNativeAsset || //The native asset amount isn't taken from covalent, so can be trusted.\n        (selectedMintMatch && selectedTokenIdMatch)\n      );\n    },\n    [selectedTokenAccount]\n  );\n\n  const isMigrationEligible = useCallback(\n    (address: string) => {\n      const assetMap = getMigrationAssetMap(chainId);\n      return !!assetMap.get(getEthAddress(address));\n    },\n    [chainId]\n  );\n\n  const getAddress: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount> = useCallback(\n    async (address: string, tokenId?: string) => {\n      if (provider && signerAddress && isReady) {\n        try {\n          const tokenAccount = await (nft\n            ? getEthereumNFT(address, provider)\n            : getEthereumToken(address, provider));\n          if (!tokenAccount) {\n            return Promise.reject(\"Could not find the specified token.\");\n          }\n          if (nft && !tokenId) {\n            return Promise.reject(\"Token ID is required.\");\n          } else if (nft && tokenId) {\n            return ethNFTToNFTParsedTokenAccount(\n              tokenAccount as NFTImplementation,\n              tokenId,\n              signerAddress\n            );\n          } else {\n            return ethTokenToParsedTokenAccount(\n              tokenAccount as TokenImplementation,\n              signerAddress\n            );\n          }\n        } catch (e) {\n          return Promise.reject(\"Unable to retrive the specific token.\");\n        }\n      } else {\n        return Promise.reject({ error: \"Wallet is not connected.\" });\n      }\n    },\n    [isReady, nft, provider, signerAddress]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      let v1 = false;\n      try {\n        v1 = await isWormholev1(provider, account.mintKey, chainId);\n      } catch (e) {\n        //For now, just swallow this one.\n      }\n      const migration = isMigrationEligible(account.mintKey);\n      if (v1 === true && !migration) {\n        throw new Error(\n          \"Wormhole v1 assets cannot be transferred with this bridge.\"\n        );\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [chainId, onChange, provider, isMigrationEligible]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(\n        account,\n        isMigrationEligible,\n        nft || false,\n        shouldDisplayBalance\n      );\n    },\n    [nft, isMigrationEligible, shouldDisplayBalance]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      useTokenId={nft}\n      onChange={onChangeWrapper}\n      isValidAddress={isValidEthereumAddress}\n      getAddress={getAddress}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={tokenAccounts?.isFetching}\n      nft={nft || false}\n      chainId={chainId}\n    />\n  );\n}\n","import {\n  createStyles,\n  IconButton,\n  makeStyles,\n  Tooltip,\n} from \"@material-ui/core\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    inlineContentWrapper: {\n      display: \"inline-block\",\n      flexGrow: 1,\n    },\n    flexWrapper: {\n      \"& > *\": {\n        margin: \".5rem\",\n      },\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  })\n);\n\nexport default function RefreshButtonWrapper({\n  children,\n  callback,\n}: {\n  children: JSX.Element;\n  callback: () => any;\n}) {\n  const classes = useStyles();\n\n  const refreshWrapper = (\n    <div className={classes.flexWrapper}>\n      <div className={classes.inlineContentWrapper}>{children}</div>\n      <Tooltip title=\"Reload Tokens\">\n        <IconButton onClick={callback}>\n          <RefreshIcon />\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n\n  return refreshWrapper;\n}\n","import { ParsedTokenAccount } from \"../store/transferSlice\";\n\nexport const sortParsedTokenAccounts = (\n  a: ParsedTokenAccount,\n  b: ParsedTokenAccount\n) =>\n  a.isNativeAsset && !b.isNativeAsset\n    ? -1\n    : !a.isNativeAsset && b.isNativeAsset\n    ? 1\n    : a.symbol && b.symbol\n    ? a.symbol.localeCompare(b.symbol)\n    : a.symbol\n    ? -1\n    : b.symbol\n    ? 1\n    : 0;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  MIGRATION_ASSET_MAP,\n  WORMHOLE_V1_MINT_AUTHORITY,\n} from \"../../utils/consts\";\nimport { ExtractedMintInfo } from \"../../utils/solana\";\nimport { sortParsedTokenAccounts } from \"../../utils/sort\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype SolanaSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: NFTParsedTokenAccount | null) => void;\n  accounts: DataWrapper<NFTParsedTokenAccount[]> | null | undefined;\n  disabled: boolean;\n  mintAccounts:\n    | DataWrapper<Map<string, ExtractedMintInfo | null> | undefined>\n    | undefined;\n  resetAccounts: (() => void) | undefined;\n  nft?: boolean;\n};\n\nconst isMigrationEligible = (address: string) => {\n  return !!MIGRATION_ASSET_MAP.get(address);\n};\n\nexport default function SolanaSourceTokenSelector(\n  props: SolanaSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    disabled,\n    resetAccounts,\n    nft,\n    accounts,\n    mintAccounts,\n  } = props;\n  const tokenMap = useSolanaTokenMap();\n  const mintAddresses = useMemo(() => {\n    const output: string[] = [];\n    mintAccounts?.data?.forEach(\n      (mintAuth, mintAddress) => mintAddress && output.push(mintAddress)\n    );\n    return output;\n  }, [mintAccounts?.data]);\n  const metaplex = useMetaplexData(mintAddresses);\n  const markets = useMarketsMap(!nft);\n  const targetChain = useSelector(selectTransferTargetChain);\n\n  const memoizedTokenMap: Map<String, TokenInfo> = useMemo(() => {\n    const output = new Map<String, TokenInfo>();\n\n    if (tokenMap.data) {\n      for (const data of tokenMap.data) {\n        if (data && data.address) {\n          output.set(data.address, data);\n        }\n      }\n    }\n\n    return output;\n  }, [tokenMap]);\n\n  const getLogo = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.logo) ||\n        memoizedTokenMap.get(account.mintKey)?.logoURI ||\n        metaplex.data?.get(account.mintKey)?.data?.uri ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getSymbol = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.symbol) ||\n        memoizedTokenMap.get(account.mintKey)?.symbol ||\n        metaplex.data?.get(account.mintKey)?.data?.symbol ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getName = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.name) ||\n        memoizedTokenMap.get(account.mintKey)?.name ||\n        metaplex.data?.get(account.mintKey)?.data?.name ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  //This exists to remove NFTs from the list of potential options. It requires reading the metaplex data, so it would be\n  //difficult to do before this point.\n  const filteredOptions = useMemo(() => {\n    const array = accounts?.data || [];\n    const tokenList = array.filter((x) => {\n      const zeroBalance = x.amount === \"0\";\n      if (zeroBalance) {\n        return false;\n      }\n      const isNFT =\n        x.decimals === 0 && metaplex.data?.get(x.mintKey)?.data?.uri;\n      const is721CompatibleNFT =\n        isNFT && mintAccounts?.data?.get(x.mintKey)?.supply === \"1\";\n      return nft ? is721CompatibleNFT : !isNFT;\n    });\n    tokenList.sort(sortParsedTokenAccounts);\n    return tokenList;\n  }, [mintAccounts?.data, metaplex.data, nft, accounts]);\n\n  const accountsWithMetadata = useMemo(() => {\n    return filteredOptions.map((account) => {\n      const logo = getLogo(account);\n      const symbol = getSymbol(account);\n      const name = getName(account);\n\n      const uri = getLogo(account);\n\n      return {\n        ...account,\n        name,\n        symbol,\n        logo,\n        uri,\n      };\n    });\n  }, [filteredOptions, getLogo, getName, getSymbol]);\n\n  const isLoading =\n    accounts?.isFetching || metaplex.isFetching || tokenMap.isFetching;\n\n  const isWormholev1 = useCallback(\n    (address: string) => {\n      //This is a v1 wormhole token on testnet\n      //address = \"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\";\n\n      //Anything we find in the features market map will be a non-v1 token. This has to short circuit the other checks\n      //As the featured market parsed token accounts are spoofed in by the token picker and lack valid metadata.\n      if (!nft) {\n        const marketsData = markets.data;\n        const featuredMarkets =\n          marketsData?.tokenMarkets?.[CHAIN_ID_SOLANA]?.[targetChain];\n        if (!!featuredMarkets?.[address]) {\n          return false;\n        }\n      }\n\n      if (!props.mintAccounts?.data) {\n        return true; //These should never be null by this point\n      }\n      const mintAuthority = props.mintAccounts.data.get(address)?.mintAuthority;\n\n      if (!mintAuthority) {\n        return true; //We should never fail to pull the mint of an account.\n      }\n\n      if (mintAuthority === WORMHOLE_V1_MINT_AUTHORITY) {\n        return true; //This means the mint was created by the wormhole v1 contract, and we want to disallow its transfer.\n      }\n\n      return false;\n    },\n    [props.mintAccounts, markets.data, nft, targetChain]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (newValue: NFTParsedTokenAccount | null) => {\n      let v1 = false;\n      if (newValue === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      try {\n        v1 = isWormholev1(newValue.mintKey);\n      } catch (e) {\n        //swallow for now\n      }\n\n      if (v1 && !isMigrationEligible(newValue.mintKey)) {\n        throw Error(\n          \"Wormhole v1 assets should not be transferred with this bridge.\"\n        );\n      }\n\n      onChange(newValue);\n      return Promise.resolve();\n    },\n    [isWormholev1, onChange]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, isMigrationEligible, nft || false);\n    },\n    [nft]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={accountsWithMetadata}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={nft || false}\n      chainId={CHAIN_ID_SOLANA}\n    />\n  );\n}\n","import { CHAIN_ID_TERRA, isNativeDenom } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useTerraNativeBalances from \"../../hooks/useTerraNativeBalances\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { SUPPORTED_TERRA_TOKENS, TERRA_HOST } from \"../../utils/consts\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  isValidTerraAddress,\n  NATIVE_TERRA_DECIMALS,\n} from \"../../utils/terra\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype TerraTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function TerraTokenPicker(props: TerraTokenPickerProps) {\n  const { value, onChange, disabled } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_TERRA);\n  const nativeRefresh = useRef<() => void>(() => {});\n  const { balances, isLoading: nativeIsLoading } = useTerraNativeBalances(\n    walletAddress,\n    nativeRefresh\n  );\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const terraTokenArray = useMemo(() => {\n    const balancesItems =\n      balances && walletAddress\n        ? Object.keys(balances).map((denom) =>\n            // ({\n            //   protocol: \"native\",\n            //   symbol: formatNativeDenom(denom),\n            //   token: denom,\n            //   icon: getNativeTerraIcon(formatNativeDenom(denom)),\n            //   balance: balances[denom],\n            // } as TerraTokenMetadata)\n\n            //TODO support non-natives in the SUPPORTED_TERRA_TOKENS\n            //This token account makes a lot of assumptions\n            createParsedTokenAccount(\n              walletAddress,\n              denom,\n              balances[denom], //amount\n              NATIVE_TERRA_DECIMALS, //TODO actually get decimals rather than hardcode\n              0, //uiAmount is unused\n              formatUnits(balances[denom], NATIVE_TERRA_DECIMALS), //uiAmountString\n              formatNativeDenom(denom), // symbol\n              undefined, //name\n              getNativeTerraIcon(formatNativeDenom(denom)), //logo\n              true //is native asset\n            )\n          )\n        : [];\n    return balancesItems.filter((metadata) =>\n      SUPPORTED_TERRA_TOKENS.includes(metadata.mintKey)\n    );\n    // const values = tokenMap.data?.mainnet;\n    // const tokenMapItems = Object.values(values || {}) || [];\n    // return [...balancesItems, ...tokenMapItems];\n  }, [\n    walletAddress,\n    balances,\n    // tokenMap\n  ]);\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupTerraAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Wallet not connected\");\n      }\n      const lcd = new LCDClient(TERRA_HOST);\n      return lcd.wasm\n        .contractQuery(lookupAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(lookupAsset, {\n              balance: {\n                address: walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                return createParsedTokenAccount(\n                  walletAddress,\n                  lookupAsset,\n                  balance.balance.toString(),\n                  info.decimals,\n                  Number(formatUnits(balance.balance, info.decimals)),\n                  formatUnits(balance.balance, info.decimals),\n                  info.symbol,\n                  info.name\n                );\n              } else {\n                throw new Error(\"Failed to retrieve Terra account.\");\n              }\n            })\n        )\n        .catch(() => {\n          return Promise.reject();\n        });\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    return isValidTerraAddress(address) && !isNativeDenom(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={terraTokenArray || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupTerraAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_TERRA}\n    />\n  );\n}\n","//import Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetSourceParsedTokens from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  setSourceParsedTokenAccount as setNFTSourceParsedTokenAccount,\n  setSourceWalletAddress as setNFTSourceWalletAddress,\n} from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport {\n  ParsedTokenAccount,\n  setSourceParsedTokenAccount as setTransferSourceParsedTokenAccount,\n  setSourceWalletAddress as setTransferSourceWalletAddress,\n} from \"../../store/transferSlice\";\nimport EvmTokenPicker from \"./EvmTokenPicker\";\nimport RefreshButtonWrapper from \"./RefreshButtonWrapper\";\nimport SolanaTokenPicker from \"./SolanaTokenPicker\";\nimport TerraTokenPicker from \"./TerraTokenPicker\";\n\ntype TokenSelectorProps = {\n  disabled: boolean;\n  nft?: boolean;\n};\n\nexport const TokenSelector = (props: TokenSelectorProps) => {\n  const { disabled, nft } = props;\n  const dispatch = useDispatch();\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceParsedTokenAccount = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n  const walletIsReady = useIsWalletReady(lookupChain);\n\n  const setSourceParsedTokenAccount = nft\n    ? setNFTSourceParsedTokenAccount\n    : setTransferSourceParsedTokenAccount;\n  const setSourceWalletAddress = nft\n    ? setNFTSourceWalletAddress\n    : setTransferSourceWalletAddress;\n\n  const handleOnChange = useCallback(\n    (newTokenAccount: ParsedTokenAccount | null) => {\n      if (!newTokenAccount) {\n        dispatch(setSourceParsedTokenAccount(undefined));\n        dispatch(setSourceWalletAddress(undefined));\n      } else if (newTokenAccount !== undefined && walletIsReady.walletAddress) {\n        dispatch(setSourceParsedTokenAccount(newTokenAccount));\n        dispatch(setSourceWalletAddress(walletIsReady.walletAddress));\n      }\n    },\n    [\n      dispatch,\n      walletIsReady,\n      setSourceParsedTokenAccount,\n      setSourceWalletAddress,\n    ]\n  );\n\n  const maps = useGetSourceParsedTokens(nft);\n  const resetAccountWrapper = maps?.resetAccounts || (() => {}); //This should never happen.\n\n  //This is only for errors so bad that we shouldn't even mount the component\n  const fatalError =\n    isEVMChain(lookupChain) &&\n    lookupChain !== CHAIN_ID_TERRA &&\n    maps?.tokenAccounts?.error; //Terra & ETH can proceed because it has advanced mode\n\n  const content = fatalError ? (\n    <RefreshButtonWrapper callback={resetAccountWrapper}>\n      <Typography>{fatalError}</Typography>\n    </RefreshButtonWrapper>\n  ) : lookupChain === CHAIN_ID_SOLANA ? (\n    <SolanaTokenPicker\n      value={sourceParsedTokenAccount || null}\n      onChange={handleOnChange}\n      disabled={disabled}\n      accounts={maps?.tokenAccounts}\n      mintAccounts={maps?.mintAccounts}\n      resetAccounts={maps?.resetAccounts}\n      nft={nft}\n    />\n  ) : isEVMChain(lookupChain) ? (\n    <EvmTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      tokenAccounts={maps?.tokenAccounts}\n      resetAccounts={maps?.resetAccounts}\n      chainId={lookupChain}\n      nft={nft}\n    />\n  ) : lookupChain === CHAIN_ID_TERRA ? (\n    <TerraTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : (\n    <TextField\n      variant=\"outlined\"\n      placeholder=\"Asset\"\n      fullWidth\n      value={\"Not Implemented\"}\n      disabled={true}\n    />\n  );\n\n  return <div>{content}</div>;\n};\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { incrementStep, setSourceChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsSourceComplete,\n  selectNFTShouldLockFields,\n  selectNFTSourceBalanceString,\n  selectNFTSourceChain,\n  selectNFTSourceError,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const uiAmountString = useSelector(selectNFTSourceBalanceString);\n  const error = useSelector(selectNFTSourceError);\n  const isSourceComplete = useSelector(selectNFTIsSourceComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select an NFT to send through the Wormhole NFT Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/nft-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              startIcon={<VerifiedUser />}\n            >\n              NFT Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS_WITH_NFT_SUPPORT}\n      />\n      {isEVMChain(sourceChain) ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs which implement ERC-721 are supported.\n        </Alert>\n      ) : null}\n      {sourceChain === CHAIN_ID_SOLANA ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs with a supply of 1 are supported.\n        </Alert>\n      ) : null}\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} nft={true} />\n        </div>\n      ) : null}\n      <LowBalanceWarning chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer 1 NFT of</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        <span>from</span>\n        <SmartAddress\n          chainId={sourceChain}\n          address={sourceParsedTokenAccount?.publicKey}\n        />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n      {sourceParsedTokenAccount ? (\n        <NFTViewer value={sourceParsedTokenAccount} chainId={sourceChain} />\n      ) : null}\n    </>\n  );\n}\n","import {\n  canonicalAddress,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { arrayify, zeroPad } from \"@ethersproject/bytes\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setTargetAddressHex as setNFTTargetAddressHex } from \"../store/nftSlice\";\nimport {\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n  selectTransferTargetParsedTokenAccount,\n} from \"../store/selectors\";\nimport { setTargetAddressHex as setTransferTargetAddressHex } from \"../store/transferSlice\";\n\nfunction useSyncTargetAddress(shouldFire: boolean, nft?: boolean) {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const { signerAddress } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const targetAsset = useSelector(\n    nft ? selectNFTTargetAsset : selectTransferTargetAsset\n  );\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const targetTokenAccountPublicKey = targetParsedTokenAccount?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const setTargetAddressHex = nft\n    ? setNFTTargetAddressHex\n    : setTransferTargetAddressHex;\n  useEffect(() => {\n    if (shouldFire) {\n      let cancelled = false;\n      if (isEVMChain(targetChain) && signerAddress) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(zeroPad(arrayify(signerAddress), 32))\n          )\n        );\n      }\n      // TODO: have the user explicitly select an account on solana\n      else if (\n        !nft && // only support existing, non-derived token accounts for token transfers (nft flow doesn't check balance)\n        targetChain === CHAIN_ID_SOLANA &&\n        targetTokenAccountPublicKey\n      ) {\n        // use the target's TokenAccount if it exists\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(new PublicKey(targetTokenAccountPublicKey).toBytes(), 32)\n            )\n          )\n        );\n      } else if (targetChain === CHAIN_ID_SOLANA && solPK && targetAsset) {\n        // otherwise, use the associated token account (which we create in the case it doesn't exist)\n        (async () => {\n          try {\n            const associatedTokenAccount =\n              await Token.getAssociatedTokenAddress(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                new PublicKey(targetAsset), // this might error\n                solPK\n              );\n            if (!cancelled) {\n              dispatch(\n                setTargetAddressHex(\n                  uint8ArrayToHex(zeroPad(associatedTokenAccount.toBytes(), 32))\n                )\n              );\n            }\n          } catch (e) {\n            if (!cancelled) {\n              dispatch(setTargetAddressHex(undefined));\n            }\n          }\n        })();\n      } else if (\n        targetChain === CHAIN_ID_TERRA &&\n        terraWallet &&\n        terraWallet.walletAddress\n      ) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(canonicalAddress(terraWallet.walletAddress), 32)\n            )\n          )\n        );\n      } else {\n        dispatch(setTargetAddressHex(undefined));\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    dispatch,\n    shouldFire,\n    targetChain,\n    signerAddress,\n    solPK,\n    targetAsset,\n    targetTokenAccountPublicKey,\n    terraWallet,\n    nft,\n    setTargetAddressHex,\n  ]);\n}\n\nexport default useSyncTargetAddress;\n","import {\n  CHAIN_ID_SOLANA,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTShouldLockFields,\n  selectNFTSourceChain,\n  selectNFTTargetAddressHex,\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectNFTTargetError,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const chains = useMemo(\n    () => CHAINS_WITH_NFT_SUPPORT.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAsset = useSelector(selectNFTTargetAsset);\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  let tokenId;\n  try {\n    tokenId =\n      originChain === CHAIN_ID_SOLANA && originAsset\n        ? BigNumber.from(\n            new PublicKey(hexToUint8Array(originAsset)).toBytes()\n          ).toString()\n        : originTokenId;\n  } catch (e) {\n    tokenId = originTokenId;\n  }\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  const error = useSelector(selectNFTTargetError);\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  useSyncTargetAddress(!shouldLockFields, true);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        select\n        fullWidth\n        variant=\"outlined\"\n        value={targetChain}\n        onChange={handleTargetChange}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        className={classes.transferField}\n        value={readableTargetAddress}\n        disabled={true}\n      />\n      {targetAsset !== ethers.constants.AddressZero ? (\n        <>\n          <TextField\n            label=\"Token Address\"\n            fullWidth\n            variant=\"outlined\"\n            className={classes.transferField}\n            value={targetAsset || \"\"}\n            disabled={true}\n          />\n          {isEVMChain(targetChain) ? (\n            <TextField\n              variant=\"outlined\"\n              label=\"TokenId\"\n              fullWidth\n              className={classes.transferField}\n              value={tokenId || \"\"}\n              disabled={true}\n            />\n          ) : null}\n        </>\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your NFT.\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary methodType=\"nft\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      {targetChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={!isTargetComplete} //|| !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTTargetAddressHex,\n  selectNFTTargetChain,\n} from \"../../store/selectors\";\nimport { hexToNativeString } from \"@certusone/wormhole-sdk\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useSelector(selectNFTTargetAddressHex);\n  const targetAddressNative = hexToNativeString(targetAddress, targetChain);\n\n  const explainerContent =\n    targetChain && targetAddressNative ? (\n      <>\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={targetAddressNative} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport { setSourceChain, setStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTActiveStep,\n  selectNFTIsRedeemComplete,\n  selectNFTIsRedeeming,\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction NFT() {\n  useCheckIfWormholeWrapped(true);\n  useFetchTargetAsset(true);\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectNFTActiveStep);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const isRedeemComplete = useSelector(selectNFTIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathTargetChain = query.get(\"targetChain\");\n\n  //This effect initializes the state based on the path params\n  useEffect(() => {\n    if (!pathSourceChain && !pathTargetChain) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId | undefined = CHAINS_WITH_NFT_SUPPORT.find(\n        (x) => parseFloat(pathSourceChain || \"\") === x.id\n      )?.id;\n      const targetChain: ChainId | undefined = CHAINS_WITH_NFT_SUPPORT.find(\n        (x) => parseFloat(pathTargetChain || \"\") === x.id\n      )?.id;\n\n      if (sourceChain === targetChain) {\n        return;\n      }\n      if (sourceChain) {\n        dispatch(setSourceChain(sourceChain));\n      }\n      if (targetChain) {\n        dispatch(setTargetChain(targetChain));\n      }\n    } catch (e) {\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathTargetChain, dispatch]);\n\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1. Source\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))} icon={null}>\n            2. Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled icon={null}>\n            3. Send NFT\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3} completed={isRedeemComplete}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete || isRedeemComplete}\n            icon={null}\n          >\n            4. Redeem NFT\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default NFT;\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_OASIS,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport {\n  Button,\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { getMetaplexData } from \"../hooks/useMetaplexData\";\nimport { COLORS } from \"../muiTheme\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BETA_CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  getEthereumNFT,\n  isNFT,\n  isValidEthereumAddress,\n} from \"../utils/ethereum\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport NFTViewer from \"./TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  originHeader: {\n    marginTop: theme.spacing(4),\n  },\n  viewButtonWrapper: {\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n  loaderWrapper: {\n    margin: theme.spacing(2),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function NFTOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const { provider, signerAddress } = useEthereumProvider();\n  const [lookupChain, setLookupChain] = useState(CHAIN_ID_ETH);\n  const { isReady, statusMessage } = useIsWalletReady(lookupChain);\n  const [lookupAsset, setLookupAsset] = useState(\"\");\n  const [lookupTokenId, setLookupTokenId] = useState(\"\");\n  const [lookupError, setLookupError] = useState(\"\");\n  const [parsedTokenAccount, setParsedTokenAccount] = useState<\n    NFTParsedTokenAccount | undefined\n  >(undefined);\n  const [originInfo, setOriginInfo] = useState<\n    WormholeWrappedNFTInfo | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleChainChange = useCallback((event) => {\n    setLookupChain(event.target.value);\n  }, []);\n  const handleAssetChange = useCallback((event) => {\n    setLookupAsset(event.target.value);\n  }, []);\n  const handleTokenIdChange = useCallback((event) => {\n    setLookupTokenId(event.target.value);\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    setLookupError(\"\");\n    setParsedTokenAccount(undefined);\n    setOriginInfo(undefined);\n    if (\n      isReady &&\n      provider &&\n      signerAddress &&\n      isEVMChain(lookupChain) &&\n      lookupAsset &&\n      lookupTokenId\n    ) {\n      if (isValidEthereumAddress(lookupAsset)) {\n        (async () => {\n          setIsLoading(true);\n          try {\n            const token = await getEthereumNFT(lookupAsset, provider);\n            const result = await isNFT(token);\n            if (result) {\n              const newParsedTokenAccount = await ethNFTToNFTParsedTokenAccount(\n                token,\n                lookupTokenId,\n                signerAddress\n              );\n              const info = await getOriginalAssetEth(\n                getNFTBridgeAddressForChain(lookupChain),\n                provider,\n                lookupAsset,\n                lookupTokenId,\n                lookupChain\n              );\n              if (!cancelled) {\n                setIsLoading(false);\n                setParsedTokenAccount(newParsedTokenAccount);\n                setOriginInfo(info);\n              }\n            } else if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          } catch (e) {\n            console.error(e);\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          }\n        })();\n      } else {\n        setLookupError(\"Invalid address\");\n      }\n    } else if (lookupChain === CHAIN_ID_SOLANA && lookupAsset) {\n      (async () => {\n        try {\n          setIsLoading(true);\n          const [metadata] = await getMetaplexData([lookupAsset]);\n          if (metadata) {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            const info = await getOriginalAssetSol(\n              connection,\n              SOL_NFT_BRIDGE_ADDRESS,\n              lookupAsset\n            );\n            if (!cancelled) {\n              setIsLoading(false);\n              setParsedTokenAccount({\n                amount: \"0\",\n                decimals: 0,\n                mintKey: lookupAsset,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\",\n                uri: metadata.data.uri,\n              });\n              setOriginInfo(info);\n            }\n          } else {\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\"Error fetching metadata\");\n            }\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            setIsLoading(false);\n            setLookupError(\"Invalid token\");\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    isReady,\n    provider,\n    signerAddress,\n    lookupChain,\n    lookupAsset,\n    lookupTokenId,\n  ]);\n  const readableAddress =\n    originInfo &&\n    originInfo.chainId &&\n    originInfo.assetAddress &&\n    hexToNativeString(\n      uint8ArrayToHex(originInfo.assetAddress),\n      originInfo.chainId\n    );\n  const displayError =\n    (isEVMChain(lookupChain) && statusMessage) || lookupError;\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <HeaderText white>NFT Origin Verifier</HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>\n          <Alert severity=\"info\" variant=\"outlined\">\n            This page allows you to find where a Wormhole-bridged NFT was\n            originally minted so you can verify its authenticity.\n          </Alert>\n          <TextField\n            select\n            variant=\"outlined\"\n            label=\"Chain\"\n            value={lookupChain}\n            onChange={handleChainChange}\n            fullWidth\n            margin=\"normal\"\n          >\n            {CHAINS_WITH_NFT_SUPPORT.filter(({ id }) =>\n              isBeta ? true : !BETA_CHAINS.includes(id)\n            ).map(({ id, name }) => (\n              <MenuItem key={id} value={id}>\n                {name}\n              </MenuItem>\n            ))}\n          </TextField>\n          {isEVMChain(lookupChain) ? (\n            <KeyAndBalance chainId={lookupChain} />\n          ) : null}\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n            label=\"Paste an address\"\n            value={lookupAsset}\n            onChange={handleAssetChange}\n          />\n          {isEVMChain(lookupChain) ? (\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              label=\"Paste a tokenId\"\n              value={lookupTokenId}\n              onChange={handleTokenIdChange}\n            />\n          ) : null}\n          {displayError ? (\n            <Typography align=\"center\" color=\"error\">\n              {displayError}\n            </Typography>\n          ) : null}\n          {isLoading ? (\n            <div className={classes.loaderWrapper}>\n              <CircularProgress />\n            </div>\n          ) : null}\n          {parsedTokenAccount ? (\n            <NFTViewer value={parsedTokenAccount} chainId={lookupChain} />\n          ) : null}\n          {originInfo ? (\n            <>\n              <Typography\n                variant=\"h5\"\n                gutterBottom\n                className={classes.originHeader}\n              >\n                Origin Info\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Chain: {CHAINS_BY_ID[originInfo.chainId].name}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Address: {readableAddress}\n              </Typography>\n              {originInfo.chainId === CHAIN_ID_SOLANA ? null : (\n                <Typography variant=\"body2\" gutterBottom>\n                  Token ID: {originInfo.tokenId}\n                </Typography>\n              )}\n              <div className={classes.viewButtonWrapper}>\n                {originInfo.chainId === CHAIN_ID_SOLANA ? (\n                  <Button\n                    href={`https://solscan.io/token/${readableAddress}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Solscan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_BSC ? (\n                  <Button\n                    href={`https://bscscan.com/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on BscScan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_POLYGON ? (\n                  <Button\n                    href={`https://opensea.io/assets/matic/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_AVAX ? (\n                  <Button\n                    href={`https://snowtrace.io/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Snowtrace\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_OASIS ? null : (\n                  <Button\n                    href={`https://opensea.io/assets/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                )}\n              </div>\n            </>\n          ) : null}\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","import { MARKETS } from \"@project-serum/serum\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport interface Markets {\n  [coin: string]: {\n    publicKey?: PublicKey;\n    name: string;\n    deprecated?: boolean;\n  };\n}\n\nexport const serumMarkets = (() => {\n  const m: Markets = {};\n  MARKETS.forEach((market) => {\n    const coin = market.name.split(\"/\")[0];\n    if (m[coin]) {\n      // Only override a market if it's not deprecated\t.\n      if (!m.deprecated) {\n        m[coin] = {\n          publicKey: market.address,\n          name: market.name.split(\"/\").join(\"\"),\n        };\n      }\n    } else {\n      m[coin] = {\n        publicKey: market.address,\n        name: market.name.split(\"/\").join(\"\"),\n      };\n    }\n  });\n\n  m[\"USDC\"] = m[\"USDT\"];\n\n  return m;\n})();\n\n// Create a cached API wrapper to avoid rate limits.\nclass PriceStore {\n  cache: Map<String, number | undefined>;\n\n  constructor() {\n    this.cache = new Map();\n  }\n\n  async getPrice(\n    connection: Connection,\n    marketName: string\n  ): Promise<number | undefined> {\n    return new Promise((resolve, reject) => {\n      if (this.cache.get(marketName) === undefined) {\n        fetch(`https://serum-api.bonfida.com/orderbooks/${marketName}`).then(\n          (resp) => {\n            resp.json().then((resp) => {\n              if (resp.data.asks === null || resp.data.bids === null) {\n                resolve(undefined);\n              } else if (\n                resp.data.asks.length === 0 &&\n                resp.data.bids.length === 0\n              ) {\n                resolve(undefined);\n              } else if (resp.data.asks.length === 0) {\n                resolve(resp.data.bids[0].price);\n              } else if (resp.data.bids.length === 0) {\n                resolve(resp.data.asks[0].price);\n              } else {\n                const mid =\n                  (resp.data.asks[0].price + resp.data.bids[0].price) / 2.0;\n                this.cache.set(marketName, mid);\n                resolve(this.cache.get(marketName));\n              }\n            });\n          }\n        );\n      } else {\n        return resolve(this.cache.get(marketName));\n      }\n    });\n  }\n}\n\nexport const priceStore = new PriceStore();\n","import { ChainId, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type EvmMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst ERC20_BASIC_ABI = [\n  \"function name() view returns (string name)\",\n  \"function symbol() view returns (string symbol)\",\n  \"function decimals() view returns (uint8 decimals)\",\n];\n\nconst handleError = () => {\n  return undefined;\n};\n\nconst fetchSingleMetadata = async (\n  address: string,\n  provider: Provider\n): Promise<EvmMetadata> => {\n  const contract = new ethers.Contract(address, ERC20_BASIC_ABI, provider);\n  const [name, symbol, decimals] = await Promise.all([\n    contract.name().catch(handleError),\n    contract.symbol().catch(handleError),\n    contract.decimals().catch(handleError),\n  ]);\n  return { tokenName: name, symbol, decimals };\n};\n\nconst fetchEthMetadata = async (addresses: string[], provider: Provider) => {\n  const promises: Promise<EvmMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, provider));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, EvmMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useEvmMetadata(\n  addresses: string[],\n  chainId: ChainId\n): DataWrapper<Map<string, EvmMetadata>> {\n  const { isReady } = useIsWalletReady(chainId, false);\n  const { provider } = useEthereumProvider();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, EvmMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length && provider && isReady && isEVMChain(chainId)) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchEthMetadata(addresses, provider).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, provider, isReady, chainId]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useEvmMetadata;\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport type TerraMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (address: string, lcd: LCDClient) =>\n  lcd.wasm\n    .contractQuery(address, {\n      token_info: {},\n    })\n    .then(\n      ({ symbol, name: tokenName, decimals }: any) =>\n        ({\n          symbol,\n          tokenName,\n          decimals,\n        } as TerraMetadata)\n    );\n\nconst fetchTerraMetadata = async (addresses: string[]) => {\n  const lcd = new LCDClient(TERRA_HOST);\n  const promises: Promise<TerraMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, lcd));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, TerraMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useTerraMetadata = (\n  addresses: string[]\n): DataWrapper<Map<string, TerraMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, TerraMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchTerraMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useTerraMetadata;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectTerraTokenMap } from \"../store/selectors\";\nimport {\n  errorTerraTokenMap,\n  fetchTerraTokenMap,\n  receiveTerraTokenMap,\n} from \"../store/tokenSlice\";\nimport { TERRA_TOKEN_METADATA_URL } from \"../utils/consts\";\n\nexport type TerraTokenMetadata = {\n  protocol: string;\n  symbol: string;\n  token: string;\n  icon: string;\n  name?: string;\n  balance?: string; // populated by native tokens, could move to a type that extends this\n};\n\nexport type TerraTokenMap = {\n  mainnet: {\n    [address: string]: TerraTokenMetadata;\n  };\n};\n\nconst useTerraTokenMap = (shouldFire: boolean): DataWrapper<TerraTokenMap> => {\n  const terraTokenMap = useSelector(selectTerraTokenMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (terraTokenMap.data === undefined ||\n      (terraTokenMap.data === null && !terraTokenMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getTerraTokenMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return terraTokenMap;\n};\n\nconst getTerraTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchTerraTokenMap());\n  axios.get(TERRA_TOKEN_METADATA_URL).then(\n    (response) => {\n      dispatch(receiveTerraTokenMap(response.data as TerraTokenMap));\n    },\n    (error) => {\n      dispatch(errorTerraTokenMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useTerraTokenMap;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useMemo } from \"react\";\nimport { DataWrapper, getEmptyDataWrapper } from \"../store/helpers\";\nimport { logoOverrides } from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useEvmMetadata, { EvmMetadata } from \"./useEvmMetadata\";\nimport useMetaplexData from \"./useMetaplexData\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraMetadata, { TerraMetadata } from \"./useTerraMetadata\";\nimport useTerraTokenMap, { TerraTokenMap } from \"./useTerraTokenMap\";\n\nexport type GenericMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n  //TODO more items\n  raw?: any;\n};\n\nconst constructSolanaMetadata = (\n  addresses: string[],\n  solanaTokenMap: DataWrapper<TokenInfo[]>,\n  metaplexData: DataWrapper<Map<string, Metadata | undefined> | undefined>\n) => {\n  const isFetching = solanaTokenMap.isFetching || metaplexData?.isFetching;\n  const error = solanaTokenMap.error || metaplexData?.isFetching;\n  const receivedAt = solanaTokenMap.receivedAt && metaplexData?.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metaplex = metaplexData?.data?.get(address);\n    const tokenInfo = solanaTokenMap.data?.find((x) => x.address === address);\n    //Both this and the token picker, at present, give priority to the tokenmap\n    const obj = {\n      symbol: metaplex?.data?.symbol || tokenInfo?.symbol || undefined,\n      logo: tokenInfo?.logoURI || undefined, //TODO is URI on metaplex actually the logo? If not, where is it?\n      tokenName: metaplex?.data?.name || tokenInfo?.name || undefined,\n      decimals: tokenInfo?.decimals || undefined, //TODO decimals are actually on the mint, not the metaplex account.\n      raw: metaplex,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructTerraMetadata = (\n  addresses: string[],\n  tokenMap: DataWrapper<TerraTokenMap>,\n  terraMetadata: DataWrapper<Map<string, TerraMetadata>>\n) => {\n  const isFetching = tokenMap.isFetching || terraMetadata.isFetching;\n  const error = tokenMap.error || terraMetadata.error;\n  const receivedAt = tokenMap.receivedAt && terraMetadata.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metadata = terraMetadata.data?.get(address);\n    const tokenInfo = tokenMap.data?.mainnet[address];\n    const obj = {\n      symbol: tokenInfo?.symbol || metadata?.symbol || undefined,\n      logo: tokenInfo?.icon || metadata?.logo || undefined,\n      tokenName: tokenInfo?.name || metadata?.tokenName || undefined,\n      decimals: metadata?.decimals || undefined,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructEthMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, EvmMetadata> | null>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: logoOverrides.get(address) || meta?.logo || undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nexport default function useMetadata(\n  chainId: ChainId,\n  addresses: string[]\n): DataWrapper<Map<string, GenericMetadata>> {\n  const terraTokenMap = useTerraTokenMap(chainId === CHAIN_ID_TERRA);\n  const solanaTokenMap = useSolanaTokenMap();\n\n  const solanaAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_SOLANA ? addresses : [];\n  }, [chainId, addresses]);\n  const terraAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_TERRA ? addresses : [];\n  }, [chainId, addresses]);\n  const ethereumAddresses = useMemo(() => {\n    return isEVMChain(chainId) ? addresses : [];\n  }, [chainId, addresses]);\n\n  const metaplexData = useMetaplexData(solanaAddresses);\n  const terraMetadata = useTerraMetadata(terraAddresses);\n  const ethMetadata = useEvmMetadata(ethereumAddresses, chainId);\n\n  const output: DataWrapper<Map<string, GenericMetadata>> = useMemo(\n    () =>\n      chainId === CHAIN_ID_SOLANA\n        ? constructSolanaMetadata(solanaAddresses, solanaTokenMap, metaplexData)\n        : isEVMChain(chainId)\n        ? constructEthMetadata(ethereumAddresses, ethMetadata)\n        : chainId === CHAIN_ID_TERRA\n        ? constructTerraMetadata(terraAddresses, terraTokenMap, terraMetadata)\n        : getEmptyDataWrapper(),\n    [\n      chainId,\n      solanaAddresses,\n      solanaTokenMap,\n      metaplexData,\n      ethereumAddresses,\n      ethMetadata,\n      terraAddresses,\n      terraMetadata,\n      terraTokenMap,\n    ]\n  );\n\n  return output;\n}\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  AVAX_TOKEN_BRIDGE_ADDRESS,\n  BSC_TOKEN_BRIDGE_ADDRESS,\n  CHAINS_BY_ID,\n  COVALENT_GET_TOKENS_URL,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n  logoOverrides,\n  POLYGON_TOKEN_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_CUSTODY_ADDRESS,\n  TERRA_SWAPRATE_URL,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { priceStore, serumMarkets } from \"../utils/SolanaPriceStore\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  NATIVE_TERRA_DECIMALS,\n} from \"../utils/terra\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraNativeBalances from \"./useTerraNativeBalances\";\n\nexport type TVL = {\n  logo?: string;\n  symbol?: string;\n  name?: string;\n  amount: string;\n  totalValue?: number;\n  quotePrice?: number;\n  assetAddress: string;\n  originChainId: ChainId;\n  originChain: string;\n  decimals?: number;\n};\n\nconst BAD_PRICES_BY_CHAIN = {\n  [CHAIN_ID_BSC]: [\n    \"0x04132bf45511d03a58afd4f1d36a29d229ccc574\",\n    \"0xa79bd679ce21a2418be9e6f88b2186c9986bbe7d\",\n    \"0x931c3987040c90b6db09981c7c91ba155d3fa31f\",\n  ],\n  [CHAIN_ID_ETH]: [\"0x3845badade8e6dff049820680d1f14bd3903a5d0\"],\n};\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): TVL[] => {\n  const output: TVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    if (item.balance > 0 && item.contract_address) {\n      const hasUnreliablePrice =\n        BAD_PRICES_BY_CHAIN[chainId]?.includes(item.contract_address) ||\n        item.quote_rate > 1000000;\n      output.push({\n        logo:\n          logoOverrides.get(item.contract_address) ||\n          item.logo_url ||\n          undefined,\n        symbol: item.contract_ticker_symbol || undefined,\n        name: item.contract_name || undefined,\n        amount: formatUnits(item.balance, item.contract_decimals),\n        totalValue: hasUnreliablePrice ? 0 : item.quote,\n        quotePrice: hasUnreliablePrice ? 0 : item.quote_rate,\n        assetAddress: item.contract_address,\n        originChainId: chainId,\n        originChain: CHAINS_BY_ID[chainId].name,\n        decimals: item.contract_decimals,\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>,\n  solanaPrices: DataWrapper<Map<string, number | undefined>>\n) => {\n  const output: TVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data ||\n    solanaPrices.isFetching ||\n    !solanaPrices.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const mint = item.account.data.parsed?.info?.mint?.toString();\n    const price = solanaPrices?.data?.get(mint);\n    output.push({\n      logo: genericMetadata?.logo || undefined,\n      symbol: genericMetadata?.symbol || undefined,\n      name: genericMetadata?.tokenName || undefined,\n      amount: item.account.data.parsed?.info?.tokenAmount?.uiAmount || \"0\", //Should always be defined.\n      totalValue: price\n        ? parseFloat(\n            item.account.data.parsed?.info?.tokenAmount?.uiAmount || \"0\"\n          ) * price\n        : undefined,\n      quotePrice: price,\n      assetAddress: mint,\n      originChainId: CHAIN_ID_SOLANA,\n      originChain: \"Solana\",\n      decimals: item.account.data.parsed?.info?.tokenAmount?.decimals,\n    });\n  });\n\n  return output;\n};\n\nconst useTerraTVL = () => {\n  const { isLoading: isTerraNativeLoading, balances: terraNativeBalances } =\n    useTerraNativeBalances(TERRA_TOKEN_BRIDGE_ADDRESS);\n  const [terraSwaprates, setTerraSwaprates] = useState<any[]>([]);\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      try {\n        const result = await axios.get(TERRA_SWAPRATE_URL);\n        if (!cancelled && result && result.data) {\n          setTerraSwaprates(result.data);\n        }\n      } catch (e) {}\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n  const terraTVL = useMemo(() => {\n    const arr: TVL[] = [];\n    if (terraNativeBalances) {\n      const denoms = Object.keys(terraNativeBalances);\n      denoms.forEach((denom) => {\n        const amount = formatUnits(\n          terraNativeBalances[denom],\n          NATIVE_TERRA_DECIMALS\n        );\n        const symbol = formatNativeDenom(denom);\n        let matchingSwap = undefined;\n        let quotePrice = 0;\n        let totalValue = 0;\n        try {\n          matchingSwap = terraSwaprates.find((swap) => swap.denom === denom);\n          quotePrice =\n            denom === \"uusd\"\n              ? 1\n              : matchingSwap\n              ? 1 / Number(matchingSwap.swaprate)\n              : 0;\n          totalValue =\n            denom === \"uusd\"\n              ? Number(\n                  formatUnits(terraNativeBalances[denom], NATIVE_TERRA_DECIMALS)\n                )\n              : matchingSwap\n              ? Number(amount) / Number(matchingSwap.swaprate)\n              : 0;\n        } catch (e) {}\n        arr.push({\n          amount,\n          assetAddress: denom,\n          originChain: CHAINS_BY_ID[CHAIN_ID_TERRA].name,\n          originChainId: CHAIN_ID_TERRA,\n          quotePrice,\n          totalValue,\n          logo: getNativeTerraIcon(symbol),\n          symbol,\n          decimals: NATIVE_TERRA_DECIMALS,\n        });\n      });\n    }\n    return arr;\n  }, [terraNativeBalances, terraSwaprates]);\n  return useMemo(\n    () => ({ terraTVL, isLoading: isTerraNativeLoading }),\n    [isTerraNativeLoading, terraTVL]\n  );\n};\n\nconst useSolanaPrices = (\n  mintAddresses: string[],\n  tokenMap: DataWrapper<TokenInfo[]>\n) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [priceMap, setPriceMap] = useState<Map<\n    string,\n    number | undefined\n  > | null>(null);\n  const [error] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!mintAddresses || !mintAddresses.length || !tokenMap.data) {\n      return;\n    }\n\n    const relevantMarkets: {\n      publicKey?: PublicKey;\n      name: string;\n      deprecated?: boolean;\n      mintAddress: string;\n    }[] = [];\n    mintAddresses.forEach((address) => {\n      const tokenInfo = tokenMap.data?.find((x) => x.address === address);\n      const relevantMarket = tokenInfo && serumMarkets[tokenInfo.symbol];\n      if (relevantMarket) {\n        relevantMarkets.push({ ...relevantMarket, mintAddress: address });\n      }\n    });\n\n    setIsLoading(true);\n    const priceMap: Map<string, number | undefined> = new Map();\n    const connection = new Connection(SOLANA_HOST);\n    const promises: Promise<void>[] = [];\n    //Load all the revelevant markets into the priceMap\n    relevantMarkets.forEach((market) => {\n      const marketName: string = market.name;\n      promises.push(\n        priceStore\n          .getPrice(connection, marketName)\n          .then((result) => {\n            priceMap.set(market.mintAddress, result);\n          })\n          .catch((e) => {\n            //Do nothing, we just won't load this price.\n            return Promise.resolve();\n          })\n      );\n    });\n\n    Promise.all(promises).then(() => {\n      //By this point all the relevant markets are loaded.\n      if (!cancelled) {\n        setPriceMap(priceMap);\n        setIsLoading(false);\n      }\n    });\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [mintAddresses, tokenMap.data]);\n\n  return useMemo(() => {\n    return {\n      isFetching: isLoading,\n      data: priceMap || null,\n      error: error,\n      receivedAt: null,\n    };\n  }, [error, priceMap, isLoading]);\n};\n\nconst useTVL = (): DataWrapper<TVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [avaxCovalentData, setAvaxCovalentData] = useState(undefined);\n  const [avaxCovalentIsLoading, setAvaxCovalentIsLoading] = useState(false);\n  const [avaxCovalentError, setAvaxCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n  const solanaTokenMap = useSolanaTokenMap();\n  const solanaPrices = useSolanaPrices(mintAddresses, solanaTokenMap);\n\n  const { isLoading: isTerraLoading, terraTVL } = useTerraTVL();\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata, solanaPrices),\n    [solanaCustodyTokens, solanaMetadata, solanaPrices]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n  const avaxTVL = useMemo(\n    () => calcEvmTVL(avaxCovalentData, CHAIN_ID_AVAX),\n    [avaxCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_ETH, ETH_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_BSC, BSC_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_TOKEN_BRIDGE_ADDRESS,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setAvaxCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_AVAX, AVAX_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setAvaxCovalentData(results.data);\n            setAvaxCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setAvaxCovalentError(\"Unable to retrieve Avax TVL.\");\n            setAvaxCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [\n      ...ethTVL,\n      ...bscTVL,\n      ...polygonTVL,\n      ...avaxTVL,\n      ...solanaTVL,\n      ...terraTVL,\n    ];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        avaxCovalentIsLoading ||\n        solanaCustodyTokensLoading ||\n        isTerraLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        avaxCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    polygonTVL,\n    avaxCovalentError,\n    avaxCovalentIsLoading,\n    avaxTVL,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n    isTerraLoading,\n    terraTVL,\n  ]);\n};\n\nexport default useTVL;\n","import React from \"react\";\n\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst TablePaginationActions = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n};\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nexport default TablePaginationActions;\n","import { IconButton } from \"@material-ui/core\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {\n  AddCircleOutline,\n  KeyboardArrowDown,\n  KeyboardArrowRight,\n  RemoveCircleOutline,\n} from \"@material-ui/icons\";\nimport React from \"react\";\nimport {\n  useExpanded,\n  useGlobalFilter,\n  useGroupBy,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport TablePaginationActions from \"./TablePaginationActions\";\n\nconst stopProp = (e) => {\n  e.stopPropagation();\n};\n\nconst EnhancedTable = ({ columns, data, skipPageReset, initialState = {} }) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    rows,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: !skipPageReset,\n      initialState,\n    },\n    useGlobalFilter,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination\n  );\n\n  const handlePageChange = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (event) => {\n    setPageSize(Number(event.target.value));\n  };\n\n  // Render the UI for your table\n  return (\n    <>\n      <TableContainer>\n        <MaUTable {...getTableProps()}>\n          <TableHead>\n            {headerGroups.map((headerGroup) => (\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <TableCell\n                    {...(column.id === \"selection\"\n                      ? column.getHeaderProps()\n                      : column.getHeaderProps(column.getSortByToggleProps()))}\n                    align={\n                      // TODO: better way to get column?\n                      columns.find((c) => c.Header === column.Header)?.align ||\n                      \"left\"\n                    }\n                  >\n                    {column.id !== \"selection\" ? (\n                      <TableSortLabel\n                        active={column.isSorted}\n                        // react-table has a unsorted state which is not treated here\n                        direction={column.isSortedDesc ? \"desc\" : \"asc\"}\n                      >\n                        {column.render(\"Header\")}\n                      </TableSortLabel>\n                    ) : (\n                      column.render(\"Header\")\n                    )}\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span onClick={stopProp}>\n                        <IconButton\n                          size=\"small\"\n                          {...column.getGroupByToggleProps()}\n                        >\n                          {column.isGrouped ? (\n                            <RemoveCircleOutline fontSize=\"inherit\" />\n                          ) : (\n                            <AddCircleOutline fontSize=\"inherit\" />\n                          )}\n                        </IconButton>\n                      </span>\n                    ) : null}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {page.map((row, i) => {\n              prepareRow(row);\n              return (\n                <TableRow {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <TableCell\n                        {...cell.getCellProps()}\n                        align={cell.column.align || \"left\"}\n                      >\n                        {cell.isGrouped ? (\n                          // If it's a grouped cell, add an expander and row count\n                          <>\n                            <IconButton\n                              size=\"small\"\n                              {...row.getToggleRowExpandedProps()}\n                            >\n                              {row.isExpanded ? (\n                                <KeyboardArrowDown fontSize=\"inherit\" />\n                              ) : (\n                                <KeyboardArrowRight fontSize=\"inherit\" />\n                              )}\n                            </IconButton>{\" \"}\n                            {cell.render(\"Cell\")} ({row.subRows.length})\n                          </>\n                        ) : cell.isAggregated ? (\n                          // If the cell is aggregated, use the Aggregated\n                          // renderer for cell\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                          // Otherwise, just render the regular cell\n                          cell.render(\"Cell\")\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </MaUTable>\n      </TableContainer>\n      <TablePagination\n        component=\"div\"\n        rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: rows.length }]}\n        count={rows.length}\n        rowsPerPage={pageSize}\n        page={pageIndex}\n        SelectProps={{\n          inputProps: { \"aria-label\": \"rows per page\" },\n          native: true,\n        }}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleRowsPerPageChange}\n        ActionsComponent={TablePaginationActions}\n      />\n    </>\n  );\n};\n\nexport default EnhancedTable;\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOL_CUSTODY_ADDRESS,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(8),\n  },\n}));\n\nconst CustodyAddresses: React.FC<any> = () => {\n  const classes = useStyles();\n  const data = useMemo(() => {\n    return [\n      {\n        chainName: \"Ethereum\",\n        chainId: CHAIN_ID_ETH,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_ETH),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_ETH),\n      },\n      {\n        chainName: \"Solana\",\n        chainId: CHAIN_ID_SOLANA,\n        tokenAddress: SOL_CUSTODY_ADDRESS,\n        nftAddress: SOL_NFT_CUSTODY_ADDRESS,\n      },\n      {\n        chainName: \"Binance Smart Chain\",\n        chainId: CHAIN_ID_BSC,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_BSC),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_BSC),\n      },\n      {\n        chainName: \"Terra\",\n        chainId: CHAIN_ID_TERRA,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_TERRA),\n        nftAddress: null,\n      },\n      {\n        chainName: \"Polygon\",\n        chainId: CHAIN_ID_POLYGON,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_POLYGON),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_POLYGON),\n      },\n      {\n        chainName: \"Avalanche\",\n        chainId: CHAIN_ID_AVAX,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_AVAX),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_AVAX),\n      },\n    ];\n  }, []);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      {\n        Header: \"Token Address\",\n        id: \"tokenAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.tokenAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.tokenAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n      {\n        Header: \"NFT Address\",\n        id: \"nftAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nftAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.nftAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h4\">Custody Addresses</Typography>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          These are the custody addresses which hold collateralized assets for\n          the token bridge.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{}}\n    />\n  );\n\n  return (\n    <>\n      {header}\n      <Paper className={classes.mainPaper}>{table}</Paper>\n    </>\n  );\n};\n\nexport default CustodyAddresses;\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BSC_NFT_BRIDGE_ADDRESS,\n  COVALENT_GET_TOKENS_URL,\n  ETH_NFT_BRIDGE_ADDRESS,\n  getNFTBridgeAddressForChain,\n  POLYGON_NFT_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\n\nexport type NFTTVL = NFTParsedTokenAccount & { chainId: ChainId };\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): NFTTVL[] => {\n  const output: NFTTVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    //TODO remove non nfts\n    if (item.balance > 0 && item.contract_address && item.nft_data) {\n      item.nft_data.forEach((nftData: any) => {\n        if (nftData.token_id) {\n          output.push({\n            amount: item.balance,\n            mintKey: item.contract_address,\n            tokenId: nftData.token_id,\n            publicKey: getNFTBridgeAddressForChain(chainId),\n            decimals: 0,\n            uiAmount: 0,\n            uiAmountString: item.balance.toString(),\n            chainId: chainId,\n            uri: nftData.token_url,\n            animation_url: nftData.external_data?.animation_url,\n            external_url: nftData.external_data?.external_url,\n            image: nftData.external_data?.image,\n            image_256: nftData.external_data?.image_256,\n            nftName: nftData.external_data?.name,\n            description: nftData.external_data?.description,\n          });\n        }\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>\n) => {\n  const output: NFTTVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const raw: Metadata | undefined = genericMetadata?.raw;\n\n    if (\n      item.account.data.parsed?.info?.tokenAmount?.uiAmount > 0 &&\n      item.account.data.parsed?.info?.tokenAmount?.decimals === 0\n    ) {\n      output.push({\n        amount: item.account.data.parsed?.info?.tokenAmount?.amount,\n        mintKey: item.account.data.parsed?.info?.mint,\n        publicKey: getNFTBridgeAddressForChain(CHAIN_ID_SOLANA),\n        decimals: 0,\n        uiAmount: 0,\n        uiAmountString:\n          item.account.data.parsed?.info?.tokenAmount?.uiAmountString,\n        chainId: CHAIN_ID_SOLANA,\n        uri: raw?.data?.uri,\n        symbol: raw?.data?.symbol,\n        // external_url: nftData.external_data?.external_url,\n        // image: nftData.external_data?.image,\n        // image_256: nftData.external_data?.image_256,\n        // nftName: nftData.external_data?.name,\n        // description: nftData.external_data?.description,\n      });\n    }\n  });\n\n  return output;\n};\n\nconst useNFTTVL = (): DataWrapper<NFTTVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [avaxCovalentData, setAvaxCovalentData] = useState(undefined);\n  const [avaxCovalentIsLoading, setAvaxCovalentIsLoading] = useState(false);\n  const [avaxCovalentError, setAvaxCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata),\n    [solanaCustodyTokens, solanaMetadata]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n\n  const avaxTVL = useMemo(\n    () => calcEvmTVL(avaxCovalentData, CHAIN_ID_AVAX),\n    [avaxCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_ETH,\n          ETH_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_BSC,\n          BSC_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setAvaxCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_AVAX,\n          getNFTBridgeAddressForChain(CHAIN_ID_AVAX),\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setAvaxCovalentData(results.data);\n            setAvaxCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setAvaxCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setAvaxCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_NFT_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [\n      ...ethTVL,\n      ...bscTVL,\n      ...polygonTVL,\n      ...avaxTVL,\n      ...solanaTVL,\n    ];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        avaxCovalentIsLoading ||\n        solanaCustodyTokensLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        avaxCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonTVL,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n    avaxTVL,\n    avaxCovalentIsLoading,\n    avaxCovalentError,\n  ]);\n};\n\nexport default useNFTTVL;\n","export const DENY_LIST = [\n  \"D9cX654dGb4GFzqq3RY7rhZbRkQqUkfggDZdnYxqv97g\",\n  \"0xfeA43A080297B02F2eBB88a27Cb0FA6DB1b33B1d\",\n  \"GUSNP2z7nXjMpmYWeFbS819VwHb5tp7VoGbC6iGHtXmE\",\n  \"ERfkrhhgBB6zRo3x4XAcQKjhxu1JdX1PBfdj1RbHsfc7\",\n  \"f8DrFDG8dd6kV34WdjoEZd9vZin2pJAck8eMFUXZv1G\",\n  \"0x72b6dc1003e154ac71c76d3795a3829cfd5e33b9\",\n];\n\nexport const ALLOW_LIST: string[] = [\n  \"0x915bcb55faf663429fcc1efeb4e346703a91e4b2\",\n  \"0xf642d8a98845a25844d3911fa1da1d70587c0acc\",\n  \"0x1c60841b70821dca733c9b1a26dbe1a33338bd43\",\n  \"0x5603172654f37b509d74c6fe3a3fc087104100d9\",\n  \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n  \"0xd136ad9eb0a53633156972e3f746ab10d6dced7d\",\n  \"0x68d5d4ff0274dd95760e300ef16b81c5eed09842\",\n  \"0x4961db588dd962abb20927aa38fa33e5225b3be2\",\n  \"0x2e956ed3d7337f4ed4316a6e8f2edf74bf84bb54\",\n  \"0xb411d36e034d87558c3f96636dd7f7b62e093a1e\",\n  \"0x7592e2f251a7f7da27211625d652092769f43a60\",\n  \"0x21b999ec13828edefa243675c64324298c03b831\",\n  \"0xad5f6cdda157694439ef9f6dd409424321c74628\",\n  \"0x9cf63efbe189091b7e3d364c7f6cfbe06997872b\",\n  \"0x7581f8e289f00591818f6c467939da7f9ab5a777\",\n  \"0x93b1077d163365e05c9421e8f72547e2fe1e0a5b\",\n  \"0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625\",\n  \"0x2fb5b875a85713cba312c097d16838c242cadaec\",\n  \"0x1e988ba4692e52bc50b375bcc8585b95c48aad77\",\n  \"0x0ae3c3a1504e41a6877de1b854c000ec64894bea\",\n  \"0xc6904fb685b4dfbdb98a5b70e40863cd9aef33dc\",\n  \"0xd58434f33a20661f186ff67626ea6bdf41b80bca\",\n  \"0x9bb7da8f68f15ece32fe323246e7a1abac6d895d\",\n  \"0xb7f7f6c52f2e2fdb1963eab30438024864c313f6\",\n  \"0x2a281305a50627a22ec3e7d82ae656adfee6d964\",\n  \"0x346868f7e783e8206335bb14f74ba59a87c44f35\",\n  \"0x549d38f104ac46d856c1b2bf2a20d170efdb2a8d\",\n  \"0x138ff21a21dfc06fbfccf15f2d9fd290a660e152\",\n  \"0x15533781a650f0c34f587cdb60965cdfd16ff624\",\n  \"0xaae71bbbaa359be0d81d5cbc9b1e88a8b7c58a94\",\n  \"0x4721d66937b16274fac603509e9d61c5372ff220\",\n  \"0x72dcccb74cade0aca67739fe0a7956c5dead4a8a\",\n  \"0x07fe07226a376e8b74e4da2094537843fdf16318\",\n  \"0x1ddb2c0897daf18632662e71fdd2dbdc0eb3a9ec\",\n  \"0x2d956093d27621ec0c4628b77eaeac6c734da02c\",\n  \"0x312b151a0e87785649ed835d946c2b0de5745c30\",\n  \"0x32afc8dc2ff4af284fa5341954050f917357a5f1\",\n  \"0x4ba782b05c7d580ab6b896c6a63b8e5de53738b3\",\n  \"0x5bc94e9347f3b9be8415bdfd24af16666704e44f\",\n  \"0x5ddff6f22ee5df31403b9de994b4c70c8755a8ac\",\n  \"0x61f4a37676700f6e9bcbaeb05ff6c2f701c1c702\",\n  \"0xcb1f79791088d0f4397c35ec241f91c3727a6dba\",\n  \"0xd279d7e46f73961812c4853e065d0096a2657a71\",\n  \"0xd901b0618ce2b7f61457ced5621bea4820954ce4\",\n  \"0xdf7952b35f24acf7fc0487d01c8d5690a60dba07\",\n  \"0xf5db804101d8600c26598a1ba465166c33cdaa4b\",\n  \"0x299b6f57922533e1dd9edb8fe76ef632fb2b081e\",\n  \"0x36a8377e2bb3ec7d6b0f1675e243e542eb6a4764\",\n  \"0x4173eff368153f1f1c87be05226ebca9e5f5748b\",\n  \"0x684cd10b02cdade20f1858c6315052d66d1eafc2\",\n  \"0x7227e371540cf7b8e512544ba6871472031f3335\",\n  \"0xd317cfff093c08a43062b39075e51ac2060317f2\",\n  \"FxN1Q3vzdUmkx3qVgsnLiQtRWfYK1MAejEjret9dY68E\",\n  \"4V8LnMchSg7LpgNNJxGrcJaheeW5eSiJKRuocxf4YvXn\",\n  \"9ayoVUQVpHRcDyrdJ1dDUmkxtY74SYgEo7fMRSbW7GQ6\",\n  \"83ENiVFRQvVLAsP2gp4pW9EDphsiorgXaZjSuaWwjQEq\",\n  \"2nVCGdoR6xehmoPfTAof7xSvdnGaEKhvXi48BeaXbxNW\",\n  \"3mUeDoxSzSpBudaWVygwszkVSHUkeJ7q4C5DGjhi9twL\",\n  \"J1JLJjYotfACqTQ8g1vWUW9BHRSkJ3NxTqJiukf3aTmn\",\n  \"CECj5imCnAv7avNjSETanhRMxWz5yR2ZN5jfFqAijzmK\",\n  \"GHVaMJPwJYrqDaHCGLksvsfGoNaS6NVHL5wc31osASYZ\",\n  \"85d8VHCBpER7NeT8Quzcos7iGoZouLkaZNfqfQ5VN3kP\",\n  \"EBDEioh6L5UZxuyPPZ9gY3H6fsRqmPEvSXL2EKv588qz\",\n  \"BZM9yMv9CXZDYV2JGNWSdNJc6xWGfEHY4vUWX9rc4W4n\",\n  \"4cc5svLcu1xyYCGcfwDop64ZMs6WJiCY6JrKF711GDLu\",\n  \"8cWC1faRe7fkTMu5wAVQoSbkYChJUNTTCneLhZprqMBj\",\n  \"F14j998PJo8CdNU4aS7vEWqm8duNuZAZ6bgrAJhJHPNw\",\n  \"DZUjZ8p3QtuSnozqFsuHYTjPFCWkgkgWhD7b71AvbKEC\",\n  \"AtjDYmFmnjhh8VMJHAEY3CYMdWCPEDzJzxjjTrMrcY4K\",\n  \"GwBPGaMyR8cDKVuGgFUdLqevDkMbKNNKRerhvqJD6hL3\",\n  \"B3fYjDpfJ9q7YJfnrjeFgALaiLn5DaobPje3VQZ8zk4a\",\n  \"3KeSd9UcWFWq7DQnUWT9tXkgb54yUUCynLzJZkaMoqEX\",\n  \"XUhiSfF7NN3s8T4gZByoae7sKKuLfffkgF14G6PYHPH\",\n  \"2BLYg54F2ejko6Dz6gDPDDGUMxFPHe4v6oNTsshRnS9S\",\n  \"HEr369zRti7fShFufrxg7zpmGsRcWey8XNoGdr6bfFHp\",\n  \"997VfMfoCp6uh8ZjJZeSm7yDEP9x2iJVPqrLk2M6XBx4\",\n  \"BuUUVQeiCNoChQ2CRAgVuXCS56ZF5m8AtGen8LtcjdTv\",\n  \"DHUFjTnK94Yx9MybaosFxFFa4pmvxoo2toHxDXZisthU\",\n  \"73nxe85cw4XqQ2o5znPCZDVXL5zf3wpM59boCqnhRzqz\",\n  \"BbMsktYU3XDZNTB2jNU75RZPak2pu75jDRudHtjbLBMD\",\n  \"2K8p6q9KVkDBcedrXpVgAkr4AH9BAZf2BvvXkQvgC3L1\",\n  \"G1k5umwEmgziVLAetgmuGRw6sBRodRCGviRNT5HW3CK6\",\n  \"2XNvSJhJjpXBbvmhrnbx3BNMTC3JhAmyC11nkmWkTtuM\",\n  \"FBoetbUNf5GVJfnCXDf5uo9HMVwmvuSYBMmEVKTKDFd3\",\n  \"8TgS1Z1H3YM2qer6wQfVgfs1zrrkEhN8jwqZwEkuaoQs\",\n  \"2P2hiNdVyn6BhC4zhGiT1Ct2Jm47F8eShfkwwEDeerCu\",\n  \"8nTjurPHAGSttLJHhfPws5wqnPF2ogNg2BWGyJV9Tpt\",\n  \"gJbDs6Mp78jMV2vuwZei6oRaPfVQycYxvZXkc8emKoi\",\n  \"55VXhAfPKEG5LhQyakH3eUrxy3zrC6pryQSPy5SMDpRW\",\n  \"FKxYYQNyigzTfyig4Gyvxkcq9wFb4FEQPq9KvNLoMQ2R\",\n  \"9fhR7uHDtJEWBzE9hiwCemggMiKiZGzMmMS22mG3DNuN\",\n  \"Cjduv1s4nUkt8i7syFr8yjUvYa5GiNASVKPnNorPSjyo\",\n  \"5Gak12U6pxnyh8akeDY4jdaUBJ6FziEVSTDFDSX97acs\",\n  \"8Urs8EzwgvNSyRXgSVkuBAD4B5odLfKih6rTn75YnXes\",\n  \"Ft4y4KR1Vf45js7RBWbuT7nTFaZmty11sCTGcfJ4fAsx\",\n  \"4iKnL1CTvA3yrcchB17vz3yBSmaj2aLvhxPhtBEXvtdd\",\n  \"2KfyLN3iyBHYGajiHzEj75aZqeNM22FA9jh8QaKQbwD2\",\n  \"5tBZ5feptkoEWiGhisi1y81gzYg3PAJ9v5QbY6uJ4P9a\",\n  \"AJnfVpnmtN3oo5jMT1Rxr9VQdVxLUuF6U35oSFRMtten\",\n  \"8TEPXUw4vtZuy2xizHfDcccCfsNMxpADrEBw9FJXe3tJ\",\n  \"CVsnX3yUwQoe2WappLEhBbu4vxZAE6Bym33UkKuYgKqf\",\n  \"8TxaeiYDUhVL6cJVxHeS5Gx6UpE3G4zsQJMaejHttb5x\",\n  \"5usxCLasTHRAJqC2kzqboAzQQA4jibxWPCbb3Xtc5r7z\",\n  \"FsBzFoC4YYeAvdRX1d4AmYcwtZbcp3ctGs137AsGzLRe\",\n  \"CYPz33SnBXkCf1SfsN5yWk5jRCU7r4m4m236K7LYQYUn\",\n  \"DmGzNiorJqWac5cNejfUkk3vxYPkbarsB29y3ZdZ2chi\",\n  \"6Z551xuQRipV5tfiLawgALuufBtMYRhHiL8Mco1uoQHp\",\n  \"8QFELiySN2tQutqamND7v557BpuE3Nu4h5KLxnaLa92K\",\n  \"HciHdyzYoCuhFCgYCvCYsXssJuxkHhE68anbgBvqsa4Y\",\n  \"AsVWRy4KfRErkcyif5ZXXvVdTeeWLKJaLo5ZKAfYxuFe\",\n  \"DNKy4mE6onmzDYYGd4vP9BuJByDoPYdoFKvHUtveCarn\",\n  \"EBms1LbV3o6h4eCTAzyZ4xoBmJ1T4SuhQLLguCJ88LBA\",\n  \"7xaMEDQ1gTJhXTZ1LYgoMBEeGXiZNmY3QhPxcnBKjkcS\",\n  \"71hXBp4hbpYrVSsKMuFACF5UJMBasCmPybpN3dyNdFxJ\",\n  \"EstAdgD62RLLPCsLVgJWxxQAeQAJ8iX7Yid9EJp99CQ7\",\n  \"HHodYwygcTYuxBNrQx1aLwfQLkJaAMcioXvMs7LNK6Jf\",\n  \"AkydeQuFwTsWj8YrmKdhV4TE1w5Nc9DF5ipgfNGs2k8q\",\n  \"AmJ52MAQXAjtFkFdAYkLWKZU3zp2BDryLcbQQ1hMSBcp\",\n  \"BQHvhpAwZr83joHaEJrKUY4Lij4ZXqKgi9MzeBeiatbX\",\n  \"7oEGhi9YJECDHvfbp41spBwGU1pEfgS5mHo8cXGwfxug\",\n  \"364ue6kuFJM6reWX7Lz8LwCxA7TeVbWuMXBFrv1EZYWS\",\n  \"88R54Zx8TLM4roQPTrHSpA5BfLFQVu5CcH9DyxWmfxDV\",\n  \"F11NLrf3w5WuR8kyPFfgpdG9qMM7QoS9JdkMyFu9B6z\",\n  \"DzgpaoTtvcxmfAuceZR3Q4xAJjjHCcFURJ4orMiAP1oB\",\n  \"8iNwAG4LCFoxZWmpAPq2AUXmdBAeeGNgxUZnRNJ2oaxZ\",\n  \"Jzv1Tp99guHWs4WxmcSV3ty3UHhqwv312Wb7A59Cm6B\",\n  \"HqTSsezCJ49VjpcRvGtN4WbLHgywkpqrQZAPPR4sid7P\",\n  \"7b9xH9DZ5EjehncbST6Cw2cVVVmJccYsoYa7CmVxV74w\",\n  \"FE5zmTuD1zaaDheJf8HxDJS8HFVHaFTHbeonxqrBMYhm\",\n  \"JD9NiPVbSHGAanmxnXCcmYaXfa56rWwzvB6TVAXkirYS\",\n  \"F2kkKqoUr8gCfjXTUknLQZ8TEvedkNA5s6Ne6XS4CPQf\",\n  \"38QnWX1xq83uspnp9nY6cEhdcRcx1dw5VJwxudZ7ugDM\",\n  \"Gzkr9pHFCQ3WqkyRMZobPSXZNheFQKYrjJCVs1Xmhj6R\",\n  \"jfLuStusES8VBAHqFSBB9XXX5vQjjWxZGyEYdDRS2yz\",\n  \"9dFPAaubJzhHFpsc8s4qbSepMFEKecaQYHrUKQMRoZcs\",\n  \"6yCBHAmvBAZkFSXi7u8Sj7n9pNPuDFrGahNnLxpAk9YJ\",\n  \"A2SgMawSkCjdhQpBypwRpCSryAPa6B65dRetu3YGX4ay\",\n  \"9wPZRx3jrYQ2U3AwrxRJ8dQXFgVt8Qc5BxjD2reAD81\",\n  \"C6FGVFzzwGqxEGnEqQva4zZ6tdVXHDY4KsPuDFMKQipA\",\n  \"28awX2aLeyDik4aYtLe3xgvx5rnA9PeJrUmEepbps1XU\",\n  \"7B3esUC5uCw3yLcpvU91q3poeVENLpyfLU7SCZxy7YnF\",\n  \"5qoDyfChkPokzd5BXGcbNmqFYwF3dYerLfnN2ujxTCjU\",\n  \"5K5hobUAQLYTiKMGqJBJauZWbQJHLnjmwfbYRu3Kdt59\",\n  \"pavej29HVNfxHEkDxR9fE8zgCozmFuCFFCk7u9dUfci\",\n  \"4hKuAuo8dXgkRLfz78qNHNGs188epLoVmcKPKuDDKFNj\",\n  \"AzX2c2bFMeZcnj1Y6DokKAacDnsRzAo6pyVJmMiVUuVQ\",\n  \"D6uV9j31HV2yv6Cg6uuJuAeSMVdJ7PpVrzRtm1d5N3pV\",\n  \"2VNQusXvHEjMBTkY4gYUUhvdkCMc9DADSSxbdS7sJ1CK\",\n  \"Cug1VKTudanAUbUMh4sw1bicJgcfXqs8x4tjHHPtqkEA\",\n  \"HQnijpcihTRLRaQpywJfo4cM5pZHBffvTATFiomE8g8u\",\n  \"73kJkeEFQYPxT3cHDRG8iiyvUhmSBY2Nc33JpB6DFK2R\",\n  \"4rZifPfY8DdPkWv4mqvctLgcGaBScBQHMCPguZQC28C4\",\n  \"GZivmjaWrg2Va9seuxY4D7SGPP8WnKsKwwc5a87hMAgn\",\n  \"9rMUmiujvmthZoVBaFff2Jf8YW2cX4SzWDK2nritZXK3\",\n  \"CkAD1HLVnqhfMeCXzKuEuhjFd4FmTXRtCVe535jJKVH2\",\n  \"8tfmWiyX4efiXb3P9ti4GfCZZ5FNcwbRZgzfA688K9tC\",\n  \"HXrkcTcRNF6EnvfFaXMpqbSeik7fgbn9DLraBaNmRD5u\",\n  \"59j1gA2ANhYkzvvCZauoisnpfnVk6UbycFHMNBij2jy\",\n  \"5Dot4FyLAdx9LkxrmG4zi6nrRQQcPZjvBAjZ5VmvYWpp\",\n  \"BbL5V1TJuLnMonChPVAfP3uarM5G2XKCfcEaTxzXEqPK\",\n  \"4hmEUPcgHimQ1vNrr3WNGYb1RezmRLD6fVv9TVwAU9yj\",\n  \"Gnmnh3LNaaQ1UmnQMkdGTH7ja2aTHQyxkS7tCfYkxvtD\",\n  \"9BUEx9ULoTQhs3QVzyQvSecxfbTPV8PcuHkHeuRE8LF8\",\n  \"6UF8mqUg1aGakkW2yS4oRPiX1YNBJiqxcoyN9u6pBYo9\",\n  \"7vEHTQ9mmy7T7fkhns3fBFrWqRhXPTZUPgn64QxVirhY\",\n  \"71HGRqeeDwcXJs9CxzPyTurLNdwYwsBBb17CmxoW4VTD\",\n  \"5v2fhVgjH2Xv2v78ysSZWvhZ5wu8ycD4pJE6LRBbaf1G\",\n  \"7rjPaxZ5p5jzZFhEZwVFCsLwvxppmJ8nmsrgxmRMeKMq\",\n  \"7JHruL5Baoqj66RniPDpB1SiKz8jegNuiKLxcvCDVYCa\",\n  \"3xA3wJk9YpgwxNuSc9GHQ6E1Wt8zeKC5oK8yQLg2JzrF\",\n  \"3c7r6ZtTDxN1fxc1ixM8Ay26hTyfnucs3yx42vVH4LM3\",\n  \"4jsaQWBKn3aSpZbwboxiNRRiagY2xdkoSomfoBRDrdcs\",\n  \"B9txgFSjNXjFQv5VTCu2vhMyCEWnyp9UQWpeZzTLdeKP\",\n  \"96GjikTDDt1FuznnmwE9rzKi2i7gZ3gYwW7g2daW8s2r\",\n  \"C4otrRtEHVeeTkkmMy6WkLkMEbtK49BUgkfYXMNiJhGq\",\n  \"Dtesdhkc5WFDHvjy7JzrpSL7xbN7DHsQhrK5i8vgzogi\",\n  \"Cf2fzzcUhBqtXokdEEg4HVuc4dNmgrsz2J8QsvPwMnFU\",\n  \"DoqovGZ86RjsFZd3TGaLDwaU8mXmw3C195BfV31UuG85\",\n  \"Au3h7j9twciHo6YQ9vznx97rC1D82dcqdBgBqkzwKMGm\",\n  \"93N68g43aiDTJTTQdJL5djSBytTCSqL62woXubFrX2vJ\",\n  \"6WwzhMYbAWem22ZcVcS2NohsccjmrWZbq1aHDySABTZ2\",\n  \"DGkYVSFoq5cafZJZboHPuzdrKtVYrm4R5oS18nEuZaGu\",\n  \"8MLm9nLqLsDQgoN7nHkUoeu2oqe8J3cuZKc2KCX8Zde2\",\n  \"9Zn1R4fdAHZSrq6hrXdQWdRVJhAUEtpU9gT26KRgRjCb\",\n  \"6j53Ln8GvosfZXar1WCNrmURVxjR8GV9Es2HE6fTvkz9\",\n  \"9Kevoh8H31NQV8kB89aocRTrkt2UGqbs7Ani73WkACrf\",\n  \"8MTsYKzp4qNEFXzM6nWhRk759qqSMbur5DXjbWwDNFCj\",\n  \"CcCVqUaMsKNcQwWHHA3H5yydjcspcD3LhBYP9aYrmweK\",\n  \"FCiSbFdcZSpx1YZFfUCV56KQ34C8CJY9A3JrnMGopNip\",\n  \"5R5cr6dq3v25Z4Cq7qM2dG4hxN5gbY5eUKzETRnBYXUf\",\n  \"DeQDKoAuR1BYvspX8dHehyua3VRuCmD2zbEvZ97NLjas\",\n  \"C6nyuPc5wZLB1c3rFvchbF4aLZBn4yujtDyeqsJDhXSL\",\n  \"7vzFUmX9qZiznTikem4Eu2v2aa1BkqDsuT3gvYLq2rRT\",\n  \"Nf2WRYpG8hquo3BsvioYxKZmDECvuS7HmDhHrpQrdYv\",\n  \"Fz5jKMiXi5SN4TqQ12fYm49QFxJkeLoyYEZWVwRwyBCC\",\n  \"FCs3xYBoo55HenGpeNETpuWjuPfzegHhDQFzEuu3HWuM\",\n  \"CC56nm4aRSd7RzcnrX9VH5VXnfj5Bq1XLGRxXy9oDm2p\",\n  \"BLJg1tgRZdzPxXhJngtbCnuJ8PtsVpFjFcoUby2NXxjH\",\n  \"4Y3Lfzeh9m45GomuKpqjj6bVRLpNnn7wyosPzRyx8bQW\",\n  \"8GCrwThSdG2JUXwwisFtwEs5gkGGxjNKQYArRtq6bEPc\",\n  \"78wF4F64K31GbbC9jhi3me4kSqznGtf6KHFLTUTkrEjB\",\n  \"Cy57RjcnLmWhY2ccjEwcFu6SvoySbq6mevDhY54DxVLh\",\n  \"FVTRVzRagRDQj7Lp2n1GyRJ85TNSErhYk4xf283Svnrn\",\n  \"rMH5QQxx9WNZYeCgTEr7TogXT1rnATDaibWcvibHxRp\",\n  \"ENFgBr93NsoG9QHUTHbfEobWtnFmV1fEsAuiaNq1Qxiv\",\n  \"454LshEu93z3auzq2cMbA7PsSw9v8zhuvQRGkfP6eGMx\",\n  \"aHe1GAdAVgijtp55eUmPe6DdUYonRVw6Xdq1QpTmVeM\",\n  \"4BG5Yo4o2nHGDgA1AqH94oUk2CouLuGCSK7ZjqHQaT2J\",\n  \"CCDKm4AEVxeeNVdYNM7X8CBQmtNpySEhBvp1yQ93jjdY\",\n  \"27XFvenPT5LpkJ8FVJdHf3CPaARqgCWm1EsSRt2HrDcH\",\n  \"DqH8Q3e5Bts3rCsC6UpTP18Hf1fD7dfGaP71uR6HpxRg\",\n  \"FPfgDLbWDjSx1FnEdeM5DWqJNpRqv5oDqpmvW18Ef5QQ\",\n  \"6u1TPKaTboYQ8gU7DF7AgEp5cP9N3FTuxxsu5oWi5uJ5\",\n  \"CCg1C49hNR91425PeS1HatXobQkAniJ775N6pjWAiqp2\",\n  \"ENxmdaEsTWXkufsTLngp3sZ89dFZWNoke7F95aVE67Kz\",\n  \"39h7MdBeuMFvcBz5FKGQBqnqR7BSAfp4ob8qLphLc4yo\",\n  \"CRGEVCx5HrRjsbX71RM8acuydKHiXwRwWysF9BJvYTG9\",\n  \"3mzktRHfhxjPirgHF9sjbXf2kwW1RZSudaRpyc478BAA\",\n  \"9J7F9nx2UyVYPuTk21ni2jxprgBpzfMpN7HxJqgKUWxd\",\n  \"3K8NyBHkMdWX672bqqtJC5mZASvqCHtZXPRMhKz8iP2x\",\n  \"65sAs4U5puLv3UC8f5y1DVCGAhpMtTRUoKpMdUMFY1sY\",\n  \"Dxb5mPASvxsoDRhHZEu2arYRqvYByYgyvrtUYxnFJsGg\",\n  \"GF2hTcNvU7HFj5682KBVpffoS223aVhYaaCcM9ngxehs\",\n  \"BBF6JkFMRLMqW5F4Ri8VUNnAK5T2n9MLmRhtuXQNJmZh\",\n  \"8x8J5MGViuLTtxwjwnrLM29USZqx7TcbGvqdaNfA1m8X\",\n  \"U4Babgbjm7ciqth5XDJppzVk7WhGnHNZUGvPL2ox8HB\",\n  \"3Y9f4MxYEvjWfiBJexTSnRQcKVD8e1aSUs4Z6FZYj5K1\",\n  \"CZZ5B1Az9kW2nyRHM5mABS2NWuStoHCPcfh75KFo2UsN\",\n  \"tRKmpQWu48phJXR7W4d2skG9W4nvb5cb976bkGQYAuN\",\n  \"3iAabhw1Rdu2HimbzT9gDCDcuod7TmBtcZwFWxGQyFfQ\",\n  \"5TTRcMNMwhiGUZ8JtTnqB6sW3g6P4fAFhWLsV2kJWEsg\",\n  \"8B8VaqcxunjTnbq4mGhPW3C2eHuByWVBRjqKthwX2aRQ\",\n  \"9hi9yukj5ZjtD2Z73zRLca8kARChJmgEaMtYefx454Q3\",\n  \"DTrqt4Wb1H16hdrLwEfFkNVwGYWPqnghb3pREEZejhtS\",\n  \"EitHiKHGWWadEhZahZLHURVoxPqAUofKLEXfYU9NsvMp\",\n  \"4ZscrWACeLLYrsFLQjX16bdjCqLy6vkKuHa2w3fsakDe\",\n  \"FuPR7rUMzphpQ3YhmENUJUt5gvtDpJDbUqSa6FA82U6p\",\n  \"2o9C56tqnc54QF54MxGn38DNNEa9vAMow3bc5VMqogMV\",\n  \"Ffgr3YTKvhWkdv2pSW2F5VEVvLQvnatje1ookcuJpBAF\",\n  \"J9rKCnTuERL9G95FmFQnYDeLVYrNa7pQBiL13oqGgH3t\",\n  \"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\",\n  \"779kNT4696bMaAkeAHxezAuniTrVjfvrp3vABvhdPGWs\",\n  \"4fA5U4w4DfmNojhKKBCVHeAY5VQ4dYpx5uFQSsrknSFA\",\n  \"BU2oyceVSZXYzxURwhAvfULBSe59v22LQfuYgS585L1g\",\n  \"3BApsMpiSaHfF2a59aW9XAPfGQ8WMaQd7Q1F9rTbhGqv\",\n  \"5oWeivCzcQrcmueDbUAfPQRfjGeDqkVDxErchHUz8NCh\",\n  \"2rrZbBRpt5o7GKnTHusTqRANsj1vs5t4WC9CQPt2cujb\",\n  \"CbN1vKsz99qbQidVR5RfBLmrxPoYbJguEAnsFi5BN5WU\",\n  \"CTwRHSdPNGucwLuLqUMSc5ddJbnSN7GjKFYfm91wJHVo\",\n  \"6NKWLHZENHKvditMFu7z97qJypmJTsz1PbjFVpsmrXMY\",\n  \"5D2kc7J4RNcMzfoAQz1E4NWjLS7GzTnJKvTV3HiospCZ\",\n  \"9hrjJvaYETxp6VcRRX4yzT8jtH6gzoVtFUqdaCksisx4\",\n  \"2kUMSNYvpWXqrpSV2L1GV5UWYH3CFXF7F9QbGkgv9kNw\",\n  \"8nRkgYkufaLQVtuaaPGwrKJBSS7tu55YWx3EiRufD9uU\",\n  \"7aLAz1NE2hx7adjrgDs87GT49gwTkmW2n8gHSRJUVzHa\",\n  \"G2kuL2iKEdYmZBnM1a8rA5j5si4AqySJUq3ujPaJxkDk\",\n  \"FQJUJSHQACz7WLHVM7iS2dKnZVWwFHTuwUdtByLMxXF8\",\n  \"AhtJTzNB7zwLB7RxqbYcpAKBeEfxYrczz12Nn4FgVb2y\",\n  \"7zEHcoELyPvmipqXL297edddhxLfx25UGTvY8dMrZqzT\",\n  \"38mqzHtHLmUMCZyuZKEQB8Zkg2fGkToYw4gVwPC3NoH3\",\n  \"3kL3aPezAbZxzamMurWvjMpXkVQgLAgrh9wT1CeS3CnK\",\n  \"EB7hzkjRjV3AFCfQDuPK8joneM6dW2a96rJCHvc7p1fW\",\n  \"AVbSKg271GmzqrtPmU5fRza9uR2HGLhTy3yiM1mMPTpw\",\n  \"CoVJmrq8KeRZGAcKa6h6mueQsFotVkibehWeKGCZBXe\",\n  \"5bwpMvAA65frL4A1B3nYQcQjLHGUzHhkHX5FV4CVi1s8\",\n  \"Kyi9YmFqBARjW8KwS192hyrfzwyQbCR6utt5yr6hoNg\",\n  \"ESrJ2tXdmkGv81FNJmJcezunQLz3fP6WFzfmZd6d4FPn\",\n  \"8qMsDP7hFWZAKGA2taL7u8rERH4te4D4i8cxzHKtAMcA\",\n  \"5c1ymadNzqM9cE8K8gqDguNYg2jWnGcNBV5S3tGGdhM2\",\n  \"Gx4Y9M67BPsAViveoBcm4JocVh82S7pZsaXc4PH9EibE\",\n  \"5Xb7BoMNP19cXPgLdzrAkJCarznkYAfpmyyCvynJam7K\",\n  \"EZH44QW2BzUijN79rrngRUoGHCJGWitabxkVkT82XpeA\",\n];\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useNFTTVL from \"../../hooks/useNFTTVL\";\nimport {\n  BETA_CHAINS,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n} from \"../../utils/consts\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport {\n  //DENY_LIST,\n  ALLOW_LIST,\n} from \"./nftLists\";\nimport { COLORS } from \"../../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  tableBox: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    flexWrap: \"wrap\",\n  },\n  randomButton: {\n    margin: \"0px auto 8px\",\n    display: \"block\",\n  },\n  randomNftContainer: {\n    minHeight: \"550px\",\n    maxWidth: \"100%\",\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n  tableContainer: {\n    flexGrow: 1,\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst NFTStats: React.FC<any> = () => {\n  const classes = useStyles();\n  const nftTVL = useNFTTVL();\n\n  //Disable this to quickly turn off\n  //TODO also change what data is fetched off this\n  const enableRandomNFT = true;\n\n  const [randomNumber, setRandomNumber] = useState<number | null>(null);\n  const randomNft = useMemo(\n    () =>\n      (randomNumber !== null && nftTVL.data && nftTVL.data[randomNumber]) ||\n      null,\n    [randomNumber, nftTVL.data]\n  );\n  const genRandomNumber = useCallback(() => {\n    if (!nftTVL || !nftTVL.data || !nftTVL.data?.length || nftTVL.isFetching) {\n      setRandomNumber(null);\n    } else {\n      let found = false;\n      let nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n\n      while (!found) {\n        if (!nftTVL.data) {\n          return null;\n        }\n        const item = nftTVL?.data[nextNumber]?.mintKey?.toLowerCase() || null;\n        if (ALLOW_LIST.find((x) => x.toLowerCase() === item)) {\n          found = true;\n        } else {\n          nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n        }\n      }\n\n      setRandomNumber(nextNumber);\n    }\n  }, [nftTVL]);\n  useEffect(() => {\n    genRandomNumber();\n  }, [nftTVL.isFetching, genRandomNumber]);\n\n  const data = useMemo(() => {\n    const output: any[] = [];\n    if (nftTVL.data && !nftTVL.isFetching) {\n      CHAINS_WITH_NFT_SUPPORT.filter(\n        (chain) => !BETA_CHAINS.find((x) => x === chain.id)\n      ).forEach((chain) => {\n        output.push({\n          nfts: nftTVL?.data?.filter((x) => x.chainId === chain.id),\n          chainName: chain.name,\n          chainId: chain.id,\n          chainLogo: chain.logo,\n          contractAddress: getNFTBridgeAddressForChain(chain.id),\n        });\n      });\n    }\n\n    return output;\n  }, [nftTVL]);\n\n  //Generate allow list\n  // useEffect(() => {\n  //   const output: string[] = [];\n  //   if (nftTVL.data) {\n  //     nftTVL.data.forEach((item) => {\n  //       if (\n  //         !DENY_LIST.find((x) => x.toLowerCase() === item.mintKey.toLowerCase())\n  //       ) {\n  //         if (!output.includes(item.mintKey)) {\n  //           output.push(item.mintKey);\n  //         }\n  //       }\n  //     });\n  //   }\n  //   console.log(JSON.stringify(output));\n  // }, [nftTVL.data]);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      // {\n      //   Header: \"Address\",\n      //   accessor: \"contractAddress\",\n      //   disableGroupBy: true,\n      //   Cell: (value: any) =>\n      //     value.row?.original?.contractAddress &&\n      //     value.row?.original?.chainId ? (\n      //       <SmartAddress\n      //         chainId={value.row?.original?.chainId}\n      //         address={value.row?.original?.contractAddress}\n      //       />\n      //     ) : (\n      //       \"\"\n      //     ),\n      // },\n      {\n        Header: \"NFTs Locked\",\n        id: \"nftCount\",\n        accessor: \"nftCount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nfts?.length !== undefined\n            ? numeral(value.row?.original?.nfts?.length).format(\"0 a\")\n            : \"\",\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h4\">Total NFTs Locked</Typography>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          These NFTs are currently locked by the NFT Bridge contracts.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n      {!nftTVL.isFetching ? (\n        <div\n          className={clsx(classes.explainerContainer, classes.totalContainer)}\n        >\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"div\"\n            noWrap\n          >\n            {\"Total \"}\n          </Typography>\n          <Typography\n            variant=\"h3\"\n            component=\"div\"\n            noWrap\n            className={classes.totalValue}\n          >\n            {nftTVL.data?.length || \"0\"}\n          </Typography>\n        </div>\n      ) : null}\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{ sortBy: [{ id: \"nftCount\", desc: true }] }}\n    />\n  );\n\n  const randomNFTContent =\n    enableRandomNFT && randomNft ? (\n      <div className={classes.randomNftContainer}>\n        <Button\n          className={classes.randomButton}\n          variant=\"outlined\"\n          onClick={genRandomNumber}\n        >\n          Load Random Wormhole NFT\n        </Button>\n        <NFTViewer chainId={randomNft.chainId} value={randomNft} />\n      </div>\n    ) : null;\n\n  // const allNfts =\n  //   nftTVL?.data?.map((thing) => (\n  //     <NFTViewer chainId={thing.chainId} value={thing} />\n  //   )) || [];\n\n  return (\n    <>\n      {header}\n      <Paper className={classes.mainPaper}>\n        {nftTVL.isFetching ? (\n          <CircularProgress className={classes.alignCenter} />\n        ) : (\n          <div className={classes.tableBox}>\n            <div className={classes.tableContainer}>{table}</div>\n            {randomNFTContent}\n          </div>\n        )}\n        {/* {allNfts} */}\n      </Paper>\n    </>\n  );\n};\n\nexport default NFTStats;\n","import axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  RECENT_TRANSACTIONS_WORMHOLE,\n  TOTAL_TRANSACTIONS_WORMHOLE,\n  VAA_EMITTER_ADDRESSES,\n} from \"../utils/consts\";\n\nexport type TransactionCount = {\n  totalAllTime: number;\n  total24h: number;\n  mostRecent: any; //This will be a signedVAA\n};\n\nconst mergeResults = (totals: any, recents: any): TransactionCount | null => {\n  let totalAllTime = 0;\n  let total24h = 0;\n  VAA_EMITTER_ADDRESSES.forEach((address: string) => {\n    let totalAll = (totals?.TotalCount && totals.TotalCount[address]) || 0;\n    let total24 = (totals?.LastDayCount && totals.LastDayCount[address]) || 0;\n\n    totalAllTime += totalAll;\n    total24h += total24;\n  });\n\n  return {\n    totalAllTime,\n    total24h,\n    mostRecent: null,\n  };\n};\n\nconst useTransactionCount = (): DataWrapper<TransactionCount> => {\n  const [totals, setTotals] = useState(null);\n  const [recents, setRecents] = useState(null);\n\n  const [loadingTotals, setLoadingTotals] = useState(false);\n  const [loadingRecents, setLoadingRecents] = useState(false);\n\n  const [totalsError, setTotalsError] = useState(\"\");\n  const [recentsError, setRecentsError] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingTotals(true);\n    axios.get(TOTAL_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setTotals(results.data);\n          setLoadingTotals(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setTotalsError(\"Unable to retrieve transaction totals.\");\n          setLoadingTotals(false);\n        }\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingRecents(true);\n    axios.get(RECENT_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setRecents(results.data);\n          setLoadingRecents(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setRecentsError(\"Unable to retrieve recent transactions.\");\n          setLoadingRecents(false);\n        }\n      }\n    );\n  }, []);\n\n  return useMemo(() => {\n    const data = mergeResults(totals, recents);\n    return {\n      isFetching: loadingRecents || loadingTotals,\n      error: totalsError || recentsError,\n      receivedAt: null,\n      data: data,\n    };\n  }, [\n    totals,\n    recents,\n    loadingRecents,\n    loadingTotals,\n    recentsError,\n    totalsError,\n  ]);\n};\n\nexport default useTransactionCount;\n","import {\n  CircularProgress,\n  Link,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport useTransactionCount from \"../../hooks/useTransactionCount\";\nimport { COLORS } from \"../../muiTheme\";\nimport { WORMHOLE_EXPLORER_BASE } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  totalsBox: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    width: \"100%\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n  },\n  totalContainer: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    textAlign: \"center\",\n    marginBottom: theme.spacing(2),\n  },\n  totalValue: {\n    fontWeight: 600,\n  },\n  typog: {\n    marginTop: theme.spacing(3),\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(8),\n  },\n}));\n\nconst TransactionMetrics: React.FC<any> = () => {\n  const transactionCount = useTransactionCount();\n  const classes = useStyles();\n  const isFetching = transactionCount.isFetching;\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div>\n        <Typography variant=\"h4\">Transaction Count</Typography>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          This is how many transactions the Token Bridge has processed.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const content = (\n    <div className={classes.totalsBox}>\n      <div className={classes.totalContainer}>\n        <Typography variant=\"subtitle2\" component=\"div\" noWrap>\n          {\"Last 48 Hours\"}\n        </Typography>\n        <Typography\n          variant=\"h2\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {numeral(transactionCount.data?.total24h || 0).format(\"0,0\")}\n        </Typography>\n      </div>\n      <div className={classes.totalContainer}>\n        <Typography variant=\"subtitle2\" component=\"div\" noWrap>\n          {\"All Time\"}\n        </Typography>\n        <Typography\n          variant=\"h2\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {numeral(transactionCount.data?.totalAllTime || 0).format(\"0,0\")}\n        </Typography>\n      </div>\n    </div>\n  );\n\n  const networkExplorer = (\n    <Typography\n      variant=\"subtitle1\"\n      className={clsx(classes.alignCenter, classes.typog)}\n    >\n      To see metrics for the entire Wormhole Network (not just this bridge),\n      check out the{\" \"}\n      <Link href={WORMHOLE_EXPLORER_BASE} target=\"_blank\">\n        Wormhole Network Explorer\n      </Link>\n    </Typography>\n  );\n\n  return (\n    <>\n      {header}\n      <Paper className={classes.mainPaper}>\n        {isFetching ? (\n          <CircularProgress className={classes.alignCenter} />\n        ) : (\n          <>\n            {content}\n            {networkExplorer}\n          </>\n        )}\n      </Paper>\n    </>\n  );\n};\n\nexport default TransactionMetrics;\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { formatUnits, parseUnits } from \"@ethersproject/units\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useMemo } from \"react\";\nimport useTVL from \"../../hooks/useTVL\";\nimport { COLORS } from \"../../muiTheme\";\nimport HeaderText from \"../HeaderText\";\nimport SmartAddress from \"../SmartAddress\";\nimport { balancePretty } from \"../TokenSelectors/TokenPicker\";\nimport CustodyAddresses from \"./CustodyAddresses\";\nimport NFTStats from \"./NFTStats\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport TransactionMetrics from \"./TransactionMetrics\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(8),\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n}));\n\nconst StatsRoot: React.FC<any> = () => {\n  const classes = useStyles();\n  const tvl = useTVL();\n\n  const sortTokens = useMemo(() => {\n    return (rowA: any, rowB: any) => {\n      if (rowA.isGrouped && rowB.isGrouped) {\n        return rowA.values.assetAddress > rowB.values.assetAddress ? 1 : -1;\n      } else if (rowA.isGrouped && !rowB.isGrouped) {\n        return 1;\n      } else if (!rowA.isGrouped && rowB.isGrouped) {\n        return -1;\n      } else if (rowA.original.symbol && !rowB.original.symbol) {\n        return 1;\n      } else if (rowB.original.symbol && !rowA.original.symbol) {\n        return -1;\n      } else if (rowA.original.symbol && rowB.original.symbol) {\n        return rowA.original.symbol > rowB.original.symbol ? 1 : -1;\n      } else {\n        return rowA.original.assetAddress > rowB.original.assetAddress ? 1 : -1;\n      }\n    };\n  }, []);\n  const tvlColumns = useMemo(() => {\n    return [\n      {\n        Header: \"Token\",\n        id: \"assetAddress\",\n        sortType: sortTokens,\n        disableGroupBy: true,\n        accessor: (value: any) => ({\n          chainId: value.originChainId,\n          symbol: value.symbol,\n          name: value.name,\n          logo: value.logo,\n          assetAddress: value.assetAddress,\n        }),\n        aggregate: (leafValues: any) => leafValues.length,\n        Aggregated: ({ value }: { value: any }) =>\n          `${value} Token${value === 1 ? \"\" : \"s\"}`,\n        Cell: (value: any) => (\n          <div className={classes.tokenContainer}>\n            <div className={classes.logoPositioner}>\n              {value.row?.original?.logo ? (\n                <img\n                  src={value.row?.original?.logo}\n                  alt=\"\"\n                  className={classes.logo}\n                />\n              ) : null}\n            </div>\n            <SmartAddress\n              chainId={value.row?.original?.originChainId}\n              address={value.row?.original?.assetAddress}\n              symbol={value.row?.original?.symbol}\n              tokenName={value.row?.original?.name}\n            />\n          </div>\n        ),\n      },\n      { Header: \"Chain\", accessor: \"originChain\" },\n      {\n        Header: \"Amount\",\n        accessor: \"amount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.amount !== undefined\n            ? numeral(value.row?.original?.amount).format(\"0,0.00\")\n            : \"\",\n      },\n      {\n        Header: \"Total Value (USD)\",\n        id: \"totalValue\",\n        accessor: \"totalValue\",\n        align: \"right\",\n        disableGroupBy: true,\n        aggregate: (leafValues: any) =>\n          balancePretty(\n            formatUnits(\n              leafValues.reduce(\n                (p: BigNumber, v: number | null | undefined) =>\n                  v ? p.add(parseUnits(v.toFixed(18).toString(), 18)) : p,\n                BigNumber.from(0)\n              ),\n              18\n            )\n          ),\n        Aggregated: ({ value }: { value: any }) => value,\n        Cell: (value: any) =>\n          value.row?.original?.totalValue !== undefined\n            ? numeral(value.row?.original?.totalValue).format(\"0.0 a\")\n            : \"\",\n      },\n      {\n        Header: \"Unit Price (USD)\",\n        accessor: \"quotePrice\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.quotePrice !== undefined\n            ? numeral(value.row?.original?.quotePrice).format(\"0,0.00\")\n            : \"\",\n      },\n    ];\n  }, [\n    classes.logo,\n    classes.tokenContainer,\n    classes.logoPositioner,\n    sortTokens,\n  ]);\n  const tvlString = useMemo(() => {\n    if (!tvl.data) {\n      return \"\";\n    } else {\n      let sum = 0;\n      tvl.data.forEach((val) => {\n        if (val.totalValue) sum += val.totalValue;\n      });\n      return numeral(sum)\n        .format(sum >= 1000000000 ? \"0.000 a\" : \"0 a\")\n        .toUpperCase();\n    }\n  }, [tvl.data]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Container maxWidth=\"md\">\n        <HeaderText white>Rock Hard Stats</HeaderText>\n      </Container>\n      <div className={classes.flexBox}>\n        <div className={classes.explainerContainer}>\n          <Typography variant=\"h4\">Total Value Locked</Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            These assets are currently locked by the Token Bridge contracts.\n          </Typography>\n        </div>\n        <div className={classes.grower} />\n        {!tvl.isFetching ? (\n          <div\n            className={clsx(classes.explainerContainer, classes.totalContainer)}\n          >\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              component=\"div\"\n              noWrap\n            >\n              {\"Total (USD)\"}\n            </Typography>\n            <Typography\n              variant=\"h3\"\n              component=\"div\"\n              noWrap\n              className={classes.totalValue}\n            >\n              {tvlString}\n            </Typography>\n          </div>\n        ) : null}\n      </div>\n      <Paper className={classes.mainPaper}>\n        {!tvl.isFetching ? (\n          <MuiReactTable\n            columns={tvlColumns}\n            data={tvl.data}\n            skipPageReset={false}\n            initialState={{ sortBy: [{ id: \"totalValue\", desc: true }] }}\n          />\n        ) : (\n          <CircularProgress className={classes.alignCenter} />\n        )}\n      </Paper>\n      <TransactionMetrics />\n      <CustodyAddresses />\n      <NFTStats />\n    </Container>\n  );\n};\n\nexport default StatsRoot;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n  uint8ArrayToNative,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOLANA_SYSTEM_PROGRAM_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type OriginalAssetInfo = {\n  originChain: ChainId | null;\n  originAddress: string | null;\n  originTokenId: string | null;\n};\n\nexport async function getOriginalAssetToken(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  provider?: Web3Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider) {\n      promise = await getOriginalAssetEth(\n        getTokenBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = await getOriginalAssetSol(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    } else if (foreignChain === CHAIN_ID_TERRA) {\n      const lcd = new LCDClient(TERRA_HOST);\n      promise = await getOriginalAssetTerra(lcd, foreignNativeStringAddress);\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\nexport async function getOriginalAssetNFT(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  tokenId?: string,\n  provider?: Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider && tokenId) {\n      promise = getOriginalAssetEthNFT(\n        getNFTBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        tokenId,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = getOriginalAssetSolNFT(\n        connection,\n        SOL_NFT_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\n//TODO refactor useCheckIfWormholeWrapped to use this function, and probably move to SDK\nexport async function getOriginalAsset(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  nft: boolean,\n  tokenId?: string,\n  provider?: Provider\n): Promise<WormholeWrappedNFTInfo> {\n  const result = nft\n    ? await getOriginalAssetNFT(\n        foreignChain,\n        foreignNativeStringAddress,\n        tokenId,\n        provider\n      )\n    : await getOriginalAssetToken(\n        foreignChain,\n        foreignNativeStringAddress,\n        provider\n      );\n\n  if (\n    isEVMChain(result.chainId) &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      ethers.constants.AddressZero\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n  if (\n    result.chainId === CHAIN_ID_SOLANA &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      SOLANA_SYSTEM_PROGRAM_ADDRESS\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n\n  return result;\n}\n\n//This potentially returns the same chain as the foreign chain, in the case where the asset is native\nfunction useOriginalAsset(\n  foreignChain: ChainId,\n  foreignAddress: string,\n  nft: boolean,\n  tokenId?: string\n): DataWrapper<OriginalAssetInfo> {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const [originAddress, setOriginAddress] = useState<string | null>(null);\n  const [originTokenId, setOriginTokenId] = useState<string | null>(null);\n  const [originChain, setOriginChain] = useState<ChainId | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previousArgs, setPreviousArgs] = useState<{\n    foreignChain: ChainId;\n    foreignAddress: string;\n    nft: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.foreignChain === foreignChain &&\n    previousArgs.foreignAddress === foreignAddress &&\n    previousArgs.nft === nft &&\n    previousArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () => setPreviousArgs({ foreignChain, foreignAddress, nft, tokenId }),\n    [foreignChain, foreignAddress, nft, tokenId]\n  );\n\n  const argumentError = useMemo(\n    () =>\n      !foreignChain ||\n      !foreignAddress ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && nft && !tokenId) ||\n      argsEqual,\n    [isReady, nft, tokenId, argsEqual, foreignChain, foreignAddress]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setError(\"\");\n      setOriginAddress(null);\n      setOriginTokenId(null);\n      setOriginChain(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n\n    getOriginalAsset(foreignChain, foreignAddress, nft, tokenId, provider)\n      .then((result) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setArgs();\n          setOriginAddress(\n            hexToNativeString(\n              uint8ArrayToHex(result.assetAddress),\n              result.chainId\n            ) || null\n          );\n          setOriginTokenId(result.tokenId || null);\n          setOriginChain(result.chainId);\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Unable to determine original asset.\");\n        }\n      });\n  }, [\n    foreignChain,\n    foreignAddress,\n    nft,\n    provider,\n    setArgs,\n    argumentError,\n    tokenId,\n    argsEqual,\n  ]);\n\n  const output: DataWrapper<OriginalAssetInfo> = useMemo(\n    () => ({\n      error: error,\n      isFetching: isLoading,\n      data:\n        originChain || originAddress || originTokenId\n          ? { originChain, originAddress, originTokenId }\n          : null,\n      receivedAt: null,\n    }),\n    [isLoading, originAddress, originChain, originTokenId, error]\n  );\n\n  return output;\n}\n\nexport default useOriginalAsset;\n","import { Button } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  setSourceAsset,\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestSignedVAAHex,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { ChainId, hexToNativeString } from \"@certusone/wormhole-sdk\";\n\nexport function RegisterNowButtonCore({\n  originChain,\n  originAsset,\n  targetChain,\n}: {\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  targetChain: ChainId;\n}) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  // user might be in the middle of a different attest\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const canSwitch = originChain && originAsset && !signedVAAHex;\n  const handleClick = useCallback(() => {\n    const nativeAsset =\n      originChain && hexToNativeString(originAsset, originChain);\n    if (originChain && originAsset && nativeAsset && canSwitch) {\n      dispatch(setSourceChain(originChain));\n      dispatch(setSourceAsset(nativeAsset));\n      dispatch(setTargetChain(targetChain));\n      dispatch(setStep(2));\n      history.push(\"/register\");\n    }\n  }, [dispatch, canSwitch, originChain, originAsset, targetChain, history]);\n  if (!canSwitch) return null;\n  return (\n    <Button\n      variant=\"outlined\"\n      size=\"small\"\n      style={{ display: \"block\", margin: \"4px auto 0px\" }}\n      onClick={handleClick}\n    >\n      Register Now\n    </Button>\n  );\n}\n\nexport default function RegisterNowButton() {\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  return (\n    <RegisterNowButtonCore\n      originChain={originChain}\n      originAsset={originAsset}\n      targetChain={targetChain}\n    />\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport useFetchForeignAsset, {\n  ForeignAssetInfo,\n} from \"../hooks/useFetchForeignAsset\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetadata from \"../hooks/useMetadata\";\nimport useOriginalAsset, { OriginalAssetInfo } from \"../hooks/useOriginalAsset\";\nimport { COLORS } from \"../muiTheme\";\nimport { BETA_CHAINS, CHAINS, CHAINS_BY_ID } from \"../utils/consts\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport SmartAddress from \"./SmartAddress\";\nimport { RegisterNowButtonCore } from \"./Transfer/RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(2),\n    },\n  },\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  spacer: {\n    height: theme.spacing(3),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  arrowIcon: {\n    margin: \"0 auto\",\n    fontSize: \"70px\",\n  },\n  resultContainer: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction PrimaryAssetInfomation({\n  lookupChain,\n  lookupAsset,\n  originChain,\n  originAsset,\n  showLoader,\n}: {\n  lookupChain: ChainId;\n  lookupAsset: string;\n  originChain: ChainId;\n  originAsset: string;\n  showLoader: boolean;\n}) {\n  const classes = useStyles();\n  const tokenArray = useMemo(() => [originAsset], [originAsset]);\n  const metadata = useMetadata(originChain, tokenArray);\n  const nativeContent = (\n    <div>\n      <Typography>{`This is not a Wormhole wrapped token.`}</Typography>\n    </div>\n  );\n  const wrapped = (\n    <div>\n      <Typography>{`This is wrapped by Wormhole! Here is the original token: `}</Typography>\n      <div className={classes.flexBox}>\n        <Typography>{`Chain: ${CHAINS_BY_ID[originChain].name}`}</Typography>\n        <div>\n          <Typography component=\"div\">\n            {\"Token: \"}\n            <SmartAddress\n              address={originAsset}\n              chainId={originChain}\n              symbol={metadata.data?.get(originAsset)?.symbol}\n              tokenName={metadata.data?.get(originAsset)?.tokenName}\n            />\n          </Typography>\n        </div>\n      </div>\n    </div>\n  );\n  return lookupChain === originChain ? nativeContent : wrapped;\n}\n\nfunction SecondaryAssetInformation({\n  chainId,\n  foreignAssetInfo,\n  originAssetInfo,\n}: {\n  chainId: ChainId;\n  foreignAssetInfo?: ForeignAssetInfo;\n  originAssetInfo?: OriginalAssetInfo;\n}) {\n  const classes = useStyles();\n  const tokenArray: string[] = useMemo(() => {\n    //Saved to a variable to help typescript cope\n    const originAddress = originAssetInfo?.originAddress;\n    return originAddress && chainId === originAssetInfo?.originChain\n      ? [originAddress]\n      : foreignAssetInfo?.address\n      ? [foreignAssetInfo?.address]\n      : [];\n  }, [foreignAssetInfo, originAssetInfo, chainId]);\n  const metadata = useMetadata(chainId, tokenArray);\n  //TODO when this is the origin chain\n  return !originAssetInfo ? null : chainId === originAssetInfo.originChain ? (\n    <div>\n      <Typography>{`Transferring to ${CHAINS_BY_ID[chainId].name} will unwrap the token:`}</Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={originAssetInfo.originAddress || undefined}\n          symbol={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")\n              ?.tokenName || undefined\n          }\n        />\n      </div>\n    </div>\n  ) : !foreignAssetInfo ? null : foreignAssetInfo.doesExist === false ? (\n    <div>\n      <Typography>{`This token has not yet been registered on ${CHAINS_BY_ID[chainId].name}`}</Typography>\n      <RegisterNowButtonCore\n        originChain={originAssetInfo?.originChain || undefined}\n        originAsset={\n          nativeToHexString(\n            originAssetInfo?.originAddress || undefined,\n            originAssetInfo?.originChain || CHAIN_ID_SOLANA // this should exist\n          ) || undefined\n        }\n        targetChain={chainId}\n      />\n    </div>\n  ) : (\n    <div>\n      <Typography>When bridged, this asset becomes: </Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={foreignAssetInfo.address || undefined}\n          symbol={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.tokenName ||\n            undefined\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function TokenOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n\n  const [primaryLookupChain, setPrimaryLookupChain] = useState(CHAIN_ID_SOLANA);\n  const [primaryLookupAsset, setPrimaryLookupAsset] = useState(\"\");\n\n  const [secondaryLookupChain, setSecondaryLookupChain] =\n    useState(CHAIN_ID_TERRA);\n\n  const primaryLookupChainOptions = useMemo(\n    () => (isBeta ? CHAINS.filter((x) => !BETA_CHAINS.includes(x.id)) : CHAINS),\n    [isBeta]\n  );\n  const secondaryLookupChainOptions = useMemo(\n    () =>\n      isBeta\n        ? CHAINS.filter(\n            (x) => !BETA_CHAINS.includes(x.id) && x.id !== primaryLookupChain\n          )\n        : CHAINS.filter((x) => x.id !== primaryLookupChain),\n    [isBeta, primaryLookupChain]\n  );\n\n  const handlePrimaryLookupChainChange = useCallback(\n    (e) => {\n      setPrimaryLookupChain(e.target.value);\n      if (secondaryLookupChain === e.target.value) {\n        setSecondaryLookupChain(\n          e.target.value === CHAIN_ID_SOLANA ? CHAIN_ID_TERRA : CHAIN_ID_SOLANA\n        );\n      }\n      setPrimaryLookupAsset(\"\");\n    },\n    [secondaryLookupChain]\n  );\n  const handleSecondaryLookupChainChange = useCallback((e) => {\n    setSecondaryLookupChain(e.target.value);\n  }, []);\n  const handlePrimaryLookupAssetChange = useCallback((event) => {\n    setPrimaryLookupAsset(event.target.value);\n  }, []);\n\n  const originInfo = useOriginalAsset(\n    primaryLookupChain,\n    primaryLookupAsset,\n    false\n  );\n  const foreignAssetInfo = useFetchForeignAsset(\n    originInfo.data?.originChain || 1,\n    originInfo.data?.originAddress || \"\",\n    secondaryLookupChain\n  );\n\n  const primaryWalletIsActive = !originInfo.data;\n  const secondaryWalletIsActive = !primaryWalletIsActive;\n\n  const primaryWallet = useIsWalletReady(\n    primaryLookupChain,\n    primaryWalletIsActive\n  );\n  const secondaryWallet = useIsWalletReady(\n    secondaryLookupChain,\n    secondaryWalletIsActive\n  );\n\n  const primaryWalletError =\n    isEVMChain(primaryLookupChain) &&\n    primaryLookupAsset &&\n    !originInfo.data &&\n    !originInfo.error &&\n    (!primaryWallet.isReady ? primaryWallet.statusMessage : \"\");\n  const originError = originInfo.error;\n  const primaryError = primaryWalletError || originError;\n\n  const secondaryWalletError =\n    isEVMChain(secondaryLookupChain) &&\n    originInfo.data?.originAddress &&\n    originInfo.data?.originChain &&\n    !foreignAssetInfo.data &&\n    (!secondaryWallet.isReady ? secondaryWallet.statusMessage : \"\");\n  const foreignError = foreignAssetInfo.error;\n  const secondaryError = secondaryWalletError || foreignError;\n\n  const primaryContent = (\n    <>\n      <Typography variant=\"h5\">Source Information</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Enter a token from any supported chain to get started.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Chain\"\n        value={primaryLookupChain}\n        onChange={handlePrimaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {primaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        label=\"Paste an address\"\n        value={primaryLookupAsset}\n        onChange={handlePrimaryLookupAssetChange}\n      />\n      <div className={classes.centered}>\n        {isEVMChain(primaryLookupChain) ? (\n          <KeyAndBalance chainId={primaryLookupChain} />\n        ) : null}\n        {primaryError ? (\n          <Typography color=\"error\">{primaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {originInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <PrimaryAssetInfomation\n            lookupAsset={primaryLookupAsset}\n            lookupChain={primaryLookupChain}\n            originChain={originInfo.data.originChain}\n            originAsset={originInfo.data.originAddress}\n            showLoader={originInfo.isFetching}\n          />\n        ) : null}\n      </div>\n    </>\n  );\n\n  const secondaryContent = originInfo.data ? (\n    <>\n      <Typography variant=\"h5\">Bridge Results</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Select a chain to see the result of bridging this token.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Other Chain\"\n        value={secondaryLookupChain}\n        onChange={handleSecondaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {secondaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <div className={classes.centered}>\n        {isEVMChain(secondaryLookupChain) ? (\n          <KeyAndBalance chainId={secondaryLookupChain} />\n        ) : null}\n        {secondaryError ? (\n          <Typography color=\"error\">{secondaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {foreignAssetInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <SecondaryAssetInformation\n            foreignAssetInfo={foreignAssetInfo.data || undefined}\n            originAssetInfo={originInfo.data || undefined}\n            chainId={secondaryLookupChain}\n          />\n        ) : null}\n      </div>\n    </>\n  ) : null;\n\n  const content = (\n    <div>\n      <Container maxWidth=\"md\" className={classes.centered}>\n        <HeaderText white>Token Origin Verifier</HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>{primaryContent}</Card>\n        {secondaryContent ? (\n          <>\n            <div className={classes.centered}>\n              <ArrowDropDownIcon className={classes.arrowIcon} />\n            </div>\n            <Card className={classes.mainCard}>{secondaryContent}</Card>\n          </>\n        ) : null}\n      </Container>\n    </div>\n  );\n\n  return content;\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport {\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { getEvmChainId } from \"../../utils/consts\";\nimport {\n  ethTokenToParsedTokenAccount,\n  getEthereumToken,\n} from \"../../utils/ethereum\";\n\nconst useStyles = makeStyles((theme) => ({\n  addButton: {\n    display: \"block\",\n    margin: `${theme.spacing(1)}px auto 0px`,\n  },\n}));\n\nexport default function AddToMetamask() {\n  const classes = useStyles();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const handleClick = useCallback(() => {\n    if (provider && targetAsset && signerAddress && hasCorrectEvmNetwork) {\n      (async () => {\n        try {\n          const token = await getEthereumToken(targetAsset, provider);\n          const { symbol, decimals } = await ethTokenToParsedTokenAccount(\n            token,\n            signerAddress\n          );\n          const ethereum = (await detectEthereumProvider()) as any;\n          ethereum.request({\n            method: \"wallet_watchAsset\",\n            params: {\n              type: \"ERC20\", // In the future, other standards will be supported\n              options: {\n                address: targetAsset, // The address of the token contract\n                symbol: (\n                  symbol ||\n                  sourceParsedTokenAccount?.symbol ||\n                  \"wh\"\n                ).substr(0, 5), // A ticker symbol or shorthand, up to 5 characters\n                decimals, // The number of token decimals\n                // image: string; // A string url of the token logo\n              },\n            },\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      })();\n    }\n  }, [\n    provider,\n    targetAsset,\n    signerAddress,\n    hasCorrectEvmNetwork,\n    sourceParsedTokenAccount,\n  ]);\n  return provider &&\n    signerAddress &&\n    targetAsset &&\n    isEVMChain(targetChain) &&\n    hasCorrectEvmNetwork ? (\n    <Button\n      onClick={handleClick}\n      size=\"small\"\n      variant=\"outlined\"\n      className={classes.addButton}\n    >\n      Add to Metamask\n    </Button>\n  ) : null;\n}\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  WSOL_ADDRESS,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Checkbox,\n  FormControlLabel,\n  Link,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetIsTransferCompleted from \"../../hooks/useGetIsTransferCompleted\";\nimport { useHandleRedeem } from \"../../hooks/useHandleRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferIsRecovery,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport {\n  getHowToAddTokensToWalletUrl,\n  ROPSTEN_WETH_ADDRESS,\n  WAVAX_ADDRESS,\n  WBNB_ADDRESS,\n  WETH_ADDRESS,\n  WMATIC_ADDRESS,\n  WROSE_ADDRESS,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport SmartAddress from \"../SmartAddress\";\nimport { SolanaCreateAssociatedAddressAlternate } from \"../SolanaCreateAssociatedAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport AddToMetamask from \"./AddToMetamask\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Redeem() {\n  const { handleClick, handleNativeClick, disabled, showLoader } =\n    useHandleRedeem();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const isRecovery = useSelector(selectTransferIsRecovery);\n  const { isTransferCompletedLoading, isTransferCompleted } =\n    useGetIsTransferCompleted(true);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  //TODO better check, probably involving a hook & the VAA\n  const isEthNative =\n    targetChain === CHAIN_ID_ETH &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WETH_ADDRESS.toLowerCase();\n  const isEthRopstenNative =\n    targetChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n    targetAsset &&\n    targetAsset.toLowerCase() === ROPSTEN_WETH_ADDRESS.toLowerCase();\n  const isBscNative =\n    targetChain === CHAIN_ID_BSC &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WBNB_ADDRESS.toLowerCase();\n  const isPolygonNative =\n    targetChain === CHAIN_ID_POLYGON &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WMATIC_ADDRESS.toLowerCase();\n  const isAvaxNative =\n    targetChain === CHAIN_ID_AVAX &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WAVAX_ADDRESS.toLowerCase();\n  const isOasisNative =\n    targetChain === CHAIN_ID_OASIS &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WROSE_ADDRESS.toLowerCase();\n  const isSolNative =\n    targetChain === CHAIN_ID_SOLANA &&\n    targetAsset &&\n    targetAsset === WSOL_ADDRESS;\n  const isNativeEligible =\n    isEthNative ||\n    isEthRopstenNative ||\n    isBscNative ||\n    isPolygonNative ||\n    isAvaxNative ||\n    isOasisNative ||\n    isSolNative;\n  const [useNativeRedeem, setUseNativeRedeem] = useState(true);\n  const toggleNativeRedeem = useCallback(() => {\n    setUseNativeRedeem(!useNativeRedeem);\n  }, [useNativeRedeem]);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const howToAddTokensUrl = getHowToAddTokensToWalletUrl(targetChain);\n\n  return (\n    <>\n      <StepDescription>Receive the tokens on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      {targetChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      {isNativeEligible && (\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={useNativeRedeem}\n              onChange={toggleNativeRedeem}\n              color=\"primary\"\n            />\n          }\n          label=\"Automatically unwrap to native currency\"\n        />\n      )}\n      {targetChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      {targetChain === CHAIN_ID_SOLANA ? (\n        <SolanaCreateAssociatedAddressAlternate />\n      ) : null}\n\n      <ButtonWithLoader\n        //TODO disable when the associated token account is confirmed to not exist\n        disabled={\n          !isReady ||\n          disabled ||\n          (isRecovery && (isTransferCompletedLoading || isTransferCompleted))\n        }\n        onClick={\n          isNativeEligible && useNativeRedeem ? handleNativeClick : handleClick\n        }\n        showLoader={showLoader || (isRecovery && isTransferCompletedLoading)}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n\n      {isRecovery && isReady && isTransferCompleted ? (\n        <>\n          <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n            These tokens have already been redeemed.{\" \"}\n            {!isEVMChain(targetChain) && howToAddTokensUrl ? (\n              <Link\n                href={howToAddTokensUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Click here to see how to add them to your wallet.\n              </Link>\n            ) : null}\n          </Alert>\n          {targetAsset ? (\n            <>\n              <span>Token Address:</span>\n              <SmartAddress\n                chainId={targetChain}\n                address={targetAsset || undefined}\n              />\n            </>\n          ) : null}\n          {isEVMChain(targetChain) ? <AddToMetamask /> : null}\n          <ButtonWithLoader onClick={handleResetClick}>\n            Transfer More Tokens!\n          </ButtonWithLoader>\n        </>\n      ) : null}\n    </>\n  );\n}\n\nexport default Redeem;\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getIsTransferCompletedEth,\n  getIsTransferCompletedSolana,\n  getIsTransferCompletedTerra,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  selectTransferIsRecovery,\n  selectTransferTargetAddressHex,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  TERRA_GAS_PRICES_URL,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\n/**\n * @param recoveryOnly Only fire when in recovery mode\n */\nexport default function useGetIsTransferCompleted(recoveryOnly: boolean): {\n  isTransferCompletedLoading: boolean;\n  isTransferCompleted: boolean;\n} {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTransferCompleted, setIsTransferCompleted] = useState(false);\n\n  const isRecovery = useSelector(selectTransferIsRecovery);\n  const targetAddress = useSelector(selectTransferTargetAddressHex);\n  const targetChain = useSelector(selectTransferTargetChain);\n\n  const { isReady, walletAddress } = useIsWalletReady(targetChain, false);\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const signedVAA = useTransferSignedVAA();\n\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const shouldFire = !recoveryOnly || isRecovery;\n\n  useEffect(() => {\n    if (!shouldFire) {\n      return;\n    }\n\n    let cancelled = false;\n    let transferCompleted = false;\n    if (targetChain && targetAddress && signedVAA && isReady) {\n      if (isEVMChain(targetChain) && hasCorrectEvmNetwork && provider) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            transferCompleted = await getIsTransferCompletedEth(\n              getTokenBridgeAddressForChain(targetChain),\n              provider,\n              signedVAA\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_SOLANA) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            transferCompleted = await getIsTransferCompletedSolana(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              connection\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_TERRA && walletAddress) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const lcdClient = new LCDClient(TERRA_HOST);\n            transferCompleted = await getIsTransferCompletedTerra(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              walletAddress,\n              lcdClient,\n              TERRA_GAS_PRICES_URL\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      }\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    shouldFire,\n    hasCorrectEvmNetwork,\n    targetChain,\n    targetAddress,\n    signedVAA,\n    isReady,\n    walletAddress,\n    provider,\n  ]);\n\n  return { isTransferCompletedLoading: isLoading, isTransferCompleted };\n}\n","import { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport {\n  selectSolanaTokenMap,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { JUPITER_SWAP_BASE_URL } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginTop: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(0.5, 0.5),\n  },\n}));\n\nfunction getJupiterSwapUrl(\n  link: string,\n  targetAsset: string,\n  tokenMap: DataWrapper<TokenInfo[]>\n) {\n  if (!tokenMap.error && !tokenMap.isFetching && tokenMap.data) {\n    const tokenInfo = tokenMap.data.find((value) => {\n      return value.address === targetAsset;\n    });\n    if (tokenInfo) {\n      const sourceSymbol = tokenInfo.symbol;\n      if (sourceSymbol) {\n        const targetSymbol = sourceSymbol === \"UST\" ? \"SOL\" : \"UST\";\n        return `${JUPITER_SWAP_BASE_URL}/${sourceSymbol}-${targetSymbol}`;\n      }\n    }\n  }\n  return link;\n}\n\nexport default function FeaturedMarkets() {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const solanaTokenMap = useSelector(selectSolanaTokenMap);\n  const { data: marketsData } = useMarketsMap(true);\n  const classes = useStyles();\n\n  if (\n    !sourceAsset ||\n    !targetAsset ||\n    !marketsData ||\n    !marketsData.markets ||\n    !marketsData.tokenMarkets\n  ) {\n    return null;\n  }\n\n  const tokenMarkets =\n    marketsData.tokenMarkets[sourceChain]?.[targetChain]?.[sourceAsset];\n  if (!tokenMarkets) {\n    return null;\n  }\n\n  const tokenMarketButtons = [];\n  for (const market of tokenMarkets.markets) {\n    const marketInfo = marketsData.markets[market];\n    if (marketInfo) {\n      const url =\n        market === \"jupiter\"\n          ? getJupiterSwapUrl(marketInfo.link, sourceAsset, solanaTokenMap)\n          : marketInfo.link;\n      tokenMarketButtons.push(\n        <Button\n          key={market}\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          startIcon={<Launch />}\n          href={url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.button}\n        >\n          {marketInfo.name}\n        </Button>\n      );\n    }\n  }\n\n  return tokenMarketButtons.length ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography\n        variant=\"subtitle2\"\n        gutterBottom\n        className={classes.description}\n      >\n        Featured markets\n      </Typography>\n      {tokenMarketButtons}\n    </div>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport AddToMetamask from \"./AddToMetamask\";\nimport FeaturedMarkets from \"./FeaturedMarkets\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The tokens will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <AddToMetamask />\n      <FeaturedMarkets />\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer More Tokens!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  transferFromEth,\n  transferFromEthNative,\n  transferFromSolana,\n  transferFromTerra,\n  transferNativeSol,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { parseUnits, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTerraFeeDenom,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n  selectTransferIsTargetComplete,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/transferSlice\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport useTransferTargetAddressHex from \"./useTransferTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals);\n    const receipt = isNative\n      ? await transferFromEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        )\n      : await transferFromEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          tokenAddress,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  isNative: boolean,\n  originAddressStr?: string,\n  originChain?: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const amountParsed = parseUnits(amount, decimals).toBigInt();\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const promise = isNative\n      ? transferNativeSol(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          amountParsed,\n          targetAddress,\n          targetChain\n        )\n      : transferFromSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          fromAddress,\n          mintAddress,\n          amountParsed,\n          targetAddress,\n          targetChain,\n          originAddress,\n          originChain\n        );\n    const transaction = await promise;\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  feeDenom: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals).toString();\n    const msgs = await transferFromTerra(\n      wallet.terraAddress,\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      asset,\n      amountParsed,\n      targetChain,\n      targetAddress\n    );\n\n    const result = await postWithFees(\n      wallet,\n      msgs,\n      \"Wormhole - Initiate Transfer\",\n      [feeDenom]\n    );\n\n    const info = await waitForTerraExecution(result);\n    dispatch(setTransferTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const amount = useSelector(selectTransferAmount);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddress = useTransferTargetAddressHex();\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const decimals = sourceParsedTokenAccount?.decimals;\n  const isNative = sourceParsedTokenAccount?.isNativeAsset || false;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        isNative,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress &&\n      decimals !== undefined\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        isNative,\n        originAsset,\n        originChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_TERRA &&\n      !!terraWallet &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        terraFeeDenom\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceTokenPublicKey,\n    sourceAsset,\n    amount,\n    decimals,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    isNative,\n    terraFeeDenom,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferTargetAddressHex() {\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetParsedTokenAccount } from \"../store/transferSlice\";\nimport { getEvmChainId, SOLANA_HOST, TERRA_HOST } from \"../utils/consts\";\nimport { createParsedTokenAccount } from \"./useGetSourceParsedTokenAccounts\";\nimport useMetadata from \"./useMetadata\";\n\nfunction useGetTargetParsedTokenAccounts() {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetAssetArrayed = useMemo(\n    () => (targetAsset ? [targetAsset] : []),\n    [targetAsset]\n  );\n  const metadata = useMetadata(targetChain, targetAssetArrayed);\n  const tokenName =\n    (targetAsset && metadata.data?.get(targetAsset)?.tokenName) || undefined;\n  const symbol =\n    (targetAsset && metadata.data?.get(targetAsset)?.symbol) || undefined;\n  const logo =\n    (targetAsset && metadata.data?.get(targetAsset)?.logo) || undefined;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const hasResolvedMetadata = metadata.data || metadata.error;\n  useEffect(() => {\n    // targetParsedTokenAccount is cleared on setTargetAsset, but we need to clear it on wallet changes too\n    dispatch(setTargetParsedTokenAccount(undefined));\n    if (!targetAsset || !hasResolvedMetadata) {\n      return;\n    }\n    let cancelled = false;\n\n    if (targetChain === CHAIN_ID_TERRA && terraWallet) {\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.wasm\n        .contractQuery(targetAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(targetAsset, {\n              balance: {\n                address: terraWallet.walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                dispatch(\n                  setTargetParsedTokenAccount(\n                    createParsedTokenAccount(\n                      \"\",\n                      \"\",\n                      balance.balance.toString(),\n                      info.decimals,\n                      Number(formatUnits(balance.balance, info.decimals)),\n                      formatUnits(balance.balance, info.decimals),\n                      symbol,\n                      tokenName,\n                      logo\n                    )\n                  )\n                );\n              }\n            })\n        );\n    }\n    if (targetChain === CHAIN_ID_SOLANA && solPK) {\n      let mint;\n      try {\n        mint = new PublicKey(targetAsset);\n      } catch (e) {\n        return;\n      }\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      connection\n        .getParsedTokenAccountsByOwner(solPK, { mint })\n        .then(({ value }) => {\n          if (!cancelled) {\n            if (value.length) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    value[0].pubkey.toString(),\n                    value[0].account.data.parsed?.info?.mint,\n                    value[0].account.data.parsed?.info?.tokenAmount?.amount,\n                    value[0].account.data.parsed?.info?.tokenAmount?.decimals,\n                    value[0].account.data.parsed?.info?.tokenAmount?.uiAmount,\n                    value[0].account.data.parsed?.info?.tokenAmount\n                      ?.uiAmountString,\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            } else {\n              // TODO: error state\n            }\n          }\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    if (\n      isEVMChain(targetChain) &&\n      provider &&\n      signerAddress &&\n      hasCorrectEvmNetwork\n    ) {\n      const token = TokenImplementation__factory.connect(targetAsset, provider);\n      token\n        .decimals()\n        .then((decimals) => {\n          token.balanceOf(signerAddress).then((n) => {\n            if (!cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  // TODO: verify accuracy\n                  createParsedTokenAccount(\n                    signerAddress,\n                    token.address,\n                    n.toString(),\n                    decimals,\n                    Number(formatUnits(n, decimals)),\n                    formatUnits(n, decimals),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          });\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    targetAsset,\n    targetChain,\n    provider,\n    signerAddress,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    hasCorrectEvmNetwork,\n    hasResolvedMetadata,\n    symbol,\n    tokenName,\n    logo,\n  ]);\n}\n\nexport default useGetTargetParsedTokenAccounts;\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  hexToNativeString,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetTargetParsedTokenAccounts from \"../../hooks/useGetTargetParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport {\n  selectTransferAmount,\n  selectTransferIsTargetComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceChain,\n  selectTransferTargetAddressHex,\n  selectTransferTargetAsset,\n  selectTransferTargetAssetWrapper,\n  selectTransferTargetBalanceString,\n  selectTransferTargetChain,\n  selectTransferTargetError,\n  selectTransferTargetParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { incrementStep, setTargetChain } from \"../../store/transferSlice\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport RegisterNowButton from \"./RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport const useTargetInfo = () => {\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const tokenName = targetParsedTokenAccount?.name;\n  const symbol = targetParsedTokenAccount?.symbol;\n  const logo = targetParsedTokenAccount?.logo;\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  return useMemo(\n    () => ({\n      targetChain,\n      targetAsset,\n      tokenName,\n      symbol,\n      logo,\n      readableTargetAddress,\n    }),\n    [targetChain, targetAsset, tokenName, symbol, logo, readableTargetAddress]\n  );\n};\n\nfunction Target() {\n  useGetTargetParsedTokenAccounts();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const { error: targetAssetError, data } = useSelector(\n    selectTransferTargetAssetWrapper\n  );\n  const {\n    targetChain,\n    targetAsset,\n    tokenName,\n    symbol,\n    logo,\n    readableTargetAddress,\n  } = useTargetInfo();\n  const uiAmountString = useSelector(selectTransferTargetBalanceString);\n  const transferAmount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferTargetError);\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  const isLoading = !statusMessage && !targetAssetError && !data;\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      targetChain,\n      targetAsset,\n      readableTargetAddress\n    );\n  useSyncTargetAddress(!shouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={true}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      {readableTargetAddress ? (\n        <>\n          {targetAsset ? (\n            <div className={classes.transferField}>\n              <Typography variant=\"subtitle2\">Bridged tokens:</Typography>\n              <Typography component=\"div\">\n                <SmartAddress\n                  chainId={targetChain}\n                  address={targetAsset}\n                  symbol={symbol}\n                  tokenName={tokenName}\n                  logo={logo}\n                  variant=\"h6\"\n                />\n                {`(Amount: ${transferAmount})`}\n              </Typography>\n            </div>\n          ) : null}\n          <div className={classes.transferField}>\n            <Typography variant=\"subtitle2\">Sent to:</Typography>\n            <Typography component=\"div\">\n              <SmartAddress\n                chainId={targetChain}\n                address={readableTargetAddress}\n                variant=\"h6\"\n              />\n              {`(Current balance: ${uiAmountString || \"0\"})`}\n            </Typography>\n          </div>\n        </>\n      ) : null}\n      {targetChain === CHAIN_ID_SOLANA && targetAsset ? (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={readableTargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your tokens.\n        </Typography>\n        {(isEVMChain(targetChain) || targetChain === CHAIN_ID_TERRA) && (\n          <GasEstimateSummary methodType=\"transfer\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      {targetChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={!isTargetComplete || !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={isLoading}\n        error={\n          statusMessage || (isLoading ? undefined : error || targetAssetError)\n        }\n      >\n        Next\n      </ButtonWithLoader>\n      {!statusMessage && data && !data.doesExist ? <RegisterNowButton /> : null}\n    </>\n  );\n}\n\nexport default Target;\n","import { ChainId, CHAIN_ID_ETH, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Box, Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  AVAILABLE_MARKETS_URL,\n  CHAINS_BY_ID,\n  MULTI_CHAIN_TOKENS,\n} from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    textAlign: \"center\",\n  },\n  line: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction WormholeWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n      <Typography component=\"div\" className={classes.line}>\n        The tokens you will receive are{\" \"}\n        <Box fontWeight={900} display=\"inline\">\n          Wormhole Wrapped Tokens\n        </Box>{\" \"}\n        and will need to be exchanged for native assets.\n      </Typography>\n      <Typography component=\"div\">\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction MultichainWarning({\n  symbol,\n  targetChain,\n}: {\n  symbol: string;\n  targetChain: ChainId;\n}) {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography\n        variant=\"h6\"\n        className={classes.line}\n      >{`You will not receive native ${symbol} on ${CHAINS_BY_ID[targetChain].name}`}</Typography>\n      <Typography\n        className={classes.line}\n      >{`To receive native ${symbol}, you will have to perform a swap with the wrapped tokens once you are done bridging.`}</Typography>\n      <Typography>\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction RewardsWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      Lido stETH rewards can only be received on Ethereum. Use the value\n      accruing wrapper token wstETH instead.\n    </Alert>\n  );\n}\n\nexport default function TokenWarning({\n  sourceChain,\n  sourceAsset,\n  originChain,\n  targetChain,\n  targetAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (\n    !(originChain && targetChain && targetAsset && sourceChain && sourceAsset)\n  ) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const isWormholeWrapped = originChain !== targetChain;\n  const multichainSymbol =\n    MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress] || undefined;\n  const isMultiChain = !!multichainSymbol;\n  const isRewardsToken =\n    searchableAddress === \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\" &&\n    sourceChain === CHAIN_ID_ETH;\n\n  const showMultiChainWarning = isMultiChain && isWormholeWrapped;\n  const showWrappedWarning = !isMultiChain && isWormholeWrapped; //Multichain warning is more important\n  const showRewardsWarning = isRewardsToken;\n\n  return (\n    <>\n      {showMultiChainWarning ? (\n        <MultichainWarning\n          symbol={multichainSymbol || \"tokens\"}\n          targetChain={targetChain}\n        />\n      ) : null}\n      {showWrappedWarning ? <WormholeWrappedWarning /> : null}\n      {showRewardsWarning ? <RewardsWarning /> : null}\n    </>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowDownward } from \"@material-ui/icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferOriginChain,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, MULTI_CHAIN_TOKENS } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport { useTargetInfo } from \"./Target\";\nimport TokenWarning from \"./TokenWarning\";\n\nfunction SendConfirmationContent({\n  open,\n  onClose,\n  onClick,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onClick: () => void;\n}) {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const { targetChain, targetAsset, symbol, tokenName, logo } = useTargetInfo();\n  const originChain = useSelector(selectTransferOriginChain);\n\n  //TODO this check is essentially duplicated.\n  const deservesTimeout = useMemo(() => {\n    if (originChain && sourceParsedTokenAccount?.mintKey) {\n      const searchableAddress = isEVMChain(originChain)\n        ? sourceParsedTokenAccount.mintKey.toLowerCase()\n        : sourceParsedTokenAccount.mintKey;\n      return (\n        originChain !== targetChain &&\n        !!MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress]\n      );\n    } else {\n      return false;\n    }\n  }, [originChain, targetChain, sourceChain, sourceParsedTokenAccount]);\n  const timeoutDuration = 5;\n\n  const [countdown, setCountdown] = useState(\n    deservesTimeout ? timeoutDuration : 0\n  );\n\n  useEffect(() => {\n    if (!deservesTimeout || countdown === 0) {\n      return;\n    }\n    let cancelled = false;\n\n    setInterval(() => {\n      if (!cancelled) {\n        setCountdown((state) => state - 1);\n      }\n    }, 1000);\n\n    return () => {\n      cancelled = true;\n    };\n  }, [deservesTimeout, countdown]);\n\n  useEffect(() => {\n    if (open && deservesTimeout) {\n      //Countdown starts on mount, but we actually want it to start on open\n      setCountdown(timeoutDuration);\n    }\n  }, [open, deservesTimeout]);\n\n  const sendConfirmationContent = (\n    <>\n      <DialogTitle>Are you sure?</DialogTitle>\n      <DialogContent>\n        {targetAsset ? (\n          <div style={{ textAlign: \"center\", marginBottom: 16 }}>\n            <Typography variant=\"subtitle1\" style={{ marginBottom: 8 }}>\n              You are about to perform this transfer:\n            </Typography>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={sourceChain}\n              parsedTokenAccount={sourceParsedTokenAccount}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[sourceChain].name}\n              </Typography>\n            </div>\n            <div style={{ paddingTop: 4 }}>\n              <ArrowDownward fontSize=\"inherit\" />\n            </div>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[targetChain].name}\n              </Typography>\n            </div>\n          </div>\n        ) : null}\n        <TokenWarning\n          sourceAsset={sourceParsedTokenAccount?.mintKey}\n          sourceChain={sourceChain}\n          originChain={originChain}\n          targetAsset={targetAsset ?? undefined}\n          targetChain={targetChain}\n        />\n        {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClick}\n          size={\"medium\"}\n          disabled={!!countdown}\n        >\n          {!!countdown ? countdown.toString() : \"Confirm\"}\n        </Button>\n      </DialogActions>\n    </>\n  );\n\n  return sendConfirmationContent;\n}\n\nexport default function SendConfirmationDialog({\n  open,\n  onClick,\n  onClose,\n}: {\n  open: boolean;\n  onClick: () => void;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <SendConfirmationContent\n        open={open}\n        onClose={onClose}\n        onClick={onClick}\n      />\n    </Dialog>\n  );\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useAllowance from \"../../hooks/useAllowance\";\nimport { useHandleTransfer } from \"../../hooks/useHandleTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetError,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport SendConfirmationDialog from \"./SendConfirmationDialog\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleTransfer();\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n  const handleTransferClick = useCallback(() => {\n    setIsConfirmOpen(true);\n  }, []);\n  const handleConfirmClick = useCallback(() => {\n    handleClick();\n    setIsConfirmOpen(false);\n  }, [handleClick]);\n  const handleConfirmClose = useCallback(() => {\n    setIsConfirmOpen(false);\n  }, []);\n\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const sourceAmount = useSelector(selectTransferAmount);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceDecimals = sourceParsedTokenAccount?.decimals;\n  const sourceIsNative = sourceParsedTokenAccount?.isNativeAsset;\n  const sourceAmountParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    sourceAmount &&\n    parseUnits(sourceAmount, sourceDecimals).toBigInt();\n  const oneParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    parseUnits(\"1\", sourceDecimals).toBigInt();\n  const transferTx = useSelector(selectTransferTransferTx);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n\n  const error = useSelector(selectTransferTargetError);\n  const [allowanceError, setAllowanceError] = useState(\"\");\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const [shouldApproveUnlimited, setShouldApproveUnlimited] = useState(false);\n  const toggleShouldApproveUnlimited = useCallback(\n    () => setShouldApproveUnlimited(!shouldApproveUnlimited),\n    [shouldApproveUnlimited]\n  );\n\n  const {\n    sufficientAllowance,\n    isAllowanceFetching,\n    isApproveProcessing,\n    approveAmount,\n  } = useAllowance(\n    sourceChain,\n    sourceAsset,\n    sourceAmountParsed || undefined,\n    sourceIsNative\n  );\n\n  const approveButtonNeeded = isEVMChain(sourceChain) && !sufficientAllowance;\n  const notOne = shouldApproveUnlimited || sourceAmountParsed !== oneParsed;\n  const isDisabled =\n    !isReady ||\n    isWrongWallet ||\n    disabled ||\n    isAllowanceFetching ||\n    isApproveProcessing;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || allowanceError || undefined;\n\n  const approveExactAmount = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(BigInt(sourceAmountParsed)).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount, sourceAmountParsed]);\n  const approveUnlimited = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(ethers.constants.MaxUint256.toBigInt()).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount]);\n\n  return (\n    <>\n      <StepDescription>\n        Transfer the tokens to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      {approveButtonNeeded ? (\n        <>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={shouldApproveUnlimited}\n                onChange={toggleShouldApproveUnlimited}\n                color=\"primary\"\n              />\n            }\n            label=\"Approve Unlimited Tokens\"\n          />\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={\n              shouldApproveUnlimited ? approveUnlimited : approveExactAmount\n            }\n            showLoader={isAllowanceFetching || isApproveProcessing}\n            error={errorMessage}\n          >\n            {\"Approve \" +\n              (shouldApproveUnlimited ? \"Unlimited\" : sourceAmount) +\n              ` Token${notOne ? \"s\" : \"\"}`}\n          </ButtonWithLoader>\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={handleTransferClick}\n            showLoader={showLoader}\n            error={errorMessage}\n          >\n            Transfer\n          </ButtonWithLoader>\n          <SendConfirmationDialog\n            open={isConfirmOpen}\n            onClick={handleConfirmClick}\n            onClose={handleConfirmClose}\n          />\n        </>\n      )}\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import {\n  approveEth,\n  ChainId,\n  getAllowanceEth,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { selectTransferIsApproving } from \"../store/selectors\";\nimport { setIsApproving } from \"../store/transferSlice\";\nimport { getTokenBridgeAddressForChain } from \"../utils/consts\";\n\nexport default function useAllowance(\n  chainId: ChainId,\n  tokenAddress?: string,\n  transferAmount?: BigInt,\n  sourceIsNative?: boolean\n) {\n  const dispatch = useDispatch();\n  const [allowance, setAllowance] = useState<BigInt | null>(null);\n  const [isAllowanceFetching, setIsAllowanceFetching] = useState(false);\n  const isApproveProcessing = useSelector(selectTransferIsApproving);\n  const { signer } = useEthereumProvider();\n  const sufficientAllowance =\n    !isEVMChain(chainId) ||\n    sourceIsNative ||\n    (allowance && transferAmount && allowance >= transferAmount);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (isEVMChain(chainId) && tokenAddress && signer && !isApproveProcessing) {\n      setIsAllowanceFetching(true);\n      getAllowanceEth(\n        getTokenBridgeAddressForChain(chainId),\n        tokenAddress,\n        signer\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            setAllowance(result.toBigInt());\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            //setError(\"Unable to retrieve allowance\"); //TODO set an error\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [chainId, tokenAddress, signer, isApproveProcessing]);\n\n  const approveAmount: (amount: BigInt) => Promise<any> = useMemo(() => {\n    return !isEVMChain(chainId) || !tokenAddress || !signer\n      ? (amount: BigInt) => {\n          return Promise.resolve();\n        }\n      : (amount: BigInt) => {\n          dispatch(setIsApproving(true));\n          return approveEth(\n            getTokenBridgeAddressForChain(chainId),\n            tokenAddress,\n            signer,\n            BigNumber.from(amount)\n          ).then(\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.resolve();\n            },\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.reject();\n            }\n          );\n        };\n  }, [chainId, tokenAddress, signer, dispatch]);\n\n  return useMemo(\n    () => ({\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    }),\n    [\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    ]\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferSourceChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const transferTx = useSelector(selectTransferTransferTx);\n\n  const explainerString = \"The tokens have entered the bridge!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","import { IconButton } from \"@material-ui/core\";\nimport { ArrowForward, SwapHoriz } from \"@material-ui/icons\";\nimport { useState } from \"react\";\n\nexport default function ChainSelectArrow({\n  onClick,\n  disabled,\n}: {\n  onClick: () => void;\n  disabled: boolean;\n}) {\n  const [showSwap, setShowSwap] = useState(false);\n\n  return (\n    <IconButton\n      onClick={onClick}\n      onMouseEnter={() => {\n        setShowSwap(true);\n      }}\n      onMouseLeave={() => {\n        setShowSwap(false);\n      }}\n      disabled={disabled}\n    >\n      {showSwap ? <SwapHoriz /> : <ArrowForward />}\n    </IconButton>\n  );\n}\n","import { ChainId, CHAIN_ID_POLYGON, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { POLYGON_TERRA_WRAPPED_TOKENS } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction PolygonTerraWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">\n        This is a Shuttle-wrapped asset from Polygon! Transferring it will\n        result in a double wrapped (Wormhole-wrapped Shuttle-wrapped) asset,\n        which has no liquid markets.\n      </Typography>\n    </Alert>\n  );\n}\n\nexport default function SoureAssetWarning({\n  sourceChain,\n  sourceAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (!(sourceChain && sourceAsset)) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const showPolygonTerraWrappedWarning =\n    sourceChain === CHAIN_ID_POLYGON &&\n    POLYGON_TERRA_WRAPPED_TOKENS.includes(searchableAddress);\n\n  return (\n    <>\n      {showPolygonTerraWrappedWarning ? <PolygonTerraWrappedWarning /> : null}\n    </>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSourceComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceBalanceString,\n  selectTransferSourceChain,\n  selectTransferSourceError,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  incrementStep,\n  setAmount,\n  setSourceChain,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport {\n  BSC_MIGRATION_ASSET_MAP,\n  CHAINS,\n  ETH_MIGRATION_ASSET_MAP,\n  MIGRATION_ASSET_MAP,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport ChainSelectArrow from \"../ChainSelectArrow\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport NumberTextField from \"../NumberTextField\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\nimport SourceAssetWarning from \"./SourceAssetWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  chainSelectWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  chainSelectContainer: {\n    flexBasis: \"100%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n  chainSelectArrow: {\n    position: \"relative\",\n    top: \"12px\",\n    [theme.breakpoints.down(\"sm\")]: { transform: \"rotate(90deg)\" },\n  },\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetChainOptions = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const parsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const hasParsedTokenAccount = !!parsedTokenAccount;\n  const isSolanaMigration =\n    sourceChain === CHAIN_ID_SOLANA &&\n    !!parsedTokenAccount &&\n    !!MIGRATION_ASSET_MAP.get(parsedTokenAccount.mintKey);\n  const isEthereumMigration =\n    sourceChain === CHAIN_ID_ETH &&\n    !!parsedTokenAccount &&\n    !!ETH_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isBscMigration =\n    sourceChain === CHAIN_ID_BSC &&\n    !!parsedTokenAccount &&\n    !!BSC_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isMigrationAsset =\n    isSolanaMigration || isEthereumMigration || isBscMigration;\n  const uiAmountString = useSelector(selectTransferSourceBalanceString);\n  const amount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferSourceError);\n  const isSourceComplete = useSelector(selectTransferIsSourceComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleMigrationClick = useCallback(() => {\n    if (sourceChain === CHAIN_ID_SOLANA) {\n      history.push(\n        `/migrate/Solana/${parsedTokenAccount?.mintKey}/${parsedTokenAccount?.publicKey}`\n      );\n    } else if (sourceChain === CHAIN_ID_ETH) {\n      history.push(`/migrate/Ethereum/${parsedTokenAccount?.mintKey}`);\n    } else if (sourceChain === CHAIN_ID_BSC) {\n      history.push(`/migrate/BinanceSmartChain/${parsedTokenAccount?.mintKey}`);\n    }\n  }, [history, parsedTokenAccount, sourceChain]);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAmountChange = useCallback(\n    (event) => {\n      dispatch(setAmount(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (uiAmountString) {\n      dispatch(setAmount(uiAmountString));\n    }\n  }, [dispatch, uiAmountString]);\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select tokens to send through the Portal.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/token-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              startIcon={<VerifiedUser />}\n            >\n              Token Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <div className={classes.chainSelectWrapper}>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Source</Typography>\n          <ChainSelect\n            select\n            variant=\"outlined\"\n            fullWidth\n            value={sourceChain}\n            onChange={handleSourceChange}\n            disabled={shouldLockFields}\n            chains={CHAINS}\n          />\n        </div>\n        <div className={classes.chainSelectArrow}>\n          <ChainSelectArrow\n            onClick={() => {\n              dispatch(setSourceChain(targetChain));\n            }}\n            disabled={shouldLockFields}\n          />\n        </div>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Target</Typography>\n          <ChainSelect\n            variant=\"outlined\"\n            select\n            fullWidth\n            value={targetChain}\n            onChange={handleTargetChange}\n            disabled={shouldLockFields}\n            chains={targetChainOptions}\n          />\n        </div>\n      </div>\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} />\n        </div>\n      ) : null}\n      {isMigrationAsset ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={handleMigrationClick}\n        >\n          Go to Migration Page\n        </Button>\n      ) : (\n        <>\n          <LowBalanceWarning chainId={sourceChain} />\n          {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n          <SourceAssetWarning\n            sourceChain={sourceChain}\n            sourceAsset={parsedTokenAccount?.mintKey}\n          />\n          {hasParsedTokenAccount ? (\n            <NumberTextField\n              variant=\"outlined\"\n              label=\"Amount\"\n              fullWidth\n              className={classes.transferField}\n              value={amount}\n              onChange={handleAmountChange}\n              disabled={shouldLockFields}\n              onMaxClick={\n                uiAmountString && !parsedTokenAccount.isNativeAsset\n                  ? handleMaxClick\n                  : undefined\n              }\n            />\n          ) : null}\n          <ButtonWithLoader\n            disabled={!isSourceComplete}\n            onClick={handleNextClick}\n            showLoader={false}\n            error={statusMessage || error}\n          >\n            Next\n          </ButtonWithLoader>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  const sourceAmount = useSelector(selectTransferAmount);\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer {sourceAmount}</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        {sourceWalletAddress ? (\n          <>\n            <span>from</span>\n            <SmartAddress chainId={sourceChain} address={sourceWalletAddress} />\n          </>\n        ) : null}\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n    </>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const {\n    targetChain,\n    readableTargetAddress,\n    targetAsset,\n    symbol,\n    tokenName,\n    logo,\n  } = useTargetInfo();\n\n  const explainerContent =\n    targetChain && readableTargetAddress ? (\n      <>\n        {targetAsset ? (\n          <>\n            <span>and receive</span>\n            <SmartAddress\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n          </>\n        ) : null}\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={readableTargetAddress} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport {\n  selectTransferActiveStep,\n  selectTransferIsRedeemComplete,\n  selectTransferIsRedeeming,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n} from \"../../store/selectors\";\nimport {\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Transfer() {\n  useCheckIfWormholeWrapped();\n  useFetchTargetAsset();\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectTransferActiveStep);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const isRedeemComplete = useSelector(selectTransferIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathTargetChain = query.get(\"targetChain\");\n\n  //This effect initializes the state based on the path params\n  useEffect(() => {\n    if (!pathSourceChain && !pathTargetChain) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathSourceChain || \"\") as ChainId]?.id;\n      const targetChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathTargetChain || \"\") as ChainId]?.id;\n\n      if (sourceChain === targetChain) {\n        return;\n      }\n      if (sourceChain) {\n        dispatch(setSourceChain(sourceChain));\n      }\n      if (targetChain) {\n        dispatch(setTargetChain(targetChain));\n      }\n    } catch (e) {\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathTargetChain, dispatch]);\n\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1. Source\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton\n            disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n            onClick={() => dispatch(setStep(1))}\n            icon={null}\n          >\n            2. Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled icon={null}>\n            3. Send tokens\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3} completed={isRedeemComplete}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete || isRedeemComplete}\n            icon={null}\n          >\n            4. Redeem tokens\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Transfer;\n","import { useCallback, useState } from \"react\";\nimport { MsgExecuteContract } from \"@terra-money/terra.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport {\n  SUPPORTED_TERRA_TOKENS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport TerraWalletKey from \"./TerraWalletKey\";\nimport {\n  Container,\n  FormControl,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport { useSnackbar } from \"notistack\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { selectTerraFeeDenom } from \"../store/selectors\";\nimport TerraFeeDenomPicker from \"./TerraFeeDenomPicker\";\nimport HeaderText from \"./HeaderText\";\nimport { COLORS } from \"../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n    textAlign: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n}));\n\nconst withdraw = async (\n  wallet: ConnectedWallet,\n  token: string,\n  feeDenom: string\n) => {\n  const withdraw = new MsgExecuteContract(\n    wallet.walletAddress,\n    TERRA_TOKEN_BRIDGE_ADDRESS,\n    {\n      withdraw_tokens: {\n        asset: {\n          native_token: {\n            denom: token,\n          },\n        },\n      },\n    },\n    {}\n  );\n  const txResult = await postWithFees(\n    wallet,\n    [withdraw],\n    \"Wormhole - Withdraw Tokens\",\n    [feeDenom]\n  );\n  await waitForTerraExecution(txResult);\n};\n\nexport default function WithdrawTokensTerra() {\n  const wallet = useConnectedWallet();\n  const [token, setToken] = useState(SUPPORTED_TERRA_TOKENS[0]);\n  const [isLoading, setIsLoading] = useState(false);\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const feeDenom = useSelector(selectTerraFeeDenom);\n\n  const handleClick = useCallback(() => {\n    if (wallet) {\n      (async () => {\n        setIsLoading(true);\n        try {\n          await withdraw(wallet, token, feeDenom);\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"success\">Transaction confirmed.</Alert>,\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">Error withdrawing tokens.</Alert>,\n          });\n          console.error(e);\n        }\n        setIsLoading(false);\n      })();\n    }\n  }, [wallet, token, enqueueSnackbar, feeDenom]);\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white>Withdraw Tokens</HeaderText>\n      <Paper className={classes.mainPaper}>\n        <Typography style={{ textAlign: \"center\" }}>\n          Withdraw tokens from the Terra token bridge\n        </Typography>\n        <TerraWalletKey />\n        <FormControl className={classes.formControl}>\n          <InputLabel>Token</InputLabel>\n          <Select\n            value={token}\n            onChange={(event) => {\n              setToken(event.target.value as string);\n            }}\n          >\n            {SUPPORTED_TERRA_TOKENS.map((name) => (\n              <MenuItem key={name} value={name}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n          <TerraFeeDenomPicker disabled={isLoading} />\n          <ButtonWithLoader\n            onClick={handleClick}\n            disabled={!wallet || isLoading}\n            showLoader={isLoading}\n          >\n            Withdraw\n          </ButtonWithLoader>\n        </FormControl>\n      </Paper>\n    </Container>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/portal_logo.8670c923.svg\";","export default __webpack_public_path__ + \"static/media/Header.e4315398.png\";","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  AppBar,\n  Container,\n  Hidden,\n  IconButton,\n  Link,\n  makeStyles,\n  Tab,\n  Tabs,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { HelpOutline } from \"@material-ui/icons\";\nimport { useCallback } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport {\n  Link as RouterLink,\n  NavLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Attest from \"./components/Attest\";\nimport Footer from \"./components/Footer\";\nimport HeaderText from \"./components/HeaderText\";\nimport Migration from \"./components/Migration\";\nimport EvmQuickMigrate from \"./components/Migration/EvmQuickMigrate\";\nimport SolanaQuickMigrate from \"./components/Migration/SolanaQuickMigrate\";\nimport NFT from \"./components/NFT\";\nimport NFTOriginVerifier from \"./components/NFTOriginVerifier\";\nimport Recovery from \"./components/Recovery\";\nimport Stats from \"./components/Stats\";\nimport TokenOriginVerifier from \"./components/TokenOriginVerifier\";\nimport Transfer from \"./components/Transfer\";\nimport WithdrawTokensTerra from \"./components/WithdrawTokensTerra\";\nimport { useBetaContext } from \"./contexts/BetaContext\";\nimport Portal from \"./icons/portal_logo.svg\";\nimport Header from \"./images/Header.png\";\nimport { CLUSTER } from \"./utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    background: \"transparent\",\n    marginTop: theme.spacing(2),\n    \"& > .MuiToolbar-root\": {\n      margin: \"auto\",\n      width: \"100%\",\n      maxWidth: 1440,\n    },\n  },\n  spacer: {\n    flex: 1,\n    width: \"100vw\",\n  },\n  link: {\n    ...theme.typography.body2,\n    fontWeight: 600,\n    color: \"black\",\n    marginLeft: theme.spacing(4),\n    textUnderlineOffset: \"6px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      marginLeft: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: theme.spacing(1),\n    },\n    \"&.active\": {\n      textDecoration: \"underline\",\n    },\n  },\n  bg: {\n    // background:\n    //   \"linear-gradient(160deg, rgba(69,74,117,.1) 0%, rgba(138,146,178,.1) 33%, rgba(69,74,117,.1) 66%, rgba(98,104,143,.1) 100%), linear-gradient(45deg, rgba(153,69,255,.1) 0%, rgba(121,98,231,.1) 20%, rgba(0,209,140,.1) 100%)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n  },\n  content: {\n    margin: theme.spacing(2, 0),\n    [theme.breakpoints.up(\"md\")]: {\n      margin: theme.spacing(4, 0),\n    },\n  },\n  headerImage: {\n    position: \"absolute\",\n    zIndex: -1,\n    top: 0,\n    background: `url(${Header})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"top -500px center\",\n    backgroundSize: \"2070px 1155px\",\n    width: \"100%\",\n    height: 1155,\n  },\n  brandLink: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    \"&:hover\": {\n      textDecoration: \"none\",\n    },\n  },\n  iconButton: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginRight: theme.spacing(1),\n    },\n  },\n  betaBanner: {\n    backgroundColor: \"rgba(0,0,0,0.75)\",\n    padding: theme.spacing(1, 0),\n  },\n  wormholeIcon: {\n    height: 68,\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    display: \"inline-block\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const { push } = useHistory();\n  const { pathname } = useLocation();\n  const handleTabChange = useCallback(\n    (event, value) => {\n      push(value);\n    },\n    [push]\n  );\n  return (\n    <div className={classes.bg}>\n      <AppBar\n        position=\"static\"\n        color=\"inherit\"\n        className={classes.appBar}\n        elevation={0}\n      >\n        <Toolbar>\n          <Link\n            component={RouterLink}\n            to=\"/transfer\"\n            className={classes.brandLink}\n          >\n            <img src={Portal} alt=\"Portal\" className={classes.wormholeIcon} />\n          </Link>\n          <div className={classes.spacer} />\n          <Hidden implementation=\"css\" xsDown>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <Link\n                component={NavLink}\n                to=\"/transfer\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                Bridge\n              </Link>\n              <Link\n                href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                FAQ\n              </Link>\n              <Link\n                component={NavLink}\n                to=\"/stats\"\n                size=\"small\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                Stats\n              </Link>\n              <Link\n                href=\"https://wormholenetwork.com/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                Wormhole\n              </Link>\n            </div>\n          </Hidden>\n          <Hidden implementation=\"css\" smUp>\n            <Tooltip title=\"View the FAQ\">\n              <IconButton\n                href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                size=\"small\"\n                className={classes.link}\n              >\n                <HelpOutline />\n              </IconButton>\n            </Tooltip>\n          </Hidden>\n        </Toolbar>\n      </AppBar>\n      {CLUSTER === \"mainnet\" ? null : (\n        <AppBar position=\"static\" className={classes.betaBanner} elevation={0}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You are using the {CLUSTER} build of this app.\n          </Typography>\n        </AppBar>\n      )}\n      {isBeta ? (\n        <AppBar position=\"static\" className={classes.betaBanner} elevation={0}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You have enabled the beta. Enter the secret code again to\n            disable.\n          </Typography>\n        </AppBar>\n      ) : null}\n      <div className={classes.content}>\n        <div className={classes.headerImage} />\n        {[\"/transfer\", \"/nft\", \"/redeem\"].includes(pathname) ? (\n          <Container maxWidth=\"md\" style={{ paddingBottom: 24 }}>\n            <HeaderText white>Portal Token Bridge</HeaderText>\n            <Tabs\n              value={pathname}\n              variant=\"fullWidth\"\n              onChange={handleTabChange}\n              indicatorColor=\"primary\"\n            >\n              <Tab label=\"Tokens\" value=\"/transfer\" />\n              <Tab label=\"NFTs\" value=\"/nft\" />\n              <Tab label=\"Redeem\" value=\"/redeem\" to=\"/redeem\" />\n            </Tabs>\n          </Container>\n        ) : null}\n        <Switch>\n          <Route exact path=\"/transfer\">\n            <Transfer />\n          </Route>\n          <Route exact path=\"/nft\">\n            <NFT />\n          </Route>\n          <Route exact path=\"/redeem\">\n            <Recovery />\n          </Route>\n          <Route exact path=\"/nft-origin-verifier\">\n            <NFTOriginVerifier />\n          </Route>\n          <Route exact path=\"/token-origin-verifier\">\n            <TokenOriginVerifier />\n          </Route>\n          <Route exact path=\"/register\">\n            <Attest />\n          </Route>\n          <Route exact path=\"/migrate/Solana/:legacyAsset/:fromTokenAccount\">\n            <Migration chainId={CHAIN_ID_SOLANA} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Solana/\">\n            <SolanaQuickMigrate />\n          </Route>\n          <Route exact path=\"/stats\">\n            <Stats />\n          </Route>\n          <Route exact path=\"/withdraw-tokens-terra\">\n            <WithdrawTokensTerra />\n          </Route>\n          <Route>\n            <Redirect to=\"/transfer\" />\n          </Route>\n        </Switch>\n      </div>\n      <div className={classes.spacer} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { makeStyles } from \"@material-ui/core\";\n// import { useRouteMatch } from \"react-router\";\n\nconst useStyles = makeStyles((theme) => ({\n  holeOuterContainer: {\n    maxWidth: \"100%\",\n    width: \"100%\",\n    position: \"relative\",\n  },\n  holeInnerContainer: {\n    position: \"absolute\",\n    zIndex: -1,\n    left: \"50%\",\n    transform: \"translate(-50%, 0)\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  holeImage: {\n    width: \"max(1200px, 100vw)\",\n    maxWidth: \"1600px\",\n  },\n  blurred: {\n    filter: \"blur(2px)\",\n    opacity: \".9\",\n  },\n}));\n\nconst BackgroundImage = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.holeOuterContainer}>\n      <div className={classes.holeInnerContainer}></div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Typography variant=\"h5\" style={{ textAlign: \"center\", marginTop: 24 }}>\n          An unexpected error has occurred. Please refresh the page.\n        </Typography>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport attestReducer from \"./attestSlice\";\nimport nftReducer from \"./nftSlice\";\nimport transferReducer from \"./transferSlice\";\nimport tokenReducer from \"./tokenSlice\";\nimport feeReducer from \"./feeSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    attest: attestReducer,\n    nft: nftReducer,\n    transfer: transferReducer,\n    tokens: tokenReducer,\n    fee: feeReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { SnackbarProvider } from \"notistack\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport BackgroundImage from \"./components/BackgroundImage\";\nimport { BetaContextProvider } from \"./contexts/BetaContext\";\nimport { EthereumProviderProvider } from \"./contexts/EthereumProviderContext\";\nimport { SolanaWalletProvider } from \"./contexts/SolanaWalletContext.tsx\";\nimport { TerraWalletProvider } from \"./contexts/TerraWalletContext.tsx\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { theme } from \"./muiTheme\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <ErrorBoundary>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <ErrorBoundary>\n          <SnackbarProvider maxSnack={3}>\n            <BetaContextProvider>\n              <SolanaWalletProvider>\n                <EthereumProviderProvider>\n                  <TerraWalletProvider>\n                    <HashRouter>\n                      <BackgroundImage />\n                      <App />\n                    </HashRouter>\n                  </TerraWalletProvider>\n                </EthereumProviderProvider>\n              </SolanaWalletProvider>\n            </BetaContextProvider>\n          </SnackbarProvider>\n        </ErrorBoundary>\n      </ThemeProvider>\n    </Provider>\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { RootState } from \".\";\n\n/*\n * Attest\n */\n\nexport const selectAttestActiveStep = (state: RootState) =>\n  state.attest.activeStep;\nexport const selectAttestSourceChain = (state: RootState) =>\n  state.attest.sourceChain;\nexport const selectAttestSourceAsset = (state: RootState) =>\n  state.attest.sourceAsset;\nexport const selectAttestTargetChain = (state: RootState) =>\n  state.attest.targetChain;\nexport const selectAttestAttestTx = (state: RootState) => state.attest.attestTx;\nexport const selectAttestSignedVAAHex = (state: RootState) =>\n  state.attest.signedVAAHex;\nexport const selectAttestIsSending = (state: RootState) =>\n  state.attest.isSending;\nexport const selectAttestIsCreating = (state: RootState) =>\n  state.attest.isCreating;\nexport const selectAttestCreateTx = (state: RootState) => state.attest.createTx;\nexport const selectAttestIsSourceComplete = (state: RootState) =>\n  !!state.attest.sourceChain && !!state.attest.sourceAsset;\n// TODO: check wrapped asset exists or is native attest\nexport const selectAttestIsTargetComplete = (state: RootState) =>\n  selectAttestIsSourceComplete(state) && !!state.attest.targetChain;\nexport const selectAttestIsSendComplete = (state: RootState) =>\n  !!selectAttestSignedVAAHex(state);\nexport const selectAttestIsCreateComplete = (state: RootState) =>\n  !!selectAttestCreateTx(state);\nexport const selectAttestShouldLockFields = (state: RootState) =>\n  selectAttestIsSending(state) || selectAttestIsSendComplete(state);\n\n/*\n * NFT\n */\n\nexport const selectNFTActiveStep = (state: RootState) => state.nft.activeStep;\nexport const selectNFTSourceChain = (state: RootState) => state.nft.sourceChain;\nexport const selectNFTSourceAsset = (state: RootState) => {\n  return state.nft.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectNFTIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.nft.isSourceAssetWormholeWrapped;\nexport const selectNFTOriginChain = (state: RootState) => state.nft.originChain;\nexport const selectNFTOriginAsset = (state: RootState) => state.nft.originAsset;\nexport const selectNFTOriginTokenId = (state: RootState) =>\n  state.nft.originTokenId;\nexport const selectNFTSourceWalletAddress = (state: RootState) =>\n  state.nft.sourceWalletAddress;\nexport const selectNFTSourceParsedTokenAccount = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount;\nexport const selectNFTSourceParsedTokenAccounts = (state: RootState) =>\n  state.nft.sourceParsedTokenAccounts;\nexport const selectNFTSourceBalanceString = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectNFTTargetChain = (state: RootState) => state.nft.targetChain;\nexport const selectNFTTargetAddressHex = (state: RootState) =>\n  state.nft.targetAddressHex;\nexport const selectNFTTargetAsset = (state: RootState) =>\n  state.nft.targetAsset.data?.address;\nexport const selectNFTTransferTx = (state: RootState) => state.nft.transferTx;\nexport const selectNFTSignedVAAHex = (state: RootState) =>\n  state.nft.signedVAAHex;\nexport const selectNFTIsSending = (state: RootState) => state.nft.isSending;\nexport const selectNFTIsRedeeming = (state: RootState) => state.nft.isRedeeming;\nexport const selectNFTRedeemTx = (state: RootState) => state.nft.redeemTx;\nexport const selectNFTSourceError = (state: RootState): string | undefined => {\n  if (!state.nft.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.nft.sourceParsedTokenAccount) {\n    return \"Select an NFT\";\n  }\n  if (\n    state.nft.sourceChain === CHAIN_ID_SOLANA &&\n    !state.nft.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.nft.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  if (state.nft.sourceParsedTokenAccount.decimals !== 0) {\n    // TODO: more advanced NFT check - also check supply and uri\n    return \"For non-NFTs, use the Transfer flow\";\n  }\n  if (\n    state.nft.sourceParsedTokenAccount?.uri === null ||\n    state.nft.sourceParsedTokenAccount?.uri === undefined\n  ) {\n    return \"Failed to load NFT Metadata.\";\n  }\n  if (\n    state.nft.sourceParsedTokenAccount?.uri &&\n    state.nft.sourceParsedTokenAccount?.uri.length > 200\n  ) {\n    return \"This NFT has a URL longer than the maximum supported length of 200.\";\n  }\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.nft.sourceParsedTokenAccount.uiAmountString,\n        state.nft.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Balance must be greater than zero\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectNFTIsSourceComplete = (state: RootState) =>\n  !selectNFTSourceError(state);\nexport const selectNFTTargetError = (state: RootState) => {\n  const sourceError = selectNFTSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.nft.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.nft.sourceChain === state.nft.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (\n    state.nft.targetChain === CHAIN_ID_SOLANA &&\n    !selectNFTTargetAsset(state)\n  ) {\n    // target asset is only required for solana\n    // in the cases of new transfers, target asset will not exist and be created on redeem\n    // Solana requires the derived address to derive the associated token account which is the target on the vaa\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.nft.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectNFTIsTargetComplete = (state: RootState) =>\n  !selectNFTTargetError(state);\nexport const selectNFTIsSendComplete = (state: RootState) =>\n  !!selectNFTSignedVAAHex(state);\nexport const selectNFTIsRedeemComplete = (state: RootState) =>\n  !!selectNFTRedeemTx(state);\nexport const selectNFTShouldLockFields = (state: RootState) =>\n  selectNFTIsSending(state) || selectNFTIsSendComplete(state);\nexport const selectNFTIsRecovery = (state: RootState) => state.nft.isRecovery;\n/*\n * Transfer\n */\n\nexport const selectTransferActiveStep = (state: RootState) =>\n  state.transfer.activeStep;\nexport const selectTransferSourceChain = (state: RootState) =>\n  state.transfer.sourceChain;\nexport const selectTransferSourceAsset = (state: RootState) => {\n  return state.transfer.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectTransferIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.transfer.isSourceAssetWormholeWrapped;\nexport const selectTransferOriginChain = (state: RootState) =>\n  state.transfer.originChain;\nexport const selectTransferOriginAsset = (state: RootState) =>\n  state.transfer.originAsset;\nexport const selectSourceWalletAddress = (state: RootState) =>\n  state.transfer.sourceWalletAddress;\nexport const selectTransferSourceParsedTokenAccount = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount;\nexport const selectTransferSourceParsedTokenAccounts = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccounts;\nexport const selectTransferSourceBalanceString = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferAmount = (state: RootState) => state.transfer.amount;\nexport const selectTransferTargetChain = (state: RootState) =>\n  state.transfer.targetChain;\nexport const selectTransferTargetAddressHex = (state: RootState) =>\n  state.transfer.targetAddressHex;\nexport const selectTransferTargetAssetWrapper = (state: RootState) =>\n  state.transfer.targetAsset;\nexport const selectTransferTargetAsset = (state: RootState) =>\n  state.transfer.targetAsset.data?.address;\nexport const selectTransferTargetParsedTokenAccount = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount;\nexport const selectTransferTargetBalanceString = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferTransferTx = (state: RootState) =>\n  state.transfer.transferTx;\nexport const selectTransferSignedVAAHex = (state: RootState) =>\n  state.transfer.signedVAAHex;\nexport const selectTransferIsSending = (state: RootState) =>\n  state.transfer.isSending;\nexport const selectTransferIsRedeeming = (state: RootState) =>\n  state.transfer.isRedeeming;\nexport const selectTransferRedeemTx = (state: RootState) =>\n  state.transfer.redeemTx;\nexport const selectTransferIsApproving = (state: RootState) =>\n  state.transfer.isApproving;\nexport const selectTransferSourceError = (\n  state: RootState\n): string | undefined => {\n  if (!state.transfer.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount) {\n    return \"Select a token\";\n  }\n  if (!state.transfer.amount) {\n    return \"Enter an amount\";\n  }\n  if (\n    state.transfer.sourceChain === CHAIN_ID_SOLANA &&\n    !state.transfer.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  // no NFT check - NFTs should be blocked by all token pickers\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Amount must be greater than zero\";\n    }\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).gt(\n        parseUnits(\n          state.transfer.sourceParsedTokenAccount.uiAmountString,\n          state.transfer.sourceParsedTokenAccount.decimals\n        )\n      )\n    ) {\n      return \"Amount may not be greater than balance\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectTransferIsSourceComplete = (state: RootState) =>\n  !selectTransferSourceError(state);\nexport const UNREGISTERED_ERROR_MESSAGE =\n  \"Target asset unavailable. Is the token registered?\";\nexport const selectTransferTargetError = (state: RootState) => {\n  const sourceError = selectTransferSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.transfer.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.transfer.sourceChain === state.transfer.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (!selectTransferTargetAsset(state)) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (\n    isEVMChain(state.transfer.targetChain) &&\n    selectTransferTargetAsset(state) === ethers.constants.AddressZero\n  ) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.transfer.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectTransferIsTargetComplete = (state: RootState) =>\n  !selectTransferTargetError(state);\nexport const selectTransferIsSendComplete = (state: RootState) =>\n  !!selectTransferSignedVAAHex(state);\nexport const selectTransferIsRedeemComplete = (state: RootState) =>\n  !!selectTransferRedeemTx(state);\nexport const selectTransferShouldLockFields = (state: RootState) =>\n  selectTransferIsSending(state) || selectTransferIsSendComplete(state);\nexport const selectTransferIsRecovery = (state: RootState) =>\n  state.transfer.isRecovery;\n\nexport const selectSolanaTokenMap = (state: RootState) => {\n  return state.tokens.solanaTokenMap;\n};\n\nexport const selectTerraTokenMap = (state: RootState) => {\n  return state.tokens.terraTokenMap;\n};\n\nexport const selectMarketsMap = (state: RootState) => {\n  return state.tokens.marketsMap;\n};\n\nexport const selectTerraFeeDenom = (state: RootState) => {\n  return state.fee.terraFeeDenom;\n};\n","import {\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  MenuItem,\n  OutlinedTextFieldProps,\n  TextField,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { useMemo } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { BETA_CHAINS, ChainInfo } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\nconst createChainMenuItem = ({ id, name, logo }: ChainInfo, classes: any) => (\n  <MenuItem key={id} value={id}>\n    <ListItemIcon className={classes.listItemIcon}>\n      <img src={logo} alt={name} className={classes.icon} />\n    </ListItemIcon>\n    <ListItemText>{name}</ListItemText>\n  </MenuItem>\n);\n\ninterface ChainSelectProps extends OutlinedTextFieldProps {\n  chains: ChainInfo[];\n}\n\nexport default function ChainSelect({ chains, ...rest }: ChainSelectProps) {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const filteredChains = useMemo(\n    () =>\n      chains.filter(({ id }) => (isBeta ? true : !BETA_CHAINS.includes(id))),\n    [chains, isBeta]\n  );\n  return (\n    <TextField {...rest} className={clsx(classes.select, rest.className)}>\n      {filteredChains.map((chain) => createChainMenuItem(chain, classes))}\n    </TextField>\n  );\n}\n","import { ChainId, getSignedVAA } from \"@certusone/wormhole-sdk\";\nimport { WORMHOLE_RPC_HOSTS } from \"./consts\";\n\nexport let CURRENT_WORMHOLE_RPC_HOST = -1;\n\nexport const getNextRpcHost = () =>\n  ++CURRENT_WORMHOLE_RPC_HOST % WORMHOLE_RPC_HOSTS.length;\n\nexport async function getSignedVAAWithRetry(\n  emitterChain: ChainId,\n  emitterAddress: string,\n  sequence: string,\n  retryAttempts?: number\n) {\n  let result;\n  let attempts = 0;\n  while (!result) {\n    attempts++;\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      result = await getSignedVAA(\n        WORMHOLE_RPC_HOSTS[getNextRpcHost()],\n        emitterChain,\n        emitterAddress,\n        sequence\n      );\n    } catch (e) {\n      if (retryAttempts !== undefined && attempts > retryAttempts) {\n        throw e;\n      }\n    }\n  }\n  return result;\n}\n","import React, { ReactChildren, useContext, useEffect, useState } from \"react\";\n\nconst BetaContext = React.createContext<boolean>(false);\n\nexport const BetaContextProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [isBetaEnabled, setIsBetaEnabled] = useState(false);\n\n  useEffect(() => {\n    let userEntered = [];\n    const secretSequence = [\n      \"38\",\n      \"38\",\n      \"40\",\n      \"40\",\n      \"37\",\n      \"39\",\n      \"37\",\n      \"39\",\n      \"66\",\n      \"65\",\n    ];\n    const secretListener = (event: KeyboardEvent) => {\n      const k = event.keyCode.toString();\n      if (k === secretSequence[userEntered.length]) {\n        userEntered.push(k);\n        if (userEntered.length === secretSequence.length) {\n          userEntered = [];\n          setIsBetaEnabled((prev) => !prev);\n        }\n      } else {\n        userEntered = [];\n      }\n    };\n    window.addEventListener(\"keydown\", secretListener);\n    return () => {\n      window.removeEventListener(\"keydown\", secretListener);\n    };\n  }, []);\n\n  return (\n    <BetaContext.Provider value={isBetaEnabled}>\n      {children}\n    </BetaContext.Provider>\n  );\n};\n\nexport const useBetaContext = () => {\n  return useContext(BetaContext);\n};\n","export default __webpack_public_path__ + \"static/media/eth.364436c5.svg\";","export default __webpack_public_path__ + \"static/media/avax.234db155.svg\";","export default __webpack_public_path__ + \"static/media/oasis-network-rose-logo.c910dc42.svg\";","export default __webpack_public_path__ + \"static/media/polygon.97ff139c.svg\";","import { Typography } from \"@material-ui/core\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst EthereumSignerKey = () => {\n  const { connect, disconnect, signerAddress, providerError } =\n    useEthereumProvider();\n  return (\n    <>\n      <ToggleConnectedButton\n        connect={connect}\n        disconnect={disconnect}\n        connected={!!signerAddress}\n        pk={signerAddress || \"\"}\n      />\n      {providerError ? (\n        <Typography variant=\"body2\" color=\"error\">\n          {providerError}\n        </Typography>\n      ) : null}\n    </>\n  );\n};\n\nexport default EthereumSignerKey;\n","import { makeStyles } from \"@material-ui/core\";\nimport DisconnectIcon from \"@material-ui/icons/LinkOff\";\nimport {\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-material-ui\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: \"center\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  disconnectButton: {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst SolanaWalletKey = () => {\n  const classes = useStyles();\n  const wallet = useSolanaWallet();\n  return (\n    <div className={classes.root}>\n      <WalletMultiButton />\n      {wallet && (\n        <WalletDisconnectButton\n          startIcon={<DisconnectIcon />}\n          className={classes.disconnectButton}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SolanaWalletKey;\n","export default __webpack_public_path__ + \"static/media/bsc.2e866e3f.svg\";","export default __webpack_public_path__ + \"static/media/solana.fa522d66.svg\";","import { PublicKey, AccountInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { deserializeUnchecked } from \"borsh\";\nimport { BinaryReader, BinaryWriter } from \"borsh\";\nconst base58: any = require(\"bs58\");\n\n// eslint-disable-next-line\nexport const METADATA_REPLACE = new RegExp(\"\\u0000\", \"g\");\nexport const EDITION_MARKER_BIT_SIZE = 248;\nexport const METADATA_PREFIX = \"metadata\";\nexport const EDITION = \"edition\";\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = \"\";\n  lamports: number = 0;\n\n  get data() {\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== \"string\") {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nexport const MEMO_ID = new PublicKey(\n  \"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"\n);\n\nexport const METADATA_PROGRAM_ID =\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\" as StringPublicKey;\n\nexport const VAULT_ID =\n  \"vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn\" as StringPublicKey;\n\nexport const AUCTION_ID =\n  \"auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8\" as StringPublicKey;\n\nexport const METAPLEX_ID =\n  \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\" as StringPublicKey;\n\nexport const SYSTEM = new PublicKey(\"11111111111111111111111111111111\");\n\nexport const getStoreID = async (storeOwnerAddress?: string) => {\n  if (!storeOwnerAddress) {\n    return undefined;\n  }\n\n  const programs = await findProgramAddress(\n    [\n      Buffer.from(\"metaplex\"),\n      toPublicKey(METAPLEX_ID).toBuffer(),\n      toPublicKey(storeOwnerAddress).toBuffer(),\n    ],\n    toPublicKey(METAPLEX_ID)\n  );\n  const storeAddress = programs[0];\n\n  return storeAddress;\n};\n\nexport const setProgramIds = async (store?: string) => {\n  STORE = store ? toPublicKey(store) : undefined;\n};\n\nlet STORE: PublicKey | undefined;\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    metadata: METADATA_PROGRAM_ID,\n    memo: MEMO_ID,\n    vault: VAULT_ID,\n    auction: AUCTION_ID,\n    metaplex: METAPLEX_ID,\n    store: STORE,\n  };\n};\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n) => {\n  const key =\n    \"pda-\" +\n    seeds.reduce((agg, item) => agg + item.toString(\"hex\"), \"\") +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\nexport type StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport async function getEdition(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  const PROGRAM_IDS = programIds();\n\n  return (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        toPublicKey(PROGRAM_IDS.metadata).toBuffer(),\n        toPublicKey(tokenMint).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      toPublicKey(PROGRAM_IDS.metadata)\n    )\n  )[0];\n}\n\nclass CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\nclass UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n    this.primarySaleHappened = args.primarySaleHappened;\n  }\n}\n\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n\n  public async init() {\n    const edition = await getEdition(this.mint);\n    this.edition = edition;\n    this.masterEdition = edition;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass MintPrintingTokensArgs {\n  instruction: number = 9;\n  supply: BN;\n\n  constructor(args: { supply: BN }) {\n    this.supply = args.supply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error(\"bad index for edition\");\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    // eslint-disable-next-line\n    return appliedMask != 0;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", Data],\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", { kind: \"option\", type: Data }],\n        [\"updateAuthority\", { kind: \"option\", type: \"pubkeyAsString\" }],\n        [\"primarySaleHappened\", { kind: \"option\", type: \"u8\" }],\n      ],\n    },\n  ],\n\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    MintPrintingTokensArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"supply\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV1,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n        [\"printingMint\", \"pubkeyAsString\"],\n        [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"parent\", \"pubkeyAsString\"],\n        [\"edition\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"ledger\", [31]],\n      ],\n    },\n  ],\n]);\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, \"\");\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, \"\");\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, \"\");\n  return metadata;\n};\n\nexport const getMetadataAddress = async (\n  mintKey: string\n): Promise<[PublicKey, number]> => {\n  const seeds = [\n    Buffer.from(\"metadata\"),\n    new PublicKey(METADATA_PROGRAM_ID).toBuffer(),\n    new PublicKey(mintKey).toBuffer(),\n  ];\n  return PublicKey.findProgramAddress(\n    seeds,\n    new PublicKey(METADATA_PROGRAM_ID)\n  );\n};\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface ParsedTokenAccount {\n  publicKey: string;\n  mintKey: string;\n  amount: string;\n  decimals: number;\n  uiAmount: number;\n  uiAmountString: string;\n  symbol?: string;\n  name?: string;\n  logo?: string;\n  isNativeAsset?: boolean;\n}\n\nexport interface Transaction {\n  id: string;\n  block: number;\n}\n\nexport interface TransferState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: ParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<ParsedTokenAccount[]>;\n  amount: string;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  targetParsedTokenAccount: ParsedTokenAccount | undefined;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isApproving: boolean;\n  isRecovery: boolean;\n}\n\nconst initialState: TransferState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  amount: \"\",\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  targetParsedTokenAccount: undefined,\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isApproving: false,\n  isRecovery: false,\n};\n\nexport const transferSlice = createSlice({\n  name: \"transfer\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setAmount: (state, action: PayloadAction<string>) => {\n      state.amount = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n      state.targetParsedTokenAccount = undefined;\n    },\n    setTargetParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.targetParsedTokenAccount = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    setIsApproving: (state, action: PayloadAction<boolean>) => {\n      state.isApproving = action.payload;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string;\n          amount: string;\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.amount = action.payload.parsedPayload.amount;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setAmount,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTargetParsedTokenAccount,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  setIsApproving,\n  reset,\n  setRecoveryVaa,\n} = transferSlice.actions;\n\nexport default transferSlice.reducer;\n","import { Button, makeStyles, Tooltip } from \"@material-ui/core\";\nimport { LinkOff } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n}));\n\nconst ToggleConnectedButton = ({\n  connect,\n  disconnect,\n  connected,\n  pk,\n}: {\n  connect(): any;\n  disconnect(): any;\n  connected: boolean;\n  pk: string;\n}) => {\n  const classes = useStyles();\n  const is0x = pk.startsWith(\"0x\");\n  return connected ? (\n    <Tooltip title={pk}>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        onClick={disconnect}\n        className={classes.button}\n        startIcon={<LinkOff />}\n      >\n        Disconnect {pk.substring(0, is0x ? 6 : 3)}...\n        {pk.substr(pk.length - (is0x ? 4 : 3))}\n      </Button>\n    </Tooltip>\n  ) : (\n    <Button\n      color=\"primary\"\n      variant=\"contained\"\n      size=\"small\"\n      onClick={connect}\n      className={classes.button}\n    >\n      Connect\n    </Button>\n  );\n};\n\nexport default ToggleConnectedButton;\n","import { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst TerraWalletKey = () => {\n  const { connect, disconnect, connected, wallet } = useTerraWallet();\n  const pk =\n    (wallet &&\n      wallet.wallets &&\n      wallet.wallets.length > 0 &&\n      wallet.wallets[0].terraAddress) ||\n    \"\";\n  return (\n    <ToggleConnectedButton\n      connect={connect}\n      disconnect={disconnect}\n      connected={connected}\n      pk={pk}\n    />\n  );\n};\n\nexport default TerraWalletKey;\n","import {\n  NetworkInfo,\n  Wallet,\n  WalletProvider,\n  useWallet,\n} from \"@terra-money/wallet-provider\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nconst mainnet = {\n  name: \"mainnet\",\n  chainID: \"columbus-4\",\n  lcd: \"https://lcd.terra.dev\",\n};\n\nconst localnet = {\n  name: \"localnet\",\n  chainID: \"localnet\",\n  lcd: TERRA_HOST.URL,\n};\n\nconst walletConnectChainIds: Record<number, NetworkInfo> = {\n  0: localnet,\n  1: mainnet,\n};\n\ninterface ITerraWalletContext {\n  connect(): void;\n  disconnect(): void;\n  connected: boolean;\n  wallet: any;\n}\n\nconst TerraWalletContext = React.createContext<ITerraWalletContext>({\n  connect: () => {},\n  disconnect: () => {},\n  connected: false,\n  wallet: null,\n});\n\nexport const TerraWalletWrapper = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  // TODO: Use wallet instead of useConnectedWallet.\n  const terraWallet = useWallet();\n  const [, setWallet] = useState<Wallet | undefined>(undefined);\n  const [connected, setConnected] = useState(false);\n\n  const connect = useCallback(() => {\n    const CHROME_EXTENSION = 1;\n    if (terraWallet) {\n      terraWallet.connect(terraWallet.availableConnectTypes[CHROME_EXTENSION]);\n      setWallet(terraWallet);\n      setConnected(true);\n    }\n  }, [terraWallet]);\n\n  const disconnect = useCallback(() => {\n    setConnected(false);\n    setWallet(undefined);\n  }, []);\n\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      connected,\n      wallet: terraWallet,\n    }),\n    [connect, disconnect, connected, terraWallet]\n  );\n\n  return (\n    <TerraWalletContext.Provider value={contextValue}>\n      {children}\n    </TerraWalletContext.Provider>\n  );\n};\n\nexport const TerraWalletProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  return (\n    <WalletProvider\n      defaultNetwork={localnet}\n      walletConnectChainIds={walletConnectChainIds}\n    >\n      <TerraWalletWrapper>{children}</TerraWalletWrapper>\n    </WalletProvider>\n  );\n};\n\nexport const useTerraWallet = () => {\n  return useContext(TerraWalletContext);\n};\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferSignedVAA() {\n  const signedVAAHex = useSelector(selectTransferSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BigNumber, ethers } from \"ethers\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\n\nexport type Provider = ethers.providers.Web3Provider | undefined;\nexport type Signer = ethers.Signer | undefined;\n\ninterface IEthereumProviderContext {\n  connect(): void;\n  disconnect(): void;\n  provider: Provider;\n  chainId: number | undefined;\n  signer: Signer;\n  signerAddress: string | undefined;\n  providerError: string | null;\n}\n\nconst EthereumProviderContext = React.createContext<IEthereumProviderContext>({\n  connect: () => {},\n  disconnect: () => {},\n  provider: undefined,\n  chainId: undefined,\n  signer: undefined,\n  signerAddress: undefined,\n  providerError: null,\n});\nexport const EthereumProviderProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [providerError, setProviderError] = useState<string | null>(null);\n  const [provider, setProvider] = useState<Provider>(undefined);\n  const [chainId, setChainId] = useState<number | undefined>(undefined);\n  const [signer, setSigner] = useState<Signer>(undefined);\n  const [signerAddress, setSignerAddress] = useState<string | undefined>(\n    undefined\n  );\n  const connect = useCallback(() => {\n    setProviderError(null);\n    detectEthereumProvider()\n      .then((detectedProvider) => {\n        if (detectedProvider) {\n          const provider = new ethers.providers.Web3Provider(\n            // @ts-ignore\n            detectedProvider,\n            \"any\"\n          );\n          provider\n            .send(\"eth_requestAccounts\", [])\n            .then(() => {\n              setProviderError(null);\n              setProvider(provider);\n              provider\n                .getNetwork()\n                .then((network) => {\n                  setChainId(network.chainId);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the network\"\n                  );\n                });\n              const signer = provider.getSigner();\n              setSigner(signer);\n              signer\n                .getAddress()\n                .then((address) => {\n                  setSignerAddress(address);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the signer address\"\n                  );\n                });\n              // TODO: try using ethers directly\n              // @ts-ignore\n              if (detectedProvider && detectedProvider.on) {\n                // @ts-ignore\n                detectedProvider.on(\"chainChanged\", (chainId) => {\n                  try {\n                    setChainId(BigNumber.from(chainId).toNumber());\n                  } catch (e) {}\n                });\n                // @ts-ignore\n                detectedProvider.on(\"accountsChanged\", (accounts) => {\n                  try {\n                    const signer = provider.getSigner();\n                    setSigner(signer);\n                    signer\n                      .getAddress()\n                      .then((address) => {\n                        setSignerAddress(address);\n                      })\n                      .catch(() => {\n                        setProviderError(\n                          \"An error occurred while getting the signer address\"\n                        );\n                      });\n                  } catch (e) {}\n                });\n              }\n            })\n            .catch(() => {\n              setProviderError(\n                \"An error occurred while requesting eth accounts\"\n              );\n            });\n        } else {\n          setProviderError(\"Please install MetaMask\");\n        }\n      })\n      .catch(() => {\n        setProviderError(\"Please install MetaMask\");\n      });\n  }, []);\n  const disconnect = useCallback(() => {\n    setProviderError(null);\n    setProvider(undefined);\n    setChainId(undefined);\n    setSigner(undefined);\n    setSignerAddress(undefined);\n  }, []);\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    }),\n    [\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    ]\n  );\n  return (\n    <EthereumProviderContext.Provider value={contextValue}>\n      {children}\n    </EthereumProviderContext.Provider>\n  );\n};\nexport const useEthereumProvider = () => {\n  return useContext(EthereumProviderContext);\n};\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { hexlify, hexStripZeros } from \"@ethersproject/bytes\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useCallback, useMemo } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { CLUSTER, getEvmChainId } from \"../utils/consts\";\n\nconst createWalletStatus = (\n  isReady: boolean,\n  statusMessage: string = \"\",\n  forceNetworkSwitch: () => void,\n  walletAddress?: string\n) => ({\n  isReady,\n  statusMessage,\n  forceNetworkSwitch,\n  walletAddress,\n});\n\nfunction useIsWalletReady(\n  chainId: ChainId,\n  enableNetworkAutoswitch: boolean = true\n): {\n  isReady: boolean;\n  statusMessage: string;\n  walletAddress?: string;\n  forceNetworkSwitch: () => void;\n} {\n  const autoSwitch = enableNetworkAutoswitch;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const hasTerraWallet = !!terraWallet;\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasEthInfo = !!provider && !!signerAddress;\n  const correctEvmNetwork = getEvmChainId(chainId);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const forceNetworkSwitch = useCallback(() => {\n    if (provider && correctEvmNetwork) {\n      if (!isEVMChain(chainId)) {\n        return;\n      }\n      try {\n        provider.send(\"wallet_switchEthereumChain\", [\n          { chainId: hexStripZeros(hexlify(correctEvmNetwork)) },\n        ]);\n      } catch (e) {}\n    }\n  }, [provider, correctEvmNetwork, chainId]);\n\n  return useMemo(() => {\n    if (\n      chainId === CHAIN_ID_TERRA &&\n      hasTerraWallet &&\n      terraWallet?.walletAddress\n    ) {\n      // TODO: terraWallet does not update on wallet changes\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        terraWallet.walletAddress\n      );\n    }\n    if (chainId === CHAIN_ID_SOLANA && solPK) {\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        solPK.toString()\n      );\n    }\n    if (isEVMChain(chainId) && hasEthInfo && signerAddress) {\n      if (hasCorrectEvmNetwork) {\n        return createWalletStatus(\n          true,\n          undefined,\n          forceNetworkSwitch,\n          signerAddress\n        );\n      } else {\n        if (provider && correctEvmNetwork && autoSwitch) {\n          forceNetworkSwitch();\n        }\n        return createWalletStatus(\n          false,\n          `Wallet is not connected to ${CLUSTER}. Expected Chain ID: ${correctEvmNetwork}`,\n          forceNetworkSwitch,\n          undefined\n        );\n      }\n    }\n\n    return createWalletStatus(\n      false,\n      \"Wallet not connected\",\n      forceNetworkSwitch,\n      undefined\n    );\n  }, [\n    chainId,\n    autoSwitch,\n    forceNetworkSwitch,\n    hasTerraWallet,\n    solPK,\n    hasEthInfo,\n    correctEvmNetwork,\n    hasCorrectEvmNetwork,\n    provider,\n    signerAddress,\n    terraWallet,\n  ]);\n}\n\nexport default useIsWalletReady;\n","export type DataWrapper<T> = {\n  data: T | null;\n  error: any | null;\n  isFetching: boolean;\n  receivedAt: string | null;\n  //possibly invalidate\n};\n\nexport function getEmptyDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function receiveDataWrapper<T>(data: T): DataWrapper<T> {\n  return {\n    data,\n    error: null,\n    isFetching: false,\n    receivedAt: new Date().toISOString(),\n  };\n}\n\nexport function errorDataWrapper<T>(error: string): DataWrapper<T> {\n  return {\n    data: null,\n    error,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function fetchDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: true,\n    receivedAt: null,\n  };\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\nimport { ParsedTokenAccount, Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\n// these all are optional so NFT could share TokenSelectors\nexport interface NFTParsedTokenAccount extends ParsedTokenAccount {\n  tokenId?: string;\n  uri?: string;\n  animation_url?: string | null;\n  external_url?: string | null;\n  image?: string;\n  image_256?: string;\n  nftName?: string;\n  description?: string;\n}\n\nexport interface NFTState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  originTokenId: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: NFTParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<NFTParsedTokenAccount[]>;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isRecovery: boolean;\n}\n\nconst initialState: NFTState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  originTokenId: undefined,\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isRecovery: false,\n};\n\nexport const nftSlice = createSlice({\n  name: \"nft\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n      state.originTokenId = action.payload.tokenId;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.originTokenId = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string; //TODO maximum amount of fields\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      state.targetAsset = getEmptyDataWrapper();\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.originTokenId = undefined;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  reset,\n  setRecoveryVaa,\n} = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","export default __webpack_public_path__ + \"static/media/terra.4c802748.svg\";","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bscIcon from \"../icons/bsc.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport solanaIcon from \"../icons/solana.svg\";\nimport terraIcon from \"../icons/terra.svg\";\n\nexport type Cluster = \"devnet\" | \"testnet\" | \"mainnet\";\nexport const CLUSTER: Cluster =\n  process.env.REACT_APP_CLUSTER === \"mainnet\"\n    ? \"mainnet\"\n    : process.env.REACT_APP_CLUSTER === \"testnet\"\n    ? \"testnet\"\n    : \"devnet\";\nexport interface ChainInfo {\n  id: ChainId;\n  name: string;\n  logo: string;\n}\nexport const CHAINS: ChainInfo[] =\n  CLUSTER === \"mainnet\"\n    ? [\n        {\n          id: CHAIN_ID_AVAX,\n          name: \"Avalanche\",\n          logo: avaxIcon,\n        },\n        {\n          id: CHAIN_ID_OASIS,\n          name: \"Oasis\",\n          logo: oasisIcon,\n        },\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        {\n          id: CHAIN_ID_AVAX,\n          name: \"Avalanche\",\n          logo: avaxIcon,\n        },\n        {\n          id: CHAIN_ID_OASIS,\n          name: \"Oasis\",\n          logo: oasisIcon,\n        },\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum (Goerli)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_ETHEREUM_ROPSTEN,\n          name: \"Ethereum (Ropsten)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : [\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ];\nexport const BETA_CHAINS: ChainId[] = CLUSTER === \"mainnet\" ? [] : [];\nexport const CHAINS_WITH_NFT_SUPPORT = CHAINS.filter(\n  ({ id }) =>\n    id === CHAIN_ID_AVAX ||\n    id === CHAIN_ID_BSC ||\n    id === CHAIN_ID_ETH ||\n    id === CHAIN_ID_ETHEREUM_ROPSTEN ||\n    id === CHAIN_ID_POLYGON ||\n    id === CHAIN_ID_OASIS ||\n    id === CHAIN_ID_SOLANA\n);\nexport type ChainsById = { [key in ChainId]: ChainInfo };\nexport const CHAINS_BY_ID: ChainsById = CHAINS.reduce((obj, chain) => {\n  obj[chain.id] = chain;\n  return obj;\n}, {} as ChainsById);\n\nexport const COMING_SOON_CHAINS: ChainInfo[] = [];\nexport const getDefaultNativeCurrencySymbol = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? \"SOL\"\n    : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"ETH\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BNB\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"LUNA\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"MATIC\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"AVAX\"\n    : chainId === CHAIN_ID_OASIS\n    ? \"ROSE\"\n    : \"\";\nexport const getExplorerName = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"Etherscan\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BscScan\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"Finder\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"Polygonscan\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"Snowtrace\"\n    : \"Explorer\";\nexport const WORMHOLE_RPC_HOSTS =\n  CLUSTER === \"mainnet\"\n    ? [\n        \"https://wormhole-v2-mainnet-api.certus.one\",\n        \"https://wormhole.inotel.ro\",\n        \"https://wormhole-v2-mainnet-api.mcf.rocks\",\n        \"https://wormhole-v2-mainnet-api.chainlayer.network\",\n        \"https://wormhole-v2-mainnet-api.staking.fund\",\n        \"https://wormhole-v2-mainnet.01node.com\",\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\"https://wormhole-v2-testnet-api.certus.one\"]\n    : [\"http://localhost:7071\"];\nexport const ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 5 : 1337;\nexport const ROPSTEN_ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 3 : 1337;\nexport const BSC_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 56 : CLUSTER === \"testnet\" ? 97 : 1397;\nexport const POLYGON_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 137 : CLUSTER === \"testnet\" ? 80001 : 1381;\nexport const AVAX_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 43114 : CLUSTER === \"testnet\" ? 43113 : 1381;\nexport const OASIS_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 42262 : CLUSTER === \"testnet\" ? 42261 : 1381;\nexport const getEvmChainId = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH\n    ? ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_NETWORK_CHAIN_ID\n    : undefined;\nexport const SOLANA_HOST = process.env.REACT_APP_SOLANA_API_URL\n  ? process.env.REACT_APP_SOLANA_API_URL\n  : CLUSTER === \"mainnet\"\n  ? clusterApiUrl(\"mainnet-beta\")\n  : CLUSTER === \"testnet\"\n  ? clusterApiUrl(\"devnet\")\n  : \"http://localhost:8899\";\n\nexport const TERRA_HOST =\n  CLUSTER === \"mainnet\"\n    ? {\n        URL: \"https://lcd.terra.dev\",\n        chainID: \"columbus-5\",\n        name: \"mainnet\",\n      }\n    : CLUSTER === \"testnet\"\n    ? {\n        URL: \"https://bombay-lcd.terra.dev\",\n        chainID: \"bombay-12\",\n        name: \"testnet\",\n      }\n    : {\n        URL: \"http://localhost:1317\",\n        chainID: \"columbus-5\",\n        name: \"localterra\",\n      };\nexport const ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x706abc4E45D419950511e474C7B9Ed348A4a716c\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD8E4C2DbDd2e2bd8F1336EA691dBFF6952B1a6eB\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF890982f9310df57d00f659cf4fd87e65adEd8d7\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const BSC_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const BSC_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xcD16E5613EF35599dc82B24Cb45B5A93D779f1EE\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const BSC_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xB6F6D86a8f9879A9c87f643768d9efc38c1Da6E7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9dcF9D205C9De35334D646BeE44b2D2859712A09\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const POLYGON_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0CBE91CF822c73C2315FB05100C2F714765d5c20\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const POLYGON_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x90BBd86a6Fe93D3bc3ed6335935447E75fAb7fCf\"\n    : CLUSTER === \"testnet\"\n    ? \"0x51a02d0dcb5e52F5b92bdAA38FA013C91c7309A9\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const POLYGON_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x377D55a7928c046E18eEbb61977e714d2a76472a\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const AVAX_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x54a8e5f9c4CbA08F9943965859F6c34eAF03E26c\"\n    : CLUSTER === \"testnet\"\n    ? \"0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const AVAX_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xf7B6737Ca9c4e08aE573F75A97B73D7a813f5De5\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD601BAf2EEE3C028344471684F6b27E789D9075D\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const AVAX_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0e082F06FF657D94310cB8cE8B0D9a04541d8052\"\n    : CLUSTER === \"testnet\"\n    ? \"0x61E44E506Ca5659E6c0bba9b678586fA2d729756\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const OASIS_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xfE8cD454b4A1CA468B57D79c0cc77Ef5B6f64585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc1C338397ffA53a2Eb12A7038b4eeb34791F8aCb\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const OASIS_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x04952D522Ff217f40B5Ef3cbF659EcA7b952a6c1\"\n    : CLUSTER === \"testnet\"\n    ? \"0xC5c25B41AB0b797571620F5204Afa116A44c0ebA\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const OASIS_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5848C791e09901b40A9Ef749f2a6735b418d7564\"\n    : CLUSTER === \"testnet\"\n    ? \"0x88d8004A9BdbfD9D28090A02010C19897a29605c\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const SOL_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth\"\n    : CLUSTER === \"testnet\"\n    ? \"3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5\"\n    : \"Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o\";\nexport const SOL_NFT_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WnFt12ZrnzZrFZkt2xsNsaNWoQribnuQ5B5FrDbwDhD\"\n    : CLUSTER === \"testnet\"\n    ? \"2rHhojZ7hpu1zA91nvZmT8TqWWvMcKmmNBCr2mKTtMq4\"\n    : \"NFTWqJR8YnRVqPDvTJrYuLrQDitTG5AScqbeghi4zSA\";\nexport const SOL_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb\"\n    : CLUSTER === \"testnet\"\n    ? \"DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe\"\n    : \"B6RHG3mfcckmrYN1UhmJzyS1XX3fZKbkeUcpJe9Sy3FE\";\nexport const ROPSTEN_ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x210c5F5e2AF958B4defFe715Dc621b7a3BA888c5\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ROPSTEN_ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x2b048Da40f69c8dc386a56705915f8E966fe1eba\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF174F9A837536C449321df1Ca093Bb96948D5386\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\n\nexport const SOL_CUSTODY_ADDRESS =\n  \"GugU1tP7doLeTw9hQP51xRJyS8Da1fWxuiy2rVrnMD2m\";\nexport const SOL_NFT_CUSTODY_ADDRESS =\n  \"D63bhHo634eXSj4Jq3xgu2fjB5XKc8DFHzDY9iZk7fv1\";\nexport const TERRA_TEST_TOKEN_ADDRESS =\n  \"terra13nkgqrfymug724h8pprpexqj9h629sa3ncw7sh\";\nexport const TERRA_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pd65m0q9tl3v8znnz5f5ltsfegyzah7g42cx5v\"\n    : \"terra18vd8fpwxzck93qlwghaj6arh4p7c5n896xzem5\";\nexport const TERRA_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pseddrv0yfsn76u4zxrjmtf45kdlmalswdv39a\"\n    : \"terra10pyejy66429refv3g35g2t7am0was7ya7kz2a4\";\n\nexport const getBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_BRIDGE_ADDRESS\n    : \"\";\nexport const getNFTBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_NFT_BRIDGE_ADDRESS\n    : \"\";\nexport const getTokenBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_TOKEN_BRIDGE_ADDRESS\n    : \"\";\n\nexport const COVALENT_API_KEY = process.env.REACT_APP_COVALENT_API_KEY\n  ? process.env.REACT_APP_COVALENT_API_KEY\n  : \"\";\n\nexport const COVALENT_ETHEREUM = 1; // Covalent only supports mainnet and Kovan\nexport const COVALENT_BSC = CLUSTER === \"devnet\" ? 56 : BSC_NETWORK_CHAIN_ID;\nexport const COVALENT_POLYGON =\n  CLUSTER === \"devnet\" ? 137 : POLYGON_NETWORK_CHAIN_ID;\nexport const COVALENT_AVAX = CLUSTER === \"devnet\" ? 137 : AVAX_NETWORK_CHAIN_ID;\nexport const COVALENT_OASIS = CLUSTER === \"devnet\" ? null : null;\nexport const COVALENT_GET_TOKENS_URL = (\n  chainId: ChainId,\n  walletAddress: string,\n  nft?: boolean,\n  noNftMetadata?: boolean\n) => {\n  const chainNum =\n    chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? COVALENT_ETHEREUM\n      : chainId === CHAIN_ID_BSC\n      ? COVALENT_BSC\n      : chainId === CHAIN_ID_POLYGON\n      ? COVALENT_POLYGON\n      : chainId === CHAIN_ID_AVAX\n      ? COVALENT_AVAX\n      : chainId === CHAIN_ID_OASIS\n      ? COVALENT_OASIS\n      : \"\";\n  // https://www.covalenthq.com/docs/api/#get-/v1/{chain_id}/address/{address}/balances_v2/\n  return `https://api.covalenthq.com/v1/${chainNum}/address/${walletAddress}/balances_v2/?key=${COVALENT_API_KEY}${\n    nft ? \"&nft=true\" : \"\"\n  }${noNftMetadata ? \"&no-nft-fetch=true\" : \"\"}`;\n};\nexport const TERRA_SWAPRATE_URL =\n  \"https://fcd.terra.dev/v1/market/swaprate/uusd\";\n\nexport const WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WETH_DECIMALS = 18;\n\nexport const WBNB_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\n    : CLUSTER === \"testnet\"\n    ? \"0xae13d989dac2f0debff460ac112a837c89baa7cd\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WBNB_DECIMALS = 18;\n\nexport const WMATIC_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WMATIC_DECIMALS = 18;\n\nexport const ROPSTEN_WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc778417e063141139fce010982780140aa0cd5ab\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const ROPSTEN_WETH_DECIMALS = 18;\n\nexport const WAVAX_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7\"\n    : CLUSTER === \"testnet\"\n    ? \"0xd00ae08403b9bbb9124bb305c09058e32c39a48c\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WAVAX_DECIMALS = 18;\n\nexport const WROSE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x21C718C22D52d0F3a789b752D4c2fD5908a8A733\"\n    : CLUSTER === \"testnet\"\n    ? \"0x792296e2a15e6Ceb5f5039DecaE7A1f25b00B0B0\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WROSE_DECIMALS = 18;\n\nexport const WORMHOLE_V1_ETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"\n    : CLUSTER === \"testnet\"\n    ? \"0xdae0Cba01eFc4bfEc1F7Fece73Fe8b8d2Eda65B0\"\n    : \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"; //TODO something that doesn't explode in localhost\nexport const WORMHOLE_V1_SOLANA_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC\"\n    : CLUSTER === \"testnet\"\n    ? \"BrdgiFmZN3BKkcY3danbPYyxPKwb8RhQzpM2VY5L97ED\"\n    : \"\";\n\nexport const TERRA_TOKEN_METADATA_URL =\n  \"https://assets.terra.money/cw20/tokens.json\";\n\nexport const WORMHOLE_V1_MINT_AUTHORITY =\n  CLUSTER === \"mainnet\"\n    ? \"9zyPU1mjgzaVyQsYwKJJ7AhVz5bgx5uc1NPABvAcUXsT\"\n    : CLUSTER === \"testnet\"\n    ? \"BJa7dq3bRP216zaTdw4cdcV71WkPc1HXvmnGeFVDi5DC\"\n    : \"\";\n\n// hardcoded addresses for warnings\nexport const SOLANA_TOKENS_THAT_EXIST_ELSEWHERE = [\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\", //  SRM\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n  \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\", //  KIN\n  \"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5\", // renBTC\n  \"8wv2KAykQstNAj2oW6AHANGBiFKVFhvMiyyzzjhkmGvE\", // renLUNA\n  \"G1a6jxYz3m8DVyMqYnuV7s86wD4fvuXYneWSpLJkmsXj\", // renBCH\n  \"FKJvvVJ242tX7zFtzTmzqoA631LqHh4CdgcN8dcfFSju\", // renDGB\n  \"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU\", // renDOGE\n  \"E99CQ2gFMmbiyK2bwiaFNWUUmwz4r8k2CVEFxwuvQ7ue\", // renZEC\n  \"De2bU64vsXKU9jq4bCjeDxNRGPn8nr3euaTK8jBYmD3J\", // renFIL\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", // USDT\n];\nexport const ETH_TOKENS_THAT_EXIST_ELSEWHERE = [\n  getAddress(\"0x476c5E26a75bd202a9683ffD34359C0CC15be0fF\"), // SRM\n  getAddress(\"0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5\"), // KIN\n  getAddress(\"0xeb4c2781e4eba804ce9a9803c67d0893436bb27d\"), // renBTC\n  getAddress(\"0x52d87F22192131636F93c5AB18d0127Ea52CB641\"), // renLUNA\n  getAddress(\"0x459086f2376525bdceba5bdda135e4e9d3fef5bf\"), // renBCH\n  getAddress(\"0xe3cb486f3f5c639e98ccbaf57d95369375687f80\"), // renDGB\n  getAddress(\"0x3832d2F059E55934220881F831bE501D180671A7\"), // renDOGE\n  getAddress(\"0x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2\"), // renZEC\n  getAddress(\"0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5\"), // renFIL\n];\nexport const ETH_TOKENS_THAT_CAN_BE_SWAPPED_ON_SOLANA = [\n  getAddress(\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"), // USDC\n  getAddress(\"0xdac17f958d2ee523a2206206994597c13d831ec7\"), // USDT\n];\nexport const BSC_MARKET_WARNINGS = [\n  getAddress(WBNB_ADDRESS),\n  getAddress(\"0xe9e7cea3dedca5984780bafc599bd69add087d56\"), // BUSD\n  getAddress(\"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"), // USDC\n  getAddress(\"0x55d398326f99059ff775485246999027b3197955\"), // BSC-USD\n];\n\nexport const MIGRATION_PROGRAM_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"whmRZnmyxdr2TkHXcZoFdtvNYRLQ5Jtbkf6ZbGkJjdk\"\n    : CLUSTER === \"testnet\"\n    ? \"\"\n    : \"Ex9bCdVMSfx7EzB3pgSi2R4UHwJAXvTw18rBQm5YQ8gK\";\n\nexport const MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // HUSD\n          \"BybpSTBoZHsmKnfxYG47GDhVPKrnEKX31CScShbrzUhX\",\n          \"7VQo3HFLNH5QqGtM8eC3XQbPkJUu7nS9LeGWjerRh5Sw\",\n        ],\n        [\n          // BUSD\n          \"AJ1W9A9N9dEMdVyoDiam2rV44gnBm2csrPDP7xqcapgX\",\n          \"33fsBLA8djQm82RpHmE3SuVrPGtZBWNYExsEUeKX1HXX\",\n        ],\n        [\n          // HBTC\n          \"8pBc4v9GAwCBNWPB5XKA93APexMGAS4qMr37vNke9Ref\",\n          \"7dVH61ChzgmN9BwG4PkzwRP8PbYwPJ7ZPNF2vamKT2H8\",\n        ],\n        [\n          // DAI\n          \"FYpdBuyAHSbdaAyD1sKkxyLWbAP8uUW9h6uvdhK74ij1\",\n          \"EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o\",\n        ],\n        [\n          // FRAX\n          \"8L8pDf3jutdpdr4m3np68CL9ZroLActrqwxi6s9Ah5xU\",\n          \"FR87nWEUxVgerFGhZM8Y4AggKGLnaXswr1Pd8wZ4kZcp\",\n        ],\n        [\n          // USDK\n          \"2kycGCD8tJbrjJJqWN2Qz5ysN9iB4Bth3Uic4mSB7uak\",\n          \"43m2ewFV5nDepieFjT9EmAQnc1HRtAF247RBpLGFem5F\",\n        ],\n        // [\n        //   // UST\n        //   \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n        //   \"5Un6AdG9GBjxVhTSvvt2x6X6vtN1zrDxkkDpDcShnHfF\",\n        // ],\n        [\n          // UST\n          \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n          \"9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i\",\n        ],\n        // [\n        //   // Wrapped LUNA\n        //   \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n        //   \"EQTV1LW23Mgtjb5LXSg9NGw1J32oqTV4HCPmHCVSGmqD\",\n        // ],\n        [\n          // Wrapped LUNA\n          \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n          \"F6v4wfAdJB8D8p77bMXZgYt8TDKsYxLYxH5AFhUkYx9W\",\n        ],\n        [\n          // FTT\n          \"GbBWwtYTMPis4VHb8MrBbdibPhn28TSrLB53KvUmb7Gi\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // SRM\n          \"2jXy799YnEcRXneFo2GEAB6SDRsAa767HpWmktRr1DaP\",\n          \"xnorPhAzWXUczCP3KjU5yDxmKKZi5cSbxytQ1LgE3kG\",\n        ],\n        [\n          // FTT (Sollet)\n          \"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // WETH (Sollet)\n          \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n          \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n        ],\n        [\n          // UNI (Sollet)\n          \"DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw\",\n          \"8FU95xFJhUUkyyCLU13HSzDLs7oC4QZdXQHL6SCeab36\",\n        ],\n        [\n          // HXRO (Sollet)\n          \"DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc\",\n          \"HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK\",\n        ],\n        [\n          // ALEPH (Sollet)\n          \"CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K\",\n          \"3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x\",\n        ],\n        [\n          // TOMOE (Sollet)\n          \"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd\",\n          \"46AiRdka3HYGkhV6r9gyS6Teo9cojfGXfK8oniALYMZx\",\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        [\n          \"orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L\", //This is not actually a v1 asset\n          \"orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L\",\n        ],\n      ]\n    : [\n        // [\n        //   \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\",\n        //   \"GcdupcwxkmVGM6s9F8bHSjNoznXAb3hRJTioABNYkn31\",\n        // ],\n      ]\n);\n\nexport const ETH_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9\"),\n          getAddress(\"0xe76820F1DB773B1d62a3D22F47259705cC5fA4E6\"),\n        ],\n        [\n          // UST\n          getAddress(\"0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\"),\n          getAddress(\"0xF39C29d8f6851d87c40c83b61078EB7384f7Cb51\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const BSC_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xECCF35F941Ab67FfcAA9A1265C2fF88865caA005\"),\n          getAddress(\"0x355A116ef1Cf566B12Ef3a8e409A64e303c53740\"),\n        ],\n        [\n          // UST\n          getAddress(\"0x23396cF899Ca06c4472205fC903bDB4de249D6fC\"),\n          getAddress(\"0x0F98AB919D04a291838B3b075c57181057D4CF75\"),\n        ],\n        [\n          // ORION\n          getAddress(\"0x5530ec23f4ee1521182bd158c09f4ca7efec1ef0\"),\n          getAddress(\"0x084fa354e65b521e6fb9d1602549cf8693cdb4f8\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const getMigrationAssetMap = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_BSC) {\n    return BSC_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_ETH) {\n    return ETH_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return MIGRATION_ASSET_MAP;\n  } else {\n    return new Map<string, string>();\n  }\n};\n\nexport const SUPPORTED_TERRA_TOKENS = [\"uluna\", \"uusd\"];\nexport const TERRA_DEFAULT_FEE_DENOM = SUPPORTED_TERRA_TOKENS[0];\n\nexport const TERRA_FCD_BASE =\n  CLUSTER === \"mainnet\"\n    ? \"https://fcd.terra.dev\"\n    : CLUSTER === \"testnet\"\n    ? \"https://bombay-fcd.terra.dev\"\n    : \"http://localhost:3060\";\nexport const TERRA_GAS_PRICES_URL = `${TERRA_FCD_BASE}/v1/txs/gas_prices`;\n\nexport const TOTAL_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-totals?groupBy=address`;\n\nexport const RECENT_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-recent?groupBy=address&numRows=2`;\n\nexport const VAA_EMITTER_ADDRESSES = [\n  `${CHAIN_ID_SOLANA}:ec7372995d5cc8732397fb0ad35c0121e0eaa90d26f828a534cab54391b3a4f5`, //SOLANA TOKEN\n  `${CHAIN_ID_SOLANA}:0def15a24423e1edd1a5ab16f557b9060303ddbab8c803d2ee48f4b78a1cfd6b`, //SOLAN NFT\n  `${CHAIN_ID_ETH}:0000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585`, //ETH token\n  `${CHAIN_ID_ETH}:0000000000000000000000006ffd7ede62328b3af38fcd61461bbfc52f5651fe`, //ETH NFT\n  `${CHAIN_ID_TERRA}:0000000000000000000000007cf7b764e38a0a5e967972c1df77d432510564e2`, //terra\n  `${CHAIN_ID_BSC}:000000000000000000000000b6f6d86a8f9879a9c87f643768d9efc38c1da6e7`, //bsc\n  `${CHAIN_ID_BSC}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //bsc nft\n  `${CHAIN_ID_POLYGON}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //Polygon\n  `${CHAIN_ID_POLYGON}:00000000000000000000000090bbd86a6fe93d3bc3ed6335935447e75fab7fcf`, //Polygon nft\n];\n\nexport const WORMHOLE_EXPLORER_BASE = \"https://wormholenetwork.com/en/explorer\";\n\nexport type MultiChainInfo = {\n  [key in ChainId]: { [address: string]: string };\n};\nexport const MULTI_CHAIN_TOKENS: MultiChainInfo =\n  //EVM chains should format the addresses to all lowercase\n  CLUSTER === \"mainnet\"\n    ? ({\n        [CHAIN_ID_SOLANA]: {\n          EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: \"USDC\",\n          Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: \"USDT\",\n        },\n        [CHAIN_ID_ETH]: {\n          \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\": \"USDC\",\n          \"0xdac17f958d2ee523a2206206994597c13d831ec7\": \"USDT\",\n        },\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {\n          \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\": \"USDC\",\n          \"0x55d398326f99059ff775485246999027b3197955\": \"USDT\",\n        },\n        [CHAIN_ID_POLYGON]: {\n          \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\": \"USDC\",\n          \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\": \"USDT\",\n        },\n      } as MultiChainInfo)\n    : ({\n        [CHAIN_ID_SOLANA]: {\n          \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\": \"SOLT\",\n        },\n        [CHAIN_ID_ETH]: {},\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {},\n        [CHAIN_ID_POLYGON]: {},\n      } as MultiChainInfo);\n\nexport const AVAILABLE_MARKETS_URL =\n  \"https://docs.wormholenetwork.com/wormhole/overview-liquid-markets\";\n\nexport const SOLANA_SYSTEM_PROGRAM_ADDRESS = \"11111111111111111111111111111111\";\nexport const FEATURED_MARKETS_JSON_URL =\n  \"https://raw.githubusercontent.com/certusone/wormhole-token-list/main/src/markets.json\";\n\nexport const logoOverrides = new Map<string, string>([\n  [\n    \"0x727f064a78dc734d33eec18d5370aef32ffd46e4\",\n    \"https://orion.money/assets/ORION-LOGO-2.1-GREEN@256x256.png\",\n  ],\n]);\n\nexport const getHowToAddTokensToWalletUrl = (chainId: ChainId) => {\n  if (isEVMChain(chainId)) {\n    return \"https://docs.wormholenetwork.com/wormhole/video-tutorial-how-to-manually-add-tokens-to-your-wallet#1.-metamask-ethereum-polygon-and-bsc\";\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return \"https://docs.wormholenetwork.com/wormhole/video-tutorial-how-to-manually-add-tokens-to-your-wallet#2.-terra-station\";\n  }\n  return \"\";\n};\n\nexport const getHowToAddToTokenListUrl = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_SOLANA) {\n    return \"https://github.com/solana-labs/token-list\";\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return \"https://github.com/terra-money/assets\";\n  }\n  return \"\";\n};\n\nexport const SOLANA_TOKEN_METADATA_PROGRAM_URL =\n  \"https://github.com/metaplex-foundation/metaplex/tree/master/rust/token-metadata/program\";\nexport const MAX_VAA_UPLOAD_RETRIES_SOLANA = 5;\n\nexport const POLYGON_TERRA_WRAPPED_TOKENS = [\n  \"0x692597b009d13c4049a947cab2239b7d6517875f\", // Wrapped UST Token\n  \"0x24834bbec7e39ef42f4a75eaf8e5b6486d3f0e57\", // Wrapped LUNA Token\n];\n\nexport const JUPITER_SWAP_BASE_URL = \"https://jup.ag/swap\";\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    width: \"100%\",\n  },\n  loader: {\n    position: \"absolute\",\n    bottom: 0,\n    left: \"50%\",\n    marginLeft: -12,\n    marginBottom: 6,\n  },\n  error: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function ButtonWithLoader({\n  disabled,\n  onClick,\n  showLoader,\n  error,\n  children,\n}: {\n  disabled?: boolean;\n  onClick: () => void;\n  showLoader?: boolean;\n  error?: string;\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.root}>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          className={classes.button}\n          disabled={disabled}\n          onClick={onClick}\n        >\n          {children}\n        </Button>\n        {showLoader ? (\n          <CircularProgress\n            size={24}\n            color=\"inherit\"\n            className={classes.loader}\n          />\n        ) : null}\n      </div>\n      {error ? (\n        <Typography variant=\"body2\" color=\"error\" className={classes.error}>\n          {error}\n        </Typography>\n      ) : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface AttestState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  sourceAsset: string;\n  targetChain: ChainId;\n  attestTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isCreating: boolean;\n  createTx: Transaction | undefined;\n}\n\nconst initialState: AttestState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  sourceAsset: \"\",\n  targetChain: CHAIN_ID_ETH,\n  attestTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isCreating: false,\n  createTx: undefined,\n};\n\nexport const attestSlice = createSlice({\n  name: \"attest\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceAsset = \"\";\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceAsset: (state, action: PayloadAction<string>) => {\n      state.sourceAsset = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceAsset = \"\";\n      }\n    },\n    setAttestTx: (state, action: PayloadAction<Transaction>) => {\n      state.attestTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsCreating: (state, action: PayloadAction<boolean>) => {\n      state.isCreating = action.payload;\n    },\n    setCreateTx: (state, action: PayloadAction<Transaction>) => {\n      state.createTx = action.payload;\n      state.isCreating = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceAsset,\n  setTargetChain,\n  setAttestTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsCreating,\n  setCreateTx,\n  reset,\n} = attestSlice.actions;\n\nexport default attestSlice.reducer;\n","import {\n  canonicalAddress,\n  isNativeDenom,\n  isNativeTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ConnectedWallet, TxResult } from \"@terra-money/wallet-provider\";\nimport axios from \"axios\";\n// import { TerraTokenMetadata } from \"../hooks/useTerraTokenMap\";\nimport { TERRA_GAS_PRICES_URL, TERRA_HOST } from \"./consts\";\n\nexport const NATIVE_TERRA_DECIMALS = 6;\n\nexport const getNativeTerraIcon = (symbol = \"\") =>\n  `https://assets.terra.money/icon/60/${symbol}.png`;\n\n// inspired by https://github.com/terra-money/station/blob/dca7de43958ce075c6e46605622203b9859b0e14/src/lib/utils/format.ts#L38\nexport const formatNativeDenom = (denom = \"\"): string => {\n  const unit = denom.slice(1).toUpperCase();\n  const isValidTerra = isNativeTerra(denom);\n  return denom === \"uluna\"\n    ? \"Luna\"\n    : isValidTerra\n    ? unit.slice(0, 2) + \"T\"\n    : \"\";\n};\n\nexport const formatTerraNativeBalance = (balance = \"\"): string =>\n  formatUnits(balance, 6);\n\nexport async function waitForTerraExecution(transaction: TxResult) {\n  const lcd = new LCDClient(TERRA_HOST);\n  let info;\n  while (!info) {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      info = await lcd.tx.txInfo(transaction.result.txhash);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (info.code !== undefined) {\n    // error code\n    throw new Error(\n      `Tx ${transaction.result.txhash}: error code ${info.code}: ${info.raw_log}`\n    );\n  }\n  return info;\n}\n\nexport const isValidTerraAddress = (address: string) => {\n  if (isNativeDenom(address)) {\n    return true;\n  }\n  try {\n    const startsWithTerra = address && address.startsWith(\"terra\");\n    const isParseable = canonicalAddress(address);\n    const isLength20 = isParseable.length === 20;\n    return !!(startsWithTerra && isParseable && isLength20);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport async function postWithFees(\n  wallet: ConnectedWallet,\n  msgs: any[],\n  memo: string,\n  feeDenoms: string[]\n) {\n  // don't try/catch, let errors propagate\n  const lcd = new LCDClient(TERRA_HOST);\n  //let gasPrices = await lcd.config.gasPrices //Unsure if the values returned from this are hardcoded or not.\n  //Thus, we are going to pull it directly from the current FCD.\n  let gasPrices = await axios\n    .get(TERRA_GAS_PRICES_URL)\n    .then((result) => result.data);\n\n  const feeEstimate = await lcd.tx.estimateFee(\n    wallet.walletAddress,\n    [...msgs],\n    {\n      memo,\n      feeDenoms,\n      gasPrices,\n    }\n  );\n\n  const result = await wallet.post({\n    msgs: [...msgs],\n    memo,\n    feeDenoms,\n    gasPrices,\n    fee: feeEstimate,\n  });\n\n  return result;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  createWrappedOnEth,\n  createWrappedOnSolana,\n  createWrappedOnTerra,\n  updateWrappedOnEth,\n  updateWrappedOnTerra,\n  updateWrappedOnSolana,\n  postVaaSolanaWithRetry,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useAttestSignedVAA from \"./useAttestSignedVAA\";\nimport { setCreateTx, setIsCreating } from \"../store/attestSlice\";\nimport {\n  selectAttestIsCreating,\n  selectAttestTargetChain,\n  selectTerraFeeDenom,\n} from \"../store/selectors\";\nimport {\n  getTokenBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const receipt = shouldUpdate\n      ? await updateWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await createWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setCreateTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, // TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolanaWithRetry(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA),\n      MAX_VAA_UPLOAD_RETRIES_SOLANA\n    );\n    const transaction = shouldUpdate\n      ? await updateWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await createWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setCreateTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean,\n  feeDenom: string\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const msg = shouldUpdate\n      ? await updateWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        )\n      : await createWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Create Wrapped\",\n      [feeDenom]\n    );\n    dispatch(\n      setCreateTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nexport function useHandleCreateWrapped(shouldUpdate: boolean) {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const signedVAA = useAttestSignedVAA();\n  const isCreating = useSelector(selectAttestIsCreating);\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const handleCreateClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && !!signedVAA) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        signedVAA,\n        targetChain,\n        shouldUpdate\n      );\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        shouldUpdate\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && !!signedVAA) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        signedVAA,\n        shouldUpdate,\n        terraFeeDenom\n      );\n    } else {\n      // enqueueSnackbar(\n      //   \"Creating wrapped tokens on this chain is not yet supported\",\n      //   {\n      //     variant: \"error\",\n      //   }\n      // );\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    signedVAA,\n    signer,\n    shouldUpdate,\n    terraFeeDenom,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleCreateClick,\n      disabled: !!isCreating,\n      showLoader: !!isCreating,\n    }),\n    [handleCreateClick, isCreating]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useAttestSignedVAA() {\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getClaimAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  postVaaSolanaWithRetry,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  createMetaOnSolana,\n  getForeignAssetSol,\n  isNFTVAASolanaNative,\n  redeemOnEth,\n  redeemOnSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/nftSlice\";\nimport { selectNFTIsRedeeming, selectNFTTargetChain } from \"../store/selectors\";\nimport {\n  getNFTBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getMetadataAddress } from \"../utils/metaplex\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTSignedVAA from \"./useNFTSignedVAA\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = await redeemOnEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      signedVAA\n    );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const claimAddress = await getClaimAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS,\n      signedVAA\n    );\n    const claimInfo = await connection.getAccountInfo(claimAddress);\n    let txid;\n    if (!claimInfo) {\n      await postVaaSolanaWithRetry(\n        connection,\n        wallet.signTransaction,\n        SOL_BRIDGE_ADDRESS,\n        payerAddress,\n        Buffer.from(signedVAA),\n        MAX_VAA_UPLOAD_RETRIES_SOLANA\n      );\n      // TODO: how do we retry in between these steps\n      const transaction = await redeemOnSolana(\n        connection,\n        SOL_BRIDGE_ADDRESS,\n        SOL_NFT_BRIDGE_ADDRESS,\n        payerAddress,\n        signedVAA\n      );\n      txid = await signSendAndConfirm(wallet, connection, transaction);\n      // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    }\n    const isNative = await isNFTVAASolanaNative(signedVAA);\n    if (!isNative) {\n      const { parse_vaa } = await import(\n        \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n      );\n      const parsedVAA = parse_vaa(signedVAA);\n      const { originChain, originAddress, tokenId } = parseNFTPayload(\n        Buffer.from(new Uint8Array(parsedVAA.payload))\n      );\n      const mintAddress = await getForeignAssetSol(\n        SOL_NFT_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAddress),\n        arrayify(tokenId)\n      );\n      const [metadataAddress] = await getMetadataAddress(mintAddress);\n      const metadata = await connection.getAccountInfo(metadataAddress);\n      if (!metadata) {\n        const transaction = await createMetaOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_NFT_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n        txid = await signSendAndConfirm(wallet, connection, transaction);\n      }\n    }\n    dispatch(setRedeemTx({ id: txid || \"\", block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleNFTRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const signedVAA = useNFTSignedVAA();\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTSignedVAA() {\n  const signedVAAHex = useSelector(selectNFTSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  parseTransferPayload,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Card,\n  CircularProgress,\n  Container,\n  Divider,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { COLORS } from \"../muiTheme\";\nimport { setRecoveryVaa as setRecoveryNFTVaa } from \"../store/nftSlice\";\nimport { setRecoveryVaa } from \"../store/transferSlice\";\nimport {\n  CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n  WORMHOLE_RPC_HOSTS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport ChainSelect from \"./ChainSelect\";\nimport KeyAndBalance from \"./KeyAndBalance\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  advancedContainer: {\n    padding: theme.spacing(2, 0),\n  },\n}));\n\nasync function evm(\n  provider: ethers.providers.Web3Provider,\n  tx: string,\n  enqueueSnackbar: any,\n  chainId: ChainId,\n  nft: boolean\n) {\n  try {\n    const receipt = await provider.getTransactionReceipt(tx);\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      nft\n        ? getNFTBridgeAddressForChain(chainId)\n        : getTokenBridgeAddressForChain(chainId)\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function solana(tx: string, enqueueSnackbar: any, nft: boolean) {\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const info = await connection.getTransaction(tx);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      nft ? SOL_NFT_BRIDGE_ADDRESS : SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function terra(tx: string, enqueueSnackbar: any) {\n  try {\n    const lcd = new LCDClient(TERRA_HOST);\n    const info = await lcd.tx.txInfo(tx);\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence,\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nexport default function Recovery() {\n  const classes = useStyles();\n  const { push } = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const { provider } = useEthereumProvider();\n  const [type, setType] = useState(\"Token\");\n  const isNFT = type === \"NFT\";\n  const [recoverySourceChain, setRecoverySourceChain] =\n    useState(CHAIN_ID_SOLANA);\n  const [recoverySourceTx, setRecoverySourceTx] = useState(\"\");\n  const [recoverySourceTxIsLoading, setRecoverySourceTxIsLoading] =\n    useState(false);\n  const [recoverySourceTxError, setRecoverySourceTxError] = useState(\"\");\n  const [recoverySignedVAA, setRecoverySignedVAA] = useState(\"\");\n  const [recoveryParsedVAA, setRecoveryParsedVAA] = useState<any>(null);\n  const { isReady, statusMessage } = useIsWalletReady(recoverySourceChain);\n  const walletConnectError =\n    isEVMChain(recoverySourceChain) && !isReady ? statusMessage : \"\";\n  const parsedPayload = useMemo(() => {\n    try {\n      return recoveryParsedVAA?.payload\n        ? isNFT\n          ? parseNFTPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n          : parseTransferPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n        : null;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }, [recoveryParsedVAA, isNFT]);\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathSourceTransaction = query.get(\"transactionId\");\n\n  //This effect initializes the state based on the path params.\n  useEffect(() => {\n    if (!pathSourceChain && !pathSourceTransaction) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathSourceChain || \"\") as ChainId]?.id;\n\n      if (sourceChain) {\n        setRecoverySourceChain(sourceChain);\n      }\n      if (pathSourceTransaction) {\n        setRecoverySourceTx(pathSourceTransaction);\n      }\n    } catch (e) {\n      console.error(e);\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathSourceTransaction]);\n\n  useEffect(() => {\n    if (recoverySourceTx && (!isEVMChain(recoverySourceChain) || isReady)) {\n      let cancelled = false;\n      if (isEVMChain(recoverySourceChain) && provider) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await evm(\n            provider,\n            recoverySourceTx,\n            enqueueSnackbar,\n            recoverySourceChain,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_SOLANA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await solana(\n            recoverySourceTx,\n            enqueueSnackbar,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_TERRA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await terra(recoverySourceTx, enqueueSnackbar);\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    recoverySourceChain,\n    recoverySourceTx,\n    provider,\n    enqueueSnackbar,\n    isNFT,\n    isReady,\n  ]);\n  const handleTypeChange = useCallback((event) => {\n    setRecoverySourceChain((prevChain) =>\n      event.target.value === \"NFT\" &&\n      !CHAINS_WITH_NFT_SUPPORT.find((chain) => chain.id === prevChain)\n        ? CHAIN_ID_SOLANA\n        : prevChain\n    );\n    setType(event.target.value);\n  }, []);\n  const handleSourceChainChange = useCallback((event) => {\n    setRecoverySourceTx(\"\");\n    setRecoverySourceChain(event.target.value);\n  }, []);\n  const handleSourceTxChange = useCallback((event) => {\n    setRecoverySourceTx(event.target.value.trim());\n  }, []);\n  const handleSignedVAAChange = useCallback((event) => {\n    setRecoverySignedVAA(event.target.value.trim());\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    if (recoverySignedVAA) {\n      (async () => {\n        try {\n          const { parse_vaa } = await import(\n            \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n          );\n          const parsedVAA = parse_vaa(hexToUint8Array(recoverySignedVAA));\n          if (!cancelled) {\n            setRecoveryParsedVAA(parsedVAA);\n          }\n        } catch (e) {\n          console.log(e);\n          if (!cancelled) {\n            setRecoveryParsedVAA(null);\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [recoverySignedVAA]);\n  const parsedPayloadTargetChain = parsedPayload?.targetChain;\n  const enableRecovery = recoverySignedVAA && parsedPayloadTargetChain;\n  const handleRecoverClick = useCallback(() => {\n    if (enableRecovery && recoverySignedVAA && parsedPayloadTargetChain) {\n      // TODO: make recovery reducer\n      if (isNFT) {\n        dispatch(\n          setRecoveryNFTVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n            },\n          })\n        );\n        push(\"/nft\");\n      } else {\n        dispatch(\n          setRecoveryVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n              amount:\n                \"amount\" in parsedPayload\n                  ? parsedPayload.amount.toString()\n                  : \"\",\n            },\n          })\n        );\n        push(\"/transfer\");\n      }\n    }\n  }, [\n    dispatch,\n    enableRecovery,\n    recoverySignedVAA,\n    parsedPayloadTargetChain,\n    parsedPayload,\n    isNFT,\n    push,\n  ]);\n  return (\n    <Container maxWidth=\"md\">\n      <Card className={classes.mainCard}>\n        <Alert severity=\"info\" variant=\"outlined\">\n          If you have sent your tokens but have not redeemed them, you may paste\n          in the Source Transaction ID (from Step 3) to resume your transfer.\n        </Alert>\n        <TextField\n          select\n          variant=\"outlined\"\n          label=\"Type\"\n          disabled={!!recoverySignedVAA}\n          value={type}\n          onChange={handleTypeChange}\n          fullWidth\n          margin=\"normal\"\n        >\n          <MenuItem value=\"Token\">Token</MenuItem>\n          <MenuItem value=\"NFT\">NFT</MenuItem>\n        </TextField>\n        <ChainSelect\n          select\n          variant=\"outlined\"\n          label=\"Source Chain\"\n          disabled={!!recoverySignedVAA}\n          value={recoverySourceChain}\n          onChange={handleSourceChainChange}\n          fullWidth\n          margin=\"normal\"\n          chains={isNFT ? CHAINS_WITH_NFT_SUPPORT : CHAINS}\n        />\n        {isEVMChain(recoverySourceChain) ? (\n          <KeyAndBalance chainId={recoverySourceChain} />\n        ) : null}\n        <TextField\n          variant=\"outlined\"\n          label=\"Source Tx (paste here)\"\n          disabled={\n            !!recoverySignedVAA ||\n            recoverySourceTxIsLoading ||\n            !!walletConnectError\n          }\n          value={recoverySourceTx}\n          onChange={handleSourceTxChange}\n          error={!!recoverySourceTxError || !!walletConnectError}\n          helperText={recoverySourceTxError || walletConnectError}\n          fullWidth\n          margin=\"normal\"\n        />\n        <ButtonWithLoader\n          onClick={handleRecoverClick}\n          disabled={!enableRecovery}\n          showLoader={recoverySourceTxIsLoading}\n        >\n          Recover\n        </ButtonWithLoader>\n        <div className={classes.advancedContainer}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              Advanced\n            </AccordionSummary>\n            <AccordionDetails>\n              <div>\n                <Box position=\"relative\">\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Signed VAA (Hex)\"\n                    disabled={recoverySourceTxIsLoading}\n                    value={recoverySignedVAA || \"\"}\n                    onChange={handleSignedVAAChange}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                  {recoverySourceTxIsLoading ? (\n                    <Box\n                      position=\"absolute\"\n                      style={{\n                        top: 0,\n                        right: 0,\n                        left: 0,\n                        bottom: 0,\n                        backgroundColor: \"rgba(0,0,0,0.5)\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <CircularProgress />\n                    </Box>\n                  ) : null}\n                </Box>\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Chain\"\n                  disabled\n                  value={recoveryParsedVAA?.emitter_chain || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Address\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      hexToNativeString(\n                        recoveryParsedVAA.emitter_address,\n                        recoveryParsedVAA.emitter_chain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Sequence\"\n                  disabled\n                  value={recoveryParsedVAA?.sequence || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Timestamp\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      new Date(\n                        recoveryParsedVAA.timestamp * 1000\n                      ).toLocaleString()) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Chain\"\n                  disabled\n                  value={parsedPayload?.originChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Token Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.originAddress,\n                        parsedPayload.originChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Origin Token ID\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.tokenId || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                ) : null}\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Chain\"\n                  disabled\n                  value={parsedPayload?.targetChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.targetAddress,\n                        parsedPayload.targetChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? null : (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Amount\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.amount.toString() || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                )}\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  postVaaSolanaWithRetry,\n  redeemAndUnwrapOnSolana,\n  redeemOnEth,\n  redeemOnEthNative,\n  redeemOnSolana,\n  redeemOnTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport {\n  selectTerraFeeDenom,\n  selectTransferIsRedeeming,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/transferSlice\";\nimport {\n  getTokenBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = isNative\n      ? await redeemOnEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await redeemOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  isNative: boolean\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolanaWithRetry(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA),\n      MAX_VAA_UPLOAD_RETRIES_SOLANA\n    );\n    // TODO: how do we retry in between these steps\n    const transaction = isNative\n      ? await redeemAndUnwrapOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await redeemOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setRedeemTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array,\n  feeDenom: string\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const msg = await redeemOnTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      signedVAA\n    );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Complete Transfer\",\n      [feeDenom]\n    );\n    dispatch(\n      setRedeemTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const signedVAA = useTransferSignedVAA();\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, false, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        false\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA, terraFeeDenom);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    terraFeeDenom,\n  ]);\n\n  const handleRedeemNativeClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, true, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        true\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA, terraFeeDenom); //TODO isNative = true\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    terraFeeDenom,\n  ]);\n\n  return useMemo(\n    () => ({\n      handleNativeClick: handleRedeemNativeClick,\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming, handleRedeemNativeClick]\n  );\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport {\n  AccountInfo,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nexport async function signSendAndConfirm(\n  wallet: WalletContextState,\n  connection: Connection,\n  transaction: Transaction\n) {\n  if (!wallet.signTransaction) {\n    throw new Error(\"wallet.signTransaction is undefined\");\n  }\n  const signed = await wallet.signTransaction(transaction);\n  const txid = await connection.sendRawTransaction(signed.serialize());\n  await connection.confirmTransaction(txid);\n  return txid;\n}\n\nexport interface ExtractedMintInfo {\n  mintAuthority?: string;\n  supply?: string;\n}\n\nexport function extractMintInfo(\n  account: AccountInfo<Buffer>\n): ExtractedMintInfo {\n  const data = Buffer.from(account.data);\n  const mintInfo = MintLayout.decode(data);\n\n  const uintArray = mintInfo?.mintAuthority;\n  const pubkey = new PublicKey(uintArray);\n  const supply = BigNumber.from(mintInfo?.supply.reverse()).toString();\n  const output = {\n    mintAuthority: pubkey?.toString(),\n    supply: supply.toString(),\n  };\n\n  return output;\n}\n\nexport async function getMultipleAccountsRPC(\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  return getMultipleAccounts(connection, pubkeys, \"confirmed\");\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  pubkeys: PublicKey[],\n  commitment: string\n) => {\n  return (\n    await Promise.all(\n      chunks(pubkeys, 99).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk, commitment)\n      )\n    )\n  ).flat();\n};\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function shortenAddress(address: string) {\n  return address.length > 10\n    ? `${address.slice(0, 4)}...${address.slice(-4)}`\n    : address;\n}\n","import { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { useWallet, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getMathWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport React, { FC, useMemo } from \"react\";\n\nexport const SolanaWalletProvider: FC = (props) => {\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you want to instantiate here will be compiled into your application\n  const wallets = useMemo(() => {\n    return [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      // getTorusWallet({\n      //     options: { clientId: 'Go to https://developer.tor.us and create a client ID' }\n      // }),\n      // getLedgerWallet(),\n      // getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ];\n  }, []);\n\n  return (\n    <WalletProvider wallets={wallets}>\n      <WalletDialogProvider>{props.children}</WalletDialogProvider>\n    </WalletProvider>\n  );\n};\n\nexport const useSolanaWallet = useWallet;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport EthereumSignerKey from \"./EthereumSignerKey\";\nimport SolanaWalletKey from \"./SolanaWalletKey\";\nimport TerraWalletKey from \"./TerraWalletKey\";\n\nfunction KeyAndBalance({ chainId }: { chainId: ChainId }) {\n  if (isEVMChain(chainId)) {\n    return (\n      <>\n        <EthereumSignerKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_SOLANA) {\n    return (\n      <>\n        <SolanaWalletKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <>\n        <TerraWalletKey />\n      </>\n    );\n  }\n  return null;\n}\n\nexport default KeyAndBalance;\n","const MM_ERR_WITH_INFO_START =\n  \"VM Exception while processing transaction: revert \";\nconst parseError = (e: any) =>\n  e?.data?.message?.startsWith(MM_ERR_WITH_INFO_START)\n    ? e.data.message.replace(MM_ERR_WITH_INFO_START, \"\")\n    : e?.response?.data?.error // terra error\n    ? e.response.data.error\n    : e?.message\n    ? e.message\n    : \"An unknown error occurred\";\nexport default parseError;\n","import { createTheme, responsiveFontSizes } from \"@material-ui/core\";\n\nexport const COLORS = {\n  blue: \"#1975e6\",\n  blueWithTransparency: \"rgba(25, 117, 230, 0.8)\",\n  gray: \"#4e4e54\",\n  green: \"#0ac2af\",\n  greenWithTransparency: \"rgba(10, 194, 175, 0.8)\",\n  lightGreen: \"rgba(51, 242, 223, 1)\",\n  lightBlue: \"#83b9fc\",\n  nearBlack: \"#17153f\",\n  nearBlackWithMinorTransparency: \"rgba(0,0,0,.25)\",\n  red: \"#aa0818\",\n  darkRed: \"#810612\",\n  white: \"#FFFFFF\",\n  whiteWithTransparency: \"rgba(255,255,255,.07)\",\n};\n\nexport const theme = responsiveFontSizes(\n  createTheme({\n    palette: {\n      type: \"dark\",\n      background: {\n        default: COLORS.nearBlack,\n        paper: COLORS.nearBlack,\n      },\n      divider: COLORS.white,\n      text: {\n        primary: COLORS.white,\n      },\n      primary: {\n        main: COLORS.blueWithTransparency, // #0074FF\n        light: COLORS.lightBlue,\n      },\n      secondary: {\n        main: COLORS.greenWithTransparency, // #00EFD8\n        light: COLORS.lightGreen,\n      },\n      error: {\n        main: COLORS.red,\n      },\n    },\n    typography: {\n      fontFamily: \"'Poppins', sans-serif\",\n      fontSize: 13,\n      h1: {\n        fontWeight: \"600\",\n      },\n      h2: {\n        fontWeight: \"200\",\n      },\n      h4: {\n        fontWeight: \"500\",\n      },\n    },\n    overrides: {\n      MuiCssBaseline: {\n        \"@global\": {\n          \"*\": {\n            scrollbarWidth: \"thin\",\n            scrollbarColor: `${COLORS.gray} ${COLORS.nearBlackWithMinorTransparency}`,\n          },\n          \"*::-webkit-scrollbar\": {\n            width: \"8px\",\n            height: \"8px\",\n            backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          },\n          \"*::-webkit-scrollbar-thumb\": {\n            backgroundColor: COLORS.gray,\n            borderRadius: \"4px\",\n          },\n          \"*::-webkit-scrollbar-corner\": {\n            // this hides an annoying white box which appears when both scrollbars are present\n            backgroundColor: \"transparent\",\n          },\n        },\n      },\n      MuiAccordion: {\n        root: {\n          backgroundColor: COLORS.whiteWithTransparency,\n          \"&:before\": {\n            display: \"none\",\n          },\n        },\n        rounded: {\n          \"&:first-child\": {\n            borderTopLeftRadius: \"28px\",\n            borderTopRightRadius: \"28px\",\n          },\n          \"&:last-child\": {\n            borderBottomLeftRadius: \"28px\",\n            borderBottomRightRadius: \"28px\",\n          },\n        },\n      },\n      MuiAlert: {\n        root: {\n          borderRadius: \"8px\",\n          border: \"1px solid\",\n        },\n      },\n      MuiButton: {\n        root: {\n          borderRadius: \"22px\",\n          letterSpacing: \".1em\",\n        },\n        outlinedSizeSmall: {\n          padding: \"6px 9px\",\n          fontSize: \"0.70rem\",\n        },\n      },\n      MuiLink: {\n        root: {\n          color: COLORS.lightBlue,\n        },\n      },\n      MuiPaper: {\n        rounded: {\n          borderRadius: \"28px\",\n          backdropFilter: \"blur(4px)\",\n        },\n      },\n      MuiStepper: {\n        root: {\n          backgroundColor: \"transparent\",\n          padding: 0,\n        },\n      },\n      MuiStep: {\n        root: {\n          backgroundColor: COLORS.whiteWithTransparency,\n          backdropFilter: \"blur(4px)\",\n          borderRadius: \"28px\",\n          padding: \"32px 32px 16px\",\n        },\n      },\n      MuiStepConnector: {\n        lineVertical: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepContent: {\n        root: {\n          borderLeftWidth: 0,\n          marginLeft: 0,\n          paddingLeft: 0,\n        },\n      },\n      MuiStepLabel: {\n        label: {\n          color: COLORS.white,\n          textTransform: \"uppercase\",\n          \"&.MuiStepLabel-active\": {},\n          \"&.MuiStepLabel-completed\": {},\n        },\n      },\n      MuiTabs: {\n        root: {\n          borderBottom: `1px solid ${COLORS.white}`,\n        },\n        indicator: {\n          height: \"100%\",\n          background: \"linear-gradient(20deg, #f44b1b 0%, #eeb430 100%);\",\n          zIndex: -1,\n        },\n      },\n      MuiTab: {\n        root: {\n          color: COLORS.white,\n          fontSize: 18,\n          fontWeight: \"400\",\n          padding: 12,\n          textTransform: \"none\",\n        },\n        textColorInherit: {\n          opacity: 1,\n        },\n      },\n      MuiTableCell: {\n        root: {\n          borderBottom: \"none\",\n        },\n      },\n    },\n  })\n);\n"],"sourceRoot":""}