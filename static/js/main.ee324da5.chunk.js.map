{"version":3,"sources":["components/HeaderText.tsx","hooks/useFetchForeignAsset.ts","components/Transfer/WaitingForWalletMessage.tsx","components/Attest/WaitingForWalletMessage.tsx","components/Attest/Create.tsx","components/ShowTx.tsx","components/Attest/CreatePreview.tsx","hooks/useHandleAttest.tsx","hooks/useMetaplexData.ts","components/TransactionProgress.tsx","components/Attest/Send.tsx","components/Attest/SendPreview.tsx","hooks/useTransactionFees.tsx","components/LowBalanceWarning.tsx","components/Attest/Source.tsx","hooks/useCopyToClipboard.tsx","utils/pushToClipboard.ts","components/SmartAddress.tsx","components/Attest/SourcePreview.tsx","components/Attest/Target.tsx","components/Attest/TargetPreview.tsx","components/Attest/index.tsx","icons/Discord.svg","icons/Github.svg","icons/Medium.svg","icons/Telegram.svg","icons/Twitter.svg","icons/wormhole-network.svg","components/Footer.tsx","components/Home/index.tsx","store/tokenSlice.ts","hooks/useSolanaTokenMap.ts","components/NumberTextField.tsx","components/SolanaCreateAssociatedAddress.tsx","components/Migration/SolanaWorkflow.tsx","hooks/useEthereumMigratorInformation.tsx","components/Migration/EvmWorkflow.tsx","components/Migration/index.tsx","components/Migration/EvmQuickMigrate.tsx","hooks/useCheckIfWormholeWrapped.ts","hooks/useFetchTargetAsset.ts","components/StepDescription.tsx","components/NFT/WaitingForWalletMessage.tsx","components/NFT/Redeem.tsx","components/NFT/RedeemPreview.tsx","hooks/useHandleNFTTransfer.tsx","hooks/useNFTTargetAddress.ts","components/NFT/Send.tsx","components/NFT/SendPreview.tsx","icons/bnb.svg","hooks/useGetSourceParsedTokenAccounts.ts","utils/ethereum.ts","hooks/useMarketsMap.ts","components/TokenSelectors/NFTViewer.tsx","components/TokenSelectors/TokenPicker.tsx","components/TokenSelectors/EvmTokenPicker.tsx","components/TokenSelectors/RefreshButtonWrapper.tsx","utils/sort.ts","components/TokenSelectors/SolanaTokenPicker.tsx","hooks/useTerraNativeBalances.ts","components/TokenSelectors/TerraTokenPicker.tsx","components/TokenSelectors/SourceTokenSelector.tsx","components/NFT/Source.tsx","components/NFT/SourcePreview.tsx","hooks/useSyncTargetAddress.ts","components/NFT/Target.tsx","components/NFT/TargetPreview.tsx","components/NFT/index.tsx","components/NFTOriginVerifier.tsx","components/Transfer/AddToMetamask.tsx","components/Transfer/Redeem.tsx","hooks/useGetIsTransferCompleted.ts","components/Transfer/FeaturedMarkets.tsx","components/Transfer/RedeemPreview.tsx","hooks/useHandleTransfer.tsx","hooks/useTransferTargetAddress.ts","hooks/useEvmMetadata.ts","hooks/useTerraMetadata.ts","hooks/useTerraTokenMap.ts","hooks/useMetadata.ts","hooks/useGetTargetParsedTokenAccounts.ts","components/Transfer/RegisterNowButton.tsx","components/Transfer/Target.tsx","components/Transfer/TokenWarning.tsx","components/Transfer/SendConfirmationDialog.tsx","components/Transfer/Send.tsx","hooks/useAllowance.ts","components/Transfer/SendPreview.tsx","components/ChainSelectArrow.tsx","components/Transfer/SourceAssetWarning.tsx","components/Transfer/Source.tsx","components/Transfer/SourcePreview.tsx","components/Transfer/TargetPreview.tsx","components/Transfer/index.tsx","utils/SolanaPriceStore.ts","hooks/useTVL.ts","components/Stats/tableComponents/TablePaginationActions.jsx","components/Stats/tableComponents/MuiReactTable.jsx","components/Stats/CustodyAddresses.tsx","hooks/useNFTTVL.ts","components/Stats/nftLists.ts","components/Stats/NFTStats.tsx","hooks/useTransactionCount.ts","components/Stats/TransactionMetrics.tsx","components/Stats/index.tsx","hooks/useOriginalAsset.ts","components/TokenOriginVerifier.tsx","hooks/useSolanaMigratorInformation.tsx","components/Migration/SolanaQuickMigrate.tsx","components/WithdrawTokensTerra.tsx","App.js","components/BackgroundImage.tsx","ErrorBoundary.js","store/index.ts","index.js","store/selectors.ts","components/ChainSelect.tsx","utils/getSignedVAAWithRetry.ts","contexts/BetaContext.tsx","icons/eth.svg","icons/oasis-network-rose-logo.svg","icons/avax.svg","icons/polygon.svg","components/EthereumSignerKey.tsx","components/SolanaWalletKey.tsx","icons/bsc.svg","icons/solana.svg","utils/metaplex.ts","store/transferSlice.ts","components/ToggleConnectedButton.tsx","components/TerraWalletKey.tsx","contexts/TerraWalletContext.tsx","hooks/useTransferSignedVAA.ts","contexts/EthereumProviderContext.tsx","hooks/useIsWalletReady.ts","store/helpers.ts","store/nftSlice.ts","icons/terra.svg","utils/consts.ts","components/ButtonWithLoader.tsx","store/attestSlice.ts","hooks/useHandleCreateWrapped.tsx","hooks/useAttestSignedVAA.ts","hooks/useHandleNFTRedeem.tsx","hooks/useNFTSignedVAA.ts","components/Recovery.tsx","hooks/useHandleRedeem.tsx","utils/solana.ts","muiTheme.js","contexts/SolanaWalletContext.tsx","utils/terra.ts","components/KeyAndBalance.tsx","utils/parseError.ts"],"names":["useStyles","makeStyles","theme","centeredContainer","textAlign","width","header","marginTop","spacing","marginBottom","breakpoints","down","linearGradient","background","COLORS","blue","green","WebkitBackgroundClip","backgroundClip","WebkitTextFillColor","MozBackgroundClip","MozTextFillColor","HeaderText","children","white","small","classes","className","Typography","variant","component","clsx","useFetchForeignAsset","originChain","originAsset","foreignChain","useEthereumProvider","provider","evmChainId","chainId","isReady","useIsWalletReady","hasCorrectEvmNetwork","getEvmChainId","useState","assetAddress","setAssetAddress","doesExist","setDoesExist","error","setError","isLoading","setIsLoading","originAssetHex","useMemo","nativeToHexString","e","previousArgs","setPreviousArgs","argsEqual","setArgs","useCallback","argumentError","isEVMChain","useEffect","getForeignAssetEth","getTokenBridgeAddressForChain","hexToUint8Array","CHAIN_ID_TERRA","lcd","LCDClient","TERRA_HOST","getForeignAssetTerra","TERRA_TOKEN_BRIDGE_ADDRESS","connection","Connection","SOLANA_HOST","getForeignAssetSolana","SOL_TOKEN_BRIDGE_ADDRESS","then","result","ethers","constants","AddressZero","catch","compoundError","isFetching","data","undefined","address","receivedAt","message","color","palette","warning","light","WAITING_FOR_WALLET_AND_CONF","WaitingForWalletMessage","isApproving","useSelector","selectTransferIsApproving","isSending","selectTransferIsSending","transferTx","selectTransferTransferTx","targetChain","selectTransferTargetChain","isRedeeming","selectTransferIsRedeeming","redeemTx","selectTransferRedeemTx","CHAIN_ID_SOLANA","selectAttestIsSending","attestTx","selectAttestAttestTx","selectAttestTargetChain","isCreating","selectAttestIsCreating","createTx","selectAttestCreateTx","alignCenter","margin","display","spacer","height","Create","selectAttestSourceAsset","selectAttestSourceChain","statusMessage","foreignAssetInfo","shouldUpdate","useHandleCreateWrapped","handleClick","disabled","showLoader","console","log","KeyAndBalance","CircularProgress","ButtonWithLoader","onClick","tx","viewButton","ShowTx","showExplorerLink","CLUSTER","explorerAddress","CHAIN_ID_ETH","id","CHAIN_ID_ETHEREUM_ROPSTEN","CHAIN_ID_BSC","CHAIN_ID_POLYGON","CHAIN_ID_AVAX","CHAIN_ID_OASIS","explorerName","getExplorerName","noWrap","Button","href","target","rel","size","description","alert","CreatePreview","push","useHistory","dispatch","useDispatch","handleResetClick","reset","handleReturnClick","howToAddToTokenListUrl","getHowToAddToTokenListUrl","Alert","severity","Link","enqueueSnackbar","signer","sourceAsset","a","setIsSending","attestFromEth","receipt","setAttestTx","transactionHash","block","blockNumber","content","sequence","parseSequenceFromLogEth","getBridgeAddressForChain","emitterAddress","getEmitterAddressEth","getSignedVAAWithRetry","vaaBytes","setSignedVAAHex","uint8ArrayToHex","parseError","solPK","wallet","attestFromSolana","SOL_BRIDGE_ADDRESS","toString","transaction","signSendAndConfirm","txid","getTransaction","info","Error","slot","parseSequenceFromLogSolana","getEmitterAddressSolana","asset","attestFromTerra","terraAddress","msg","postWithFees","waitForTerraExecution","txhash","parseSequenceFromLogTerra","getEmitterAddressTerra","useHandleAttest","useSnackbar","sourceChain","isTargetComplete","selectAttestIsTargetComplete","isSendComplete","selectAttestIsSendComplete","solanaWallet","useSolanaWallet","publicKey","terraWallet","useConnectedWallet","handleAttestClick","evm","solana","terra","getMetaplexData","mintAddresses","promises","getMetadataAddress","Promise","all","metaAddresses","getMultipleAccountsRPC","map","pair","results","output","account","decodeMetadata","useMetaplexData","addresses","setResults","setReceivedAt","useLayoutEffect","cancelled","metadatas","Map","forEach","metadata","find","x","mint","set","createResultMap","Date","toISOString","root","TransactionProgress","currentBlock","setCurrentBlock","resolve","setTimeout","getBlockNumber","newBlock","sub","onSlotChange","slotInfo","removeSlotChangeListener","blockDiff","expectedBlocks","LinearProgress","value","CHAINS_BY_ID","name","SolanaTokenMetadataWarning","sourceAssetArrayed","metaplexData","get","SOLANA_TOKEN_METADATA_PROGRAM_URL","Send","SendPreview","SOLANA_THRESHOLD_LAMPORTS","BigInt","ETHEREUM_THRESHOLD_WEI","TERRA_THRESHOLD_ULUNA","isSufficientBalance","balance","getBalanceSolana","walletAddress","PublicKey","length","lamports","getBalanceEvm","getBalance","toBigInt","getBalanceTerra","bank","coins","targetCoin","amount","denom","coin","reject","toBalanceString","formatUnits","NATIVE_TERRA_DECIMALS","useEthereumGasPrice","contract","estimateResults","setEstimateResults","getGasEstimates","EthGasEstimateSummary","methodType","estimate","style","alignItems","flexWrap","LocalGasStation","fontSize","currentGasPrice","lowEstimate","highEstimate","getDefaultNativeCurrencySymbol","terraEstimatesByContract","transfer","lowGasEstimate","highGasEstimate","evmEstimatesByContract","nft","createWrapped","lowEstimateGasAmount","highEstimateGasAmount","getGasPrice","priceInWei","parseFloat","toFixed","TerraGasEstimateSummary","GasEstimateSummary","LowBalanceWarning","transactionFeeWarning","setBalance","loadStart","adjustedresult","balanceString","useTransactionFees","displayWarning","warningMessage","transferField","Source","isSourceComplete","selectAttestIsSourceComplete","shouldLockFields","selectAttestShouldLockFields","handleSourceChange","event","setSourceChain","handleAssetChange","setSourceAsset","handleNextClick","incrementStep","ChainSelect","select","fullWidth","onChange","chains","CHAINS","TextField","label","useCopyToClipboard","navigator","clipboard","writeText","pushToClipboard","mainTypog","marginLeft","marginRight","textDecoration","textUnderlineOffset","noGutter","noUnderline","buttons","StyledTooltip","withStyles","tooltip","minWidth","Tooltip","SmartAddress","parsedTokenAccount","symbol","tokenName","extraContent","isNativeTerra","isNativeDenom","useableAddress","mintKey","useableSymbol","formatNativeDenom","isNative","isNativeAsset","addressShort","shortenAddress","useableName","copyToClipboard","explorerButton","endIcon","OpenInNew","copyButton","FileCopy","tooltipContent","title","interactive","SourcePreview","explainerContent","Target","filter","c","handleTargetChange","setTargetChain","TargetPreview","explainerString","Attest","activeStep","selectAttestActiveStep","isCreateComplete","selectAttestIsCreateComplete","preventNavigation","window","onbeforeunload","Container","maxWidth","Stepper","orientation","Step","expanded","StepButton","setStep","StepContent","footer","socialIcon","builtWithContainer","justifyContent","opacity","wormholeIcon","transition","verticalAlign","Footer","IconButton","src","Discord","alt","Github","Medium","Telegram","Twitter","Wormhole","button","overview","mainCard","padding","backgroundColor","nearBlackWithMinorTransparency","chainList","chainCard","borderRadius","flexDirection","minHeight","chainLogoWrapper","position","chainLogo","chainName","flex","chip","blueWithTransparency","top","right","transform","Home","BETA_CHAINS","includes","chain","logo","COMING_SOON_CHAINS","item","Chip","Card","RouterLink","to","initialState","solanaTokenMap","getEmptyDataWrapper","terraTokenMap","marketsMap","tokenSlice","createSlice","reducers","receiveSolanaTokenMap","state","action","receiveDataWrapper","payload","fetchSolanaTokenMap","fetchDataWrapper","errorSolanaTokenMap","errorDataWrapper","receiveTerraTokenMap","fetchTerraTokenMap","errorTerraTokenMap","receiveMarketsMap","fetchMarketsMap","errorMarketsMap","actions","environment","ENV","Testnet","MainnetBeta","getSolanaTokenMap","TokenListProvider","tokens","tokenList","filterByChainId","getList","useSolanaTokenMap","tokenMap","selectSolanaTokenMap","shouldFire","NumberTextField","onMaxClick","props","type","InputProps","endAdornment","InputAdornment","useAssociatedAccountExistsState","mintAddress","readableTargetAddress","associatedAccountExists","setAssociatedAccountExists","mintPublicKey","payerPublicKey","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","associatedAddress","getAccountInfo","SolanaCreateAssociatedAddress","setIsCreating","Transaction","createAssociatedTokenAccountInstruction","add","getRecentBlockhash","blockhash","recentBlockhash","feePayer","SolanaCreateAssociatedAddressAlternate","selectTransferOriginChain","selectTransferOriginAsset","addressHex","selectTransferTargetAddressHex","base58TargetAddress","hexToNativeString","base58OriginAddress","targetAsset","setTargetAsset","handleForceCreateClick","mainPaper","divider","getDecimals","setter","pk","getParsedAccountInfo","decimals","parsed","tokenAmount","uiAmountString","Workflow","fromMint","toMint","fromTokenAccount","metaplexArray","poolAddress","setPoolAddress","poolExists","setPoolExists","fromTokenAccountBalance","setFromTokenAccountBalance","toTokenAccount","setToTokenAccount","toTokenAccountBalance","setToTokenAccountBalance","fromMintDecimals","setFromMintDecimals","fromTokenAccountExists","toTokenAccountExists","setToTokenAccountExists","toCustodyAddress","setToCustodyAddress","toCustodyBalance","setToCustodyBalance","migrationAmount","setMigrationAmount","migrationIsProcessing","setMigrationIsProcessing","setTransaction","getPoolAddress","MIGRATION_PROGRAM_ADDRESS","key","getMultipleAccounts","getToCustodyAddress","migrateTokens","migrateTokensTx","parseUnits","instruction","fromParse","hasRequisiteData","accountsReady","amountGreaterThanZero","sufficientFromTokens","sufficientPoolBalance","isReadyToTransfer","handleAmountChange","handleMaxClick","getMetadata","tokenMapItem","metaplexItem","logoURI","uri","toMetadata","fromMetadata","toMintPretty","fromMintPretty","SolanaWalletKey","getRequisiteData","migrator","signerAddress","fromAsset","fromAddress","toAsset","toAddress","fromToken","TokenImplementation__factory","connect","toToken","fromSymbol","toSymbol","fromDecimals","toNumber","toDecimals","sharesDecimals","balanceOf","fromWalletBalance","toWalletBalance","fromPoolBalance","toPoolBalance","walletSharesBalance","useEthereumMigratorInformation","migratorAddress","toggleRefresh","Migrator__factory","setData","containerDiv","EvmWorkflow","setToggleRefresh","forceRefresh","prevState","poolInfo","approve","migrate","wait","hash","toTokenPretty","fromTokenPretty","poolPretty","fatalError","mainWorkflow","EthereumSignerKey","SolanaRoot","legacyAsset","match","params","MIGRATION_ASSET_MAP","fromTokenAcct","EthereumRoot","targetPool","getMigrationAssetMap","getAddress","withRouter","Paper","Divider","lineItem","alignSelf","flexGrow","flewGrow","hidden","convertButton","EvmMigrationLineItem","onLoadComplete","loaded","setLoaded","valueA","decimalsA","valueB","decimalsB","decimalsBasis","normalizedA","normalizedB","compareWithDecimalOffset","migrationAmountAbs","getAddressBalances","factory","EvmQuickMigrate","migrationMap","eligibleTokens","Array","from","keys","migrators","setMigrators","migratorsError","setMigratorsError","migratorsLoading","setMigratorsLoading","migratorsFinishedLoading","setMigratorsFinishedLoading","reportLoadComplete","migratorAddresses","tokenAddress","gt","hasEligibleAssets","makeStateSafe","useCheckIfWormholeWrapped","selectNFTSourceChain","selectTransferSourceChain","selectNFTSourceAsset","selectTransferSourceAsset","nftSourceParsedTokenAccount","selectNFTSourceParsedTokenAccount","tokenId","setSourceWormholeWrappedInfo","setNFTSourceWormholeWrappedInfo","setTransferSourceWormholeWrappedInfo","isRecovery","selectNFTIsRecovery","selectTransferIsRecovery","getOriginalAssetEthNFT","getNFTBridgeAddressForChain","getOriginalAssetEth","wrappedInfo","getOriginalAssetSolNFT","SOL_NFT_BRIDGE_ADDRESS","getOriginalAssetSol","getOriginalAssetTerra","useFetchTargetAsset","isSourceAssetWormholeWrapped","selectNFTIsSourceAssetWormholeWrapped","selectTransferIsSourceAssetWormholeWrapped","selectNFTOriginChain","selectNFTOriginAsset","selectNFTOriginTokenId","selectNFTTargetChain","setNFTTargetAsset","setTransferTargetAsset","lastSuccessfulArgs","setLastSuccessfulArgs","argsMatchLastSuccess","getForeignAssetEthNFT","getForeignAssetSolNFT","arrayify","BigNumber","StepDescription","selectNFTIsSending","selectNFTTransferTx","selectNFTIsRedeeming","selectNFTRedeemTx","Redeem","useHandleNFTRedeem","RedeemPreview","recipientChain","recipientAddress","transferFromEth","setTransferTx","payerAddress","targetAddress","originAddressStr","originTokenId","originAddress","zeroPad","transferFromSolana","useHandleNFTTransfer","sourceTokenId","targetAddressHex","selectNFTTargetAddressHex","useNFTTargetAddressHex","selectNFTIsTargetComplete","selectNFTIsSendComplete","sourceParsedTokenAccount","sourceTokenPublicKey","handleTransferClick","selectNFTTargetError","sourceWalletAddress","selectNFTSourceWalletAddress","isWrongWallet","isDisabled","errorMessage","createParsedTokenAccount","uiAmount","createNFTParsedTokenAccount","animation_url","external_url","image","image_256","nftName","createParsedTokenAccountFromInfo","pubkey","createParsedTokenAccountFromCovalent","covalent","contract_address","contract_decimals","Number","contract_ticker_symbol","contract_name","logoOverrides","logo_url","createNativeSolParsedTokenAccount","fetchAccounts","WSOL_ADDRESS","WSOL_DECIMALS","createNativeEthParsedTokenAccount","balanceInWei","balanceInEth","utils","formatEther","WETH_ADDRESS","WETH_DECIMALS","ethIcon","createNativeEthRopstenParsedTokenAccount","ROPSTEN_WETH_ADDRESS","ROPSTEN_WETH_DECIMALS","createNativeBscParsedTokenAccount","WBNB_ADDRESS","WBNB_DECIMALS","bnbIcon","createNativePolygonParsedTokenAccount","WMATIC_ADDRESS","WMATIC_DECIMALS","polygonIcon","createNativeAvaxParsedTokenAccount","WAVAX_ADDRESS","WAVAX_DECIMALS","avaxIcon","createNativeOasisParsedTokenAccount","WROSE_ADDRESS","WROSE_DECIMALS","oasisIcon","createNFTParsedTokenAccountFromCovalent","nft_data","token_balance","token_id","token_url","external_data","getEthereumAccountsCovalent","url","COVALENT_GET_TOKENS_URL","axios","response","items","supports_erc","getSolanaParsedTokenAccounts","fetchSourceParsedTokenAccountsNFT","fetchSourceParsedTokenAccounts","getParsedTokenAccountsByOwner","programId","splParsedTokenAccounts","receiveSourceParsedTokenAccountsNFT","nativeAccount","unshift","receiveSourceParsedTokenAccounts","errorSourceParsedTokenAccountsNFT","errorSourceParsedTokenAccounts","useGetAvailableTokens","tokenAccounts","selectNFTSourceParsedTokenAccounts","selectTransferSourceParsedTokenAccounts","lookupChain","setCovalent","covalentLoading","setCovalentLoading","covalentError","setCovalentError","ethNativeAccount","setEthNativeAccount","ethNativeAccountLoading","setEthNativeAccountLoading","ethNativeAccountError","setEthNativeAccountError","solanaMintAccounts","setSolanaMintAccounts","solanaMintAccountsLoading","setSolanaMintAccountsLoading","solanaMintAccountsError","setSolanaMintAccountsError","selectedSourceWalletAddress","selectSourceWalletAddress","currentSourceWalletAddress","resetSourceAccounts","setSourceWalletAddressNFT","setSourceWalletAddress","setSourceParsedTokenAccountNFT","setSourceParsedTokenAccount","setSourceParsedTokenAccountsNFT","setSourceParsedTokenAccounts","setAmount","index","extractMintInfo","accounts","reduce","arr","current","ethAccounts","slice","mintAccounts","resetAccounts","getEthereumToken","token","ethTokenToParsedTokenAccount","getEthereumNFT","NFTImplementation__factory","isNFT","erc721metadata","supportsInterface","supportsErc721","supportsErc721Metadata","ethNFTToNFTParsedTokenAccount","ownerOf","tokenURI","isValidEthereumAddress","isAddress","getMarketsMap","FEATURED_MARKETS_JSON_URL","useMarketsMap","selectMarketsMap","internalShouldFire","safeIPFS","startsWith","replace","LogoIcon","Avatar","solanaIcon","bscIcon","card","zIndex","backgroundPosition","backgroundSize","silverBorder","cardInset","textContent","paddingTop","paddingBottom","detailsContent","mediaContent","border","silverMediaBorder","borderColor","eth","bsc","polygon","skeleton","placeItems","wormholePositioner","ViewerLoader","Skeleton","animation","NFTViewer","setMetadata","isMediaLoading","setIsMediaLoading","onLoad","m","image_url","big_image","small_image","animLower","toLowerCase","hasVideo","endsWith","hasAudio","hasImage","copyTokenId","videoSrc","imageSrc","audioSrc","onError","media","autoPlay","controls","loop","onLoadedData","elevation","CardContent","CardMedia","align","arrow","substr","createStyles","optionContainer","optionContent","maxHeight","overflow","dialogContent","overflowX","selectionButtonContainer","selectionButton","values","sm","tokenOverviewContainer","flexBasis","flexShrink","tokenImageContainer","tokenImage","tokenMarketsList","order","migrationAlert","flexTitle","grower","balancePretty","uiString","numberString","split","gte","substring","noClickThrough","stopPropagation","BasicAccountRender","isMigrationEligible","displayBalance","marketsData","mintPrettyString","shouldDisplayBalance","nftContent","wordBreak","tokenContent","markets","market","Launch","link","migrationRender","TokenPicker","options","RenderOption","isValidAddress","useTokenId","holderString","setHolderString","tokenIdHolderString","setTokenIdHolderString","loadingError","setLoadingError","isLocalLoading","setLocalLoading","dialogIsOpen","setDialogIsOpen","selectionError","setSelectionError","openDialog","closeDialog","handleSelectOption","option","newOption","resetAccountsWrapper","searchFilter","optionString","searchString","marketChainTokens","featuredMarkets","tokenMarkets","featuredOptions","ownedMarketTokens","Object","nonFeaturedOptions","localFind","localLoader","displayLocalError","dialog","Dialog","onClose","open","DialogTitle","DialogContent","AVAILABLE_MARKETS_URL","List","gutterBottom","InfoOutlined","ListItem","selectionChip","isWormholev1","WormholeAbi__factory","WORMHOLE_V1_ETH_ADDRESS","isWrappedAsset","EvmTokenPicker","selectedTokenAccount","selectTransferSourceParsedTokenAccount","tokenAccount","selectedMintMatch","selectedTokenIdMatch","getEthAddress","onChangeWrapper","v1","migration","RenderComp","inlineContentWrapper","flexWrapper","RefreshButtonWrapper","callback","sortParsedTokenAccounts","b","localeCompare","SolanaSourceTokenSelector","mintAuth","metaplex","memoizedTokenMap","getLogo","getSymbol","getName","filteredOptions","is721CompatibleNFT","supply","sort","accountsWithMetadata","mintAuthority","WORMHOLE_V1_MINT_AUTHORITY","newValue","useTerraNativeBalances","refreshRef","balances","setBalances","refresh","setRefresh","obj","returnsFalse","TerraTokenPicker","nativeRefresh","useRef","nativeIsLoading","resetAccountWrapper","terraTokenArray","getNativeTerraIcon","SUPPORTED_TERRA_TOKENS","lookupTerraAddress","lookupAsset","wasm","contractQuery","token_info","isSearchableAddress","isValidTerraAddress","TokenSelector","walletIsReady","setNFTSourceParsedTokenAccount","setTransferSourceParsedTokenAccount","setNFTSourceWalletAddress","setTransferSourceWalletAddress","handleOnChange","newTokenAccount","maps","useGetSourceParsedTokens","placeholder","selectNFTSourceBalanceString","selectNFTSourceError","selectNFTIsSourceComplete","selectNFTShouldLockFields","VerifiedUser","CHAINS_WITH_NFT_SUPPORT","useSyncTargetAddress","selectNFTTargetAsset","selectTransferTargetAsset","targetParsedTokenAccount","selectTransferTargetParsedTokenAccount","targetTokenAccountPublicKey","setTargetAddressHex","setNFTTargetAddressHex","setTransferTargetAddressHex","toBytes","associatedTokenAccount","canonicalAddress","targetAddressNative","NFT","selectNFTActiveStep","isRedeemComplete","selectNFTIsRedeemComplete","search","useLocation","query","URLSearchParams","pathSourceChain","pathTargetChain","completed","originHeader","viewButtonWrapper","loaderWrapper","NFTOriginVerifier","isBeta","useBetaContext","setLookupChain","setLookupAsset","lookupTokenId","setLookupTokenId","lookupError","setLookupError","setParsedTokenAccount","originInfo","setOriginInfo","handleChainChange","handleTokenIdChange","newParsedTokenAccount","readableAddress","displayError","MenuItem","addButton","AddToMetamask","detectEthereumProvider","request","method","useHandleRedeem","handleNativeClick","recoveryOnly","isTransferCompleted","setIsTransferCompleted","signedVAA","useTransferSignedVAA","transferCompleted","getIsTransferCompletedEth","getIsTransferCompletedSolana","lcdClient","getIsTransferCompletedTerra","TERRA_GAS_PRICES_URL","isTransferCompletedLoading","useGetIsTransferCompleted","isEthNative","isEthRopstenNative","isBscNative","isPolygonNative","isAvaxNative","isOasisNative","isSolNative","isNativeEligible","useNativeRedeem","setUseNativeRedeem","toggleNativeRedeem","howToAddTokensUrl","getHowToAddTokensToWalletUrl","FormControlLabel","control","Checkbox","checked","getJupiterSwapUrl","tokenInfo","sourceSymbol","targetSymbol","JUPITER_SWAP_BASE_URL","FeaturedMarkets","tokenMarketButtons","marketInfo","amountParsed","transferFromEthNative","promise","transferNativeSol","transferFromTerra","msgs","useHandleTransfer","selectTransferAmount","useTransferTargetAddressHex","selectTransferIsTargetComplete","selectTransferIsSendComplete","ERC20_BASIC_ABI","handleError","fetchSingleMetadata","Contract","fetchEthMetadata","resultsArray","useEvmMetadata","setIsFetching","fetchTerraMetadata","useTerraMetadata","getTerraTokenMap","TERRA_TOKEN_METADATA_URL","useTerraTokenMap","selectTerraTokenMap","useMetadata","solanaAddresses","terraAddresses","ethereumAddresses","terraMetadata","ethMetadata","raw","constructSolanaMetadata","metadataMap","meta","constructEthMetadata","mainnet","icon","constructTerraMetadata","useGetTargetParsedTokenAccounts","targetAssetArrayed","hasResolvedMetadata","setTargetParsedTokenAccount","n","RegisterNowButtonCore","history","signedVAAHex","selectAttestSignedVAAHex","canSwitch","nativeAsset","RegisterNowButton","useTargetInfo","selectTransferTargetAssetWrapper","targetAssetError","selectTransferTargetBalanceString","transferAmount","selectTransferTargetError","selectTransferShouldLockFields","container","line","WormholeWrappedWarning","Box","fontWeight","MultichainWarning","RewardsWarning","TokenWarning","searchableAddress","isWormholeWrapped","multichainSymbol","MULTI_CHAIN_TOKENS","isMultiChain","showMultiChainWarning","showWrappedWarning","showRewardsWarning","SendConfirmationContent","deservesTimeout","countdown","setCountdown","setInterval","ArrowDownward","DialogActions","SendConfirmationDialog","isConfirmOpen","setIsConfirmOpen","handleConfirmClick","handleConfirmClose","sourceAmount","sourceDecimals","sourceIsNative","sourceAmountParsed","oneParsed","allowanceError","setAllowanceError","shouldApproveUnlimited","setShouldApproveUnlimited","toggleShouldApproveUnlimited","allowance","setAllowance","isAllowanceFetching","setIsAllowanceFetching","isApproveProcessing","sufficientAllowance","getAllowanceEth","approveAmount","setIsApproving","approveEth","useAllowance","approveButtonNeeded","notOne","approveExactAmount","approveUnlimited","MaxUint256","ChainSelectArrow","showSwap","setShowSwap","onMouseEnter","onMouseLeave","SwapHoriz","ArrowForward","PolygonTerraWrappedWarning","SoureAssetWarning","showPolygonTerraWrappedWarning","POLYGON_TERRA_WRAPPED_TOKENS","chainSelectWrapper","chainSelectContainer","chainSelectArrow","targetChainOptions","hasParsedTokenAccount","isSolanaMigration","isEthereumMigration","ETH_MIGRATION_ASSET_MAP","isBscMigration","BSC_MIGRATION_ASSET_MAP","isMigrationAsset","selectTransferSourceBalanceString","selectTransferSourceError","selectTransferIsSourceComplete","handleMigrationClick","Transfer","selectTransferActiveStep","selectTransferIsRedeemComplete","serumMarkets","MARKETS","deprecated","join","PriceStore","cache","this","marketName","fetch","resp","json","asks","bids","price","mid","priceStore","BAD_PRICES_BY_CHAIN","calcEvmTVL","covalentReport","hasUnreliablePrice","quote_rate","totalValue","quote","quotePrice","originChainId","useTVL","ethCovalentData","setEthCovalentData","ethCovalentIsLoading","setEthCovalentIsLoading","ethCovalentError","setEthCovalentError","bscCovalentData","setBscCovalentData","bscCovalentIsLoading","setBscCovalentIsLoading","bscCovalentError","setBscCovalentError","polygonCovalentData","setPolygonCovalentData","polygonCovalentIsLoading","setPolygonCovalentIsLoading","polygonCovalentError","setPolygonCovalentError","avaxCovalentData","setAvaxCovalentData","avaxCovalentIsLoading","setAvaxCovalentIsLoading","avaxCovalentError","setAvaxCovalentError","solanaCustodyTokens","setSolanaCustodyTokens","solanaCustodyTokensLoading","setSolanaCustodyTokensLoading","solanaCustodyTokensError","setSolanaCustodyTokensError","solanaMetadata","solanaPrices","priceMap","setPriceMap","relevantMarkets","relevantMarket","getPrice","useSolanaPrices","isTerraNativeLoading","terraNativeBalances","terraSwaprates","setTerraSwaprates","TERRA_SWAPRATE_URL","terraTVL","matchingSwap","swap","swaprate","useTerraTVL","isTerraLoading","solanaTVL","metaData","genericMetadata","calcSolanaTVL","ethTVL","bscTVL","polygonTVL","avaxTVL","ETH_TOKEN_BRIDGE_ADDRESS","BSC_TOKEN_BRIDGE_ADDRESS","POLYGON_TOKEN_BRIDGE_ADDRESS","AVAX_TOKEN_BRIDGE_ADDRESS","SOL_CUSTODY_ADDRESS","tvlArray","TablePaginationActions","useTheme","count","page","rowsPerPage","onPageChange","direction","Math","ceil","max","stopProp","EnhancedTable","columns","skipPageReset","useTable","autoResetPage","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","getTableProps","headerGroups","prepareRow","gotoPage","setPageSize","rows","pageIndex","pageSize","TableContainer","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","getSortByToggleProps","Header","TableSortLabel","active","isSorted","isSortedDesc","render","canGroupBy","getGroupByToggleProps","isGrouped","RemoveCircleOutline","AddCircleOutline","TableBody","row","i","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","KeyboardArrowRight","subRows","isAggregated","isPlaceholder","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onRowsPerPageChange","ActionsComponent","flexBox","explainerContainer","CustodyAddresses","nftAddress","SOL_NFT_CUSTODY_ADDRESS","tvlColumns","accessor","disableGroupBy","Cell","original","table","MuiReactTable","nftData","useNFTTVL","ETH_NFT_BRIDGE_ADDRESS","BSC_NFT_BRIDGE_ADDRESS","POLYGON_NFT_BRIDGE_ADDRESS","ALLOW_LIST","logoPositioner","tokenContainer","totalContainer","tableBox","randomButton","randomNftContainer","tableContainer","NFTStats","nftTVL","randomNumber","setRandomNumber","randomNft","genRandomNumber","found","nextNumber","floor","random","nfts","contractAddress","numeral","format","sortBy","desc","randomNFTContent","useTransactionCount","totals","setTotals","recents","setRecents","loadingTotals","setLoadingTotals","loadingRecents","setLoadingRecents","totalsError","setTotalsError","recentsError","setRecentsError","TOTAL_TRANSACTIONS_WORMHOLE","RECENT_TRANSACTIONS_WORMHOLE","totalAllTime","total24h","VAA_EMITTER_ADDRESSES","totalAll","TotalCount","total24","LastDayCount","mostRecent","mergeResults","totalsBox","typog","TransactionMetrics","transactionCount","networkExplorer","WORMHOLE_EXPLORER_BASE","StatsRoot","tvl","sortTokens","rowA","rowB","sortType","aggregate","leafValues","Aggregated","p","v","tvlString","sum","val","toUpperCase","getOriginalAssetToken","foreignNativeStringAddress","getOriginalAssetNFT","uint8ArrayToNative","SOLANA_SYSTEM_PROGRAM_ADDRESS","useOriginalAsset","foreignAddress","setOriginAddress","setOriginTokenId","setOriginChain","getOriginalAsset","centered","arrowIcon","resultContainer","PrimaryAssetInfomation","nativeContent","wrapped","SecondaryAssetInformation","originAssetInfo","tokenArray","TokenOriginVerifier","primaryLookupChain","setPrimaryLookupChain","primaryLookupAsset","setPrimaryLookupAsset","secondaryLookupChain","setSecondaryLookupChain","primaryLookupChainOptions","secondaryLookupChainOptions","handlePrimaryLookupChainChange","handleSecondaryLookupChainChange","handlePrimaryLookupAssetChange","primaryWalletIsActive","secondaryWalletIsActive","primaryWallet","secondaryWallet","primaryWalletError","originError","primaryError","secondaryWalletError","foreignError","secondaryError","primaryContent","secondaryContent","SolanaMigrationLineItem","migratorInfo","getNotReadyCause","fromAssociatedTokenAccountExists","toAssociatedTokenAccountExists","fromAssociatedTokenAccount","toAssociatedTokenAccount","fromAssociatedTokenAccountBalance","toAssociatedTokenAccountBalance","fromName","fromLogo","toName","toLogo","useSolanaMigratorInformation","fromMintKey","toMintKey","defaultFromTokenAccount","migrationError","setMigrationError","handleMigrateClick","precheckError","getTokenBalances","fromAccountInfo","SolanaQuickMigrate","formControl","withdraw","MsgExecuteContract","withdraw_tokens","native_token","txResult","WithdrawTokensTerra","setToken","TerraWalletKey","FormControl","InputLabel","Select","appBar","typography","body1","text","primary","bg","up","brandLink","brandText","h5","iconButton","gradientButton","backgroundImage","nearBlack","boxShadow","betaBanner","App","isHomepage","useRouteMatch","path","exact","pathname","handleTabChange","AppBar","Toolbar","Hidden","implementation","xsDown","NavLink","BarChart","HelpOutline","smUp","Tabs","indicatorColor","Tab","Recovery","Migration","Stats","holeOuterContainer","holeInnerContainer","left","holeImage","blurred","BackgroundImage","ErrorBoundary","hasError","errorInfo","React","Component","store","configureStore","reducer","attest","attestReducer","nftReducer","transferReducer","tokenReducer","ReactDOM","ThemeProvider","CssBaseline","maxSnack","BetaContext","document","getElementById","sourceParsedTokenAccounts","selectNFTSignedVAAHex","lte","indexOf","sourceError","UNREGISTERED_ERROR_MESSAGE","selectTransferSignedVAAHex","listItemIcon","rest","filteredChains","createChainMenuItem","CURRENT_WORMHOLE_RPC_HOST","getNextRpcHost","WORMHOLE_RPC_HOSTS","emitterChain","retryAttempts","attempts","getSignedVAA","createContext","BetaContextProvider","isBetaEnabled","setIsBetaEnabled","userEntered","secretSequence","secretListener","k","keyCode","prev","addEventListener","removeEventListener","Provider","useContext","disconnect","providerError","connected","disconnectButton","startIcon","STORE","MetadataKey","base58","require","METADATA_REPLACE","RegExp","METADATA_PREFIX","EDITION","PubKeysInternedMap","toPublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","METADATA_PROGRAM_ID","METAPLEX_ID","SYSTEM","programIds","associatedToken","bpf_upgrade_loader","system","memo","vault","auction","findProgramAddress","seeds","agg","cached","localStorage","getItem","JSON","parse","parseInt","nonce","setItem","stringify","toBase58","getEdition","tokenMint","PROGRAM_IDS","Buffer","toBuffer","Creator","args","verified","share","Data","sellerFeeBasisPoints","creators","Metadata","updateAuthority","primarySaleHappened","isMutable","editionNonce","masterEdition","edition","MetadataV1","METADATA_SCHEMA","kind","fields","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","MasterEditionV2","parent","EditionV1","ledger","EditionMarker","editionOffset","indexOffset","positionInBitsetFromRight","mask","pow","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","encode","writePubkeyAsString","decode","buffer","deserializeUnchecked","transferSlice","decrementStep","prevSourceChain","isWrapped","prevTargetChain","setIsRedeeming","setRedeemTx","setRecoveryVaa","vaa","parsedPayload","ToggleConnectedButton","is0x","useTerraWallet","wallets","localnet","chainID","URL","walletConnectChainIds","TerraWalletContext","TerraWalletWrapper","useWallet","setWallet","setConnected","availableConnectTypes","contextValue","TerraWalletProvider","defaultNetwork","EthereumProviderContext","EthereumProviderProvider","setProviderError","setProvider","setChainId","setSigner","setSignerAddress","detectedProvider","providers","Web3Provider","send","getNetwork","network","getSigner","on","createWalletStatus","forceNetworkSwitch","enableNetworkAutoswitch","autoSwitch","hasTerraWallet","hasEthInfo","correctEvmNetwork","hexStripZeros","hexlify","nftSlice","terraIcon","ETH_NETWORK_CHAIN_ID","ROPSTEN_ETH_NETWORK_CHAIN_ID","BSC_NETWORK_CHAIN_ID","POLYGON_NETWORK_CHAIN_ID","AVAX_NETWORK_CHAIN_ID","OASIS_NETWORK_CHAIN_ID","process","ETH_BRIDGE_ADDRESS","BSC_BRIDGE_ADDRESS","POLYGON_BRIDGE_ADDRESS","AVAX_BRIDGE_ADDRESS","AVAX_NFT_BRIDGE_ADDRESS","OASIS_BRIDGE_ADDRESS","OASIS_NFT_BRIDGE_ADDRESS","OASIS_TOKEN_BRIDGE_ADDRESS","ROPSTEN_ETH_BRIDGE_ADDRESS","ROPSTEN_ETH_NFT_BRIDGE_ADDRESS","ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS","TERRA_BRIDGE_ADDRESS","COVALENT_BSC","COVALENT_POLYGON","COVALENT_AVAX","noNftMetadata","chainNum","EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v","Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB","MAX_VAA_UPLOAD_RETRIES_SOLANA","textTransform","loader","bottom","attestSlice","setCreateTx","updateWrappedOnEth","createWrappedOnEth","signTransaction","postVaaSolanaWithRetry","updateWrappedOnSolana","createWrappedOnSolana","updateWrappedOnTerra","createWrappedOnTerra","useAttestSignedVAA","handleCreateClick","redeemOnEth","getClaimAddressSolana","claimAddress","redeemOnSolana","isNFTVAASolanaNative","parse_vaa","parsedVAA","parseNFTPayload","Uint8Array","getForeignAssetSol","metadataAddress","createMetaOnSolana","useNFTSignedVAA","handleRedeemClick","advancedContainer","getTransactionReceipt","txInfo","setType","recoverySourceChain","setRecoverySourceChain","recoverySourceTx","setRecoverySourceTx","recoverySourceTxIsLoading","setRecoverySourceTxIsLoading","recoverySourceTxError","setRecoverySourceTxError","recoverySignedVAA","setRecoverySignedVAA","recoveryParsedVAA","setRecoveryParsedVAA","walletConnectError","parseTransferPayload","pathSourceTransaction","handleTypeChange","prevChain","handleSourceChainChange","handleSourceTxChange","trim","handleSignedVAAChange","parsedPayloadTargetChain","enableRecovery","handleRecoverClick","setRecoveryNFTVaa","helperText","expandIcon","my","emitter_chain","emitter_address","timestamp","toLocaleString","redeemOnEthNative","redeemAndUnwrapOnSolana","redeemOnTerra","handleRedeemNativeClick","signed","sendRawTransaction","serialize","confirmTransaction","mintInfo","MintLayout","uintArray","reverse","pubkeys","commitment","chunks","chunk","getMultipleAccountsInfo","flat","apply","_","gray","greenWithTransparency","lightGreen","lightBlue","red","darkRed","responsiveFontSizes","createTheme","default","paper","main","secondary","fontFamily","h1","h2","h4","overrides","MuiCssBaseline","scrollbarWidth","scrollbarColor","MuiAccordion","rounded","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","MuiAlert","MuiButton","MuiLink","MuiPaper","MuiStepper","MuiStep","MuiStepConnector","lineVertical","borderLeftWidth","MuiStepContent","MuiStepLabel","MuiTab","SolanaWalletProvider","getPhantomWallet","getSolflareWallet","getMathWallet","getSolletWallet","unit","isValidTerra","code","raw_log","startsWithTerra","isParseable","isLength20","gasPrices","estimateFee","feeDenoms","feeEstimate","post","fee","MM_ERR_WITH_INFO_START"],"mappings":"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IACZ2yD,OACA52D,GACOZ,EACTy3D,gCAOS93D,EACC,YAAZ0E,EACI,CACEywD,IAAK,wBACLD,QAAS,aACT3nD,KAAM,WAEI,YAAZ7I,EACA,CACEywD,IAAK,+BACLD,QAAS,YACT3nD,KAAM,WAER,CACE4nD,IAAK,wBACLD,QAAS,aACT3nD,KAAM,cAEDwqD,EAAqB5wC,qBACpB,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOo6C,EAAyB33B,qBACxB,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOy0C,EAA2BhyB,qBAC1B,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOszD,EAAqB7wC,qBACpB,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOq6C,EAAyB53B,qBACxB,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO00C,EAA2BjyB,qBAC1B,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOuzD,EAAyB9wC,qBACxB,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOs6C,EAA6B73B,qBAC5B,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO20C,EAA+BlyB,qBAC9B,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOwzD,EAAsB/wC,qBACrB,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOyzD,EAA0BhxC,qBACzB,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO40C,EAA4BnyB,qBAC3B,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO0zD,EAAuBjxC,qBACtB,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO2zD,EAA2BlxC,qBAC1B,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO4zD,EAA6BnxC,qBAC5B,YAAZziB,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOyD,EACC,YAAZzD,EACI,8CACY,YAAZA,EACA,+CACA,8CACOymB,EACC,YAAZzmB,EACI,8CACY,YAAZA,EACA,+C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","file":"static/js/main.ee324da5.chunk.js","sourcesContent":["import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport { COLORS } from \"../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  centeredContainer: {\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n  header: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(4),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginBottom: theme.spacing(4),\n    },\n  },\n  linearGradient: {\n    background: `linear-gradient(to left, ${COLORS.blue}, ${COLORS.green});`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n  },\n}));\n\nexport default function HeaderText({\n  children,\n  white,\n  small,\n}: {\n  children: ReactChild;\n  white?: boolean;\n  small?: boolean;\n}) {\n  const classes = useStyles();\n  return (\n    <div className={classes.centeredContainer}>\n      <Typography\n        variant={small ? \"h2\" : \"h1\"}\n        component=\"h1\"\n        className={clsx(classes.header, { [classes.linearGradient]: !white })}\n      >\n        {children}\n      </Typography>\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToUint8Array,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type ForeignAssetInfo = {\n  doesExist: boolean;\n  address: string | null;\n};\n\nfunction useFetchForeignAsset(\n  originChain: ChainId,\n  originAsset: string,\n  foreignChain: ChainId\n): DataWrapper<ForeignAssetInfo> {\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const correctEvmNetwork = getEvmChainId(foreignChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const [assetAddress, setAssetAddress] = useState<string | null>(null);\n  const [doesExist, setDoesExist] = useState<boolean | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const originAssetHex = useMemo(() => {\n    try {\n      return nativeToHexString(originAsset, originChain);\n    } catch (e) {\n      return null;\n    }\n  }, [originAsset, originChain]);\n  const [previousArgs, setPreviousArgs] = useState<{\n    originChain: ChainId;\n    originAsset: string;\n    foreignChain: ChainId;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.originChain === originChain &&\n    previousArgs.originAsset === originAsset &&\n    previousArgs.foreignChain === foreignChain;\n  const setArgs = useCallback(() => {\n    setPreviousArgs({ foreignChain, originChain, originAsset });\n  }, [foreignChain, originChain, originAsset]);\n\n  const argumentError = useMemo(\n    () =>\n      !originChain ||\n      !originAsset ||\n      !foreignChain ||\n      !originAssetHex ||\n      foreignChain === originChain ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && !hasCorrectEvmNetwork) ||\n      argsEqual,\n    [\n      isReady,\n      foreignChain,\n      originAsset,\n      originChain,\n      hasCorrectEvmNetwork,\n      originAssetHex,\n      argsEqual,\n    ]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setAssetAddress(null);\n      setError(\"\");\n      setDoesExist(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError || !originAssetHex) {\n      return;\n    }\n\n    let cancelled = false;\n    setIsLoading(true);\n    try {\n      const getterFunc: () => Promise<string | null> = isEVMChain(foreignChain)\n        ? () =>\n            getForeignAssetEth(\n              getTokenBridgeAddressForChain(foreignChain),\n              provider as any, //why does this typecheck work elsewhere?\n              originChain,\n              hexToUint8Array(originAssetHex)\n            )\n        : foreignChain === CHAIN_ID_TERRA\n        ? () => {\n            const lcd = new LCDClient(TERRA_HOST);\n            return getForeignAssetTerra(\n              TERRA_TOKEN_BRIDGE_ADDRESS,\n              lcd,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : () => {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            return getForeignAssetSolana(\n              connection,\n              SOL_TOKEN_BRIDGE_ADDRESS,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          };\n\n      getterFunc()\n        .then((result) => {\n          if (!cancelled) {\n            if (\n              result &&\n              !(\n                isEVMChain(foreignChain) &&\n                result === ethers.constants.AddressZero\n              )\n            ) {\n              setArgs();\n              setDoesExist(true);\n              setIsLoading(false);\n              setAssetAddress(result);\n            } else {\n              setArgs();\n              setDoesExist(false);\n              setIsLoading(false);\n              setAssetAddress(null);\n            }\n          }\n        })\n        .catch((e) => {\n          if (!cancelled) {\n            setError(\"Could not retrieve the foreign asset.\");\n            setIsLoading(false);\n          }\n        });\n    } catch (e) {\n      //This catch mostly just detects poorly formatted addresses\n      if (!cancelled) {\n        setError(\"Could not retrieve the foreign asset.\");\n        setIsLoading(false);\n      }\n    }\n  }, [\n    argumentError,\n    foreignChain,\n    originAssetHex,\n    originChain,\n    provider,\n    setArgs,\n    argsEqual,\n  ]);\n\n  const compoundError = useMemo(() => {\n    return error ? error : \"\";\n  }, [error]); //now swallows wallet errors\n\n  const output: DataWrapper<ForeignAssetInfo> = useMemo(\n    () => ({\n      error: compoundError,\n      isFetching: isLoading,\n      data:\n        (assetAddress !== null && assetAddress !== undefined) ||\n        (doesExist !== null && doesExist !== undefined)\n          ? { address: assetAddress, doesExist: !!doesExist }\n          : null,\n      receivedAt: null,\n    }),\n    [compoundError, isLoading, assetAddress, doesExist]\n  );\n\n  return output;\n}\n\nexport default useFetchForeignAsset;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferIsApproving,\n  selectTransferIsRedeeming,\n  selectTransferIsSending,\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport const WAITING_FOR_WALLET_AND_CONF =\n  \"Waiting for wallet approval (likely in a popup) and confirmation...\";\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isApproving = useSelector(selectTransferIsApproving);\n  const isSending = useSelector(selectTransferIsSending);\n  const transferTx = useSelector(selectTransferTransferTx);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const showWarning =\n    isApproving || (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestAttestTx,\n  selectAttestCreateTx,\n  selectAttestIsCreating,\n  selectAttestIsSending,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isSending = useSelector(selectAttestIsSending);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const createTx = useSelector(selectAttestCreateTx);\n  const showWarning = (isSending && !attestTx) || (isCreating && !createTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isCreating\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport useFetchForeignAsset from \"../../hooks/useFetchForeignAsset\";\nimport { useHandleCreateWrapped } from \"../../hooks/useHandleCreateWrapped\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  spacer: {\n    height: theme.spacing(2),\n  },\n}));\n\nfunction Create() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const originAsset = useSelector(selectAttestSourceAsset);\n  const originChain = useSelector(selectAttestSourceChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  const foreignAssetInfo = useFetchForeignAsset(\n    originChain,\n    originAsset,\n    targetChain\n  );\n  const shouldUpdate = foreignAssetInfo.data?.doesExist;\n  const error = foreignAssetInfo.error || statusMessage;\n  const { handleClick, disabled, showLoader } = useHandleCreateWrapped(\n    shouldUpdate || false\n  );\n\n  console.log(\"foreign asset info\", foreignAssetInfo);\n\n  return (\n    <>\n      <KeyAndBalance chainId={targetChain} />\n\n      {foreignAssetInfo.isFetching ? (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={classes.alignCenter} />\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={!isReady || disabled}\n            onClick={handleClick}\n            showLoader={showLoader}\n            error={error}\n          >\n            {shouldUpdate ? \"Update\" : \"Create\"}\n          </ButtonWithLoader>\n          <WaitingForWalletMessage />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Create;\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function ShowTx({\n  chainId,\n  tx,\n}: {\n  chainId: ChainId;\n  tx: Transaction;\n}) {\n  const classes = useStyles();\n  const showExplorerLink =\n    CLUSTER === \"testnet\" ||\n    CLUSTER === \"mainnet\" ||\n    (CLUSTER === \"devnet\" &&\n      (chainId === CHAIN_ID_SOLANA || chainId === CHAIN_ID_TERRA));\n  const explorerAddress =\n    chainId === CHAIN_ID_ETH\n      ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? `https://${CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_BSC\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}bscscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_POLYGON\n      ? `https://${CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"}polygonscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_AVAX\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}snowtrace.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_OASIS\n      ? undefined\n      : chainId === CHAIN_ID_SOLANA\n      ? `https://explorer.solana.com/tx/${tx?.id}${\n          CLUSTER === \"testnet\"\n            ? \"?cluster=devnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n            : \"\"\n        }`\n      : chainId === CHAIN_ID_TERRA\n      ? `https://finder.terra.money/${\n          CLUSTER === \"devnet\"\n            ? \"localterra\"\n            : CLUSTER === \"testnet\"\n            ? \"bombay-12\"\n            : \"columbus-5\"\n        }/tx/${tx?.id}`\n      : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  return (\n    <div className={classes.tx}>\n      <Typography noWrap component=\"div\" variant=\"body2\">\n        {tx.id}\n      </Typography>\n      {showExplorerLink && explorerAddress ? (\n        <Button\n          href={explorerAddress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          size=\"small\"\n          variant=\"outlined\"\n          className={classes.viewButton}\n        >\n          View on {explorerName}\n        </Button>\n      ) : null}\n    </div>\n  );\n}\n","import { Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectAttestCreateTx,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/attestSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport { useHistory } from \"react-router\";\nimport { getHowToAddToTokenListUrl } from \"../../utils/consts\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function CreatePreview() {\n  const { push } = useHistory();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const createTx = useSelector(selectAttestCreateTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const handleReturnClick = useCallback(() => {\n    dispatch(reset());\n    push(\"/transfer\");\n  }, [dispatch, push]);\n\n  const explainerString =\n    \"Success! The create wrapped transaction was submitted.\";\n  const howToAddToTokenListUrl = getHowToAddToTokenListUrl(targetChain);\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {createTx ? <ShowTx chainId={targetChain} tx={createTx} /> : null}\n      {howToAddToTokenListUrl ? (\n        <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n          Remember to add the token to the{\" \"}\n          <Link\n            href={howToAddToTokenListUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            token list\n          </Link>\n          {\".\"}\n        </Alert>\n      ) : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Attest Another Token!\n      </ButtonWithLoader>\n      <ButtonWithLoader onClick={handleReturnClick}>\n        Return to Transfer\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  attestFromEth,\n  attestFromSolana,\n  attestFromTerra,\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setAttestTx,\n  setIsSending,\n  setSignedVAAHex,\n} from \"../store/attestSlice\";\nimport {\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n  selectAttestIsTargetComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  sourceAsset: string,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await attestFromEth(\n      getTokenBridgeAddressForChain(chainId),\n      signer,\n      sourceAsset\n    );\n    dispatch(\n      setAttestTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  solPK: PublicKey,\n  sourceAsset: string,\n  wallet: WalletContextState\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const transaction = await attestFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_TOKEN_BRIDGE_ADDRESS,\n      solPK.toString(),\n      sourceAsset\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      // TODO: error state\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setAttestTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const msg = await attestFromTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      asset\n    );\n    const result = await postWithFees(wallet, [msg], \"Create Wrapped\");\n    const info = await waitForTerraExecution(result);\n    dispatch(setAttestTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleAttest() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleAttestClick = useCallback(() => {\n    if (isEVMChain(sourceChain) && !!signer) {\n      evm(dispatch, enqueueSnackbar, signer, sourceAsset, sourceChain);\n    } else if (sourceChain === CHAIN_ID_SOLANA && !!solanaWallet && !!solPK) {\n      solana(dispatch, enqueueSnackbar, solPK, sourceAsset, solanaWallet);\n    } else if (sourceChain === CHAIN_ID_TERRA && !!terraWallet) {\n      terra(dispatch, enqueueSnackbar, terraWallet, sourceAsset);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceAsset,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleAttestClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleAttestClick, disabled, isSending]\n  );\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { SOLANA_HOST } from \"../utils/consts\";\nimport {\n  decodeMetadata,\n  getMetadataAddress,\n  Metadata,\n} from \"../utils/metaplex\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\n\nexport const getMetaplexData = async (mintAddresses: string[]) => {\n  const promises = [];\n  for (const address of mintAddresses) {\n    promises.push(getMetadataAddress(address));\n  }\n  const metaAddresses = await Promise.all(promises);\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  const results = await getMultipleAccountsRPC(\n    connection,\n    metaAddresses.map((pair) => pair && pair[0])\n  );\n\n  const output = results.map((account) => {\n    if (account === null) {\n      return undefined;\n    } else {\n      if (account.data) {\n        try {\n          const MetadataParsed = decodeMetadata(account.data);\n          return MetadataParsed;\n        } catch (e) {\n          console.error(e);\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  });\n\n  return output;\n};\n\nconst createResultMap = (\n  addresses: string[],\n  metadatas: (Metadata | undefined)[]\n) => {\n  const output = new Map<string, Metadata | undefined>();\n\n  addresses.forEach((address) => {\n    const metadata = metadatas.find((x) => x?.mint === address);\n    if (metadata) {\n      output.set(address, metadata);\n    } else {\n      output.set(address, undefined);\n    }\n  });\n\n  return output;\n};\n\nconst useMetaplexData = (\n  addresses: string[]\n): DataWrapper<Map<string, Metadata | undefined> | undefined> => {\n  const [results, setResults] = useState<\n    Map<string, Metadata | undefined> | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [receivedAt, setReceivedAt] = useState<string | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    setIsLoading(true);\n    getMetaplexData(addresses).then(\n      (results) => {\n        if (!cancelled) {\n          setResults(createResultMap(addresses, results));\n          setIsLoading(false);\n          setError(\"\");\n          setReceivedAt(new Date().toISOString());\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setResults(undefined);\n          setIsLoading(false);\n          setError(\"Failed to fetch Metaplex data.\");\n          setReceivedAt(new Date().toISOString());\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, setResults, setIsLoading, setError]);\n\n  const output = useMemo(\n    () => ({\n      data: results,\n      isFetching: isLoading,\n      error,\n      receivedAt,\n    }),\n    [results, isLoading, error, receivedAt]\n  );\n  return output;\n};\n\nexport default useMetaplexData;\n","import { ChainId, CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { LinearProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CHAINS_BY_ID, SOLANA_HOST } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n    textAlign: \"center\",\n  },\n  message: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function TransactionProgress({\n  chainId,\n  tx,\n  isSendComplete,\n}: {\n  chainId: ChainId;\n  tx: Transaction | undefined;\n  isSendComplete: boolean;\n}) {\n  const classes = useStyles();\n  const { provider } = useEthereumProvider();\n  const [currentBlock, setCurrentBlock] = useState(0);\n  useEffect(() => {\n    if (isSendComplete || !tx) return;\n    if (isEVMChain(chainId) && provider) {\n      let cancelled = false;\n      (async () => {\n        while (!cancelled) {\n          await new Promise((resolve) => setTimeout(resolve, 500));\n          try {\n            const newBlock = await provider.getBlockNumber();\n            if (!cancelled) {\n              setCurrentBlock(newBlock);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n    if (chainId === CHAIN_ID_SOLANA) {\n      let cancelled = false;\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const sub = connection.onSlotChange((slotInfo) => {\n        if (!cancelled) {\n          setCurrentBlock(slotInfo.slot);\n        }\n      });\n      return () => {\n        cancelled = true;\n        connection.removeSlotChangeListener(sub);\n      };\n    }\n  }, [isSendComplete, chainId, provider, tx]);\n  const blockDiff =\n    tx && tx.block && currentBlock ? currentBlock - tx.block : undefined;\n  const expectedBlocks =\n    chainId === CHAIN_ID_SOLANA ? 32 : isEVMChain(chainId) ? 15 : 1;\n  if (\n    !isSendComplete &&\n    (chainId === CHAIN_ID_SOLANA || isEVMChain(chainId)) &&\n    blockDiff !== undefined\n  ) {\n    return (\n      <div className={classes.root}>\n        <LinearProgress\n          value={\n            blockDiff < expectedBlocks ? (blockDiff / expectedBlocks) * 75 : 75\n          }\n          variant=\"determinate\"\n        />\n        <Typography variant=\"body2\" className={classes.message}>\n          {blockDiff < expectedBlocks\n            ? `Waiting for ${blockDiff} / ${expectedBlocks} confirmations on ${CHAINS_BY_ID[chainId].name}...`\n            : `Waiting for Wormhole Network consensus...`}\n        </Typography>\n      </div>\n    );\n  }\n  return null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Link, makeStyles } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleAttest } from \"../../hooks/useHandleAttest\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport {\n  selectAttestAttestTx,\n  selectAttestIsSendComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\nimport { SOLANA_TOKEN_METADATA_PROGRAM_URL } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nconst SolanaTokenMetadataWarning = () => {\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const sourceAssetArrayed = useMemo(() => {\n    return [sourceAsset];\n  }, [sourceAsset]);\n  const metaplexData = useMetaplexData(sourceAssetArrayed);\n  const classes = useStyles();\n\n  if (metaplexData.isFetching || metaplexData.error) {\n    return null;\n  }\n\n  return !metaplexData.data?.get(sourceAsset) ? (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      This token is missing on-chain (Metaplex) metadata. Without it, the\n      wrapped token's name and symbol will be empty. See the{\" \"}\n      <Link\n        href={SOLANA_TOKEN_METADATA_PROGRAM_URL}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        metaplex repository\n      </Link>{\" \"}\n      for details.\n    </Alert>\n  ) : null;\n};\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleAttest();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n\n  return (\n    <>\n      <KeyAndBalance chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Attest\n      </ButtonWithLoader>\n      {sourceChain === CHAIN_ID_SOLANA ? <SolanaTokenMetadataWarning /> : null}\n      <WaitingForWalletMessage />\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={attestTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceChain,\n  selectAttestAttestTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n\n  const explainerString = \"The token has been attested!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {attestTx ? <ShowTx chainId={sourceChain} tx={attestTx} /> : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Typography } from \"@material-ui/core\";\nimport { LocalGasStation } from \"@material-ui/icons\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  getDefaultNativeCurrencySymbol,\n  SOLANA_HOST,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\nimport { NATIVE_TERRA_DECIMALS } from \"../utils/terra\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport { LCDClient } from \"@terra-money/terra.js\";\n\nexport type GasEstimate = {\n  currentGasPrice: string;\n  lowEstimate: string;\n  highEstimate: string;\n};\n\nexport type MethodType = \"nft\" | \"createWrapped\" | \"transfer\";\n\n//It's difficult to project how many fees the user will accrue during the\n//workflow, as a variable number of transactions can be sent, and different\n//execution paths can be hit in the smart contracts, altering gas used.\n//As such, for the moment it is best to just check for a reasonable 'low balance' threshold.\n//Still it would be good to calculate a reasonable value at runtime based off current gas prices,\n//rather than a hardcoded value.\nconst SOLANA_THRESHOLD_LAMPORTS: bigint = BigInt(300000);\nconst ETHEREUM_THRESHOLD_WEI: bigint = BigInt(35000000000000000);\nconst TERRA_THRESHOLD_ULUNA: bigint = BigInt(500000);\n\nconst isSufficientBalance = (chainId: ChainId, balance: bigint | undefined) => {\n  if (balance === undefined || !chainId) {\n    return true;\n  }\n  if (CHAIN_ID_SOLANA === chainId) {\n    return balance > SOLANA_THRESHOLD_LAMPORTS;\n  }\n  if (isEVMChain(chainId)) {\n    return balance > ETHEREUM_THRESHOLD_WEI;\n  }\n  if (CHAIN_ID_TERRA === chainId) {\n    return balance > TERRA_THRESHOLD_ULUNA;\n  }\n\n  return true;\n};\n\n//TODO move to more generic location\nconst getBalanceSolana = async (walletAddress: string) => {\n  const connection = new Connection(SOLANA_HOST);\n  return getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]).then(\n    (results) => {\n      if (results.length && results[0]) {\n        return BigInt(results[0].lamports);\n      }\n    },\n    (error) => {\n      return BigInt(0);\n    }\n  );\n};\n\nconst getBalanceEvm = async (walletAddress: string, provider: Provider) => {\n  return provider.getBalance(walletAddress).then((result) => result.toBigInt());\n};\n\nconst getBalanceTerra = async (walletAddress: string) => {\n  const TARGET_DENOM = \"uluna\";\n\n  const lcd = new LCDClient(TERRA_HOST);\n  return lcd.bank\n    .balance(walletAddress)\n    .then((coins) => {\n      // coins doesn't support reduce\n      const balancePairs = coins.map(({ amount, denom }) => [denom, amount]);\n      const targetCoin = balancePairs.find((coin) => coin[0] === TARGET_DENOM);\n      if (targetCoin) {\n        return BigInt(targetCoin[1].toString());\n      } else {\n        return Promise.reject();\n      }\n    })\n    .catch((e) => {\n      return Promise.reject();\n    });\n};\n\nconst toBalanceString = (balance: bigint | undefined, chainId: ChainId) => {\n  if (!chainId || balance === undefined) {\n    return \"\";\n  }\n  if (isEVMChain(chainId)) {\n    return formatUnits(balance, 18); //wei decimals\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return formatUnits(balance, 9); //lamports to sol decmals\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return formatUnits(balance, NATIVE_TERRA_DECIMALS);\n  }\n};\n\nexport default function useTransactionFees(chainId: ChainId) {\n  const { walletAddress, isReady } = useIsWalletReady(chainId);\n  const { provider } = useEthereumProvider();\n  const [balance, setBalance] = useState<bigint | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loadStart = useCallback(() => {\n    setBalance(undefined);\n    setIsLoading(true);\n    setError(\"\");\n  }, []);\n\n  useEffect(() => {\n    if (chainId === CHAIN_ID_SOLANA && isReady && walletAddress) {\n      loadStart();\n      getBalanceSolana(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    } else if (isEVMChain(chainId) && isReady && walletAddress) {\n      if (provider) {\n        loadStart();\n        getBalanceEvm(walletAddress, provider).then(\n          (result) => {\n            const adjustedresult =\n              result === undefined || result === null ? BigInt(0) : result;\n            setIsLoading(false);\n            setBalance(adjustedresult);\n          },\n          (error) => {\n            setIsLoading(false);\n            setError(\"Cannot load wallet balance\");\n          }\n        );\n      }\n    } else if (chainId === CHAIN_ID_TERRA && isReady && walletAddress) {\n      loadStart();\n      getBalanceTerra(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    }\n  }, [provider, walletAddress, isReady, chainId, loadStart]);\n\n  const results = useMemo(() => {\n    return {\n      isSufficientBalance: isSufficientBalance(chainId, balance),\n      balance,\n      balanceString: toBalanceString(balance, chainId),\n      isLoading,\n      error,\n    };\n  }, [balance, chainId, isLoading, error]);\n\n  return results;\n}\n\nexport function useEthereumGasPrice(contract: MethodType, chainId: ChainId) {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [estimateResults, setEstimateResults] = useState<GasEstimate | null>(\n    null\n  );\n\n  useEffect(() => {\n    if (provider && isReady && !estimateResults) {\n      getGasEstimates(provider, contract).then(\n        (results) => {\n          setEstimateResults(results);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n    }\n  }, [provider, isReady, estimateResults, contract]);\n\n  const results = useMemo(() => estimateResults, [estimateResults]);\n  return results;\n}\n\nfunction EthGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  const estimate = useEthereumGasPrice(methodType, chainId);\n  if (!estimate) {\n    return null;\n  }\n\n  return (\n    <Typography\n      component=\"div\"\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        marginTop: 8,\n        flexWrap: \"wrap\",\n      }}\n    >\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <LocalGasStation fontSize=\"inherit\" />\n        &nbsp;{estimate.currentGasPrice}\n      </div>\n      <div>&nbsp;&nbsp;&nbsp;</div>\n      <div>\n        Est. Fees: {estimate.lowEstimate} - {estimate.highEstimate}{\" \"}\n        {getDefaultNativeCurrencySymbol(chainId)}\n      </div>\n    </Typography>\n  );\n}\n\nconst terraEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(50000),\n    highGasEstimate: BigInt(90000),\n  },\n};\n\nconst evmEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(80000),\n    highGasEstimate: BigInt(130000),\n  },\n  nft: {\n    lowGasEstimate: BigInt(350000),\n    highGasEstimate: BigInt(500000),\n  },\n  createWrapped: {\n    lowGasEstimate: BigInt(450000),\n    highGasEstimate: BigInt(700000),\n  },\n};\n\nexport async function getGasEstimates(\n  provider: Provider,\n  contract: MethodType\n): Promise<GasEstimate | null> {\n  const lowEstimateGasAmount = evmEstimatesByContract[contract].lowGasEstimate;\n  const highEstimateGasAmount =\n    evmEstimatesByContract[contract].highGasEstimate;\n\n  let lowEstimate;\n  let highEstimate;\n  let currentGasPrice;\n  if (provider) {\n    const priceInWei = await provider.getGasPrice();\n    if (priceInWei) {\n      lowEstimate = parseFloat(\n        formatUnits(lowEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      highEstimate = parseFloat(\n        formatUnits(highEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      currentGasPrice = parseFloat(formatUnits(priceInWei, \"gwei\")).toFixed(0);\n    }\n  }\n\n  const output =\n    currentGasPrice && highEstimate && lowEstimate\n      ? {\n          currentGasPrice,\n          lowEstimate,\n          highEstimate,\n        }\n      : null;\n\n  return output;\n}\n\nfunction TerraGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (methodType === \"transfer\") {\n    const lowEstimate = formatUnits(\n      terraEstimatesByContract.transfer.lowGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    const highEstimate = formatUnits(\n      terraEstimatesByContract.transfer.highGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    return (\n      <Typography\n        component=\"div\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          marginTop: 8,\n          flexWrap: \"wrap\",\n        }}\n      >\n        <div>\n          Est. Fees: {lowEstimate} - {highEstimate}{\" \"}\n          {getDefaultNativeCurrencySymbol(chainId)}\n        </div>\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function GasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (isEVMChain(chainId)) {\n    return <EthGasEstimateSummary chainId={chainId} methodType={methodType} />;\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <TerraGasEstimateSummary chainId={chainId} methodType={methodType} />\n    );\n  } else {\n    return null;\n  }\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useTransactionFees from \"../hooks/useTransactionFees\";\nimport { getDefaultNativeCurrencySymbol } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction LowBalanceWarning({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { isReady } = useIsWalletReady(chainId);\n  const transactionFeeWarning = useTransactionFees(chainId);\n  const displayWarning =\n    isReady &&\n    transactionFeeWarning.balanceString &&\n    transactionFeeWarning.isSufficientBalance === false;\n  const warningMessage = `This wallet has a very low ${getDefaultNativeCurrencySymbol(\n    chainId\n  )} balance and may not be able to pay for the upcoming transaction fees.`;\n\n  const content = (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">{warningMessage}</Typography>\n      <Typography variant=\"body1\">\n        {\"Current balance: \" + transactionFeeWarning.balanceString}\n      </Typography>\n    </Alert>\n  );\n\n  return displayWarning ? content : null;\n}\n\nexport default LowBalanceWarning;\n","import { makeStyles, TextField } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  incrementStep,\n  setSourceAsset,\n  setSourceChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestIsSourceComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isSourceComplete = useSelector(selectAttestIsSourceComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAssetChange = useCallback(\n    (event) => {\n      dispatch(setSourceAsset(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS}\n      />\n      <KeyAndBalance chainId={sourceChain} />\n      <TextField\n        label=\"Asset\"\n        variant=\"outlined\"\n        fullWidth\n        className={classes.transferField}\n        value={sourceAsset}\n        onChange={handleAssetChange}\n        disabled={shouldLockFields}\n      />\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { Alert } from \"@material-ui/lab\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback } from \"react\";\nimport pushToClipboard from \"../utils/pushToClipboard\";\n\nexport default function useCopyToClipboard(content: string) {\n  const { enqueueSnackbar } = useSnackbar();\n  return useCallback(() => {\n    pushToClipboard(content)?.then(() => {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"success\">Copied.</Alert>,\n      });\n    });\n  }, [content, enqueueSnackbar]);\n}\n","export default function pushToClipboard(content: any) {\n  if (!navigator.clipboard) {\n    // Clipboard API not available\n    return;\n  }\n  return navigator.clipboard.writeText(content);\n}\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isNativeDenom,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Tooltip, Typography } from \"@material-ui/core\";\nimport { FileCopy, OpenInNew } from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport useCopyToClipboard from \"../hooks/useCopyToClipboard\";\nimport { ParsedTokenAccount } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\nimport { shortenAddress } from \"../utils/solana\";\nimport { formatNativeDenom } from \"../utils/terra\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainTypog: {\n    display: \"inline-block\",\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    textDecoration: \"underline\",\n    textUnderlineOffset: \"2px\",\n  },\n  noGutter: {\n    marginLeft: 0,\n    marginRight: 0,\n  },\n  noUnderline: {\n    textDecoration: \"none\",\n  },\n  buttons: {\n    marginLeft: \".5rem\",\n    marginRight: \".5rem\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    textAlign: \"center\",\n    \"& > *\": {\n      margin: \".25rem\",\n    },\n  },\n};\n\n// @ts-ignore\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nexport default function SmartAddress({\n  chainId,\n  parsedTokenAccount,\n  address,\n  symbol,\n  tokenName,\n  variant,\n  noGutter,\n  noUnderline,\n  extraContent,\n}: {\n  chainId: ChainId;\n  parsedTokenAccount?: ParsedTokenAccount;\n  address?: string;\n  logo?: string;\n  tokenName?: string;\n  symbol?: string;\n  variant?: any;\n  noGutter?: boolean;\n  noUnderline?: boolean;\n  extraContent?: ReactChild;\n}) {\n  const classes = useStyles();\n  const isNativeTerra = chainId === CHAIN_ID_TERRA && isNativeDenom(address);\n  const useableAddress = parsedTokenAccount?.mintKey || address || \"\";\n  const useableSymbol = isNativeTerra\n    ? formatNativeDenom(address)\n    : parsedTokenAccount?.symbol || symbol || \"\";\n  // const useableLogo = logo || isNativeTerra ? getNativeTerraIcon(useableSymbol) : null\n  const isNative = parsedTokenAccount?.isNativeAsset || isNativeTerra || false;\n  const addressShort = shortenAddress(useableAddress) || \"\";\n\n  const useableName = isNative\n    ? \"Native Currency\"\n    : parsedTokenAccount?.name\n    ? parsedTokenAccount.name\n    : tokenName\n    ? tokenName\n    : \"\";\n  const explorerAddress = isNative\n    ? null\n    : chainId === CHAIN_ID_ETH\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"goerli.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_BSC\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }bscscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_POLYGON\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"\n      }polygonscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_AVAX\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }snowtrace.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_OASIS\n    ? null\n    : chainId === CHAIN_ID_SOLANA\n    ? `https://explorer.solana.com/address/${useableAddress}${\n        CLUSTER === \"testnet\"\n          ? \"?cluster=devnet\"\n          : CLUSTER === \"devnet\"\n          ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n          : \"\"\n      }`\n    : chainId === CHAIN_ID_TERRA\n    ? `https://finder.terra.money/${\n        CLUSTER === \"devnet\"\n          ? \"localterra\"\n          : CLUSTER === \"testnet\"\n          ? \"bombay-12\"\n          : \"columbus-5\"\n      }/address/${useableAddress}`\n    : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  const copyToClipboard = useCopyToClipboard(useableAddress);\n\n  const explorerButton = !explorerAddress ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      endIcon={<OpenInNew />}\n      className={classes.buttons}\n      href={explorerAddress}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {\"View on \" + explorerName}\n    </Button>\n  );\n  //TODO add icon here\n  const copyButton = isNative ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      endIcon={<FileCopy />}\n      onClick={copyToClipboard}\n      className={classes.buttons}\n    >\n      Copy\n    </Button>\n  );\n\n  const tooltipContent = (\n    <>\n      {useableName && <Typography>{useableName}</Typography>}\n      {useableSymbol && !isNative && (\n        <Typography noWrap variant=\"body2\">\n          {addressShort}\n        </Typography>\n      )}\n      <div>\n        {explorerButton}\n        {copyButton}\n      </div>\n      {extraContent ? extraContent : null}\n    </>\n  );\n\n  return (\n    <StyledTooltip\n      title={tooltipContent}\n      interactive={true}\n      className={classes.mainTypog}\n    >\n      <Typography\n        variant={variant || \"body1\"}\n        className={clsx(classes.mainTypog, {\n          [classes.noGutter]: noGutter,\n          [classes.noUnderline]: noUnderline,\n        })}\n        component=\"div\"\n      >\n        {useableSymbol || addressShort}\n      </Typography>\n    </StyledTooltip>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n\n  const explainerContent =\n    sourceChain && sourceAsset ? (\n      <>\n        <span>You will attest</span>\n        <SmartAddress chainId={sourceChain} address={sourceAsset} />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/attestSlice\";\nimport {\n  selectAttestIsTargetComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={shouldLockFields}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to attest this token.{\" \"}\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary\n            methodType=\"createWrapped\"\n            chainId={targetChain}\n          />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestTargetChain } from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n\n  const explainerString = `to ${CHAINS_BY_ID[targetChain].name}`;\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerString}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setStep } from \"../../store/attestSlice\";\nimport {\n  selectAttestActiveStep,\n  selectAttestIsCreateComplete,\n  selectAttestIsCreating,\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n} from \"../../store/selectors\";\nimport HeaderText from \"../HeaderText\";\nimport Create from \"./Create\";\nimport CreatePreview from \"./CreatePreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Attest() {\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectAttestActiveStep);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const isCreateComplete = useSelector(selectAttestIsCreateComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isCreating) && !isCreateComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white small>\n        Token Registration\n      </HeaderText>\n      <Alert severity=\"info\">\n        This form allows you to register a token on a new foreign chain. Tokens\n        must be registered before they can be transferred.\n      </Alert>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))}>Target</StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton onClick={() => dispatch(setStep(2))}>\n            Send attestation\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n          >\n            Create wrapped token\n          </StepButton>\n          <StepContent>\n            {isCreateComplete ? <CreatePreview /> : <Create />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Attest;\n","export default __webpack_public_path__ + \"static/media/Discord.3cc30da6.svg\";","export default __webpack_public_path__ + \"static/media/Github.cf553f61.svg\";","export default __webpack_public_path__ + \"static/media/Medium.a9e68aca.svg\";","export default __webpack_public_path__ + \"static/media/Telegram.86d97a48.svg\";","export default __webpack_public_path__ + \"static/media/Twitter.06e4f08c.svg\";","export default __webpack_public_path__ + \"static/media/wormhole-network.5bb90ed1.svg\";","import { IconButton, makeStyles, Typography } from \"@material-ui/core\";\nimport Discord from \"../icons/Discord.svg\";\nimport Github from \"../icons/Github.svg\";\nimport Medium from \"../icons/Medium.svg\";\nimport Telegram from \"../icons/Telegram.svg\";\nimport Twitter from \"../icons/Twitter.svg\";\nimport Wormhole from \"../icons/wormhole-network.svg\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    margin: theme.spacing(2, 0, 2),\n    textAlign: \"center\",\n  },\n  socialIcon: {\n    \"& img\": {\n      height: 24,\n      width: 24,\n    },\n  },\n  builtWithContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    opacity: 0.5,\n    marginTop: theme.spacing(1),\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <div>\n        <IconButton\n          href=\"https://discord.gg/xsT8qrHAvV\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Discord} alt=\"Discord\" />\n        </IconButton>\n        <IconButton\n          href=\"https://github.com/certusone/wormhole\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Github} alt=\"Github\" />\n        </IconButton>\n        <IconButton\n          href=\"http://wormholecrypto.medium.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Medium} alt=\"Medium\" />\n        </IconButton>\n        <IconButton\n          href=\"https://t.me/wormholecrypto\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Telegram} alt=\"Telegram\" />\n        </IconButton>\n        <IconButton\n          href=\"https://twitter.com/wormholecrypto\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.socialIcon}\n        >\n          <img src={Twitter} alt=\"Twitter\" />\n        </IconButton>\n      </div>\n      <div className={classes.builtWithContainer}>\n        <div>\n          <a\n            href=\"https://wormholenetwork.com/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={Wormhole}\n              alt=\"Wormhole\"\n              className={classes.wormholeIcon}\n            />\n          </a>\n        </div>\n        <div>\n          <Typography variant=\"body2\">Open Source</Typography>\n          <Typography variant=\"body2\">Built with &#10084;</Typography>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import {\n  Card,\n  Chip,\n  Container,\n  Link,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { COLORS } from \"../../muiTheme\";\nimport { BETA_CHAINS, CHAINS, COMING_SOON_CHAINS } from \"../../utils/consts\";\nimport HeaderText from \"../HeaderText\";\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    marginTop: theme.spacing(12),\n    marginBottom: theme.spacing(8),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginBottom: theme.spacing(6),\n    },\n  },\n  description: {\n    marginBottom: theme.spacing(2),\n  },\n  button: {\n    marginBottom: theme.spacing(4),\n  },\n  overview: {\n    marginTop: theme.spacing(6),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(2),\n    },\n    maxWidth: \"100%\",\n  },\n  mainCard: {\n    padding: theme.spacing(8),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  spacer: {\n    height: theme.spacing(5),\n  },\n  chainList: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    margin: theme.spacing(-1, -1, 8),\n    [theme.breakpoints.down(\"sm\")]: {\n      margin: theme.spacing(-1, -1, 6),\n    },\n  },\n  chainCard: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    borderRadius: 8,\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: theme.spacing(1),\n    minHeight: \"100%\",\n    padding: theme.spacing(2),\n    width: 149, // makes it square\n    maxWidth: 149,\n    [theme.breakpoints.down(\"sm\")]: {\n      padding: theme.spacing(1.5),\n      width: 141, // keeps it square\n      maxWidth: 141,\n    },\n  },\n  chainLogoWrapper: {\n    position: \"relative\",\n    textAlign: \"center\",\n  },\n  chainLogo: {\n    height: 64,\n    maxWidth: 64,\n  },\n  chainName: {\n    marginTop: theme.spacing(1),\n    flex: \"1\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    minHeight: 40, // 2 lines\n  },\n  chip: {\n    backgroundColor: COLORS.blueWithTransparency,\n    position: \"absolute\",\n    top: \"50%\",\n    right: \"50%\",\n    transform: \"translate(50%, -50%)\",\n  },\n}));\n\nfunction Home() {\n  const classes = useStyles();\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <div className={classes.header}>\n          <HeaderText>The Portal is Open</HeaderText>\n        </div>\n      </Container>\n      <Container maxWidth=\"md\">\n        <div className={classes.chainList}>\n          {CHAINS.filter(({ id }) => !BETA_CHAINS.includes(id)).map((chain) => (\n            <div key={chain.id} className={classes.chainCard}>\n              <div className={classes.chainLogoWrapper}>\n                <img\n                  src={chain.logo}\n                  alt={chain.name}\n                  className={classes.chainLogo}\n                />\n              </div>\n              <Typography\n                variant=\"body2\"\n                component=\"div\"\n                className={classes.chainName}\n              >\n                <div>{chain.name}</div>\n              </Typography>\n            </div>\n          ))}\n          {COMING_SOON_CHAINS.map((item) => (\n            <div className={classes.chainCard}>\n              <div className={classes.chainLogoWrapper}>\n                <img\n                  src={item.logo}\n                  alt={item.name}\n                  className={classes.chainLogo}\n                />\n                <Chip\n                  label=\"Coming soon\"\n                  size=\"small\"\n                  className={classes.chip}\n                />\n              </div>\n              <Typography\n                variant=\"body2\"\n                component=\"div\"\n                className={classes.chainName}\n              >\n                <div>{item.name}</div>\n              </Typography>\n            </div>\n          ))}\n        </div>\n      </Container>\n      <Container maxWidth=\"md\">\n        <Card className={classes.mainCard}>\n          <Typography variant=\"h4\" className={classes.description}>\n            Wormhole v2 is here!\n          </Typography>\n          <Typography variant=\"h6\" className={classes.description}>\n            The Wormhole Token Bridge allows you to seamlessly transfer\n            tokenized assets across Solana, Ethereum, BSC, Terra, and Polygon.\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            If you transferred assets using the previous version of Wormhole,\n            most assets can be migrated to v2 on the{\" \"}\n            <Link component={RouterLink} to=\"/transfer\" noWrap>\n              transfer page\n            </Link>\n            .\n          </Typography>\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            For assets that don't support the migration, the v1 UI can be found\n            at{\" \"}\n            <Link href=\"https://v1.wormholebridge.com\">\n              v1.wormholebridge.com\n            </Link>\n          </Typography>\n          <Typography variant=\"subtitle1\" className={classes.description}>\n            To learn more about the Wormhole Protocol that powers it, visit{\" \"}\n            <Link href=\"https://wormholenetwork.com/en/\">\n              wormholenetwork.com\n            </Link>\n          </Typography>\n        </Card>\n      </Container>\n    </div>\n  );\n}\n\nexport default Home;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { TerraTokenMap } from \"../hooks/useTerraTokenMap\";\nimport { MarketsMap } from \"../hooks/useMarketsMap\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nexport interface TokenMetadataState {\n  solanaTokenMap: DataWrapper<TokenInfo[]>;\n  terraTokenMap: DataWrapper<TerraTokenMap>; //TODO make a decent type for this.\n  marketsMap: DataWrapper<MarketsMap>;\n}\n\nconst initialState: TokenMetadataState = {\n  solanaTokenMap: getEmptyDataWrapper(),\n  terraTokenMap: getEmptyDataWrapper(),\n  marketsMap: getEmptyDataWrapper(),\n};\n\nexport const tokenSlice = createSlice({\n  name: \"tokenInfos\",\n  initialState,\n  reducers: {\n    receiveSolanaTokenMap: (state, action: PayloadAction<TokenInfo[]>) => {\n      state.solanaTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchSolanaTokenMap: (state) => {\n      state.solanaTokenMap = fetchDataWrapper();\n    },\n    errorSolanaTokenMap: (state, action: PayloadAction<string>) => {\n      state.solanaTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveTerraTokenMap: (state, action: PayloadAction<TerraTokenMap>) => {\n      state.terraTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchTerraTokenMap: (state) => {\n      state.terraTokenMap = fetchDataWrapper();\n    },\n    errorTerraTokenMap: (state, action: PayloadAction<string>) => {\n      state.terraTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveMarketsMap: (state, action: PayloadAction<MarketsMap>) => {\n      state.marketsMap = receiveDataWrapper(action.payload);\n    },\n    fetchMarketsMap: (state) => {\n      state.marketsMap = fetchDataWrapper();\n    },\n    errorMarketsMap: (state, action: PayloadAction<string>) => {\n      state.marketsMap = errorDataWrapper(action.payload);\n    },\n\n    reset: () => initialState,\n  },\n});\n\nexport const {\n  receiveSolanaTokenMap,\n  fetchSolanaTokenMap,\n  errorSolanaTokenMap,\n  receiveTerraTokenMap,\n  fetchTerraTokenMap,\n  errorTerraTokenMap,\n  receiveMarketsMap,\n  fetchMarketsMap,\n  errorMarketsMap,\n  reset,\n} = tokenSlice.actions;\n\nexport default tokenSlice.reducer;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport { ENV, TokenInfo, TokenListProvider } from \"@solana/spl-token-registry\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectSolanaTokenMap } from \"../store/selectors\";\nimport {\n  errorSolanaTokenMap,\n  fetchSolanaTokenMap,\n  receiveSolanaTokenMap,\n} from \"../store/tokenSlice\";\nimport { CLUSTER } from \"../utils/consts\";\n\nconst environment = CLUSTER === \"testnet\" ? ENV.Testnet : ENV.MainnetBeta;\n\nconst useSolanaTokenMap = (): DataWrapper<TokenInfo[]> => {\n  const tokenMap = useSelector(selectSolanaTokenMap);\n  const dispatch = useDispatch();\n  const shouldFire =\n    tokenMap.data === undefined ||\n    (tokenMap.data === null && !tokenMap.isFetching);\n\n  useEffect(() => {\n    if (shouldFire) {\n      getSolanaTokenMap(dispatch);\n    }\n  }, [dispatch, shouldFire]);\n\n  return tokenMap;\n};\n\nconst getSolanaTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchSolanaTokenMap());\n\n  new TokenListProvider().resolve().then(\n    (tokens) => {\n      const tokenList = tokens.filterByChainId(environment).getList();\n      dispatch(receiveSolanaTokenMap(tokenList));\n    },\n    (error) => {\n      console.error(error);\n      dispatch(errorSolanaTokenMap(\"Failed to retrieve the Solana token map.\"));\n    }\n  );\n};\n\nexport default useSolanaTokenMap;\n","import {\n  Button,\n  InputAdornment,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\n\nexport default function NumberTextField({\n  onMaxClick,\n  ...props\n}: TextFieldProps & { onMaxClick?: () => void }) {\n  return (\n    <TextField\n      type=\"number\"\n      {...props}\n      InputProps={{\n        endAdornment: onMaxClick ? (\n          <InputAdornment position=\"end\">\n            <Button\n              onClick={onMaxClick}\n              disabled={props.disabled}\n              variant=\"outlined\"\n            >\n              Max\n            </Button>\n          </InputAdornment>\n        ) : undefined,\n        ...(props?.InputProps || {}),\n      }}\n    ></TextField>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getForeignAssetSolana,\n  hexToNativeString,\n  hexToUint8Array,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetAddressHex,\n} from \"../store/selectors\";\nimport { SOLANA_HOST, SOL_TOKEN_BRIDGE_ADDRESS } from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport SmartAddress from \"./SmartAddress\";\n\nexport function useAssociatedAccountExistsState(\n  targetChain: ChainId,\n  mintAddress: string | null | undefined,\n  readableTargetAddress: string | undefined\n) {\n  const [associatedAccountExists, setAssociatedAccountExists] = useState(true); // for now, assume it exists until we confirm it doesn't\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  useEffect(() => {\n    setAssociatedAccountExists(true);\n    if (\n      targetChain !== CHAIN_ID_SOLANA ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    let cancelled = false;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          if (!cancelled) {\n            setAssociatedAccountExists(false);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [targetChain, mintAddress, readableTargetAddress, solPK]);\n  return useMemo(\n    () => ({ associatedAccountExists, setAssociatedAccountExists }),\n    [associatedAccountExists]\n  );\n}\n\nexport default function SolanaCreateAssociatedAddress({\n  mintAddress,\n  readableTargetAddress,\n  associatedAccountExists,\n  setAssociatedAccountExists,\n}: {\n  mintAddress: string;\n  readableTargetAddress: string;\n  associatedAccountExists: boolean;\n  setAssociatedAccountExists: (associatedAccountExists: boolean) => void;\n}) {\n  const [isCreating, setIsCreating] = useState(false);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleClick = useCallback(() => {\n    if (\n      associatedAccountExists ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          setIsCreating(true);\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setIsCreating(false);\n          setAssociatedAccountExists(true);\n        } else {\n          console.log(\"Account already exists.\");\n        }\n      }\n    })();\n  }, [\n    associatedAccountExists,\n    setAssociatedAccountExists,\n    mintAddress,\n    solPK,\n    readableTargetAddress,\n    solanaWallet,\n  ]);\n  if (associatedAccountExists) return null;\n  return (\n    <>\n      <Typography color=\"error\" variant=\"body2\">\n        This associated token account doesn't exist.\n      </Typography>\n      <ButtonWithLoader\n        disabled={\n          !mintAddress || !readableTargetAddress || !solPK || isCreating\n        }\n        onClick={handleClick}\n        showLoader={isCreating}\n      >\n        Create Associated Token Account\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport function SolanaCreateAssociatedAddressAlternate() {\n  const { enqueueSnackbar } = useSnackbar();\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const addressHex = useSelector(selectTransferTargetAddressHex);\n  const base58TargetAddress = useMemo(\n    () => hexToNativeString(addressHex, CHAIN_ID_SOLANA) || \"\",\n    [addressHex]\n  );\n  const base58OriginAddress = useMemo(\n    () => hexToNativeString(originAsset, CHAIN_ID_SOLANA) || \"\",\n    [originAsset]\n  );\n  const connection = useMemo(() => new Connection(SOLANA_HOST), []);\n  const [targetAsset, setTargetAsset] = useState<string | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (!(originChain && originAsset && addressHex && base58TargetAddress)) {\n      setTargetAsset(null);\n    } else if (originChain === CHAIN_ID_SOLANA && base58OriginAddress) {\n      setTargetAsset(base58OriginAddress);\n    } else {\n      getForeignAssetSolana(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAsset)\n      ).then((result) => {\n        if (!cancelled) {\n          setTargetAsset(result);\n        }\n      });\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    originChain,\n    originAsset,\n    addressHex,\n    base58TargetAddress,\n    connection,\n    base58OriginAddress,\n  ]);\n\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      CHAIN_ID_SOLANA,\n      targetAsset,\n      base58TargetAddress\n    );\n\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleForceCreateClick = useCallback(() => {\n    if (!targetAsset || !base58TargetAddress || !solPK) return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(targetAsset);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === base58TargetAddress;\n      if (match) {\n        try {\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setAssociatedAccountExists(true);\n          enqueueSnackbar(null, {\n            content: (\n              <Alert severity=\"success\">\n                Successfully created associated token account\n              </Alert>\n            ),\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n          });\n        }\n      } else {\n        enqueueSnackbar(null, {\n          content: (\n            <Alert severity=\"error\">\n              Derived address does not match the target address. Do you have the\n              same wallet connected?\n            </Alert>\n          ),\n        });\n      }\n    })();\n  }, [\n    setAssociatedAccountExists,\n    targetAsset,\n    solPK,\n    base58TargetAddress,\n    solanaWallet,\n    enqueueSnackbar,\n  ]);\n\n  return targetAsset ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"subtitle2\">Recipient Address:</Typography>\n      <Typography component=\"div\">\n        <SmartAddress\n          chainId={CHAIN_ID_SOLANA}\n          address={base58TargetAddress}\n          variant=\"h6\"\n          extraContent={\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={handleForceCreateClick}\n              disabled={!targetAsset || !base58TargetAddress || !solPK}\n            >\n              Force Create Account\n            </Button>\n          }\n        />\n      </Typography>\n      {associatedAccountExists ? null : (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={base58TargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      )}\n    </div>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSolanaWallet } from \"../../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { COLORS } from \"../../muiTheme\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../../utils/solana\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\n//TODO move to utils/solana\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\n//TODO move to utils/solana\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\nexport default function Workflow({\n  fromMint,\n  toMint,\n  fromTokenAccount,\n}: {\n  fromMint: string;\n  toMint: string;\n  fromTokenAccount: string;\n}) {\n  const classes = useStyles();\n\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet?.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet?.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet?.publicKey]);\n  /*\n    End effects\n    */\n\n  const migrateTokens = useCallback(async () => {\n    try {\n      setError(\"\");\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet?.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(migrationAmount, fromMintDecimals).toBigInt()\n      );\n      setMigrationIsProcessing(true);\n      signSendAndConfirm(wallet, connection, instruction).then(\n        (transaction: any) => {\n          setMigrationIsProcessing(false);\n          setTransaction(transaction);\n        },\n        (error) => {\n          console.log(error);\n          setError(\"Could not complete the migrateTokens transaction.\");\n          setMigrationIsProcessing(false);\n        }\n      );\n    } catch (e) {\n      console.log(e);\n      setError(\"Could not complete the migrateTokens transaction.\");\n      setMigrationIsProcessing(false);\n    }\n  }, [\n    connection,\n    fromMint,\n    fromTokenAccount,\n    migrationAmount,\n    toMint,\n    toTokenAccount,\n    wallet,\n    fromMintDecimals,\n  ]);\n\n  const fromParse = (amount: string) => {\n    try {\n      return parseUnits(amount, fromMintDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n  const accountsReady =\n    fromTokenAccountExists && toTokenAccountExists && poolExists;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromTokenAccountBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromTokenAccountBalance);\n  const sufficientPoolBalance =\n    toCustodyBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(toCustodyBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    accountsReady &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!fromMint || !toMint || !poolAddress || !poolExists) {\n      return \"This asset is not supported.\";\n    } else if (!isReady) {\n      return \"Wallet is not connected.\";\n    } else if (!toTokenAccountExists || !fromTokenAccountExists) {\n      return \"You have not created the necessary token accounts.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"Enter an amount greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromTokenAccountBalance) {\n      setMigrationAmount(fromTokenAccountBalance);\n    }\n  }, [fromTokenAccountBalance]);\n\n  const getMetadata = (address: string) => {\n    const tokenMapItem = solanaTokenMap.data?.find(\n      (x) => x.address === address\n    );\n    const metaplexItem = metaplexData.data?.get(address);\n\n    return {\n      symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n      name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n      logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n    };\n  };\n\n  const toMetadata = getMetadata(toMint);\n  const fromMetadata = getMetadata(fromMint);\n\n  const toMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={toMint}\n      symbol={toMetadata?.symbol}\n      tokenName={toMetadata?.name}\n    />\n  );\n  const fromMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={fromMint}\n      symbol={fromMetadata?.symbol}\n      tokenName={fromMetadata?.name}\n    />\n  );\n\n  return (\n    <div>\n      <SolanaWalletKey />\n      <div className={classes.spacer} />\n      {fromTokenAccount && toTokenAccount ? (\n        <>\n          <Typography variant=\"body2\" component=\"div\">\n            <span>This will migrate</span>\n            {fromMintPretty}\n            <span>tokens in this account:</span>\n          </Typography>\n          <Typography variant=\"h5\">\n            <SmartAddress\n              address={fromTokenAccount}\n              chainId={CHAIN_ID_SOLANA}\n            />\n            {`(Balance: ${fromTokenAccountBalance}${\n              fromMetadata.symbol && \" \" + fromMetadata.symbol\n            })`}\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"body2\" component=\"div\">\n            <span>into </span>\n            {toMintPretty}\n            <span> tokens in this account:</span>\n          </Typography>\n          <Typography\n            variant=\"h5\"\n            color={toTokenAccountExists ? \"textPrimary\" : \"textSecondary\"}\n          >\n            <SmartAddress address={toTokenAccount} chainId={CHAIN_ID_SOLANA} />\n            <span>\n              {toTokenAccountExists\n                ? ` (Balance: ${toTokenAccountBalance}${\n                    (toMetadata.symbol && \" \" + toMetadata.symbol) || \"\"\n                  })`\n                : \" (Not created yet)\"}\n            </span>\n          </Typography>\n          <SolanaCreateAssociatedAddress\n            mintAddress={toMint}\n            readableTargetAddress={toTokenAccount}\n            associatedAccountExists={toTokenAccountExists}\n            setAssociatedAccountExists={setToTokenAccountExists}\n          />\n          {poolAddress && toCustodyAddress && toCustodyBalance ? (\n            <>\n              <div className={classes.spacer} />\n              <Typography variant=\"body2\" component=\"div\">\n                <span>Using pool </span>\n                <SmartAddress address={poolAddress} chainId={CHAIN_ID_SOLANA} />\n                <span> holding tokens in this account:</span>\n              </Typography>\n              <Typography variant=\"h5\">\n                <SmartAddress\n                  address={toCustodyAddress}\n                  chainId={CHAIN_ID_SOLANA}\n                />\n                <span>{` (Balance: ${toCustodyBalance}${\n                  toMetadata.symbol && \" \" + toMetadata.symbol\n                })`}</span>\n              </Typography>\n            </>\n          ) : null}\n        </>\n      ) : null}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromTokenAccountBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx\n            tx={{ id: transaction, block: 1 }}\n            chainId={CHAIN_ID_SOLANA}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n","import {\n  Migrator,\n  Migrator__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport type EthMigrationInfo = {\n  isLoading: boolean;\n  error: string;\n  data: RequisiteData | null;\n};\n\nexport type RequisiteData = {\n  poolAddress: string;\n  fromAddress: string;\n  toAddress: string;\n  fromToken: TokenImplementation;\n  toToken: TokenImplementation;\n  migrator: Migrator;\n  fromSymbol: string;\n  toSymbol: string;\n  fromDecimals: number;\n  toDecimals: number;\n  sharesDecimals: number;\n  fromWalletBalance: string;\n  toWalletBalance: string;\n  fromPoolBalance: string;\n  toPoolBalance: string;\n  walletSharesBalance: string;\n};\n\nconst getRequisiteData = async (\n  migrator: Migrator,\n  signer: Signer,\n  signerAddress: string\n): Promise<RequisiteData> => {\n  try {\n    const poolAddress = migrator.address;\n    const fromAddress = await migrator.fromAsset();\n    const toAddress = await migrator.toAsset();\n\n    const fromToken = TokenImplementation__factory.connect(fromAddress, signer);\n    const toToken = TokenImplementation__factory.connect(toAddress, signer);\n\n    const fromSymbol = await fromToken.symbol();\n    const toSymbol = await toToken.symbol();\n\n    const fromDecimals = await (await migrator.fromDecimals()).toNumber();\n    const toDecimals = await (await migrator.toDecimals()).toNumber();\n    const sharesDecimals = await migrator.decimals();\n\n    const fromWalletBalance = formatUnits(\n      await fromToken.balanceOf(signerAddress),\n      fromDecimals\n    );\n    const toWalletBalance = formatUnits(\n      await toToken.balanceOf(signerAddress),\n      toDecimals\n    );\n\n    const fromPoolBalance = formatUnits(\n      await fromToken.balanceOf(poolAddress),\n      fromDecimals\n    );\n    const toPoolBalance = formatUnits(\n      await toToken.balanceOf(poolAddress),\n      toDecimals\n    );\n\n    const walletSharesBalance = formatUnits(\n      await migrator.balanceOf(signerAddress),\n      sharesDecimals\n    );\n\n    return {\n      poolAddress,\n      fromAddress,\n      toAddress,\n      fromToken,\n      toToken,\n      migrator,\n      fromSymbol,\n      toSymbol,\n      fromDecimals,\n      toDecimals,\n      fromWalletBalance,\n      toWalletBalance,\n      fromPoolBalance,\n      toPoolBalance,\n      walletSharesBalance,\n      sharesDecimals,\n    };\n  } catch (e) {\n    return Promise.reject(\"Failed to retrieve required data.\");\n  }\n};\n\nfunction useEthereumMigratorInformation(\n  migratorAddress: string | undefined,\n  signer: Signer | undefined,\n  signerAddress: string | undefined,\n  toggleRefresh: boolean\n): EthMigrationInfo {\n  const migrator = useMemo(\n    () =>\n      migratorAddress &&\n      signer &&\n      Migrator__factory.connect(migratorAddress, signer),\n    [migratorAddress, signer]\n  );\n  const [data, setData] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!signer || !migrator || !signerAddress) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n    getRequisiteData(migrator, signer, signerAddress).then(\n      (result) => {\n        if (!cancelled) {\n          setData(result);\n          setIsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Failed to retrieve necessary data.\");\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [migrator, signer, signerAddress, toggleRefresh]);\n\n  return useMemo(() => {\n    if (!migratorAddress || !signer || !signerAddress) {\n      return {\n        isLoading: false,\n        error:\n          !signer || !signerAddress\n            ? \"Wallet not connected\"\n            : !migratorAddress\n            ? \"No contract address\"\n            : \"Error\",\n        data: null,\n      };\n    } else {\n      return {\n        isLoading,\n        error,\n        data,\n      };\n    }\n  }, [isLoading, error, data, migratorAddress, signer, signerAddress]);\n}\n\nexport default useEthereumMigratorInformation;\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function EvmWorkflow({\n  chainId,\n  migratorAddress,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [toggleRefresh, setToggleRefresh] = useState(false);\n  const forceRefresh = useCallback(\n    () => setToggleRefresh((prevState) => !prevState),\n    []\n  );\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    toggleRefresh\n  );\n  const fromWalletBalance = poolInfo.data?.fromWalletBalance;\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  const fromParse = (amount: string) => {\n    try {\n      if (!poolInfo.data?.fromDecimals || !migrationAmount) {\n        return BigInt(0);\n      }\n      return parseUnits(amount, poolInfo.data.fromDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = poolInfo.data;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromWalletBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromWalletBalance);\n  const sufficientPoolBalance =\n    poolInfo.data?.toPoolBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(poolInfo.data.toPoolBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!isReady) {\n      return \"Connect your wallet to proceed.\";\n    } else if (poolInfo.error) {\n      return \"Unable to retrieve necessary information. This asset may not be supported.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"The transfer amount must be greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromWalletBalance) {\n      setMigrationAmount(fromWalletBalance);\n    }\n  }, [fromWalletBalance]);\n\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      setMigrationIsProcessing(true);\n      setError(\"\");\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      forceRefresh();\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, migrationAmount, enqueueSnackbar, forceRefresh]);\n\n  //TODO tokenName\n  const toTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.toAddress}\n      symbol={poolInfo.data?.toSymbol}\n    />\n  );\n  const fromTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.fromAddress}\n      symbol={poolInfo.data?.fromSymbol}\n    />\n  );\n  const poolPretty = (\n    <SmartAddress chainId={chainId} address={poolInfo.data?.poolAddress} />\n  );\n\n  const fatalError = poolInfo.error\n    ? \"Unable to retrieve necessary information. This asset may not be supported.\"\n    : null;\n\n  const explainerContent = (\n    <div>\n      <Typography>This action will convert</Typography>\n      <Typography variant=\"h6\">\n        {fromTokenPretty} {`(Balance: ${fromWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>to</Typography>\n      <Typography variant=\"h6\">\n        {toTokenPretty} {`(Balance: ${poolInfo.data?.toWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>Utilizing this pool</Typography>\n      <Typography variant=\"h6\">\n        {poolPretty} {`(Balance: ${poolInfo.data?.toPoolBalance || \"\"})`}\n      </Typography>\n    </div>\n  );\n\n  const mainWorkflow = (\n    <>\n      {explainerContent}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromWalletBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx tx={{ id: transaction, block: 1 }} chainId={chainId} />\n        </>\n      ) : null}\n    </>\n  );\n\n  return (\n    <div className={classes.containerDiv}>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : poolInfo.isLoading ? (\n        <CircularProgress />\n      ) : fatalError ? (\n        <Typography variant=\"h6\">{fatalError}</Typography>\n      ) : (\n        mainWorkflow\n      )}\n    </div>\n  );\n}\n","import {\n  Container,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { getMigrationAssetMap, MIGRATION_ASSET_MAP } from \"../../utils/consts\";\nimport SolanaWorkflow from \"./SolanaWorkflow\";\nimport { withRouter } from \"react-router\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_BSC,\n} from \"@certusone/wormhole-sdk\";\nimport EvmWorkflow from \"./EvmWorkflow\";\nimport { getAddress } from \"@ethersproject/address\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\ninterface RouteParams {\n  legacyAsset: string;\n  fromTokenAccount: string;\n}\n\ninterface Migration extends RouteComponentProps<RouteParams> {\n  chainId: ChainId;\n}\n\nconst SolanaRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const fromTokenAccount: string = props.match.params.fromTokenAccount;\n  const targetAsset: string | undefined = MIGRATION_ASSET_MAP.get(legacyAsset);\n\n  let fromMint: string | undefined = \"\";\n  let toMint: string | undefined = \"\";\n  let fromTokenAcct: string | undefined = \"\";\n  try {\n    fromMint = legacyAsset && new PublicKey(legacyAsset).toString();\n    toMint = targetAsset && new PublicKey(targetAsset).toString();\n    fromTokenAcct =\n      fromTokenAccount && new PublicKey(fromTokenAccount).toString();\n  } catch (e) {}\n\n  let content = null;\n\n  if (!fromMint || !toMint) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else if (!fromTokenAcct) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        Invalid token account.\n      </Typography>\n    );\n  } else {\n    content = (\n      <SolanaWorkflow\n        fromMint={fromMint}\n        toMint={toMint}\n        fromTokenAccount={fromTokenAcct}\n      />\n    );\n  }\n\n  return content;\n};\n\nconst EthereumRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const assetMap = getMigrationAssetMap(props.chainId);\n  const targetPool = assetMap.get(getAddress(legacyAsset));\n\n  let content = null;\n  if (!legacyAsset || !targetPool) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else {\n    content = (\n      <EvmWorkflow migratorAddress={targetPool} chainId={props.chainId} />\n    );\n  }\n\n  return content;\n};\n\nconst MigrationRoot: React.FC<Migration> = (props) => {\n  const classes = useStyles();\n  let content = null;\n\n  if (props.chainId === CHAIN_ID_SOLANA) {\n    content = <SolanaRoot {...props} />;\n  } else if (props.chainId === CHAIN_ID_ETH || props.chainId === CHAIN_ID_BSC) {\n    content = <EthereumRoot {...props} />;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>\n        <Typography variant=\"h5\">Migrate Assets</Typography>\n        <Typography variant=\"subtitle2\">\n          Convert assets from other bridges to Wormhole V2 tokens\n        </Typography>\n        <Divider className={classes.divider} />\n        {content}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default withRouter(MigrationRoot);\n","import { ChainId, TokenImplementation__factory } from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { COLORS } from \"../../muiTheme\";\nimport { CHAINS_BY_ID, getMigrationAssetMap } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\n//TODO move elsewhere\nexport const compareWithDecimalOffset = (\n  valueA: string,\n  decimalsA: number,\n  valueB: string,\n  decimalsB: number\n) => {\n  //find which is larger, and offset by that amount\n  const decimalsBasis = decimalsA > decimalsB ? decimalsA : decimalsB;\n  const normalizedA = parseUnits(valueA, decimalsBasis).toBigInt();\n  const normalizedB = parseUnits(valueB, decimalsBasis).toBigInt();\n\n  if (normalizedA < normalizedB) {\n    return -1;\n  } else if (normalizedA === normalizedB) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\nfunction EvmMigrationLineItem({\n  chainId,\n  migratorAddress,\n  onLoadComplete,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    false\n  );\n  const [loaded, setLoaded] = useState(false);\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const fromSymbol = poolInfo?.data?.fromSymbol;\n  const toSymbol = poolInfo?.data?.toSymbol;\n\n  const sufficientPoolBalance =\n    poolInfo.data &&\n    compareWithDecimalOffset(\n      poolInfo.data.fromWalletBalance,\n      poolInfo.data.fromDecimals,\n      poolInfo.data.toPoolBalance,\n      poolInfo.data.toDecimals\n    ) !== 1;\n\n  useEffect(() => {\n    if (!loaded && (poolInfo.data || poolInfo.error)) {\n      onLoadComplete();\n      setLoaded(true);\n    }\n  }, [loaded, poolInfo, onLoadComplete]);\n\n  //TODO use transaction loader\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      const migrationAmountAbs = parseUnits(\n        poolInfo.data.fromWalletBalance,\n        poolInfo.data.fromDecimals\n      );\n      setMigrationIsProcessing(true);\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        migrationAmountAbs\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        migrationAmountAbs\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, enqueueSnackbar]);\n\n  if (!poolInfo.data) {\n    return null;\n  } else if (transaction) {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx chainId={chainId} tx={{ id: transaction, block: 1 }} />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.fromAddress}\n            symbol={fromSymbol || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.toAddress}\n            symbol={toSymbol || undefined}\n          />\n        </div>\n        <div className={classes.convertButton}>\n          <ButtonWithLoader\n            showLoader={migrationIsProcessing}\n            onClick={migrateTokens}\n            error={\n              error\n                ? error\n                : !sufficientPoolBalance\n                ? \"The swap pool has insufficient funds.\"\n                : \"\"\n            }\n            disabled={!sufficientPoolBalance || migrationIsProcessing}\n          >\n            Convert\n          </ButtonWithLoader>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getAddressBalances = async (\n  signer: Signer,\n  signerAddress: string,\n  addresses: string[]\n): Promise<Map<string, BigNumber | null>> => {\n  try {\n    const promises: Promise<any>[] = [];\n    const output = new Map<string, BigNumber | null>();\n    addresses.forEach((address) => {\n      const factory = TokenImplementation__factory.connect(address, signer);\n      promises.push(\n        factory.balanceOf(signerAddress).then(\n          (result) => {\n            output.set(address, result);\n          },\n          (error) => {\n            output.set(address, null);\n          }\n        )\n      );\n    });\n    await Promise.all(promises);\n    return output;\n  } catch (e) {\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function EvmQuickMigrate({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const eligibleTokens = useMemo(\n    () => Array.from(migrationMap.keys()),\n    [migrationMap]\n  );\n  const [migrators, setMigrators] = useState<string[] | null>(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && signer && signerAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getAddressBalances(signer, signerAddress, eligibleTokens).then(\n        (result) => {\n          if (!cancelled) {\n            const migratorAddresses = [];\n            for (const tokenAddress of result.keys()) {\n              if (result.get(tokenAddress) && result.get(tokenAddress)?.gt(0)) {\n                const migratorAddress = migrationMap.get(\n                  getAddress(tokenAddress)\n                );\n                if (migratorAddress) {\n                  migratorAddresses.push(migratorAddress);\n                }\n              }\n            }\n            setMigratorsFinishedLoading(0);\n            setMigrators(migratorAddresses);\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, signer, signerAddress, eligibleTokens, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((address) => {\n              return (\n                <EvmMigrationLineItem\n                  key={address}\n                  chainId={chainId}\n                  migratorAddress={address}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  isEVMChain,\n  uint8ArrayToHex,\n  WormholeWrappedInfo,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { setSourceWormholeWrappedInfo as setNFTSourceWormholeWrappedInfo } from \"../store/nftSlice\";\nimport {\n  selectNFTIsRecovery,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferIsRecovery,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n} from \"../store/selectors\";\nimport { setSourceWormholeWrappedInfo as setTransferSourceWormholeWrappedInfo } from \"../store/transferSlice\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\n\nexport interface StateSafeWormholeWrappedInfo {\n  isWrapped: boolean;\n  chainId: ChainId;\n  assetAddress: string;\n  tokenId?: string;\n}\n\nconst makeStateSafe = (\n  info: WormholeWrappedInfo\n): StateSafeWormholeWrappedInfo => ({\n  ...info,\n  assetAddress: uint8ArrayToHex(info.assetAddress),\n});\n\n// Check if the tokens in the configured source chain/address are wrapped\n// tokens. Wrapped tokens are tokens that are non-native, I.E, are locked up on\n// a different chain than this one.\nfunction useCheckIfWormholeWrapped(nft?: boolean) {\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceAsset = useSelector(\n    nft ? selectNFTSourceAsset : selectTransferSourceAsset\n  );\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const tokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const setSourceWormholeWrappedInfo = nft\n    ? setNFTSourceWormholeWrappedInfo\n    : setTransferSourceWormholeWrappedInfo;\n  const { provider } = useEthereumProvider();\n  const isRecovery = useSelector(\n    nft ? selectNFTIsRecovery : selectTransferIsRecovery\n  );\n  useEffect(() => {\n    if (isRecovery) {\n      return;\n    }\n    // TODO: loading state, error state\n    let cancelled = false;\n    (async () => {\n      if (isEVMChain(sourceChain) && provider && sourceAsset) {\n        const wrappedInfo = makeStateSafe(\n          await (nft\n            ? getOriginalAssetEthNFT(\n                getNFTBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                tokenId,\n                sourceChain\n              )\n            : getOriginalAssetEth(\n                getTokenBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                sourceChain\n              ))\n        );\n        if (!cancelled) {\n          dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n        }\n      }\n      if (sourceChain === CHAIN_ID_SOLANA && sourceAsset) {\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const wrappedInfo = makeStateSafe(\n            await (nft\n              ? getOriginalAssetSolNFT(\n                  connection,\n                  SOL_NFT_BRIDGE_ADDRESS,\n                  sourceAsset\n                )\n              : getOriginalAssetSol(\n                  connection,\n                  SOL_TOKEN_BRIDGE_ADDRESS,\n                  sourceAsset\n                ))\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_TERRA && sourceAsset) {\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetTerra(lcd, sourceAsset)\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isRecovery,\n    sourceChain,\n    sourceAsset,\n    provider,\n    nft,\n    setSourceWormholeWrappedInfo,\n    tokenId,\n  ]);\n}\n\nexport default useCheckIfWormholeWrapped;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getForeignAssetEth as getForeignAssetEthNFT,\n  getForeignAssetSol as getForeignAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { setTargetAsset as setNFTTargetAsset } from \"../store/nftSlice\";\nimport {\n  selectNFTIsSourceAssetWormholeWrapped,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTTargetChain,\n  selectTransferIsSourceAssetWormholeWrapped,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetAsset as setTransferTargetAsset } from \"../store/transferSlice\";\nimport {\n  getEvmChainId,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\n\nfunction useFetchTargetAsset(nft?: boolean) {\n  const dispatch = useDispatch();\n  const isSourceAssetWormholeWrapped = useSelector(\n    nft\n      ? selectNFTIsSourceAssetWormholeWrapped\n      : selectTransferIsSourceAssetWormholeWrapped\n  );\n  const originChain = useSelector(\n    nft ? selectNFTOriginChain : selectTransferOriginChain\n  );\n  const originAsset = useSelector(\n    nft ? selectNFTOriginAsset : selectTransferOriginAsset\n  );\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const tokenId = originTokenId || \"\"; // this should exist by this step for NFT transfers\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const setTargetAsset = nft ? setNFTTargetAsset : setTransferTargetAsset;\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const correctEvmNetwork = getEvmChainId(targetChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n  const [lastSuccessfulArgs, setLastSuccessfulArgs] = useState<{\n    isSourceAssetWormholeWrapped: boolean | undefined;\n    originChain: ChainId | undefined;\n    originAsset: string | undefined;\n    targetChain: ChainId;\n    nft?: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsMatchLastSuccess =\n    !!lastSuccessfulArgs &&\n    lastSuccessfulArgs.isSourceAssetWormholeWrapped ===\n      isSourceAssetWormholeWrapped &&\n    lastSuccessfulArgs.originChain === originChain &&\n    lastSuccessfulArgs.originAsset === originAsset &&\n    lastSuccessfulArgs.targetChain === targetChain &&\n    lastSuccessfulArgs.nft === nft &&\n    lastSuccessfulArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () =>\n      setLastSuccessfulArgs({\n        isSourceAssetWormholeWrapped,\n        originChain,\n        originAsset,\n        targetChain,\n        nft,\n        tokenId,\n      }),\n    [\n      isSourceAssetWormholeWrapped,\n      originChain,\n      originAsset,\n      targetChain,\n      nft,\n      tokenId,\n    ]\n  );\n  useEffect(() => {\n    if (argsMatchLastSuccess) {\n      return;\n    }\n    setLastSuccessfulArgs(null);\n    if (isSourceAssetWormholeWrapped && originChain === targetChain) {\n      dispatch(\n        setTargetAsset(\n          receiveDataWrapper({\n            doesExist: true,\n            address: hexToNativeString(originAsset, originChain) || null,\n          })\n        )\n      );\n      setArgs();\n      return;\n    }\n    let cancelled = false;\n    (async () => {\n      if (\n        isEVMChain(targetChain) &&\n        provider &&\n        hasCorrectEvmNetwork &&\n        originChain &&\n        originAsset\n      ) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const asset = await (nft\n            ? getForeignAssetEthNFT(\n                getNFTBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              )\n            : getForeignAssetEth(\n                getTokenBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: asset !== ethers.constants.AddressZero,\n                  address: asset,\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_SOLANA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const asset = await (nft\n            ? getForeignAssetSolNFT(\n                SOL_NFT_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset),\n                arrayify(BigNumber.from(tokenId || \"0\"))\n              )\n            : getForeignAssetSolana(\n                connection,\n                SOL_TOKEN_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_TERRA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const asset = await getForeignAssetTerra(\n            TERRA_TOKEN_BRIDGE_ADDRESS,\n            lcd,\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isSourceAssetWormholeWrapped,\n    originChain,\n    originAsset,\n    targetChain,\n    provider,\n    nft,\n    setTargetAsset,\n    tokenId,\n    hasCorrectEvmNetwork,\n    argsMatchLastSuccess,\n    setArgs,\n  ]);\n}\n\nexport default useFetchTargetAsset;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginBottom: theme.spacing(4),\n  },\n}));\n\nexport default function StepDescription({\n  children,\n}: {\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <Typography component=\"div\" variant=\"body2\" className={classes.description}>\n      {children}\n    </Typography>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTIsRedeeming,\n  selectNFTIsSending,\n  selectNFTRedeemTx,\n  selectNFTSourceChain,\n  selectNFTTargetChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const isSending = useSelector(selectNFTIsSending);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const showWarning = (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : isEVMChain(sourceChain) && isSending\n        ? \"Note: there will be two transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { useSelector } from \"react-redux\";\nimport { useHandleNFTRedeem } from \"../../hooks/useHandleNFTRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { selectNFTTargetChain } from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport StepDescription from \"../StepDescription\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Redeem() {\n  const { handleClick, disabled, showLoader } = useHandleNFTRedeem();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  return (\n    <>\n      <StepDescription>Receive the NFT on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n    </>\n  );\n}\n\nexport default Redeem;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectNFTRedeemTx, selectNFTTargetChain } from \"../../store/selectors\";\nimport { reset } from \"../../store/nftSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The NFT will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer Another NFT!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  transferFromEth,\n  transferFromSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { BigNumber, Signer } from \"ethers\";\nimport { arrayify, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectNFTTargetChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTTargetAddressHex from \"./useNFTTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  tokenId: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await transferFromEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      tokenAddress,\n      tokenId,\n      recipientChain,\n      recipientAddress\n    );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getNFTBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  originAddressStr?: string,\n  originChain?: ChainId,\n  originTokenId?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const transaction = await transferFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_NFT_BRIDGE_ADDRESS,\n      payerAddress,\n      fromAddress,\n      mintAddress,\n      targetAddress,\n      targetChain,\n      originAddress,\n      originChain,\n      arrayify(BigNumber.from(originTokenId || \"0\"))\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleNFTTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceAsset = useSelector(selectNFTSourceAsset);\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useNFTTargetAddressHex();\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      !!sourceTokenId &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        sourceTokenId,\n        targetChain,\n        targetAddress,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        targetChain,\n        targetAddress,\n        originAsset,\n        originChain,\n        originTokenId\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    sourceTokenPublicKey,\n    sourceAsset,\n    sourceTokenId,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    originTokenId,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTTargetAddressHex() {\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTTransfer } from \"../../hooks/useHandleNFTTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectNFTSourceWalletAddress,\n  selectNFTSourceChain,\n  selectNFTTargetError,\n  selectNFTTransferTx,\n  selectNFTIsSendComplete,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport StepDescription from \"../StepDescription\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleNFTTransfer();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const error = useSelector(selectNFTTargetError);\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectNFTSourceWalletAddress);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const isDisabled = !isReady || isWrongWallet || disabled;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || undefined;\n  return (\n    <>\n      <StepDescription>\n        Transfer the NFT to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      <ButtonWithLoader\n        disabled={isDisabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={errorMessage}\n      >\n        Transfer\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const transferTx = useSelector(selectNFTTransferTx);\n\n  const explainerString = \"The NFT has been sent!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/bnb.d8c61230.svg\";","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isEVMChain,\n  WSOL_ADDRESS,\n  WSOL_DECIMALS,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  errorSourceParsedTokenAccounts as errorSourceParsedTokenAccountsNFT,\n  fetchSourceParsedTokenAccounts as fetchSourceParsedTokenAccountsNFT,\n  NFTParsedTokenAccount,\n  receiveSourceParsedTokenAccounts as receiveSourceParsedTokenAccountsNFT,\n  setSourceParsedTokenAccount as setSourceParsedTokenAccountNFT,\n  setSourceParsedTokenAccounts as setSourceParsedTokenAccountsNFT,\n  setSourceWalletAddress as setSourceWalletAddressNFT,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccounts,\n  selectNFTSourceWalletAddress,\n  selectSourceWalletAddress,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccounts,\n} from \"../store/selectors\";\nimport {\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  ParsedTokenAccount,\n  receiveSourceParsedTokenAccounts,\n  setAmount,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  setSourceWalletAddress,\n} from \"../store/transferSlice\";\nimport {\n  COVALENT_GET_TOKENS_URL,\n  logoOverrides,\n  ROPSTEN_WETH_ADDRESS,\n  ROPSTEN_WETH_DECIMALS,\n  SOLANA_HOST,\n  WAVAX_ADDRESS,\n  WAVAX_DECIMALS,\n  WBNB_ADDRESS,\n  WBNB_DECIMALS,\n  WETH_ADDRESS,\n  WETH_DECIMALS,\n  WMATIC_ADDRESS,\n  WMATIC_DECIMALS,\n  WROSE_ADDRESS,\n  WROSE_DECIMALS,\n} from \"../utils/consts\";\nimport {\n  ExtractedMintInfo,\n  extractMintInfo,\n  getMultipleAccountsRPC,\n} from \"../utils/solana\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bnbIcon from \"../icons/bnb.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\n\nexport function createParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  symbol?: string,\n  name?: string,\n  logo?: string,\n  isNativeAsset?: boolean\n): ParsedTokenAccount {\n  return {\n    publicKey: publicKey,\n    mintKey: mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    symbol,\n    name,\n    logo,\n    isNativeAsset,\n  };\n}\n\nexport function createNFTParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  tokenId: string,\n  symbol?: string,\n  name?: string,\n  uri?: string,\n  animation_url?: string,\n  external_url?: string,\n  image?: string,\n  image_256?: string,\n  nftName?: string,\n  description?: string\n): NFTParsedTokenAccount {\n  return {\n    publicKey,\n    mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    tokenId,\n    uri,\n    animation_url,\n    external_url,\n    image,\n    image_256,\n    symbol,\n    name,\n    nftName,\n    description,\n  };\n}\n\nconst createParsedTokenAccountFromInfo = (\n  pubkey: PublicKey,\n  item: AccountInfo<ParsedAccountData>\n): ParsedTokenAccount => {\n  return {\n    publicKey: pubkey?.toString(),\n    mintKey: item.data.parsed?.info?.mint?.toString(),\n    amount: item.data.parsed?.info?.tokenAmount?.amount,\n    decimals: item.data.parsed?.info?.tokenAmount?.decimals,\n    uiAmount: item.data.parsed?.info?.tokenAmount?.uiAmount,\n    uiAmountString: item.data.parsed?.info?.tokenAmount?.uiAmountString,\n  };\n};\n\nconst createParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData\n): ParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: covalent.balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(formatUnits(covalent.balance, covalent.contract_decimals)),\n    uiAmountString: formatUnits(covalent.balance, covalent.contract_decimals),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: logoOverrides.get(covalent.contract_address) || covalent.logo_url,\n  };\n};\n\nconst createNativeSolParsedTokenAccount = async (\n  connection: Connection,\n  walletAddress: string\n) => {\n  // const walletAddress = \"H69q3Q8E74xm7swmMQpsJLVp2Q9JuBwBbxraAMX5Drzm\" // known solana mainnet wallet with tokens\n  const fetchAccounts = await getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]);\n  if (!fetchAccounts || !fetchAccounts.length || !fetchAccounts[0]) {\n    return null;\n  } else {\n    return createParsedTokenAccount(\n      walletAddress, //publicKey\n      WSOL_ADDRESS, //Mint key\n      fetchAccounts[0].lamports.toString(), //amount\n      WSOL_DECIMALS, //decimals, 9\n      parseFloat(formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS)),\n      formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS).toString(),\n      \"SOL\",\n      \"Solana\",\n      undefined, //TODO logo. It's in the solana token map, so we could potentially use that URL.\n      true\n    );\n  }\n};\n\nconst createNativeEthParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeEthRopstenParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          ROPSTEN_WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          ROPSTEN_WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeBscParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WBNB_ADDRESS, //Mint key, On the other side this will be WBNB, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WBNB_DECIMALS, //Luckily both BNB and WBNB have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"BNB\", //A white lie for display purposes\n          \"Binance Coin\", //A white lie for display purposes\n          bnbIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativePolygonParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WMATIC_ADDRESS, //Mint key, On the other side this will be WMATIC, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WMATIC_DECIMALS, //Luckily both MATIC and WMATIC have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"MATIC\", //A white lie for display purposes\n          \"Matic\", //A white lie for display purposes\n          polygonIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeAvaxParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WAVAX_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WAVAX_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"AVAX\", //A white lie for display purposes\n          \"Avalanche\", //A white lie for display purposes\n          avaxIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeOasisParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WROSE_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WROSE_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ROSE\", //A white lie for display purposes\n          \"Rose\", //A white lie for display purposes\n          oasisIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNFTParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData,\n  nft_data: CovalentNFTData\n): NFTParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: nft_data.token_balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(\n      formatUnits(nft_data.token_balance, covalent.contract_decimals)\n    ),\n    uiAmountString: formatUnits(\n      nft_data.token_balance,\n      covalent.contract_decimals\n    ),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: covalent.logo_url,\n    tokenId: nft_data.token_id,\n    uri: nft_data.token_url,\n    animation_url: nft_data.external_data.animation_url,\n    external_url: nft_data.external_data.external_url,\n    image: nft_data.external_data.image,\n    image_256: nft_data.external_data.image_256,\n    nftName: nft_data.external_data.name,\n    description: nft_data.external_data.description,\n  };\n};\n\nexport type CovalentData = {\n  contract_decimals: number;\n  contract_ticker_symbol: string;\n  contract_name: string;\n  contract_address: string;\n  logo_url: string | undefined;\n  balance: string;\n  quote: number | undefined;\n  quote_rate: number | undefined;\n  nft_data?: CovalentNFTData[];\n};\n\nexport type CovalentNFTExternalData = {\n  animation_url: string | null;\n  external_url: string | null;\n  image: string;\n  image_256: string;\n  name: string;\n  description: string;\n};\n\nexport type CovalentNFTData = {\n  token_id: string;\n  token_balance: string;\n  external_data: CovalentNFTExternalData;\n  token_url: string;\n};\n\nconst getEthereumAccountsCovalent = async (\n  walletAddress: string,\n  nft: boolean,\n  chainId: ChainId\n): Promise<CovalentData[]> => {\n  const url = COVALENT_GET_TOKENS_URL(chainId, walletAddress, nft);\n\n  try {\n    const output = [] as CovalentData[];\n    const response = await axios.get(url);\n    const tokens = response.data.data.items;\n\n    if (tokens instanceof Array && tokens.length) {\n      for (const item of tokens) {\n        // TODO: filter?\n        if (\n          item.contract_decimals !== undefined &&\n          item.contract_address &&\n          item.balance &&\n          item.balance !== \"0\" &&\n          (nft\n            ? item.supports_erc?.includes(\"erc721\")\n            : item.supports_erc?.includes(\"erc20\"))\n        ) {\n          output.push({ ...item } as CovalentData);\n        }\n      }\n    }\n\n    return output;\n  } catch (error) {\n    return Promise.reject(\"Unable to retrieve your Ethereum Tokens.\");\n  }\n};\n\nconst getSolanaParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    //No matter what, we retrieve the spl tokens associated to this address.\n    let splParsedTokenAccounts = await connection\n      .getParsedTokenAccountsByOwner(new PublicKey(walletAddress), {\n        programId: new PublicKey(TOKEN_PROGRAM_ID),\n      })\n      .then((result) => {\n        return result.value.map((item) =>\n          createParsedTokenAccountFromInfo(item.pubkey, item.account)\n        );\n      });\n\n    // uncomment to test token account in picker, useful for debugging\n    // splParsedTokenAccounts.push({\n    //   amount: \"1\",\n    //   decimals: 8,\n    //   mintKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   publicKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   uiAmount: 1,\n    //   uiAmountString: \"1\",\n    //   isNativeAsset: false,\n    // });\n\n    if (nft) {\n      //In the case of NFTs, we are done, and we set the accounts in redux\n      dispatch(receiveSourceParsedTokenAccountsNFT(splParsedTokenAccounts));\n    } else {\n      //In the transfer case, we also pull the SOL balance of the wallet, and prepend it at the beginning of the list.\n      const nativeAccount = await createNativeSolParsedTokenAccount(\n        connection,\n        walletAddress\n      );\n      if (nativeAccount !== null) {\n        splParsedTokenAccounts.unshift(nativeAccount);\n      }\n      dispatch(receiveSourceParsedTokenAccounts(splParsedTokenAccounts));\n    }\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\n/**\n * Fetches the balance of an asset for the connected wallet\n * This should handle every type of chain in the future, but only reads the Transfer state.\n */\nfunction useGetAvailableTokens(nft: boolean = false) {\n  const dispatch = useDispatch();\n\n  const tokenAccounts = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccounts\n      : selectTransferSourceParsedTokenAccounts\n  );\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { provider, signerAddress } = useEthereumProvider();\n\n  const [covalent, setCovalent] = useState<any>(undefined);\n  const [covalentLoading, setCovalentLoading] = useState(false);\n  const [covalentError, setCovalentError] = useState<string | undefined>(\n    undefined\n  );\n\n  const [ethNativeAccount, setEthNativeAccount] = useState<any>(undefined);\n  const [ethNativeAccountLoading, setEthNativeAccountLoading] = useState(false);\n  const [ethNativeAccountError, setEthNativeAccountError] = useState<\n    string | undefined\n  >(undefined);\n\n  const [solanaMintAccounts, setSolanaMintAccounts] = useState<\n    Map<string, ExtractedMintInfo | null> | undefined\n  >(undefined);\n  const [solanaMintAccountsLoading, setSolanaMintAccountsLoading] =\n    useState(false);\n  const [solanaMintAccountsError, setSolanaMintAccountsError] = useState<\n    string | undefined\n  >(undefined);\n\n  const selectedSourceWalletAddress = useSelector(\n    nft ? selectNFTSourceWalletAddress : selectSourceWalletAddress\n  );\n  const currentSourceWalletAddress: string | undefined = isEVMChain(lookupChain)\n    ? signerAddress\n    : lookupChain === CHAIN_ID_SOLANA\n    ? solPK?.toString()\n    : undefined;\n\n  const resetSourceAccounts = useCallback(() => {\n    dispatch(\n      nft\n        ? setSourceWalletAddressNFT(undefined)\n        : setSourceWalletAddress(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountNFT(undefined)\n        : setSourceParsedTokenAccount(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountsNFT(undefined)\n        : setSourceParsedTokenAccounts(undefined)\n    );\n    !nft && dispatch(setAmount(\"\"));\n    setCovalent(undefined); //These need to be included in the reset because they have balances on them.\n    setCovalentLoading(false);\n    setCovalentError(\"\");\n\n    setEthNativeAccount(undefined);\n    setEthNativeAccountLoading(false);\n    setEthNativeAccountError(\"\");\n  }, [setCovalent, dispatch, nft]);\n\n  //TODO this useEffect could be somewhere else in the codebase\n  //It resets the SourceParsedTokens accounts when the wallet changes\n  useEffect(() => {\n    if (\n      selectedSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== selectedSourceWalletAddress\n    ) {\n      resetSourceAccounts();\n      return;\n    } else {\n    }\n  }, [\n    selectedSourceWalletAddress,\n    currentSourceWalletAddress,\n    dispatch,\n    resetSourceAccounts,\n  ]);\n\n  //Solana accountinfos load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_SOLANA && solPK) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getSolanaParsedTokenAccounts(solPK.toString(), dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, solanaWallet, lookupChain, solPK, tokenAccounts, nft]);\n\n  //Solana Mint Accounts lookup\n  useEffect(() => {\n    if (lookupChain !== CHAIN_ID_SOLANA || !tokenAccounts.data?.length) {\n      return () => {};\n    }\n\n    let cancelled = false;\n    setSolanaMintAccountsLoading(true);\n    setSolanaMintAccountsError(undefined);\n    const mintAddresses = tokenAccounts.data.map((x) => x.mintKey);\n    //This is a known wormhole v1 token on testnet\n    // mintAddresses.push(\"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\");\n    //SOLT devnet token\n    // mintAddresses.push(\"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\");\n    // bad monkey \"NFT\"\n    // mintAddresses.push(\"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\");\n    // degenerate monkey NFT\n    // mintAddresses.push(\"EzYsbigNNGbNuANRJ3mnnyJYU2Bk7mBYVsxuonUwAX7r\");\n\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    getMultipleAccountsRPC(\n      connection,\n      mintAddresses.map((x) => new PublicKey(x))\n    ).then(\n      (results) => {\n        if (!cancelled) {\n          const output = new Map<string, ExtractedMintInfo | null>();\n\n          results.forEach((result, index) =>\n            output.set(\n              mintAddresses[index],\n              (result && extractMintInfo(result)) || null\n            )\n          );\n\n          setSolanaMintAccounts(output);\n          setSolanaMintAccountsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setSolanaMintAccounts(undefined);\n          setSolanaMintAccountsLoading(false);\n          setSolanaMintAccountsError(\n            \"Could not retrieve Solana mint accounts.\"\n          );\n        }\n      }\n    );\n\n    return () => (cancelled = true);\n  }, [tokenAccounts.data, lookupChain]);\n\n  //Ethereum native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETH &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum (Ropsten) native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthRopstenParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Binance Smart Chain native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_BSC &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeBscParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your BNB balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Polygon native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_POLYGON &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativePolygonParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your MATIC balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //TODO refactor all these into an isEVM effect\n  //avax native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_AVAX &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeAvaxParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your AVAX balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_OASIS &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeOasisParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Oasis balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum covalent accounts load\n  useEffect(() => {\n    //const testWallet = \"0xf60c2ea62edbfe808163751dd0d8693dcb30019c\";\n    // const nftTestWallet1 = \"0x3f304c6721f35ff9af00fd32650c8e0a982180ab\";\n    // const nftTestWallet2 = \"0x98ed231428088eb440e8edb5cc8d66dcf913b86e\";\n    // const nftTestWallet3 = \"0xb1fadf677a7e9b90e9d4f31c8ffb3dc18c138c6f\";\n    // const nftBscTestWallet1 = \"0x5f464a652bd1991df0be37979b93b3306d64a909\";\n    let cancelled = false;\n    const walletAddress = signerAddress;\n    if (walletAddress && isEVMChain(lookupChain) && !covalent) {\n      //TODO less cancel\n      !cancelled && setCovalentLoading(true);\n      !cancelled &&\n        dispatch(\n          nft\n            ? fetchSourceParsedTokenAccountsNFT()\n            : fetchSourceParsedTokenAccounts()\n        );\n      getEthereumAccountsCovalent(walletAddress, nft, lookupChain).then(\n        (accounts) => {\n          !cancelled && setCovalentLoading(false);\n          !cancelled && setCovalentError(undefined);\n          !cancelled && setCovalent(accounts);\n          !cancelled &&\n            dispatch(\n              nft\n                ? receiveSourceParsedTokenAccountsNFT(\n                    accounts.reduce((arr, current) => {\n                      if (current.nft_data) {\n                        current.nft_data.forEach((x) =>\n                          arr.push(\n                            createNFTParsedTokenAccountFromCovalent(\n                              walletAddress,\n                              current,\n                              x\n                            )\n                          )\n                        );\n                      }\n                      return arr;\n                    }, [] as NFTParsedTokenAccount[])\n                  )\n                : receiveSourceParsedTokenAccounts(\n                    accounts.map((x) =>\n                      createParsedTokenAccountFromCovalent(walletAddress, x)\n                    )\n                  )\n            );\n        },\n        () => {\n          !cancelled &&\n            dispatch(\n              nft\n                ? errorSourceParsedTokenAccountsNFT(\n                    \"Cannot load your Ethereum NFTs at the moment.\"\n                  )\n                : errorSourceParsedTokenAccounts(\n                    \"Cannot load your Ethereum tokens at the moment.\"\n                  )\n            );\n          !cancelled &&\n            setCovalentError(\"Cannot load your Ethereum tokens at the moment.\");\n          !cancelled && setCovalentLoading(false);\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [lookupChain, provider, signerAddress, dispatch, nft, covalent]);\n\n  //Terra accounts load\n  //At present, we don't have any mechanism for doing this.\n  useEffect(() => {}, []);\n\n  const ethAccounts = useMemo(() => {\n    const output = { ...tokenAccounts };\n    output.data = output.data?.slice() || [];\n    output.isFetching = output.isFetching || ethNativeAccountLoading;\n    output.error = output.error || ethNativeAccountError;\n    ethNativeAccount && output.data && output.data.unshift(ethNativeAccount);\n    return output;\n  }, [\n    ethNativeAccount,\n    ethNativeAccountLoading,\n    ethNativeAccountError,\n    tokenAccounts,\n  ]);\n\n  return lookupChain === CHAIN_ID_SOLANA\n    ? {\n        tokenAccounts: tokenAccounts,\n        mintAccounts: {\n          data: solanaMintAccounts,\n          isFetching: solanaMintAccountsLoading,\n          error: solanaMintAccountsError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : isEVMChain(lookupChain)\n    ? {\n        tokenAccounts: ethAccounts,\n        covalent: {\n          data: covalent,\n          isFetching: covalentLoading,\n          error: covalentError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_TERRA\n    ? {\n        resetAccounts: resetSourceAccounts,\n      }\n    : undefined;\n}\n\nexport default useGetAvailableTokens;\n","import {\n  NFTImplementation,\n  NFTImplementation__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { arrayify, formatUnits } from \"ethers/lib/utils\";\nimport {\n  createNFTParsedTokenAccount,\n  createParsedTokenAccount,\n} from \"../hooks/useGetSourceParsedTokenAccounts\";\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumToken(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = TokenImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function ethTokenToParsedTokenAccount(\n  token: TokenImplementation,\n  signerAddress: string\n) {\n  const decimals = await token.decimals();\n  const balance = await token.balanceOf(signerAddress);\n  const symbol = await token.symbol();\n  const name = await token.name();\n  return createParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    symbol,\n    name\n  );\n}\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumNFT(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = NFTImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function isNFT(token: NFTImplementation) {\n  const erc721 = \"0x80ac58cd\";\n  const erc721metadata = \"0x5b5e139f\";\n  const supportsErc721 = await token.supportsInterface(arrayify(erc721));\n  const supportsErc721Metadata = await token.supportsInterface(\n    arrayify(erc721metadata)\n  );\n  return supportsErc721 && supportsErc721Metadata;\n}\n\nexport async function ethNFTToNFTParsedTokenAccount(\n  token: NFTImplementation,\n  tokenId: string,\n  signerAddress: string\n) {\n  const decimals = 0;\n  const balance = (await token.ownerOf(tokenId)) === signerAddress ? 1 : 0;\n  const symbol = await token.symbol();\n  const name = await token.name();\n  const uri = await token.tokenURI(tokenId);\n  return createNFTParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    tokenId,\n    symbol,\n    name,\n    uri\n  );\n}\n\nexport function isValidEthereumAddress(address: string) {\n  return ethers.utils.isAddress(address);\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectMarketsMap } from \"../store/selectors\";\nimport {\n  errorMarketsMap,\n  fetchMarketsMap,\n  receiveMarketsMap,\n} from \"../store/tokenSlice\";\nimport { FEATURED_MARKETS_JSON_URL } from \"../utils/consts\";\n\nexport type MarketsMap = {\n  markets?: {\n    [index: string]: {\n      name: string;\n      link: string;\n    };\n  };\n  tokens?: {\n    [key in ChainId]?: {\n      [index: string]: {\n        symbol: string;\n        logo: string;\n      };\n    };\n  };\n  tokenMarkets?: {\n    [key in ChainId]?: {\n      [key in ChainId]?: {\n        [index: string]: {\n          symbol: string;\n          logo: string;\n          markets: string[];\n        };\n      };\n    };\n  };\n};\n\nconst useMarketsMap = (shouldFire: boolean): DataWrapper<MarketsMap> => {\n  const marketsMap = useSelector(selectMarketsMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (marketsMap.data === undefined ||\n      (marketsMap.data === null && !marketsMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getMarketsMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return marketsMap;\n};\n\nconst getMarketsMap = (dispatch: Dispatch) => {\n  dispatch(fetchMarketsMap());\n  axios.get(FEATURED_MARKETS_JSON_URL).then(\n    (response) => {\n      dispatch(receiveMarketsMap(response.data as MarketsMap));\n    },\n    (error) => {\n      dispatch(errorMarketsMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useMarketsMap;\n","import {\n  Avatar,\n  Card,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport clsx from \"clsx\";\nimport {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_OASIS,\n} from \"@certusone/wormhole-sdk\";\nimport SmartAddress from \"../SmartAddress\";\nimport avaxIcon from \"../../icons/avax.svg\";\nimport bscIcon from \"../../icons/bsc.svg\";\nimport ethIcon from \"../../icons/eth.svg\";\nimport solanaIcon from \"../../icons/solana.svg\";\nimport polygonIcon from \"../../icons/polygon.svg\";\nimport oasisIcon from \"../../icons/oasis-network-rose-logo.svg\";\nimport useCopyToClipboard from \"../../hooks/useCopyToClipboard\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Wormhole from \"../../icons/wormhole-network.svg\";\n\nconst safeIPFS = (uri: string) =>\n  uri.startsWith(\"ipfs://ipfs/\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/\")\n    : uri.startsWith(\"ipfs://\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n    : uri.startsWith(\"https://cloudflare-ipfs.com/ipfs/\") // no CORS support?\n    ? uri.replace(\"https://cloudflare-ipfs.com/ipfs/\", \"https://ipfs.io/ipfs/\")\n    : uri;\n\nconst LogoIcon = ({ chainId }: { chainId: ChainId }) =>\n  chainId === CHAIN_ID_SOLANA ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"4px\",\n      }}\n      src={solanaIcon}\n      alt=\"Solana\"\n    />\n  ) : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN ? (\n    <Avatar\n      style={{\n        backgroundColor: \"white\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n      }}\n      src={ethIcon}\n      alt=\"Ethereum\"\n    />\n  ) : chainId === CHAIN_ID_BSC ? (\n    <Avatar\n      style={{\n        backgroundColor: \"rgb(20, 21, 26)\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"2px\",\n      }}\n      src={bscIcon}\n      alt=\"Binance Smart Chain\"\n    />\n  ) : chainId === CHAIN_ID_POLYGON ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={polygonIcon}\n      alt=\"Polygon\"\n    />\n  ) : chainId === CHAIN_ID_AVAX ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={avaxIcon}\n      alt=\"Avalanche\"\n    />\n  ) : chainId === CHAIN_ID_OASIS ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={oasisIcon}\n      alt=\"Oasis\"\n    />\n  ) : null;\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    borderRadius: 9,\n    maxWidth: \"100%\",\n    width: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: 8,\n    position: \"relative\",\n    zIndex: 1,\n    transition: \"background-position 1s, transform 0.25s\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n      transform: \"scale(1.25)\",\n    },\n    backgroundSize: \"200% auto\",\n    backgroundColor: \"#ffb347\",\n    background:\n      \"linear-gradient(to right, #ffb347 0%, #ffcc33  51%, #ffb347  100%)\",\n  },\n  silverBorder: {\n    backgroundColor: \"#D9D8D6\",\n    backgroundSize: \"200% auto\",\n    background:\n      \"linear-gradient(to bottom right, #757F9A 0%, #D7DDE8  51%, #757F9A  100%)\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n    },\n  },\n  cardInset: {},\n  textContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    display: \"flex\",\n  },\n  detailsContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    \"&:last-child\": {\n      //override rule\n      paddingBottom: 2,\n    },\n  },\n  title: {\n    flex: 1,\n  },\n  description: {\n    padding: theme.spacing(0.5, 0, 1),\n  },\n  tokenId: {\n    fontSize: \"8px\",\n  },\n  mediaContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"transparent\",\n    margin: theme.spacing(0, 2),\n    \"& > img, & > video\": {\n      border: \"1px solid #ffb347\",\n    },\n  },\n  silverMediaBorder: {\n    \"& > img, & > video\": {\n      borderColor: \"#D7DDE8\",\n    },\n  },\n  // thanks https://cssgradient.io/ and https://htmlcolorcodes.com/color-picker/\n  eth: {\n    // colors from https://en.wikipedia.org/wiki/Ethereum#/media/File:Ethereum-icon-purple.svg\n    backgroundColor: \"rgb(69,74,117)\",\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,1) 0%, rgba(138,146,178,1) 33%, rgba(69,74,117,1) 66%, rgba(98,104,143,1) 100%)\",\n  },\n  bsc: {\n    // color from binance background rgb(20, 21, 26), 2 and 1 tint lighter\n    backgroundColor: \"#F0B90B\",\n    background:\n      \"linear-gradient(160deg, rgb(20, 21, 26) 0%, #4A4D57 33%, rgb(20, 21, 26) 66%, #2C2F3B 100%)\",\n  },\n  polygon: {\n    // color from polygon logo #8247E5 down to 30 lightness\n    backgroundColor: \"#0F0323\",\n    background:\n      \"linear-gradient(160deg, #0F0323 0%, #250957 33%, #0F0323 66%, #0F0323 100%)\",\n  },\n  solana: {\n    // colors from https://solana.com/branding/new/exchange/exchange-sq-black.svg\n    backgroundColor: \"rgb(153,69,255)\",\n    background:\n      \"linear-gradient(45deg, rgba(153,69,255,1) 0%, rgba(121,98,231,1) 20%, rgba(0,209,140,1) 100%)\",\n  },\n  hidden: {\n    display: \"none\",\n  },\n  skeleton: {\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    borderRadius: 9,\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"absolute\",\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    zIndex: 10,\n  },\n  wormholePositioner: {\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"relative\",\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    margin: `${theme.spacing(1)}px auto`,\n  },\n}));\n\nconst ViewerLoader = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.wormholePositioner}>\n      <Skeleton variant=\"rect\" animation=\"wave\" className={classes.skeleton} />\n      <img src={Wormhole} alt=\"Wormhole\" className={classes.wormholeIcon} />\n    </div>\n  );\n};\n\nexport default function NFTViewer({\n  value,\n  chainId,\n}: {\n  value: NFTParsedTokenAccount;\n  chainId: ChainId;\n}) {\n  const uri = safeIPFS(value.uri || \"\");\n  const [metadata, setMetadata] = useState({\n    uri,\n    image: value.image,\n    animation_url: value.animation_url,\n    nftName: value.nftName,\n    description: value.description,\n    isLoading: !!uri,\n  });\n  const [isMediaLoading, setIsMediaLoading] = useState(false);\n  const onLoad = useCallback(() => {\n    setIsMediaLoading(false);\n  }, []);\n  const isLoading = isMediaLoading || metadata.isLoading;\n  useEffect(() => {\n    setMetadata((m) =>\n      m.uri === uri\n        ? m\n        : {\n            uri,\n            image: value.image,\n            animation_url: value.animation_url,\n            nftName: value.nftName,\n            description: value.description,\n            isLoading: !!uri,\n          }\n    );\n  }, [value, uri]);\n  useEffect(() => {\n    if (uri) {\n      let cancelled = false;\n      (async () => {\n        try {\n          const result = await axios.get(uri);\n          if (!cancelled && result && result.data) {\n            // support returns with nested data (e.g. {status: 10000, result: {data: {...}}})\n            const data = result.data.result?.data || result.data;\n            setMetadata({\n              uri,\n              image:\n                data.image ||\n                data.image_url ||\n                data.big_image ||\n                data.small_image,\n              animation_url: data.animation_url,\n              nftName: data.name,\n              description: data.description,\n              isLoading: false,\n            });\n          } else if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        } catch (e) {\n          if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [uri]);\n\n  const classes = useStyles();\n  const animLower = metadata.animation_url?.toLowerCase();\n  // const has3DModel = animLower?.endsWith('gltf') || animLower?.endsWith('glb')\n  const hasVideo =\n    !animLower?.startsWith(\"ipfs://\") && // cloudflare ipfs doesn't support streaming video\n    (animLower?.endsWith(\"webm\") ||\n      animLower?.endsWith(\"mp4\") ||\n      animLower?.endsWith(\"mov\") ||\n      animLower?.endsWith(\"m4v\") ||\n      animLower?.endsWith(\"ogv\") ||\n      animLower?.endsWith(\"ogg\"));\n  const hasAudio =\n    animLower?.endsWith(\"mp3\") ||\n    animLower?.endsWith(\"flac\") ||\n    animLower?.endsWith(\"wav\") ||\n    animLower?.endsWith(\"oga\");\n  const hasImage = metadata.image;\n  const copyTokenId = useCopyToClipboard(value.tokenId || \"\");\n  const videoSrc = hasVideo && safeIPFS(metadata.animation_url || \"\");\n  const imageSrc = hasImage && safeIPFS(metadata.image || \"\");\n  const audioSrc = hasAudio && safeIPFS(metadata.animation_url || \"\");\n\n  //set loading when the media src changes\n  useLayoutEffect(() => {\n    if (videoSrc || imageSrc || audioSrc) {\n      setIsMediaLoading(true);\n    } else {\n      setIsMediaLoading(false);\n    }\n  }, [videoSrc, imageSrc, audioSrc]);\n\n  const image = (\n    <img\n      src={imageSrc}\n      alt={metadata.nftName || \"\"}\n      style={{ maxWidth: \"100%\" }}\n      onLoad={onLoad}\n      onError={onLoad}\n    />\n  );\n  const media = (\n    <>\n      {hasVideo ? (\n        <video\n          autoPlay\n          controls\n          loop\n          style={{ maxWidth: \"100%\" }}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        >\n          <source src={videoSrc || \"\"} />\n          {image}\n        </video>\n      ) : hasImage ? (\n        image\n      ) : null}\n      {hasAudio ? (\n        <audio\n          controls\n          src={audioSrc || \"\"}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        />\n      ) : null}\n    </>\n  );\n\n  return (\n    <>\n      <div className={!isLoading ? classes.hidden : \"\"}>\n        <ViewerLoader />\n      </div>\n      <Card\n        className={clsx(classes.card, {\n          [classes.silverBorder]:\n            chainId === CHAIN_ID_SOLANA ||\n            chainId === CHAIN_ID_POLYGON ||\n            chainId === CHAIN_ID_AVAX,\n          [classes.hidden]: isLoading,\n        })}\n        elevation={10}\n      >\n        <div\n          className={clsx(classes.cardInset, {\n            [classes.eth]:\n              chainId === CHAIN_ID_ETH ||\n              chainId === CHAIN_ID_ETHEREUM_ROPSTEN ||\n              chainId === CHAIN_ID_AVAX || //TODO: give avax it's own bg\n              chainId === CHAIN_ID_OASIS, //TODO: give oasis it's own bg\n            [classes.bsc]: chainId === CHAIN_ID_BSC,\n            [classes.solana]: chainId === CHAIN_ID_SOLANA,\n            [classes.polygon]: chainId === CHAIN_ID_POLYGON,\n          })}\n        >\n          <CardContent className={classes.textContent}>\n            {metadata.nftName ? (\n              <Typography className={classes.title}>\n                {metadata.nftName}\n              </Typography>\n            ) : (\n              <div className={classes.title} />\n            )}\n            <SmartAddress\n              chainId={chainId}\n              parsedTokenAccount={value}\n              noGutter\n              noUnderline\n            />\n            <LogoIcon chainId={chainId} />\n          </CardContent>\n          <CardMedia\n            className={clsx(classes.mediaContent, {\n              [classes.silverMediaBorder]:\n                chainId === CHAIN_ID_SOLANA ||\n                chainId === CHAIN_ID_POLYGON ||\n                chainId === CHAIN_ID_OASIS ||\n                chainId === CHAIN_ID_AVAX,\n            })}\n          >\n            {media}\n          </CardMedia>\n          <CardContent className={classes.detailsContent}>\n            {metadata.description ? (\n              <Typography variant=\"body2\" className={classes.description}>\n                {metadata.description}\n              </Typography>\n            ) : null}\n            {value.tokenId ? (\n              <Typography className={classes.tokenId} align=\"right\">\n                <Tooltip title=\"Copy\" arrow>\n                  <span onClick={copyTokenId}>\n                    {value.tokenId.length > 18\n                      ? `#${value.tokenId.substr(0, 16)}...`\n                      : `#${value.tokenId}`}\n                  </span>\n                </Tooltip>\n              </Typography>\n            ) : null}\n          </CardContent>\n        </div>\n      </Card>\n    </>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  Button,\n  CircularProgress,\n  createStyles,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  makeStyles,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { InfoOutlined, Launch } from \"@material-ui/icons\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { AVAILABLE_MARKETS_URL, CHAINS_BY_ID } from \"../../utils/consts\";\nimport { shortenAddress } from \"../../utils/solana\";\nimport NFTViewer from \"./NFTViewer\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    alignCenter: {\n      textAlign: \"center\",\n    },\n    optionContainer: {\n      padding: 0,\n    },\n    optionContent: {\n      padding: theme.spacing(1),\n    },\n    tokenList: {\n      maxHeight: theme.spacing(80), //TODO smarter\n      height: theme.spacing(80),\n      overflow: \"auto\",\n    },\n    dialogContent: {\n      overflowX: \"hidden\",\n    },\n    selectionButtonContainer: {\n      //display: \"flex\",\n      textAlign: \"center\",\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    selectionButton: {\n      maxWidth: \"100%\",\n      width: theme.breakpoints.values.sm,\n    },\n    tokenOverviewContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      \"& div\": {\n        margin: theme.spacing(1),\n        flexBasis: \"25%\",\n        \"&$tokenImageContainer\": {\n          maxWidth: 40,\n        },\n        \"&$tokenMarketsList\": {\n          marginTop: theme.spacing(-0.5),\n          marginLeft: 0,\n          flexBasis: \"100%\",\n        },\n        \"&:last-child\": {\n          textAlign: \"right\",\n        },\n        flexShrink: 1,\n      },\n      flexWrap: \"wrap\",\n    },\n    tokenImageContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: 40,\n    },\n    tokenImage: {\n      maxHeight: \"2.5rem\", //Eyeballing this based off the text size\n    },\n    tokenMarketsList: {\n      order: 1,\n      textAlign: \"left\",\n      width: \"100%\",\n      \"& > .MuiButton-root\": {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n      },\n    },\n    migrationAlert: {\n      width: \"100%\",\n      \"& .MuiAlert-message\": {\n        width: \"100%\",\n      },\n    },\n    flexTitle: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n    grower: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport const balancePretty = (uiString: string) => {\n  const numberString = uiString.split(\".\")[0];\n  const bignum = BigNumber.from(numberString);\n  if (bignum.gte(1000000)) {\n    return numberString.substring(0, numberString.length - 6) + \" M\";\n  } else if (uiString.length > 8) {\n    return uiString.substr(0, 8);\n  } else {\n    return uiString;\n  }\n};\n\nconst noClickThrough = (e: any) => {\n  e.stopPropagation();\n};\n\nexport const BasicAccountRender = (\n  account: MarketParsedTokenAccount,\n  isMigrationEligible: (address: string) => boolean,\n  nft: boolean,\n  displayBalance?: (account: NFTParsedTokenAccount) => boolean\n) => {\n  const { data: marketsData } = useMarketsMap(false);\n  const classes = useStyles();\n  const mintPrettyString = shortenAddress(account.mintKey);\n  const uri = nft ? account.image_256 : account.logo || account.uri;\n  const symbol = account.symbol || \"Unknown\";\n  const name = account.name || \"Unknown\";\n  const tokenId = account.tokenId;\n  const shouldDisplayBalance = !displayBalance || displayBalance(account);\n\n  const nftContent = (\n    <div className={classes.tokenOverviewContainer}>\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography>{symbol}</Typography>\n        <Typography>{name}</Typography>\n      </div>\n      <div>\n        <Typography>{mintPrettyString}</Typography>\n        <Typography style={{ wordBreak: \"break-all\" }}>{tokenId}</Typography>\n      </div>\n    </div>\n  );\n\n  const tokenContent = (\n    <div className={classes.tokenOverviewContainer}>\n      {account.markets ? (\n        <div className={classes.tokenMarketsList}>\n          {account.markets.map((market) =>\n            marketsData?.markets?.[market] ? (\n              <Button\n                key={market}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                endIcon={<Launch />}\n                href={marketsData.markets[market].link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={noClickThrough}\n              >\n                {marketsData.markets[market].name}\n              </Button>\n            ) : null\n          )}\n        </div>\n      ) : null}\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography variant=\"subtitle1\">{symbol}</Typography>\n      </div>\n      <div>\n        {\n          <Typography variant=\"body1\">\n            {account.isNativeAsset ? \"Native\" : mintPrettyString}\n          </Typography>\n        }\n      </div>\n      <div>\n        {shouldDisplayBalance ? (\n          <>\n            <Typography variant=\"body2\">{\"Balance\"}</Typography>\n            <Typography variant=\"h6\">\n              {balancePretty(account.uiAmountString)}\n            </Typography>\n          </>\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n\n  const migrationRender = (\n    <div className={classes.migrationAlert}>\n      <Alert severity=\"warning\">\n        <Typography variant=\"body2\">\n          This is a legacy asset eligible for migration.\n        </Typography>\n        <div>{tokenContent}</div>\n      </Alert>\n    </div>\n  );\n\n  return nft\n    ? nftContent\n    : isMigrationEligible(account.mintKey)\n    ? migrationRender\n    : tokenContent;\n};\n\ninterface MarketParsedTokenAccount extends NFTParsedTokenAccount {\n  markets?: string[];\n}\n\nexport default function TokenPicker({\n  value,\n  options,\n  RenderOption,\n  onChange,\n  isValidAddress,\n  getAddress,\n  disabled,\n  resetAccounts,\n  nft,\n  chainId,\n  error,\n  showLoader,\n  useTokenId,\n}: {\n  value: NFTParsedTokenAccount | null;\n  options: NFTParsedTokenAccount[];\n  RenderOption: ({\n    account,\n  }: {\n    account: NFTParsedTokenAccount;\n  }) => JSX.Element;\n  onChange: (newValue: NFTParsedTokenAccount | null) => Promise<void>;\n  isValidAddress?: (address: string) => boolean;\n  getAddress?: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount>;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  nft: boolean;\n  chainId: ChainId;\n  error?: string;\n  showLoader?: boolean;\n  useTokenId?: boolean;\n}) {\n  const classes = useStyles();\n  const [holderString, setHolderString] = useState(\"\");\n  const [tokenIdHolderString, setTokenIdHolderString] = useState(\"\");\n  const [loadingError, setLoadingError] = useState(\"\");\n  const [isLocalLoading, setLocalLoading] = useState(false);\n  const [dialogIsOpen, setDialogIsOpen] = useState(false);\n  const [selectionError, setSelectionError] = useState(\"\");\n\n  const targetChain = useSelector(selectTransferTargetChain);\n  const { data: marketsData } = useMarketsMap(true);\n\n  const openDialog = useCallback(() => {\n    setHolderString(\"\");\n    setSelectionError(\"\");\n    setDialogIsOpen(true);\n  }, []);\n\n  const closeDialog = useCallback(() => {\n    setDialogIsOpen(false);\n  }, []);\n\n  const handleSelectOption = useCallback(\n    async (option: NFTParsedTokenAccount) => {\n      setSelectionError(\"\");\n      let newOption = null;\n      try {\n        //Covalent balances tend to be stale, so we make an attempt to correct it at selection time.\n        if (getAddress && !option.isNativeAsset) {\n          newOption = await getAddress(option.mintKey, option.tokenId);\n          newOption = {\n            ...option,\n            ...newOption,\n            // keep logo and uri from covalent / market list / etc (otherwise would be overwritten by undefined)\n            logo: option.logo || newOption.logo,\n            uri: option.uri || newOption.uri,\n          } as NFTParsedTokenAccount;\n        } else {\n          newOption = option;\n        }\n        await onChange(newOption);\n        closeDialog();\n      } catch (e: any) {\n        if (e.message?.includes(\"v1\")) {\n          setSelectionError(e.message);\n        } else {\n          setSelectionError(\n            \"Unable to retrieve required information about this token. Ensure your wallet is connected, then refresh the list.\"\n          );\n        }\n      }\n    },\n    [getAddress, onChange, closeDialog]\n  );\n\n  const resetAccountsWrapper = useCallback(() => {\n    setHolderString(\"\");\n    setTokenIdHolderString(\"\");\n    setSelectionError(\"\");\n    resetAccounts && resetAccounts();\n  }, [resetAccounts]);\n\n  const searchFilter = useCallback(\n    (option: NFTParsedTokenAccount) => {\n      if (!holderString) {\n        return true;\n      }\n      const optionString = (\n        (option.publicKey || \"\") +\n        \" \" +\n        (option.mintKey || \"\") +\n        \" \" +\n        (option.symbol || \"\") +\n        \" \" +\n        (option.name || \" \")\n      ).toLowerCase();\n      const searchString = holderString.toLowerCase();\n      return optionString.includes(searchString);\n    },\n    [holderString]\n  );\n\n  const marketChainTokens = marketsData?.tokens?.[chainId];\n  const featuredMarkets = marketsData?.tokenMarkets?.[chainId]?.[targetChain];\n\n  const featuredOptions = useMemo(() => {\n    // only tokens have featured markets\n    if (!nft && featuredMarkets) {\n      const ownedMarketTokens = options\n        .filter(\n          (option: NFTParsedTokenAccount) => featuredMarkets?.[option.mintKey]\n        )\n        .map(\n          (option) =>\n            ({\n              ...option,\n              markets: featuredMarkets[option.mintKey].markets,\n            } as MarketParsedTokenAccount)\n        );\n      return [\n        ...ownedMarketTokens,\n        ...Object.keys(featuredMarkets)\n          .filter(\n            (mintKey) =>\n              !ownedMarketTokens.find((option) => option.mintKey === mintKey)\n          )\n          .map(\n            (mintKey) =>\n              ({\n                amount: \"0\",\n                decimals: 0,\n                markets: featuredMarkets[mintKey].markets,\n                mintKey,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\", // if we can't look up by address, we can select the market that isn't in the list of holdings, but can't proceed since the balance will be 0\n                symbol: marketChainTokens?.[mintKey]?.symbol,\n                logo: marketChainTokens?.[mintKey]?.logo,\n              } as MarketParsedTokenAccount)\n          ),\n      ].filter(searchFilter);\n    }\n    return [];\n  }, [nft, marketChainTokens, featuredMarkets, options, searchFilter]);\n\n  const nonFeaturedOptions = useMemo(() => {\n    return options.filter(\n      (option: NFTParsedTokenAccount) =>\n        searchFilter(option) &&\n        // only tokens have featured markets\n        (nft || !featuredMarkets?.[option.mintKey])\n    );\n  }, [nft, options, featuredMarkets, searchFilter]);\n\n  const localFind = useCallback(\n    (address: string, tokenIdHolderString: string) => {\n      return options.find(\n        (x) =>\n          x.mintKey === address &&\n          (!tokenIdHolderString || x.tokenId === tokenIdHolderString)\n      );\n    },\n    [options]\n  );\n\n  //This is the effect which allows pasting an address in directly\n  useEffect(() => {\n    if (!isValidAddress || !getAddress) {\n      return;\n    }\n    if (useTokenId && !tokenIdHolderString) {\n      return;\n    }\n    setLoadingError(\"\");\n    let cancelled = false;\n    if (isValidAddress(holderString)) {\n      const option = localFind(holderString, tokenIdHolderString);\n      if (option) {\n        handleSelectOption(option);\n        return () => {\n          cancelled = true;\n        };\n      }\n      setLocalLoading(true);\n      setLoadingError(\"\");\n      getAddress(\n        holderString,\n        useTokenId ? tokenIdHolderString : undefined\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            if (result) {\n              handleSelectOption(result);\n            }\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            setLoadingError(\"Could not find the specified address.\");\n          }\n        }\n      );\n    }\n    return () => (cancelled = true);\n  }, [\n    holderString,\n    isValidAddress,\n    getAddress,\n    handleSelectOption,\n    localFind,\n    tokenIdHolderString,\n    useTokenId,\n  ]);\n\n  //TODO reset button\n  //TODO debounce & save hotloaded options as an option before automatically selecting\n  //TODO sigfigs function on the balance strings\n\n  const localLoader = (\n    <div className={classes.alignCenter}>\n      <CircularProgress />\n      <Typography variant=\"body2\">\n        {showLoader ? \"Loading available tokens\" : \"Searching for results\"}\n      </Typography>\n    </div>\n  );\n\n  const displayLocalError = (\n    <div className={classes.alignCenter}>\n      <Typography variant=\"body2\" color=\"error\">\n        {loadingError || selectionError}\n      </Typography>\n    </div>\n  );\n\n  const dialog = (\n    <Dialog\n      onClose={closeDialog}\n      aria-labelledby=\"simple-dialog-title\"\n      open={dialogIsOpen}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle>\n        <div id=\"simple-dialog-title\" className={classes.flexTitle}>\n          <Typography variant=\"h5\">Select a token</Typography>\n          <div className={classes.grower} />\n          <Tooltip title=\"Reload tokens\">\n            <IconButton onClick={resetAccountsWrapper}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        <Alert severity=\"info\">\n          You should always check for markets and liquidity before sending\n          tokens.{\" \"}\n          <Link\n            href={AVAILABLE_MARKETS_URL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Click here to see available markets for wrapped tokens.\n          </Link>\n        </Alert>\n        <TextField\n          variant=\"outlined\"\n          label=\"Search name or paste address\"\n          value={holderString}\n          onChange={(event) => setHolderString(event.target.value)}\n          fullWidth\n          margin=\"normal\"\n        />\n        {useTokenId ? (\n          <TextField\n            variant=\"outlined\"\n            label=\"Token Id\"\n            value={tokenIdHolderString}\n            onChange={(event) => setTokenIdHolderString(event.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n        ) : null}\n        {isLocalLoading || showLoader ? (\n          localLoader\n        ) : loadingError || selectionError ? (\n          displayLocalError\n        ) : (\n          <List component=\"div\" className={classes.tokenList}>\n            {featuredOptions.length ? (\n              <>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Featured {CHAINS_BY_ID[chainId].name} &gt;{\" \"}\n                  {CHAINS_BY_ID[targetChain].name} markets{\" \"}\n                  <Tooltip\n                    title={`Markets for these ${CHAINS_BY_ID[chainId].name} tokens exist for the corresponding tokens on ${CHAINS_BY_ID[targetChain].name}`}\n                  >\n                    <InfoOutlined\n                      fontSize=\"small\"\n                      style={{ verticalAlign: \"text-bottom\" }}\n                    />\n                  </Tooltip>\n                </Typography>\n                {featuredOptions.map((option) => {\n                  return (\n                    <ListItem\n                      component=\"div\"\n                      button\n                      onClick={() => handleSelectOption(option)}\n                      key={\n                        option.publicKey +\n                        option.mintKey +\n                        (option.tokenId || \"\")\n                      }\n                    >\n                      <RenderOption account={option} />\n                    </ListItem>\n                  );\n                })}\n                {nonFeaturedOptions.length ? (\n                  <>\n                    <Divider style={{ marginTop: 8, marginBottom: 16 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Other Assets\n                    </Typography>\n                  </>\n                ) : null}\n              </>\n            ) : null}\n            {nonFeaturedOptions.map((option) => {\n              return (\n                <ListItem\n                  component=\"div\"\n                  button\n                  onClick={() => handleSelectOption(option)}\n                  key={\n                    option.publicKey + option.mintKey + (option.tokenId || \"\")\n                  }\n                >\n                  <RenderOption account={option} />\n                </ListItem>\n              );\n            })}\n            {featuredOptions.length || nonFeaturedOptions.length ? null : (\n              <div className={classes.alignCenter}>\n                <Typography>No results found</Typography>\n              </div>\n            )}\n          </List>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n\n  const selectionChip = (\n    <div className={classes.selectionButtonContainer}>\n      <Button\n        onClick={openDialog}\n        disabled={disabled}\n        variant=\"outlined\"\n        endIcon={<KeyboardArrowDownIcon />}\n        className={classes.selectionButton}\n      >\n        {value ? (\n          <RenderOption account={value} />\n        ) : (\n          <Typography color=\"textSecondary\">Select a token</Typography>\n        )}\n      </Button>\n    </div>\n  );\n\n  return (\n    <>\n      {dialog}\n      {value && nft ? <NFTViewer value={value} chainId={chainId} /> : null}\n      {selectionChip}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  NFTImplementation,\n  TokenImplementation,\n} from \"@certusone/wormhole-sdk\";\nimport { WormholeAbi__factory } from \"@certusone/wormhole-sdk/lib/esm/ethers-contracts/abi\";\nimport { getAddress as getEthAddress } from \"@ethersproject/address\";\nimport React, { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  getMigrationAssetMap,\n  WORMHOLE_V1_ETH_ADDRESS,\n} from \"../../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  ethTokenToParsedTokenAccount,\n  getEthereumNFT,\n  getEthereumToken,\n  isValidEthereumAddress,\n} from \"../../utils/ethereum\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\nconst isWormholev1 = (provider: any, address: string, chainId: ChainId) => {\n  if (chainId !== CHAIN_ID_ETH) {\n    return Promise.resolve(false);\n  }\n  const connection = WormholeAbi__factory.connect(\n    WORMHOLE_V1_ETH_ADDRESS,\n    provider\n  );\n  return connection.isWrappedAsset(address);\n};\n\ntype EthereumSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  chainId: ChainId;\n  nft?: boolean;\n};\n\nexport default function EvmTokenPicker(\n  props: EthereumSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    tokenAccounts,\n    disabled,\n    resetAccounts,\n    chainId,\n    nft,\n  } = props;\n  const { provider, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const selectedTokenAccount: NFTParsedTokenAccount | undefined = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n\n  const shouldDisplayBalance = useCallback(\n    (tokenAccount: NFTParsedTokenAccount) => {\n      const selectedMintMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.mintKey.toLowerCase() ===\n          tokenAccount.mintKey.toLowerCase();\n      //added just in case we start displaying NFT balances again.\n      const selectedTokenIdMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.tokenId === tokenAccount.tokenId;\n      return !!(\n        tokenAccount.isNativeAsset || //The native asset amount isn't taken from covalent, so can be trusted.\n        (selectedMintMatch && selectedTokenIdMatch)\n      );\n    },\n    [selectedTokenAccount]\n  );\n\n  const isMigrationEligible = useCallback(\n    (address: string) => {\n      const assetMap = getMigrationAssetMap(chainId);\n      return !!assetMap.get(getEthAddress(address));\n    },\n    [chainId]\n  );\n\n  const getAddress: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount> = useCallback(\n    async (address: string, tokenId?: string) => {\n      if (provider && signerAddress && isReady) {\n        try {\n          const tokenAccount = await (nft\n            ? getEthereumNFT(address, provider)\n            : getEthereumToken(address, provider));\n          if (!tokenAccount) {\n            return Promise.reject(\"Could not find the specified token.\");\n          }\n          if (nft && !tokenId) {\n            return Promise.reject(\"Token ID is required.\");\n          } else if (nft && tokenId) {\n            return ethNFTToNFTParsedTokenAccount(\n              tokenAccount as NFTImplementation,\n              tokenId,\n              signerAddress\n            );\n          } else {\n            return ethTokenToParsedTokenAccount(\n              tokenAccount as TokenImplementation,\n              signerAddress\n            );\n          }\n        } catch (e) {\n          return Promise.reject(\"Unable to retrive the specific token.\");\n        }\n      } else {\n        return Promise.reject({ error: \"Wallet is not connected.\" });\n      }\n    },\n    [isReady, nft, provider, signerAddress]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      let v1 = false;\n      try {\n        v1 = await isWormholev1(provider, account.mintKey, chainId);\n      } catch (e) {\n        //For now, just swallow this one.\n      }\n      const migration = isMigrationEligible(account.mintKey);\n      if (v1 === true && !migration) {\n        throw new Error(\n          \"Wormhole v1 assets cannot be transferred with this bridge.\"\n        );\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [chainId, onChange, provider, isMigrationEligible]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(\n        account,\n        isMigrationEligible,\n        nft || false,\n        shouldDisplayBalance\n      );\n    },\n    [nft, isMigrationEligible, shouldDisplayBalance]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      useTokenId={nft}\n      onChange={onChangeWrapper}\n      isValidAddress={isValidEthereumAddress}\n      getAddress={getAddress}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={tokenAccounts?.isFetching}\n      nft={nft || false}\n      chainId={chainId}\n    />\n  );\n}\n","import {\n  createStyles,\n  IconButton,\n  makeStyles,\n  Tooltip,\n} from \"@material-ui/core\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    inlineContentWrapper: {\n      display: \"inline-block\",\n      flexGrow: 1,\n    },\n    flexWrapper: {\n      \"& > *\": {\n        margin: \".5rem\",\n      },\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  })\n);\n\nexport default function RefreshButtonWrapper({\n  children,\n  callback,\n}: {\n  children: JSX.Element;\n  callback: () => any;\n}) {\n  const classes = useStyles();\n\n  const refreshWrapper = (\n    <div className={classes.flexWrapper}>\n      <div className={classes.inlineContentWrapper}>{children}</div>\n      <Tooltip title=\"Reload Tokens\">\n        <IconButton onClick={callback}>\n          <RefreshIcon />\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n\n  return refreshWrapper;\n}\n","import { ParsedTokenAccount } from \"../store/transferSlice\";\n\nexport const sortParsedTokenAccounts = (\n  a: ParsedTokenAccount,\n  b: ParsedTokenAccount\n) =>\n  a.isNativeAsset && !b.isNativeAsset\n    ? -1\n    : !a.isNativeAsset && b.isNativeAsset\n    ? 1\n    : a.symbol && b.symbol\n    ? a.symbol.localeCompare(b.symbol)\n    : a.symbol\n    ? -1\n    : b.symbol\n    ? 1\n    : 0;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  MIGRATION_ASSET_MAP,\n  WORMHOLE_V1_MINT_AUTHORITY,\n} from \"../../utils/consts\";\nimport { ExtractedMintInfo } from \"../../utils/solana\";\nimport { sortParsedTokenAccounts } from \"../../utils/sort\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype SolanaSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: NFTParsedTokenAccount | null) => void;\n  accounts: DataWrapper<NFTParsedTokenAccount[]> | null | undefined;\n  disabled: boolean;\n  mintAccounts:\n    | DataWrapper<Map<string, ExtractedMintInfo | null> | undefined>\n    | undefined;\n  resetAccounts: (() => void) | undefined;\n  nft?: boolean;\n};\n\nconst isMigrationEligible = (address: string) => {\n  return !!MIGRATION_ASSET_MAP.get(address);\n};\n\nexport default function SolanaSourceTokenSelector(\n  props: SolanaSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    disabled,\n    resetAccounts,\n    nft,\n    accounts,\n    mintAccounts,\n  } = props;\n  const tokenMap = useSolanaTokenMap();\n  const mintAddresses = useMemo(() => {\n    const output: string[] = [];\n    mintAccounts?.data?.forEach(\n      (mintAuth, mintAddress) => mintAddress && output.push(mintAddress)\n    );\n    return output;\n  }, [mintAccounts?.data]);\n  const metaplex = useMetaplexData(mintAddresses);\n  const markets = useMarketsMap(!nft);\n  const targetChain = useSelector(selectTransferTargetChain);\n\n  const memoizedTokenMap: Map<String, TokenInfo> = useMemo(() => {\n    const output = new Map<String, TokenInfo>();\n\n    if (tokenMap.data) {\n      for (const data of tokenMap.data) {\n        if (data && data.address) {\n          output.set(data.address, data);\n        }\n      }\n    }\n\n    return output;\n  }, [tokenMap]);\n\n  const getLogo = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.logo) ||\n        memoizedTokenMap.get(account.mintKey)?.logoURI ||\n        metaplex.data?.get(account.mintKey)?.data?.uri ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getSymbol = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.symbol) ||\n        memoizedTokenMap.get(account.mintKey)?.symbol ||\n        metaplex.data?.get(account.mintKey)?.data?.symbol ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getName = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.name) ||\n        memoizedTokenMap.get(account.mintKey)?.name ||\n        metaplex.data?.get(account.mintKey)?.data?.name ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  //This exists to remove NFTs from the list of potential options. It requires reading the metaplex data, so it would be\n  //difficult to do before this point.\n  const filteredOptions = useMemo(() => {\n    const array = accounts?.data || [];\n    const tokenList = array.filter((x) => {\n      const zeroBalance = x.amount === \"0\";\n      if (zeroBalance) {\n        return false;\n      }\n      const isNFT =\n        x.decimals === 0 && metaplex.data?.get(x.mintKey)?.data?.uri;\n      const is721CompatibleNFT =\n        isNFT && mintAccounts?.data?.get(x.mintKey)?.supply === \"1\";\n      return nft ? is721CompatibleNFT : !isNFT;\n    });\n    tokenList.sort(sortParsedTokenAccounts);\n    return tokenList;\n  }, [mintAccounts?.data, metaplex.data, nft, accounts]);\n\n  const accountsWithMetadata = useMemo(() => {\n    return filteredOptions.map((account) => {\n      const logo = getLogo(account);\n      const symbol = getSymbol(account);\n      const name = getName(account);\n\n      const uri = getLogo(account);\n\n      return {\n        ...account,\n        name,\n        symbol,\n        logo,\n        uri,\n      };\n    });\n  }, [filteredOptions, getLogo, getName, getSymbol]);\n\n  const isLoading =\n    accounts?.isFetching || metaplex.isFetching || tokenMap.isFetching;\n\n  const isWormholev1 = useCallback(\n    (address: string) => {\n      //This is a v1 wormhole token on testnet\n      //address = \"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\";\n\n      //Anything we find in the features market map will be a non-v1 token. This has to short circuit the other checks\n      //As the featured market parsed token accounts are spoofed in by the token picker and lack valid metadata.\n      if (!nft) {\n        const marketsData = markets.data;\n        const featuredMarkets =\n          marketsData?.tokenMarkets?.[CHAIN_ID_SOLANA]?.[targetChain];\n        if (!!featuredMarkets?.[address]) {\n          return false;\n        }\n      }\n\n      if (!props.mintAccounts?.data) {\n        return true; //These should never be null by this point\n      }\n      const mintAuthority = props.mintAccounts.data.get(address)?.mintAuthority;\n\n      if (!mintAuthority) {\n        return true; //We should never fail to pull the mint of an account.\n      }\n\n      if (mintAuthority === WORMHOLE_V1_MINT_AUTHORITY) {\n        return true; //This means the mint was created by the wormhole v1 contract, and we want to disallow its transfer.\n      }\n\n      return false;\n    },\n    [props.mintAccounts, markets.data, nft, targetChain]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (newValue: NFTParsedTokenAccount | null) => {\n      let v1 = false;\n      if (newValue === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      try {\n        v1 = isWormholev1(newValue.mintKey);\n      } catch (e) {\n        //swallow for now\n      }\n\n      if (v1 && !isMigrationEligible(newValue.mintKey)) {\n        throw Error(\n          \"Wormhole v1 assets should not be transferred with this bridge.\"\n        );\n      }\n\n      onChange(newValue);\n      return Promise.resolve();\n    },\n    [isWormholev1, onChange]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, isMigrationEligible, nft || false);\n    },\n    [nft]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={accountsWithMetadata}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={nft || false}\n      chainId={CHAIN_ID_SOLANA}\n    />\n  );\n}\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { MutableRefObject, useEffect, useMemo, useState } from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport interface TerraNativeBalances {\n  [index: string]: string;\n}\n\nexport default function useTerraNativeBalances(\n  walletAddress?: string,\n  refreshRef?: MutableRefObject<() => void>\n) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [balances, setBalances] = useState<TerraNativeBalances | undefined>({});\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    if (refreshRef) {\n      refreshRef.current = () => {\n        setRefresh(true);\n      };\n    }\n  }, [refreshRef]);\n  useEffect(() => {\n    setRefresh(false);\n    if (walletAddress) {\n      setIsLoading(true);\n      setBalances(undefined);\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.bank\n        .balance(walletAddress)\n        .then((coins) => {\n          // coins doesn't support reduce\n          const balancePairs = coins.map(({ amount, denom }) => [\n            denom,\n            amount,\n          ]);\n          const balance = balancePairs.reduce((obj, current) => {\n            obj[current[0].toString()] = current[1].toString();\n            return obj;\n          }, {} as TerraNativeBalances);\n          setIsLoading(false);\n          setBalances(balance);\n        })\n        .catch((e) => {\n          setIsLoading(false);\n          setBalances(undefined);\n        });\n    } else {\n      setIsLoading(false);\n      setBalances(undefined);\n    }\n  }, [walletAddress, refresh]);\n  const value = useMemo(() => ({ isLoading, balances }), [isLoading, balances]);\n  return value;\n}\n","import { CHAIN_ID_TERRA, isNativeDenom } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useTerraNativeBalances from \"../../hooks/useTerraNativeBalances\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { SUPPORTED_TERRA_TOKENS, TERRA_HOST } from \"../../utils/consts\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  isValidTerraAddress,\n  NATIVE_TERRA_DECIMALS,\n} from \"../../utils/terra\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype TerraTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function TerraTokenPicker(props: TerraTokenPickerProps) {\n  const { value, onChange, disabled } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_TERRA);\n  const nativeRefresh = useRef<() => void>(() => {});\n  const { balances, isLoading: nativeIsLoading } = useTerraNativeBalances(\n    walletAddress,\n    nativeRefresh\n  );\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const terraTokenArray = useMemo(() => {\n    const balancesItems =\n      balances && walletAddress\n        ? Object.keys(balances).map((denom) =>\n            // ({\n            //   protocol: \"native\",\n            //   symbol: formatNativeDenom(denom),\n            //   token: denom,\n            //   icon: getNativeTerraIcon(formatNativeDenom(denom)),\n            //   balance: balances[denom],\n            // } as TerraTokenMetadata)\n\n            //TODO support non-natives in the SUPPORTED_TERRA_TOKENS\n            //This token account makes a lot of assumptions\n            createParsedTokenAccount(\n              walletAddress,\n              denom,\n              balances[denom], //amount\n              NATIVE_TERRA_DECIMALS, //TODO actually get decimals rather than hardcode\n              0, //uiAmount is unused\n              formatUnits(balances[denom], NATIVE_TERRA_DECIMALS), //uiAmountString\n              formatNativeDenom(denom), // symbol\n              undefined, //name\n              getNativeTerraIcon(formatNativeDenom(denom)), //logo\n              true //is native asset\n            )\n          )\n        : [];\n    return balancesItems.filter((metadata) =>\n      SUPPORTED_TERRA_TOKENS.includes(metadata.mintKey)\n    );\n    // const values = tokenMap.data?.mainnet;\n    // const tokenMapItems = Object.values(values || {}) || [];\n    // return [...balancesItems, ...tokenMapItems];\n  }, [\n    walletAddress,\n    balances,\n    // tokenMap\n  ]);\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupTerraAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Wallet not connected\");\n      }\n      const lcd = new LCDClient(TERRA_HOST);\n      return lcd.wasm\n        .contractQuery(lookupAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(lookupAsset, {\n              balance: {\n                address: walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                return createParsedTokenAccount(\n                  walletAddress,\n                  lookupAsset,\n                  balance.balance.toString(),\n                  info.decimals,\n                  Number(formatUnits(balance.balance, info.decimals)),\n                  formatUnits(balance.balance, info.decimals),\n                  info.symbol,\n                  info.name\n                );\n              } else {\n                throw new Error(\"Failed to retrieve Terra account.\");\n              }\n            })\n        )\n        .catch(() => {\n          return Promise.reject();\n        });\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    return isValidTerraAddress(address) && !isNativeDenom(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={terraTokenArray || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupTerraAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_TERRA}\n    />\n  );\n}\n","//import Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetSourceParsedTokens from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  setSourceParsedTokenAccount as setNFTSourceParsedTokenAccount,\n  setSourceWalletAddress as setNFTSourceWalletAddress,\n} from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport {\n  ParsedTokenAccount,\n  setSourceParsedTokenAccount as setTransferSourceParsedTokenAccount,\n  setSourceWalletAddress as setTransferSourceWalletAddress,\n} from \"../../store/transferSlice\";\nimport EvmTokenPicker from \"./EvmTokenPicker\";\nimport RefreshButtonWrapper from \"./RefreshButtonWrapper\";\nimport SolanaTokenPicker from \"./SolanaTokenPicker\";\nimport TerraTokenPicker from \"./TerraTokenPicker\";\n\ntype TokenSelectorProps = {\n  disabled: boolean;\n  nft?: boolean;\n};\n\nexport const TokenSelector = (props: TokenSelectorProps) => {\n  const { disabled, nft } = props;\n  const dispatch = useDispatch();\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceParsedTokenAccount = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n  const walletIsReady = useIsWalletReady(lookupChain);\n\n  const setSourceParsedTokenAccount = nft\n    ? setNFTSourceParsedTokenAccount\n    : setTransferSourceParsedTokenAccount;\n  const setSourceWalletAddress = nft\n    ? setNFTSourceWalletAddress\n    : setTransferSourceWalletAddress;\n\n  const handleOnChange = useCallback(\n    (newTokenAccount: ParsedTokenAccount | null) => {\n      if (!newTokenAccount) {\n        dispatch(setSourceParsedTokenAccount(undefined));\n        dispatch(setSourceWalletAddress(undefined));\n      } else if (newTokenAccount !== undefined && walletIsReady.walletAddress) {\n        dispatch(setSourceParsedTokenAccount(newTokenAccount));\n        dispatch(setSourceWalletAddress(walletIsReady.walletAddress));\n      }\n    },\n    [\n      dispatch,\n      walletIsReady,\n      setSourceParsedTokenAccount,\n      setSourceWalletAddress,\n    ]\n  );\n\n  const maps = useGetSourceParsedTokens(nft);\n  const resetAccountWrapper = maps?.resetAccounts || (() => {}); //This should never happen.\n\n  //This is only for errors so bad that we shouldn't even mount the component\n  const fatalError =\n    isEVMChain(lookupChain) &&\n    lookupChain !== CHAIN_ID_TERRA &&\n    maps?.tokenAccounts?.error; //Terra & ETH can proceed because it has advanced mode\n\n  const content = fatalError ? (\n    <RefreshButtonWrapper callback={resetAccountWrapper}>\n      <Typography>{fatalError}</Typography>\n    </RefreshButtonWrapper>\n  ) : lookupChain === CHAIN_ID_SOLANA ? (\n    <SolanaTokenPicker\n      value={sourceParsedTokenAccount || null}\n      onChange={handleOnChange}\n      disabled={disabled}\n      accounts={maps?.tokenAccounts}\n      mintAccounts={maps?.mintAccounts}\n      resetAccounts={maps?.resetAccounts}\n      nft={nft}\n    />\n  ) : isEVMChain(lookupChain) ? (\n    <EvmTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      tokenAccounts={maps?.tokenAccounts}\n      resetAccounts={maps?.resetAccounts}\n      chainId={lookupChain}\n      nft={nft}\n    />\n  ) : lookupChain === CHAIN_ID_TERRA ? (\n    <TerraTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : (\n    <TextField\n      variant=\"outlined\"\n      placeholder=\"Asset\"\n      fullWidth\n      value={\"Not Implemented\"}\n      disabled={true}\n    />\n  );\n\n  return <div>{content}</div>;\n};\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { incrementStep, setSourceChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsSourceComplete,\n  selectNFTShouldLockFields,\n  selectNFTSourceBalanceString,\n  selectNFTSourceChain,\n  selectNFTSourceError,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const uiAmountString = useSelector(selectNFTSourceBalanceString);\n  const error = useSelector(selectNFTSourceError);\n  const isSourceComplete = useSelector(selectNFTIsSourceComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select an NFT to send through the Wormhole NFT Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/nft-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              endIcon={<VerifiedUser />}\n            >\n              NFT Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS_WITH_NFT_SUPPORT}\n      />\n      {isEVMChain(sourceChain) ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs which implement ERC-721 are supported.\n        </Alert>\n      ) : null}\n      {sourceChain === CHAIN_ID_SOLANA ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs with a supply of 1 are supported.\n        </Alert>\n      ) : null}\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} nft={true} />\n        </div>\n      ) : null}\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer 1 NFT of</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        <span>from</span>\n        <SmartAddress\n          chainId={sourceChain}\n          address={sourceParsedTokenAccount?.publicKey}\n        />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n      {sourceParsedTokenAccount ? (\n        <NFTViewer value={sourceParsedTokenAccount} chainId={sourceChain} />\n      ) : null}\n    </>\n  );\n}\n","import {\n  canonicalAddress,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { arrayify, zeroPad } from \"@ethersproject/bytes\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setTargetAddressHex as setNFTTargetAddressHex } from \"../store/nftSlice\";\nimport {\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n  selectTransferTargetParsedTokenAccount,\n} from \"../store/selectors\";\nimport { setTargetAddressHex as setTransferTargetAddressHex } from \"../store/transferSlice\";\n\nfunction useSyncTargetAddress(shouldFire: boolean, nft?: boolean) {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const { signerAddress } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const targetAsset = useSelector(\n    nft ? selectNFTTargetAsset : selectTransferTargetAsset\n  );\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const targetTokenAccountPublicKey = targetParsedTokenAccount?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const setTargetAddressHex = nft\n    ? setNFTTargetAddressHex\n    : setTransferTargetAddressHex;\n  useEffect(() => {\n    if (shouldFire) {\n      let cancelled = false;\n      if (isEVMChain(targetChain) && signerAddress) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(zeroPad(arrayify(signerAddress), 32))\n          )\n        );\n      }\n      // TODO: have the user explicitly select an account on solana\n      else if (\n        !nft && // only support existing, non-derived token accounts for token transfers (nft flow doesn't check balance)\n        targetChain === CHAIN_ID_SOLANA &&\n        targetTokenAccountPublicKey\n      ) {\n        // use the target's TokenAccount if it exists\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(new PublicKey(targetTokenAccountPublicKey).toBytes(), 32)\n            )\n          )\n        );\n      } else if (targetChain === CHAIN_ID_SOLANA && solPK && targetAsset) {\n        // otherwise, use the associated token account (which we create in the case it doesn't exist)\n        (async () => {\n          try {\n            const associatedTokenAccount =\n              await Token.getAssociatedTokenAddress(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                new PublicKey(targetAsset), // this might error\n                solPK\n              );\n            if (!cancelled) {\n              dispatch(\n                setTargetAddressHex(\n                  uint8ArrayToHex(zeroPad(associatedTokenAccount.toBytes(), 32))\n                )\n              );\n            }\n          } catch (e) {\n            if (!cancelled) {\n              dispatch(setTargetAddressHex(undefined));\n            }\n          }\n        })();\n      } else if (\n        targetChain === CHAIN_ID_TERRA &&\n        terraWallet &&\n        terraWallet.walletAddress\n      ) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(canonicalAddress(terraWallet.walletAddress), 32)\n            )\n          )\n        );\n      } else {\n        dispatch(setTargetAddressHex(undefined));\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    dispatch,\n    shouldFire,\n    targetChain,\n    signerAddress,\n    solPK,\n    targetAsset,\n    targetTokenAccountPublicKey,\n    terraWallet,\n    nft,\n    setTargetAddressHex,\n  ]);\n}\n\nexport default useSyncTargetAddress;\n","import {\n  CHAIN_ID_SOLANA,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTShouldLockFields,\n  selectNFTSourceChain,\n  selectNFTTargetAddressHex,\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectNFTTargetError,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport StepDescription from \"../StepDescription\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const chains = useMemo(\n    () => CHAINS_WITH_NFT_SUPPORT.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAsset = useSelector(selectNFTTargetAsset);\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  let tokenId;\n  try {\n    tokenId =\n      originChain === CHAIN_ID_SOLANA && originAsset\n        ? BigNumber.from(\n            new PublicKey(hexToUint8Array(originAsset)).toBytes()\n          ).toString()\n        : originTokenId;\n  } catch (e) {\n    tokenId = originTokenId;\n  }\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  const error = useSelector(selectNFTTargetError);\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  useSyncTargetAddress(!shouldLockFields, true);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        select\n        fullWidth\n        variant=\"outlined\"\n        value={targetChain}\n        onChange={handleTargetChange}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        className={classes.transferField}\n        value={readableTargetAddress}\n        disabled={true}\n      />\n      {targetAsset !== ethers.constants.AddressZero ? (\n        <>\n          <TextField\n            label=\"Token Address\"\n            fullWidth\n            variant=\"outlined\"\n            className={classes.transferField}\n            value={targetAsset || \"\"}\n            disabled={true}\n          />\n          {isEVMChain(targetChain) ? (\n            <TextField\n              variant=\"outlined\"\n              label=\"TokenId\"\n              fullWidth\n              className={classes.transferField}\n              value={tokenId || \"\"}\n              disabled={true}\n            />\n          ) : null}\n        </>\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your NFT.\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary methodType=\"nft\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete} //|| !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTTargetAddressHex,\n  selectNFTTargetChain,\n} from \"../../store/selectors\";\nimport { hexToNativeString } from \"@certusone/wormhole-sdk\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useSelector(selectNFTTargetAddressHex);\n  const targetAddressNative = hexToNativeString(targetAddress, targetChain);\n\n  const explainerContent =\n    targetChain && targetAddressNative ? (\n      <>\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={targetAddressNative} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport { setSourceChain, setStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTActiveStep,\n  selectNFTIsRedeemComplete,\n  selectNFTIsRedeeming,\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction NFT() {\n  useCheckIfWormholeWrapped(true);\n  useFetchTargetAsset(true);\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectNFTActiveStep);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const isRedeemComplete = useSelector(selectNFTIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathTargetChain = query.get(\"targetChain\");\n\n  //This effect initializes the state based on the path params\n  useEffect(() => {\n    if (!pathSourceChain && !pathTargetChain) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId | undefined = CHAINS_WITH_NFT_SUPPORT.find(\n        (x) => parseFloat(pathSourceChain || \"\") === x.id\n      )?.id;\n      const targetChain: ChainId | undefined = CHAINS_WITH_NFT_SUPPORT.find(\n        (x) => parseFloat(pathTargetChain || \"\") === x.id\n      )?.id;\n\n      if (sourceChain === targetChain) {\n        return;\n      }\n      if (sourceChain) {\n        dispatch(setSourceChain(sourceChain));\n      }\n      if (targetChain) {\n        dispatch(setTargetChain(targetChain));\n      }\n    } catch (e) {\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathTargetChain, dispatch]);\n\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))}>Target</StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled>Send NFT</StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3} completed={isRedeemComplete}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete || isRedeemComplete}\n          >\n            Redeem NFT\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default NFT;\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_OASIS,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport {\n  Button,\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { getMetaplexData } from \"../hooks/useMetaplexData\";\nimport { COLORS } from \"../muiTheme\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BETA_CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  getEthereumNFT,\n  isNFT,\n  isValidEthereumAddress,\n} from \"../utils/ethereum\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport NFTViewer from \"./TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  originHeader: {\n    marginTop: theme.spacing(4),\n  },\n  viewButtonWrapper: {\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n  loaderWrapper: {\n    margin: theme.spacing(2),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function NFTOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const { provider, signerAddress } = useEthereumProvider();\n  const [lookupChain, setLookupChain] = useState(CHAIN_ID_ETH);\n  const { isReady, statusMessage } = useIsWalletReady(lookupChain);\n  const [lookupAsset, setLookupAsset] = useState(\"\");\n  const [lookupTokenId, setLookupTokenId] = useState(\"\");\n  const [lookupError, setLookupError] = useState(\"\");\n  const [parsedTokenAccount, setParsedTokenAccount] = useState<\n    NFTParsedTokenAccount | undefined\n  >(undefined);\n  const [originInfo, setOriginInfo] = useState<\n    WormholeWrappedNFTInfo | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleChainChange = useCallback((event) => {\n    setLookupChain(event.target.value);\n  }, []);\n  const handleAssetChange = useCallback((event) => {\n    setLookupAsset(event.target.value);\n  }, []);\n  const handleTokenIdChange = useCallback((event) => {\n    setLookupTokenId(event.target.value);\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    setLookupError(\"\");\n    setParsedTokenAccount(undefined);\n    setOriginInfo(undefined);\n    if (\n      isReady &&\n      provider &&\n      signerAddress &&\n      isEVMChain(lookupChain) &&\n      lookupAsset &&\n      lookupTokenId\n    ) {\n      if (isValidEthereumAddress(lookupAsset)) {\n        (async () => {\n          setIsLoading(true);\n          try {\n            const token = await getEthereumNFT(lookupAsset, provider);\n            const result = await isNFT(token);\n            if (result) {\n              const newParsedTokenAccount = await ethNFTToNFTParsedTokenAccount(\n                token,\n                lookupTokenId,\n                signerAddress\n              );\n              const info = await getOriginalAssetEth(\n                getNFTBridgeAddressForChain(lookupChain),\n                provider,\n                lookupAsset,\n                lookupTokenId,\n                lookupChain\n              );\n              if (!cancelled) {\n                setIsLoading(false);\n                setParsedTokenAccount(newParsedTokenAccount);\n                setOriginInfo(info);\n              }\n            } else if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          } catch (e) {\n            console.error(e);\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          }\n        })();\n      } else {\n        setLookupError(\"Invalid address\");\n      }\n    } else if (lookupChain === CHAIN_ID_SOLANA && lookupAsset) {\n      (async () => {\n        try {\n          setIsLoading(true);\n          const [metadata] = await getMetaplexData([lookupAsset]);\n          if (metadata) {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            const info = await getOriginalAssetSol(\n              connection,\n              SOL_NFT_BRIDGE_ADDRESS,\n              lookupAsset\n            );\n            if (!cancelled) {\n              setIsLoading(false);\n              setParsedTokenAccount({\n                amount: \"0\",\n                decimals: 0,\n                mintKey: lookupAsset,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\",\n                uri: metadata.data.uri,\n              });\n              setOriginInfo(info);\n            }\n          } else {\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\"Error fetching metadata\");\n            }\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            setIsLoading(false);\n            setLookupError(\"Invalid token\");\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    isReady,\n    provider,\n    signerAddress,\n    lookupChain,\n    lookupAsset,\n    lookupTokenId,\n  ]);\n  const readableAddress =\n    originInfo &&\n    originInfo.chainId &&\n    originInfo.assetAddress &&\n    hexToNativeString(\n      uint8ArrayToHex(originInfo.assetAddress),\n      originInfo.chainId\n    );\n  const displayError =\n    (isEVMChain(lookupChain) && statusMessage) || lookupError;\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <HeaderText white small>\n          NFT Origin Verifier\n        </HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>\n          <Alert severity=\"info\" variant=\"outlined\">\n            This page allows you to find where a Wormhole-bridged NFT was\n            originally minted so you can verify its authenticity.\n          </Alert>\n          <TextField\n            select\n            variant=\"outlined\"\n            label=\"Chain\"\n            value={lookupChain}\n            onChange={handleChainChange}\n            fullWidth\n            margin=\"normal\"\n          >\n            {CHAINS_WITH_NFT_SUPPORT.filter(({ id }) =>\n              isBeta ? true : !BETA_CHAINS.includes(id)\n            ).map(({ id, name }) => (\n              <MenuItem key={id} value={id}>\n                {name}\n              </MenuItem>\n            ))}\n          </TextField>\n          {isEVMChain(lookupChain) ? (\n            <KeyAndBalance chainId={lookupChain} />\n          ) : null}\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n            label=\"Paste an address\"\n            value={lookupAsset}\n            onChange={handleAssetChange}\n          />\n          {isEVMChain(lookupChain) ? (\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              label=\"Paste a tokenId\"\n              value={lookupTokenId}\n              onChange={handleTokenIdChange}\n            />\n          ) : null}\n          {displayError ? (\n            <Typography align=\"center\" color=\"error\">\n              {displayError}\n            </Typography>\n          ) : null}\n          {isLoading ? (\n            <div className={classes.loaderWrapper}>\n              <CircularProgress />\n            </div>\n          ) : null}\n          {parsedTokenAccount ? (\n            <NFTViewer value={parsedTokenAccount} chainId={lookupChain} />\n          ) : null}\n          {originInfo ? (\n            <>\n              <Typography\n                variant=\"h5\"\n                gutterBottom\n                className={classes.originHeader}\n              >\n                Origin Info\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Chain: {CHAINS_BY_ID[originInfo.chainId].name}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Address: {readableAddress}\n              </Typography>\n              {originInfo.chainId === CHAIN_ID_SOLANA ? null : (\n                <Typography variant=\"body2\" gutterBottom>\n                  Token ID: {originInfo.tokenId}\n                </Typography>\n              )}\n              <div className={classes.viewButtonWrapper}>\n                {originInfo.chainId === CHAIN_ID_SOLANA ? (\n                  <Button\n                    href={`https://solscan.io/token/${readableAddress}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Solscan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_BSC ? (\n                  <Button\n                    href={`https://bscscan.com/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on BscScan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_POLYGON ? (\n                  <Button\n                    href={`https://opensea.io/assets/matic/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_AVAX ? (\n                  <Button\n                    href={`https://snowtrace.io/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Snowtrace\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_OASIS ? null : (\n                  <Button\n                    href={`https://opensea.io/assets/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    endIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                )}\n              </div>\n            </>\n          ) : null}\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport {\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { getEvmChainId } from \"../../utils/consts\";\nimport {\n  ethTokenToParsedTokenAccount,\n  getEthereumToken,\n} from \"../../utils/ethereum\";\n\nconst useStyles = makeStyles((theme) => ({\n  addButton: {\n    display: \"block\",\n    margin: `${theme.spacing(1)}px auto 0px`,\n  },\n}));\n\nexport default function AddToMetamask() {\n  const classes = useStyles();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const handleClick = useCallback(() => {\n    if (provider && targetAsset && signerAddress && hasCorrectEvmNetwork) {\n      (async () => {\n        try {\n          const token = await getEthereumToken(targetAsset, provider);\n          const { symbol, decimals } = await ethTokenToParsedTokenAccount(\n            token,\n            signerAddress\n          );\n          const ethereum = (await detectEthereumProvider()) as any;\n          ethereum.request({\n            method: \"wallet_watchAsset\",\n            params: {\n              type: \"ERC20\", // In the future, other standards will be supported\n              options: {\n                address: targetAsset, // The address of the token contract\n                symbol: (\n                  symbol ||\n                  sourceParsedTokenAccount?.symbol ||\n                  \"wh\"\n                ).substr(0, 5), // A ticker symbol or shorthand, up to 5 characters\n                decimals, // The number of token decimals\n                // image: string; // A string url of the token logo\n              },\n            },\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      })();\n    }\n  }, [\n    provider,\n    targetAsset,\n    signerAddress,\n    hasCorrectEvmNetwork,\n    sourceParsedTokenAccount,\n  ]);\n  return provider &&\n    signerAddress &&\n    targetAsset &&\n    isEVMChain(targetChain) &&\n    hasCorrectEvmNetwork ? (\n    <Button\n      onClick={handleClick}\n      size=\"small\"\n      variant=\"outlined\"\n      className={classes.addButton}\n    >\n      Add to Metamask\n    </Button>\n  ) : null;\n}\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  isEVMChain,\n  WSOL_ADDRESS,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Checkbox,\n  FormControlLabel,\n  Link,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetIsTransferCompleted from \"../../hooks/useGetIsTransferCompleted\";\nimport { useHandleRedeem } from \"../../hooks/useHandleRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferIsRecovery,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport {\n  getHowToAddTokensToWalletUrl,\n  ROPSTEN_WETH_ADDRESS,\n  WAVAX_ADDRESS,\n  WBNB_ADDRESS,\n  WETH_ADDRESS,\n  WMATIC_ADDRESS,\n  WROSE_ADDRESS,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport SmartAddress from \"../SmartAddress\";\nimport { SolanaCreateAssociatedAddressAlternate } from \"../SolanaCreateAssociatedAddress\";\nimport StepDescription from \"../StepDescription\";\nimport AddToMetamask from \"./AddToMetamask\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Redeem() {\n  const { handleClick, handleNativeClick, disabled, showLoader } =\n    useHandleRedeem();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const isRecovery = useSelector(selectTransferIsRecovery);\n  const { isTransferCompletedLoading, isTransferCompleted } =\n    useGetIsTransferCompleted(true);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  //TODO better check, probably involving a hook & the VAA\n  const isEthNative =\n    targetChain === CHAIN_ID_ETH &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WETH_ADDRESS.toLowerCase();\n  const isEthRopstenNative =\n    targetChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n    targetAsset &&\n    targetAsset.toLowerCase() === ROPSTEN_WETH_ADDRESS.toLowerCase();\n  const isBscNative =\n    targetChain === CHAIN_ID_BSC &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WBNB_ADDRESS.toLowerCase();\n  const isPolygonNative =\n    targetChain === CHAIN_ID_POLYGON &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WMATIC_ADDRESS.toLowerCase();\n  const isAvaxNative =\n    targetChain === CHAIN_ID_AVAX &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WAVAX_ADDRESS.toLowerCase();\n  const isOasisNative =\n    targetChain === CHAIN_ID_OASIS &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WROSE_ADDRESS.toLowerCase();\n  const isSolNative =\n    targetChain === CHAIN_ID_SOLANA &&\n    targetAsset &&\n    targetAsset === WSOL_ADDRESS;\n  const isNativeEligible =\n    isEthNative ||\n    isEthRopstenNative ||\n    isBscNative ||\n    isPolygonNative ||\n    isAvaxNative ||\n    isOasisNative ||\n    isSolNative;\n  const [useNativeRedeem, setUseNativeRedeem] = useState(true);\n  const toggleNativeRedeem = useCallback(() => {\n    setUseNativeRedeem(!useNativeRedeem);\n  }, [useNativeRedeem]);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const howToAddTokensUrl = getHowToAddTokensToWalletUrl(targetChain);\n\n  return (\n    <>\n      <StepDescription>Receive the tokens on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      {isNativeEligible && (\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={useNativeRedeem}\n              onChange={toggleNativeRedeem}\n              color=\"primary\"\n            />\n          }\n          label=\"Automatically unwrap to native currency\"\n        />\n      )}\n      {targetChain === CHAIN_ID_SOLANA ? (\n        <SolanaCreateAssociatedAddressAlternate />\n      ) : null}\n\n      <ButtonWithLoader\n        //TODO disable when the associated token account is confirmed to not exist\n        disabled={\n          !isReady ||\n          disabled ||\n          (isRecovery && (isTransferCompletedLoading || isTransferCompleted))\n        }\n        onClick={\n          isNativeEligible && useNativeRedeem ? handleNativeClick : handleClick\n        }\n        showLoader={showLoader || (isRecovery && isTransferCompletedLoading)}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n\n      {isRecovery && isReady && isTransferCompleted ? (\n        <>\n          <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n            These tokens have already been redeemed.{\" \"}\n            {!isEVMChain(targetChain) && howToAddTokensUrl ? (\n              <Link\n                href={howToAddTokensUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Click here to see how to add them to your wallet.\n              </Link>\n            ) : null}\n          </Alert>\n          {targetAsset ? (\n            <>\n              <span>Token Address:</span>\n              <SmartAddress\n                chainId={targetChain}\n                address={targetAsset || undefined}\n              />\n            </>\n          ) : null}\n          {isEVMChain(targetChain) ? <AddToMetamask /> : null}\n          <ButtonWithLoader onClick={handleResetClick}>\n            Transfer More Tokens!\n          </ButtonWithLoader>\n        </>\n      ) : null}\n    </>\n  );\n}\n\nexport default Redeem;\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getIsTransferCompletedEth,\n  getIsTransferCompletedSolana,\n  getIsTransferCompletedTerra,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  selectTransferIsRecovery,\n  selectTransferTargetAddressHex,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  TERRA_GAS_PRICES_URL,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\n/**\n * @param recoveryOnly Only fire when in recovery mode\n */\nexport default function useGetIsTransferCompleted(recoveryOnly: boolean): {\n  isTransferCompletedLoading: boolean;\n  isTransferCompleted: boolean;\n} {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTransferCompleted, setIsTransferCompleted] = useState(false);\n\n  const isRecovery = useSelector(selectTransferIsRecovery);\n  const targetAddress = useSelector(selectTransferTargetAddressHex);\n  const targetChain = useSelector(selectTransferTargetChain);\n\n  const { isReady, walletAddress } = useIsWalletReady(targetChain, false);\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const signedVAA = useTransferSignedVAA();\n\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const shouldFire = !recoveryOnly || isRecovery;\n\n  useEffect(() => {\n    if (!shouldFire) {\n      return;\n    }\n\n    let cancelled = false;\n    let transferCompleted = false;\n    if (targetChain && targetAddress && signedVAA && isReady) {\n      if (isEVMChain(targetChain) && hasCorrectEvmNetwork && provider) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            transferCompleted = await getIsTransferCompletedEth(\n              getTokenBridgeAddressForChain(targetChain),\n              provider,\n              signedVAA\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_SOLANA) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            transferCompleted = await getIsTransferCompletedSolana(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              connection\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_TERRA && walletAddress) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const lcdClient = new LCDClient(TERRA_HOST);\n            transferCompleted = await getIsTransferCompletedTerra(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              walletAddress,\n              lcdClient,\n              TERRA_GAS_PRICES_URL\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      }\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    shouldFire,\n    hasCorrectEvmNetwork,\n    targetChain,\n    targetAddress,\n    signedVAA,\n    isReady,\n    walletAddress,\n    provider,\n  ]);\n\n  return { isTransferCompletedLoading: isLoading, isTransferCompleted };\n}\n","import { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport {\n  selectSolanaTokenMap,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { JUPITER_SWAP_BASE_URL } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginTop: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(0.5, 0.5),\n  },\n}));\n\nfunction getJupiterSwapUrl(\n  link: string,\n  targetAsset: string,\n  tokenMap: DataWrapper<TokenInfo[]>\n) {\n  if (!tokenMap.error && !tokenMap.isFetching && tokenMap.data) {\n    const tokenInfo = tokenMap.data.find((value) => {\n      return value.address === targetAsset;\n    });\n    if (tokenInfo) {\n      const sourceSymbol = tokenInfo.symbol;\n      if (sourceSymbol) {\n        const targetSymbol = sourceSymbol === \"UST\" ? \"SOL\" : \"UST\";\n        return `${JUPITER_SWAP_BASE_URL}/${sourceSymbol}-${targetSymbol}`;\n      }\n    }\n  }\n  return link;\n}\n\nexport default function FeaturedMarkets() {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const solanaTokenMap = useSelector(selectSolanaTokenMap);\n  const { data: marketsData } = useMarketsMap(true);\n  const classes = useStyles();\n\n  if (\n    !sourceAsset ||\n    !targetAsset ||\n    !marketsData ||\n    !marketsData.markets ||\n    !marketsData.tokenMarkets\n  ) {\n    return null;\n  }\n\n  const tokenMarkets =\n    marketsData.tokenMarkets[sourceChain]?.[targetChain]?.[sourceAsset];\n  if (!tokenMarkets) {\n    return null;\n  }\n\n  const tokenMarketButtons = [];\n  for (const market of tokenMarkets.markets) {\n    const marketInfo = marketsData.markets[market];\n    if (marketInfo) {\n      const url =\n        market === \"jupiter\"\n          ? getJupiterSwapUrl(marketInfo.link, sourceAsset, solanaTokenMap)\n          : marketInfo.link;\n      tokenMarketButtons.push(\n        <Button\n          key={market}\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          endIcon={<Launch />}\n          href={url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.button}\n        >\n          {marketInfo.name}\n        </Button>\n      );\n    }\n  }\n\n  return tokenMarketButtons.length ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography\n        variant=\"subtitle2\"\n        gutterBottom\n        className={classes.description}\n      >\n        Featured markets\n      </Typography>\n      {tokenMarketButtons}\n    </div>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport AddToMetamask from \"./AddToMetamask\";\nimport FeaturedMarkets from \"./FeaturedMarkets\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The tokens will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <AddToMetamask />\n      <FeaturedMarkets />\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer More Tokens!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  transferFromEth,\n  transferFromEthNative,\n  transferFromSolana,\n  transferFromTerra,\n  transferNativeSol,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { parseUnits, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n  selectTransferIsTargetComplete,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/transferSlice\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport useTransferTargetAddressHex from \"./useTransferTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals);\n    const receipt = isNative\n      ? await transferFromEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        )\n      : await transferFromEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          tokenAddress,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  isNative: boolean,\n  originAddressStr?: string,\n  originChain?: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const amountParsed = parseUnits(amount, decimals).toBigInt();\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const promise = isNative\n      ? transferNativeSol(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          amountParsed,\n          targetAddress,\n          targetChain\n        )\n      : transferFromSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          fromAddress,\n          mintAddress,\n          amountParsed,\n          targetAddress,\n          targetChain,\n          originAddress,\n          originChain\n        );\n    const transaction = await promise;\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals).toString();\n    const msgs = await transferFromTerra(\n      wallet.terraAddress,\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      asset,\n      amountParsed,\n      targetChain,\n      targetAddress\n    );\n\n    const result = await postWithFees(\n      wallet,\n      msgs,\n      \"Wormhole - Initiate Transfer\"\n    );\n\n    const info = await waitForTerraExecution(result);\n    dispatch(setTransferTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const amount = useSelector(selectTransferAmount);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddress = useTransferTargetAddressHex();\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const decimals = sourceParsedTokenAccount?.decimals;\n  const isNative = sourceParsedTokenAccount?.isNativeAsset || false;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        isNative,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress &&\n      decimals !== undefined\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        isNative,\n        originAsset,\n        originChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_TERRA &&\n      !!terraWallet &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceTokenPublicKey,\n    sourceAsset,\n    amount,\n    decimals,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    isNative,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferTargetAddressHex() {\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { ChainId, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type EvmMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst ERC20_BASIC_ABI = [\n  \"function name() view returns (string name)\",\n  \"function symbol() view returns (string symbol)\",\n  \"function decimals() view returns (uint8 decimals)\",\n];\n\nconst handleError = () => {\n  return undefined;\n};\n\nconst fetchSingleMetadata = async (\n  address: string,\n  provider: Provider\n): Promise<EvmMetadata> => {\n  const contract = new ethers.Contract(address, ERC20_BASIC_ABI, provider);\n  const [name, symbol, decimals] = await Promise.all([\n    contract.name().catch(handleError),\n    contract.symbol().catch(handleError),\n    contract.decimals().catch(handleError),\n  ]);\n  return { tokenName: name, symbol, decimals };\n};\n\nconst fetchEthMetadata = async (addresses: string[], provider: Provider) => {\n  const promises: Promise<EvmMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, provider));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, EvmMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useEvmMetadata(\n  addresses: string[],\n  chainId: ChainId\n): DataWrapper<Map<string, EvmMetadata>> {\n  const { isReady } = useIsWalletReady(chainId, false);\n  const { provider } = useEthereumProvider();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, EvmMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length && provider && isReady && isEVMChain(chainId)) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchEthMetadata(addresses, provider).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, provider, isReady, chainId]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useEvmMetadata;\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport type TerraMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (address: string, lcd: LCDClient) =>\n  lcd.wasm\n    .contractQuery(address, {\n      token_info: {},\n    })\n    .then(\n      ({ symbol, name: tokenName, decimals }: any) =>\n        ({\n          symbol,\n          tokenName,\n          decimals,\n        } as TerraMetadata)\n    );\n\nconst fetchTerraMetadata = async (addresses: string[]) => {\n  const lcd = new LCDClient(TERRA_HOST);\n  const promises: Promise<TerraMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, lcd));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, TerraMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useTerraMetadata = (\n  addresses: string[]\n): DataWrapper<Map<string, TerraMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, TerraMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchTerraMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useTerraMetadata;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectTerraTokenMap } from \"../store/selectors\";\nimport {\n  errorTerraTokenMap,\n  fetchTerraTokenMap,\n  receiveTerraTokenMap,\n} from \"../store/tokenSlice\";\nimport { TERRA_TOKEN_METADATA_URL } from \"../utils/consts\";\n\nexport type TerraTokenMetadata = {\n  protocol: string;\n  symbol: string;\n  token: string;\n  icon: string;\n  name?: string;\n  balance?: string; // populated by native tokens, could move to a type that extends this\n};\n\nexport type TerraTokenMap = {\n  mainnet: {\n    [address: string]: TerraTokenMetadata;\n  };\n};\n\nconst useTerraTokenMap = (shouldFire: boolean): DataWrapper<TerraTokenMap> => {\n  const terraTokenMap = useSelector(selectTerraTokenMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (terraTokenMap.data === undefined ||\n      (terraTokenMap.data === null && !terraTokenMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getTerraTokenMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return terraTokenMap;\n};\n\nconst getTerraTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchTerraTokenMap());\n  axios.get(TERRA_TOKEN_METADATA_URL).then(\n    (response) => {\n      dispatch(receiveTerraTokenMap(response.data as TerraTokenMap));\n    },\n    (error) => {\n      dispatch(errorTerraTokenMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useTerraTokenMap;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useMemo } from \"react\";\nimport { DataWrapper, getEmptyDataWrapper } from \"../store/helpers\";\nimport { logoOverrides } from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useEvmMetadata, { EvmMetadata } from \"./useEvmMetadata\";\nimport useMetaplexData from \"./useMetaplexData\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraMetadata, { TerraMetadata } from \"./useTerraMetadata\";\nimport useTerraTokenMap, { TerraTokenMap } from \"./useTerraTokenMap\";\n\nexport type GenericMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n  //TODO more items\n  raw?: any;\n};\n\nconst constructSolanaMetadata = (\n  addresses: string[],\n  solanaTokenMap: DataWrapper<TokenInfo[]>,\n  metaplexData: DataWrapper<Map<string, Metadata | undefined> | undefined>\n) => {\n  const isFetching = solanaTokenMap.isFetching || metaplexData?.isFetching;\n  const error = solanaTokenMap.error || metaplexData?.isFetching;\n  const receivedAt = solanaTokenMap.receivedAt && metaplexData?.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metaplex = metaplexData?.data?.get(address);\n    const tokenInfo = solanaTokenMap.data?.find((x) => x.address === address);\n    //Both this and the token picker, at present, give priority to the tokenmap\n    const obj = {\n      symbol: metaplex?.data?.symbol || tokenInfo?.symbol || undefined,\n      logo: tokenInfo?.logoURI || undefined, //TODO is URI on metaplex actually the logo? If not, where is it?\n      tokenName: metaplex?.data?.name || tokenInfo?.name || undefined,\n      decimals: tokenInfo?.decimals || undefined, //TODO decimals are actually on the mint, not the metaplex account.\n      raw: metaplex,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructTerraMetadata = (\n  addresses: string[],\n  tokenMap: DataWrapper<TerraTokenMap>,\n  terraMetadata: DataWrapper<Map<string, TerraMetadata>>\n) => {\n  const isFetching = tokenMap.isFetching || terraMetadata.isFetching;\n  const error = tokenMap.error || terraMetadata.error;\n  const receivedAt = tokenMap.receivedAt && terraMetadata.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metadata = terraMetadata.data?.get(address);\n    const tokenInfo = tokenMap.data?.mainnet[address];\n    const obj = {\n      symbol: tokenInfo?.symbol || metadata?.symbol || undefined,\n      logo: tokenInfo?.icon || metadata?.logo || undefined,\n      tokenName: tokenInfo?.name || metadata?.tokenName || undefined,\n      decimals: metadata?.decimals || undefined,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructEthMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, EvmMetadata> | null>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: logoOverrides.get(address) || meta?.logo || undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nexport default function useMetadata(\n  chainId: ChainId,\n  addresses: string[]\n): DataWrapper<Map<string, GenericMetadata>> {\n  const terraTokenMap = useTerraTokenMap(chainId === CHAIN_ID_TERRA);\n  const solanaTokenMap = useSolanaTokenMap();\n\n  const solanaAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_SOLANA ? addresses : [];\n  }, [chainId, addresses]);\n  const terraAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_TERRA ? addresses : [];\n  }, [chainId, addresses]);\n  const ethereumAddresses = useMemo(() => {\n    return isEVMChain(chainId) ? addresses : [];\n  }, [chainId, addresses]);\n\n  const metaplexData = useMetaplexData(solanaAddresses);\n  const terraMetadata = useTerraMetadata(terraAddresses);\n  const ethMetadata = useEvmMetadata(ethereumAddresses, chainId);\n\n  const output: DataWrapper<Map<string, GenericMetadata>> = useMemo(\n    () =>\n      chainId === CHAIN_ID_SOLANA\n        ? constructSolanaMetadata(solanaAddresses, solanaTokenMap, metaplexData)\n        : isEVMChain(chainId)\n        ? constructEthMetadata(ethereumAddresses, ethMetadata)\n        : chainId === CHAIN_ID_TERRA\n        ? constructTerraMetadata(terraAddresses, terraTokenMap, terraMetadata)\n        : getEmptyDataWrapper(),\n    [\n      chainId,\n      solanaAddresses,\n      solanaTokenMap,\n      metaplexData,\n      ethereumAddresses,\n      ethMetadata,\n      terraAddresses,\n      terraMetadata,\n      terraTokenMap,\n    ]\n  );\n\n  return output;\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetParsedTokenAccount } from \"../store/transferSlice\";\nimport { getEvmChainId, SOLANA_HOST, TERRA_HOST } from \"../utils/consts\";\nimport { createParsedTokenAccount } from \"./useGetSourceParsedTokenAccounts\";\nimport useMetadata from \"./useMetadata\";\n\nfunction useGetTargetParsedTokenAccounts() {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetAssetArrayed = useMemo(\n    () => (targetAsset ? [targetAsset] : []),\n    [targetAsset]\n  );\n  const metadata = useMetadata(targetChain, targetAssetArrayed);\n  const tokenName =\n    (targetAsset && metadata.data?.get(targetAsset)?.tokenName) || undefined;\n  const symbol =\n    (targetAsset && metadata.data?.get(targetAsset)?.symbol) || undefined;\n  const logo =\n    (targetAsset && metadata.data?.get(targetAsset)?.logo) || undefined;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const hasResolvedMetadata = metadata.data || metadata.error;\n  useEffect(() => {\n    // targetParsedTokenAccount is cleared on setTargetAsset, but we need to clear it on wallet changes too\n    dispatch(setTargetParsedTokenAccount(undefined));\n    if (!targetAsset || !hasResolvedMetadata) {\n      return;\n    }\n    let cancelled = false;\n\n    if (targetChain === CHAIN_ID_TERRA && terraWallet) {\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.wasm\n        .contractQuery(targetAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(targetAsset, {\n              balance: {\n                address: terraWallet.walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                dispatch(\n                  setTargetParsedTokenAccount(\n                    createParsedTokenAccount(\n                      \"\",\n                      \"\",\n                      balance.balance.toString(),\n                      info.decimals,\n                      Number(formatUnits(balance.balance, info.decimals)),\n                      formatUnits(balance.balance, info.decimals),\n                      symbol,\n                      tokenName,\n                      logo\n                    )\n                  )\n                );\n              }\n            })\n        );\n    }\n    if (targetChain === CHAIN_ID_SOLANA && solPK) {\n      let mint;\n      try {\n        mint = new PublicKey(targetAsset);\n      } catch (e) {\n        return;\n      }\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      connection\n        .getParsedTokenAccountsByOwner(solPK, { mint })\n        .then(({ value }) => {\n          if (!cancelled) {\n            if (value.length) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    value[0].pubkey.toString(),\n                    value[0].account.data.parsed?.info?.mint,\n                    value[0].account.data.parsed?.info?.tokenAmount?.amount,\n                    value[0].account.data.parsed?.info?.tokenAmount?.decimals,\n                    value[0].account.data.parsed?.info?.tokenAmount?.uiAmount,\n                    value[0].account.data.parsed?.info?.tokenAmount\n                      ?.uiAmountString,\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            } else {\n              // TODO: error state\n            }\n          }\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    if (\n      isEVMChain(targetChain) &&\n      provider &&\n      signerAddress &&\n      hasCorrectEvmNetwork\n    ) {\n      const token = TokenImplementation__factory.connect(targetAsset, provider);\n      token\n        .decimals()\n        .then((decimals) => {\n          token.balanceOf(signerAddress).then((n) => {\n            if (!cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  // TODO: verify accuracy\n                  createParsedTokenAccount(\n                    signerAddress,\n                    token.address,\n                    n.toString(),\n                    decimals,\n                    Number(formatUnits(n, decimals)),\n                    formatUnits(n, decimals),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          });\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    targetAsset,\n    targetChain,\n    provider,\n    signerAddress,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    hasCorrectEvmNetwork,\n    hasResolvedMetadata,\n    symbol,\n    tokenName,\n    logo,\n  ]);\n}\n\nexport default useGetTargetParsedTokenAccounts;\n","import { Button } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  setSourceAsset,\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestSignedVAAHex,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { ChainId, hexToNativeString } from \"@certusone/wormhole-sdk\";\n\nexport function RegisterNowButtonCore({\n  originChain,\n  originAsset,\n  targetChain,\n}: {\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  targetChain: ChainId;\n}) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  // user might be in the middle of a different attest\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const canSwitch = originChain && originAsset && !signedVAAHex;\n  const handleClick = useCallback(() => {\n    const nativeAsset =\n      originChain && hexToNativeString(originAsset, originChain);\n    if (originChain && originAsset && nativeAsset && canSwitch) {\n      dispatch(setSourceChain(originChain));\n      dispatch(setSourceAsset(nativeAsset));\n      dispatch(setTargetChain(targetChain));\n      dispatch(setStep(2));\n      history.push(\"/register\");\n    }\n  }, [dispatch, canSwitch, originChain, originAsset, targetChain, history]);\n  if (!canSwitch) return null;\n  return (\n    <Button\n      variant=\"outlined\"\n      size=\"small\"\n      style={{ display: \"block\", margin: \"4px auto 0px\" }}\n      onClick={handleClick}\n    >\n      Register Now\n    </Button>\n  );\n}\n\nexport default function RegisterNowButton() {\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  return (\n    <RegisterNowButtonCore\n      originChain={originChain}\n      originAsset={originAsset}\n      targetChain={targetChain}\n    />\n  );\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  hexToNativeString,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetTargetParsedTokenAccounts from \"../../hooks/useGetTargetParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport {\n  selectTransferAmount,\n  selectTransferIsTargetComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceChain,\n  selectTransferTargetAddressHex,\n  selectTransferTargetAsset,\n  selectTransferTargetAssetWrapper,\n  selectTransferTargetBalanceString,\n  selectTransferTargetChain,\n  selectTransferTargetError,\n  selectTransferTargetParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { incrementStep, setTargetChain } from \"../../store/transferSlice\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport StepDescription from \"../StepDescription\";\nimport RegisterNowButton from \"./RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport const useTargetInfo = () => {\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const tokenName = targetParsedTokenAccount?.name;\n  const symbol = targetParsedTokenAccount?.symbol;\n  const logo = targetParsedTokenAccount?.logo;\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  return useMemo(\n    () => ({\n      targetChain,\n      targetAsset,\n      tokenName,\n      symbol,\n      logo,\n      readableTargetAddress,\n    }),\n    [targetChain, targetAsset, tokenName, symbol, logo, readableTargetAddress]\n  );\n};\n\nfunction Target() {\n  useGetTargetParsedTokenAccounts();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const { error: targetAssetError, data } = useSelector(\n    selectTransferTargetAssetWrapper\n  );\n  const {\n    targetChain,\n    targetAsset,\n    tokenName,\n    symbol,\n    logo,\n    readableTargetAddress,\n  } = useTargetInfo();\n  const uiAmountString = useSelector(selectTransferTargetBalanceString);\n  const transferAmount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferTargetError);\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  const isLoading = !statusMessage && !targetAssetError && !data;\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      targetChain,\n      targetAsset,\n      readableTargetAddress\n    );\n  useSyncTargetAddress(!shouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={true}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      {readableTargetAddress ? (\n        <>\n          {targetAsset ? (\n            <div className={classes.transferField}>\n              <Typography variant=\"subtitle2\">Bridged tokens:</Typography>\n              <Typography component=\"div\">\n                <SmartAddress\n                  chainId={targetChain}\n                  address={targetAsset}\n                  symbol={symbol}\n                  tokenName={tokenName}\n                  logo={logo}\n                  variant=\"h6\"\n                />\n                {`(Amount: ${transferAmount})`}\n              </Typography>\n            </div>\n          ) : null}\n          <div className={classes.transferField}>\n            <Typography variant=\"subtitle2\">Sent to:</Typography>\n            <Typography component=\"div\">\n              <SmartAddress\n                chainId={targetChain}\n                address={readableTargetAddress}\n                variant=\"h6\"\n              />\n              {`(Current balance: ${uiAmountString || \"0\"})`}\n            </Typography>\n          </div>\n        </>\n      ) : null}\n      {targetChain === CHAIN_ID_SOLANA && targetAsset ? (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={readableTargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your tokens.\n        </Typography>\n        {(isEVMChain(targetChain) || targetChain === CHAIN_ID_TERRA) && (\n          <GasEstimateSummary methodType=\"transfer\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete || !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={isLoading}\n        error={\n          statusMessage || (isLoading ? undefined : error || targetAssetError)\n        }\n      >\n        Next\n      </ButtonWithLoader>\n      {!statusMessage && data && !data.doesExist ? <RegisterNowButton /> : null}\n    </>\n  );\n}\n\nexport default Target;\n","import { ChainId, CHAIN_ID_ETH, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Box, Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  AVAILABLE_MARKETS_URL,\n  CHAINS_BY_ID,\n  MULTI_CHAIN_TOKENS,\n} from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    textAlign: \"center\",\n  },\n  line: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction WormholeWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n      <Typography component=\"div\" className={classes.line}>\n        The tokens you will receive are{\" \"}\n        <Box fontWeight={900} display=\"inline\">\n          Wormhole Wrapped Tokens\n        </Box>{\" \"}\n        and will need to be exchanged for native assets.\n      </Typography>\n      <Typography component=\"div\">\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction MultichainWarning({\n  symbol,\n  targetChain,\n}: {\n  symbol: string;\n  targetChain: ChainId;\n}) {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography\n        variant=\"h6\"\n        className={classes.line}\n      >{`You will not receive native ${symbol} on ${CHAINS_BY_ID[targetChain].name}`}</Typography>\n      <Typography\n        className={classes.line}\n      >{`To receive native ${symbol}, you will have to perform a swap with the wrapped tokens once you are done bridging.`}</Typography>\n      <Typography>\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction RewardsWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      Lido stETH rewards can only be received on Ethereum. Use the value\n      accruing wrapper token wstETH instead.\n    </Alert>\n  );\n}\n\nexport default function TokenWarning({\n  sourceChain,\n  sourceAsset,\n  originChain,\n  targetChain,\n  targetAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (\n    !(originChain && targetChain && targetAsset && sourceChain && sourceAsset)\n  ) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const isWormholeWrapped = originChain !== targetChain;\n  const multichainSymbol =\n    MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress] || undefined;\n  const isMultiChain = !!multichainSymbol;\n  const isRewardsToken =\n    searchableAddress === \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\" &&\n    sourceChain === CHAIN_ID_ETH;\n\n  const showMultiChainWarning = isMultiChain && isWormholeWrapped;\n  const showWrappedWarning = !isMultiChain && isWormholeWrapped; //Multichain warning is more important\n  const showRewardsWarning = isRewardsToken;\n\n  return (\n    <>\n      {showMultiChainWarning ? (\n        <MultichainWarning\n          symbol={multichainSymbol || \"tokens\"}\n          targetChain={targetChain}\n        />\n      ) : null}\n      {showWrappedWarning ? <WormholeWrappedWarning /> : null}\n      {showRewardsWarning ? <RewardsWarning /> : null}\n    </>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowDownward } from \"@material-ui/icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferOriginChain,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, MULTI_CHAIN_TOKENS } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\nimport TokenWarning from \"./TokenWarning\";\n\nfunction SendConfirmationContent({\n  open,\n  onClose,\n  onClick,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onClick: () => void;\n}) {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const { targetChain, targetAsset, symbol, tokenName, logo } = useTargetInfo();\n  const originChain = useSelector(selectTransferOriginChain);\n\n  //TODO this check is essentially duplicated.\n  const deservesTimeout = useMemo(() => {\n    if (originChain && sourceParsedTokenAccount?.mintKey) {\n      const searchableAddress = isEVMChain(originChain)\n        ? sourceParsedTokenAccount.mintKey.toLowerCase()\n        : sourceParsedTokenAccount.mintKey;\n      return (\n        originChain !== targetChain &&\n        !!MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress]\n      );\n    } else {\n      return false;\n    }\n  }, [originChain, targetChain, sourceChain, sourceParsedTokenAccount]);\n  const timeoutDuration = 5;\n\n  const [countdown, setCountdown] = useState(\n    deservesTimeout ? timeoutDuration : 0\n  );\n\n  useEffect(() => {\n    if (!deservesTimeout || countdown === 0) {\n      return;\n    }\n    let cancelled = false;\n\n    setInterval(() => {\n      if (!cancelled) {\n        setCountdown((state) => state - 1);\n      }\n    }, 1000);\n\n    return () => {\n      cancelled = true;\n    };\n  }, [deservesTimeout, countdown]);\n\n  useEffect(() => {\n    if (open && deservesTimeout) {\n      //Countdown starts on mount, but we actually want it to start on open\n      setCountdown(timeoutDuration);\n    }\n  }, [open, deservesTimeout]);\n\n  const sendConfirmationContent = (\n    <>\n      <DialogTitle>Are you sure?</DialogTitle>\n      <DialogContent>\n        {targetAsset ? (\n          <div style={{ textAlign: \"center\", marginBottom: 16 }}>\n            <Typography variant=\"subtitle1\" style={{ marginBottom: 8 }}>\n              You are about to perform this transfer:\n            </Typography>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={sourceChain}\n              parsedTokenAccount={sourceParsedTokenAccount}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[sourceChain].name}\n              </Typography>\n            </div>\n            <div style={{ paddingTop: 4 }}>\n              <ArrowDownward fontSize=\"inherit\" />\n            </div>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[targetChain].name}\n              </Typography>\n            </div>\n          </div>\n        ) : null}\n        <TokenWarning\n          sourceAsset={sourceParsedTokenAccount?.mintKey}\n          sourceChain={sourceChain}\n          originChain={originChain}\n          targetAsset={targetAsset ?? undefined}\n          targetChain={targetChain}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClick}\n          size={\"medium\"}\n          disabled={!!countdown}\n        >\n          {!!countdown ? countdown.toString() : \"Confirm\"}\n        </Button>\n      </DialogActions>\n    </>\n  );\n\n  return sendConfirmationContent;\n}\n\nexport default function SendConfirmationDialog({\n  open,\n  onClick,\n  onClose,\n}: {\n  open: boolean;\n  onClick: () => void;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <SendConfirmationContent\n        open={open}\n        onClose={onClose}\n        onClick={onClick}\n      />\n    </Dialog>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useAllowance from \"../../hooks/useAllowance\";\nimport { useHandleTransfer } from \"../../hooks/useHandleTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetError,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport StepDescription from \"../StepDescription\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport SendConfirmationDialog from \"./SendConfirmationDialog\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleTransfer();\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n  const handleTransferClick = useCallback(() => {\n    setIsConfirmOpen(true);\n  }, []);\n  const handleConfirmClick = useCallback(() => {\n    handleClick();\n    setIsConfirmOpen(false);\n  }, [handleClick]);\n  const handleConfirmClose = useCallback(() => {\n    setIsConfirmOpen(false);\n  }, []);\n\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const sourceAmount = useSelector(selectTransferAmount);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceDecimals = sourceParsedTokenAccount?.decimals;\n  const sourceIsNative = sourceParsedTokenAccount?.isNativeAsset;\n  const sourceAmountParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    sourceAmount &&\n    parseUnits(sourceAmount, sourceDecimals).toBigInt();\n  const oneParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    parseUnits(\"1\", sourceDecimals).toBigInt();\n  const transferTx = useSelector(selectTransferTransferTx);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n\n  const error = useSelector(selectTransferTargetError);\n  const [allowanceError, setAllowanceError] = useState(\"\");\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const [shouldApproveUnlimited, setShouldApproveUnlimited] = useState(false);\n  const toggleShouldApproveUnlimited = useCallback(\n    () => setShouldApproveUnlimited(!shouldApproveUnlimited),\n    [shouldApproveUnlimited]\n  );\n\n  const {\n    sufficientAllowance,\n    isAllowanceFetching,\n    isApproveProcessing,\n    approveAmount,\n  } = useAllowance(\n    sourceChain,\n    sourceAsset,\n    sourceAmountParsed || undefined,\n    sourceIsNative\n  );\n\n  const approveButtonNeeded = isEVMChain(sourceChain) && !sufficientAllowance;\n  const notOne = shouldApproveUnlimited || sourceAmountParsed !== oneParsed;\n  const isDisabled =\n    !isReady ||\n    isWrongWallet ||\n    disabled ||\n    isAllowanceFetching ||\n    isApproveProcessing;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || allowanceError || undefined;\n\n  const approveExactAmount = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(BigInt(sourceAmountParsed)).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount, sourceAmountParsed]);\n  const approveUnlimited = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(ethers.constants.MaxUint256.toBigInt()).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount]);\n\n  return (\n    <>\n      <StepDescription>\n        Transfer the tokens to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {approveButtonNeeded ? (\n        <>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={shouldApproveUnlimited}\n                onChange={toggleShouldApproveUnlimited}\n                color=\"primary\"\n              />\n            }\n            label=\"Approve Unlimited Tokens\"\n          />\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={\n              shouldApproveUnlimited ? approveUnlimited : approveExactAmount\n            }\n            showLoader={isAllowanceFetching || isApproveProcessing}\n            error={errorMessage}\n          >\n            {\"Approve \" +\n              (shouldApproveUnlimited ? \"Unlimited\" : sourceAmount) +\n              ` Token${notOne ? \"s\" : \"\"}`}\n          </ButtonWithLoader>\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={handleTransferClick}\n            showLoader={showLoader}\n            error={errorMessage}\n          >\n            Transfer\n          </ButtonWithLoader>\n          <SendConfirmationDialog\n            open={isConfirmOpen}\n            onClick={handleConfirmClick}\n            onClose={handleConfirmClose}\n          />\n        </>\n      )}\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import {\n  approveEth,\n  ChainId,\n  getAllowanceEth,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { selectTransferIsApproving } from \"../store/selectors\";\nimport { setIsApproving } from \"../store/transferSlice\";\nimport { getTokenBridgeAddressForChain } from \"../utils/consts\";\n\nexport default function useAllowance(\n  chainId: ChainId,\n  tokenAddress?: string,\n  transferAmount?: BigInt,\n  sourceIsNative?: boolean\n) {\n  const dispatch = useDispatch();\n  const [allowance, setAllowance] = useState<BigInt | null>(null);\n  const [isAllowanceFetching, setIsAllowanceFetching] = useState(false);\n  const isApproveProcessing = useSelector(selectTransferIsApproving);\n  const { signer } = useEthereumProvider();\n  const sufficientAllowance =\n    !isEVMChain(chainId) ||\n    sourceIsNative ||\n    (allowance && transferAmount && allowance >= transferAmount);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (isEVMChain(chainId) && tokenAddress && signer && !isApproveProcessing) {\n      setIsAllowanceFetching(true);\n      getAllowanceEth(\n        getTokenBridgeAddressForChain(chainId),\n        tokenAddress,\n        signer\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            setAllowance(result.toBigInt());\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            //setError(\"Unable to retrieve allowance\"); //TODO set an error\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [chainId, tokenAddress, signer, isApproveProcessing]);\n\n  const approveAmount: (amount: BigInt) => Promise<any> = useMemo(() => {\n    return !isEVMChain(chainId) || !tokenAddress || !signer\n      ? (amount: BigInt) => {\n          return Promise.resolve();\n        }\n      : (amount: BigInt) => {\n          dispatch(setIsApproving(true));\n          return approveEth(\n            getTokenBridgeAddressForChain(chainId),\n            tokenAddress,\n            signer,\n            BigNumber.from(amount)\n          ).then(\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.resolve();\n            },\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.reject();\n            }\n          );\n        };\n  }, [chainId, tokenAddress, signer, dispatch]);\n\n  return useMemo(\n    () => ({\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    }),\n    [\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    ]\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferSourceChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const transferTx = useSelector(selectTransferTransferTx);\n\n  const explainerString = \"The tokens have entered the bridge!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","import { IconButton } from \"@material-ui/core\";\nimport { ArrowForward, SwapHoriz } from \"@material-ui/icons\";\nimport { useState } from \"react\";\n\nexport default function ChainSelectArrow({\n  onClick,\n  disabled,\n}: {\n  onClick: () => void;\n  disabled: boolean;\n}) {\n  const [showSwap, setShowSwap] = useState(false);\n\n  return (\n    <IconButton\n      onClick={onClick}\n      onMouseEnter={() => {\n        setShowSwap(true);\n      }}\n      onMouseLeave={() => {\n        setShowSwap(false);\n      }}\n      disabled={disabled}\n    >\n      {showSwap ? <SwapHoriz /> : <ArrowForward />}\n    </IconButton>\n  );\n}\n","import { ChainId, CHAIN_ID_POLYGON, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { POLYGON_TERRA_WRAPPED_TOKENS } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction PolygonTerraWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">\n        This is a Shuttle-wrapped asset from Polygon! Transferring it will\n        result in a double wrapped (Wormhole-wrapped Shuttle-wrapped) asset,\n        which has no liquid markets.\n      </Typography>\n    </Alert>\n  );\n}\n\nexport default function SoureAssetWarning({\n  sourceChain,\n  sourceAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (!(sourceChain && sourceAsset)) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const showPolygonTerraWrappedWarning =\n    sourceChain === CHAIN_ID_POLYGON &&\n    POLYGON_TERRA_WRAPPED_TOKENS.includes(searchableAddress);\n\n  return (\n    <>\n      {showPolygonTerraWrappedWarning ? <PolygonTerraWrappedWarning /> : null}\n    </>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSourceComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceBalanceString,\n  selectTransferSourceChain,\n  selectTransferSourceError,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  incrementStep,\n  setAmount,\n  setSourceChain,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport {\n  BSC_MIGRATION_ASSET_MAP,\n  CHAINS,\n  ETH_MIGRATION_ASSET_MAP,\n  MIGRATION_ASSET_MAP,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport ChainSelectArrow from \"../ChainSelectArrow\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport NumberTextField from \"../NumberTextField\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\nimport SourceAssetWarning from \"./SourceAssetWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  chainSelectWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  chainSelectContainer: {\n    flexBasis: \"100%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n  chainSelectArrow: {\n    position: \"relative\",\n    top: \"12px\",\n    [theme.breakpoints.down(\"sm\")]: { transform: \"rotate(90deg)\" },\n  },\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetChainOptions = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const parsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const hasParsedTokenAccount = !!parsedTokenAccount;\n  const isSolanaMigration =\n    sourceChain === CHAIN_ID_SOLANA &&\n    !!parsedTokenAccount &&\n    !!MIGRATION_ASSET_MAP.get(parsedTokenAccount.mintKey);\n  const isEthereumMigration =\n    sourceChain === CHAIN_ID_ETH &&\n    !!parsedTokenAccount &&\n    !!ETH_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isBscMigration =\n    sourceChain === CHAIN_ID_BSC &&\n    !!parsedTokenAccount &&\n    !!BSC_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isMigrationAsset =\n    isSolanaMigration || isEthereumMigration || isBscMigration;\n  const uiAmountString = useSelector(selectTransferSourceBalanceString);\n  const amount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferSourceError);\n  const isSourceComplete = useSelector(selectTransferIsSourceComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleMigrationClick = useCallback(() => {\n    if (sourceChain === CHAIN_ID_SOLANA) {\n      history.push(\n        `/migrate/Solana/${parsedTokenAccount?.mintKey}/${parsedTokenAccount?.publicKey}`\n      );\n    } else if (sourceChain === CHAIN_ID_ETH) {\n      history.push(`/migrate/Ethereum/${parsedTokenAccount?.mintKey}`);\n    } else if (sourceChain === CHAIN_ID_BSC) {\n      history.push(`/migrate/BinanceSmartChain/${parsedTokenAccount?.mintKey}`);\n    }\n  }, [history, parsedTokenAccount, sourceChain]);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAmountChange = useCallback(\n    (event) => {\n      dispatch(setAmount(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (uiAmountString) {\n      dispatch(setAmount(uiAmountString));\n    }\n  }, [dispatch, uiAmountString]);\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select tokens to send through the Wormhole Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/token-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              endIcon={<VerifiedUser />}\n            >\n              Token Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <div className={classes.chainSelectWrapper}>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Source</Typography>\n          <ChainSelect\n            select\n            variant=\"outlined\"\n            fullWidth\n            value={sourceChain}\n            onChange={handleSourceChange}\n            disabled={shouldLockFields}\n            chains={CHAINS}\n          />\n        </div>\n        <div className={classes.chainSelectArrow}>\n          <ChainSelectArrow\n            onClick={() => {\n              dispatch(setSourceChain(targetChain));\n            }}\n            disabled={shouldLockFields}\n          />\n        </div>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Target</Typography>\n          <ChainSelect\n            variant=\"outlined\"\n            select\n            fullWidth\n            value={targetChain}\n            onChange={handleTargetChange}\n            disabled={shouldLockFields}\n            chains={targetChainOptions}\n          />\n        </div>\n      </div>\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} />\n        </div>\n      ) : null}\n      {isMigrationAsset ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={handleMigrationClick}\n        >\n          Go to Migration Page\n        </Button>\n      ) : (\n        <>\n          <LowBalanceWarning chainId={sourceChain} />\n          <SourceAssetWarning\n            sourceChain={sourceChain}\n            sourceAsset={parsedTokenAccount?.mintKey}\n          />\n          {hasParsedTokenAccount ? (\n            <NumberTextField\n              variant=\"outlined\"\n              label=\"Amount\"\n              fullWidth\n              className={classes.transferField}\n              value={amount}\n              onChange={handleAmountChange}\n              disabled={shouldLockFields}\n              onMaxClick={\n                uiAmountString && !parsedTokenAccount.isNativeAsset\n                  ? handleMaxClick\n                  : undefined\n              }\n            />\n          ) : null}\n          <ButtonWithLoader\n            disabled={!isSourceComplete}\n            onClick={handleNextClick}\n            showLoader={false}\n            error={statusMessage || error}\n          >\n            Next\n          </ButtonWithLoader>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  const sourceAmount = useSelector(selectTransferAmount);\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer {sourceAmount}</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        {sourceWalletAddress ? (\n          <>\n            <span>from</span>\n            <SmartAddress chainId={sourceChain} address={sourceWalletAddress} />\n          </>\n        ) : null}\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n    </>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const {\n    targetChain,\n    readableTargetAddress,\n    targetAsset,\n    symbol,\n    tokenName,\n    logo,\n  } = useTargetInfo();\n\n  const explainerContent =\n    targetChain && readableTargetAddress ? (\n      <>\n        {targetAsset ? (\n          <>\n            <span>and receive</span>\n            <SmartAddress\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n          </>\n        ) : null}\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={readableTargetAddress} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport {\n  selectTransferActiveStep,\n  selectTransferIsRedeemComplete,\n  selectTransferIsRedeeming,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n} from \"../../store/selectors\";\nimport {\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Transfer() {\n  useCheckIfWormholeWrapped();\n  useFetchTargetAsset();\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectTransferActiveStep);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const isRedeemComplete = useSelector(selectTransferIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathTargetChain = query.get(\"targetChain\");\n\n  //This effect initializes the state based on the path params\n  useEffect(() => {\n    if (!pathSourceChain && !pathTargetChain) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathSourceChain || \"\") as ChainId]?.id;\n      const targetChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathTargetChain || \"\") as ChainId]?.id;\n\n      if (sourceChain === targetChain) {\n        return;\n      }\n      if (sourceChain) {\n        dispatch(setSourceChain(sourceChain));\n      }\n      if (targetChain) {\n        dispatch(setTargetChain(targetChain));\n      }\n    } catch (e) {\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathTargetChain, dispatch]);\n\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))}>Source</StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton\n            disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n            onClick={() => dispatch(setStep(1))}\n          >\n            Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled>Send tokens</StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3} completed={isRedeemComplete}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete || isRedeemComplete}\n          >\n            Redeem tokens\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Transfer;\n","import { MARKETS } from \"@project-serum/serum\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport interface Markets {\n  [coin: string]: {\n    publicKey?: PublicKey;\n    name: string;\n    deprecated?: boolean;\n  };\n}\n\nexport const serumMarkets = (() => {\n  const m: Markets = {};\n  MARKETS.forEach((market) => {\n    const coin = market.name.split(\"/\")[0];\n    if (m[coin]) {\n      // Only override a market if it's not deprecated\t.\n      if (!m.deprecated) {\n        m[coin] = {\n          publicKey: market.address,\n          name: market.name.split(\"/\").join(\"\"),\n        };\n      }\n    } else {\n      m[coin] = {\n        publicKey: market.address,\n        name: market.name.split(\"/\").join(\"\"),\n      };\n    }\n  });\n\n  m[\"USDC\"] = m[\"USDT\"];\n\n  return m;\n})();\n\n// Create a cached API wrapper to avoid rate limits.\nclass PriceStore {\n  cache: Map<String, number | undefined>;\n\n  constructor() {\n    this.cache = new Map();\n  }\n\n  async getPrice(\n    connection: Connection,\n    marketName: string\n  ): Promise<number | undefined> {\n    return new Promise((resolve, reject) => {\n      if (this.cache.get(marketName) === undefined) {\n        fetch(`https://serum-api.bonfida.com/orderbooks/${marketName}`).then(\n          (resp) => {\n            resp.json().then((resp) => {\n              if (resp.data.asks === null || resp.data.bids === null) {\n                resolve(undefined);\n              } else if (\n                resp.data.asks.length === 0 &&\n                resp.data.bids.length === 0\n              ) {\n                resolve(undefined);\n              } else if (resp.data.asks.length === 0) {\n                resolve(resp.data.bids[0].price);\n              } else if (resp.data.bids.length === 0) {\n                resolve(resp.data.asks[0].price);\n              } else {\n                const mid =\n                  (resp.data.asks[0].price + resp.data.bids[0].price) / 2.0;\n                this.cache.set(marketName, mid);\n                resolve(this.cache.get(marketName));\n              }\n            });\n          }\n        );\n      } else {\n        return resolve(this.cache.get(marketName));\n      }\n    });\n  }\n}\n\nexport const priceStore = new PriceStore();\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  AVAX_TOKEN_BRIDGE_ADDRESS,\n  BSC_TOKEN_BRIDGE_ADDRESS,\n  CHAINS_BY_ID,\n  COVALENT_GET_TOKENS_URL,\n  ETH_TOKEN_BRIDGE_ADDRESS,\n  logoOverrides,\n  POLYGON_TOKEN_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_CUSTODY_ADDRESS,\n  TERRA_SWAPRATE_URL,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { priceStore, serumMarkets } from \"../utils/SolanaPriceStore\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  NATIVE_TERRA_DECIMALS,\n} from \"../utils/terra\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraNativeBalances from \"./useTerraNativeBalances\";\n\nexport type TVL = {\n  logo?: string;\n  symbol?: string;\n  name?: string;\n  amount: string;\n  totalValue?: number;\n  quotePrice?: number;\n  assetAddress: string;\n  originChainId: ChainId;\n  originChain: string;\n  decimals?: number;\n};\n\nconst BAD_PRICES_BY_CHAIN = {\n  [CHAIN_ID_BSC]: [\n    \"0x04132bf45511d03a58afd4f1d36a29d229ccc574\",\n    \"0xa79bd679ce21a2418be9e6f88b2186c9986bbe7d\",\n    \"0x931c3987040c90b6db09981c7c91ba155d3fa31f\",\n  ],\n  [CHAIN_ID_ETH]: [\"0x3845badade8e6dff049820680d1f14bd3903a5d0\"],\n};\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): TVL[] => {\n  const output: TVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    if (item.balance > 0 && item.contract_address) {\n      const hasUnreliablePrice =\n        BAD_PRICES_BY_CHAIN[chainId]?.includes(item.contract_address) ||\n        item.quote_rate > 1000000;\n      output.push({\n        logo:\n          logoOverrides.get(item.contract_address) ||\n          item.logo_url ||\n          undefined,\n        symbol: item.contract_ticker_symbol || undefined,\n        name: item.contract_name || undefined,\n        amount: formatUnits(item.balance, item.contract_decimals),\n        totalValue: hasUnreliablePrice ? 0 : item.quote,\n        quotePrice: hasUnreliablePrice ? 0 : item.quote_rate,\n        assetAddress: item.contract_address,\n        originChainId: chainId,\n        originChain: CHAINS_BY_ID[chainId].name,\n        decimals: item.contract_decimals,\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>,\n  solanaPrices: DataWrapper<Map<string, number | undefined>>\n) => {\n  const output: TVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data ||\n    solanaPrices.isFetching ||\n    !solanaPrices.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const mint = item.account.data.parsed?.info?.mint?.toString();\n    const price = solanaPrices?.data?.get(mint);\n    output.push({\n      logo: genericMetadata?.logo || undefined,\n      symbol: genericMetadata?.symbol || undefined,\n      name: genericMetadata?.tokenName || undefined,\n      amount: item.account.data.parsed?.info?.tokenAmount?.uiAmount || \"0\", //Should always be defined.\n      totalValue: price\n        ? parseFloat(\n            item.account.data.parsed?.info?.tokenAmount?.uiAmount || \"0\"\n          ) * price\n        : undefined,\n      quotePrice: price,\n      assetAddress: mint,\n      originChainId: CHAIN_ID_SOLANA,\n      originChain: \"Solana\",\n      decimals: item.account.data.parsed?.info?.tokenAmount?.decimals,\n    });\n  });\n\n  return output;\n};\n\nconst useTerraTVL = () => {\n  const { isLoading: isTerraNativeLoading, balances: terraNativeBalances } =\n    useTerraNativeBalances(TERRA_TOKEN_BRIDGE_ADDRESS);\n  const [terraSwaprates, setTerraSwaprates] = useState<any[]>([]);\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      try {\n        const result = await axios.get(TERRA_SWAPRATE_URL);\n        if (!cancelled && result && result.data) {\n          setTerraSwaprates(result.data);\n        }\n      } catch (e) {}\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n  const terraTVL = useMemo(() => {\n    const arr: TVL[] = [];\n    if (terraNativeBalances) {\n      const denoms = Object.keys(terraNativeBalances);\n      denoms.forEach((denom) => {\n        const amount = formatUnits(\n          terraNativeBalances[denom],\n          NATIVE_TERRA_DECIMALS\n        );\n        const symbol = formatNativeDenom(denom);\n        let matchingSwap = undefined;\n        let quotePrice = 0;\n        let totalValue = 0;\n        try {\n          matchingSwap = terraSwaprates.find((swap) => swap.denom === denom);\n          quotePrice =\n            denom === \"uusd\"\n              ? 1\n              : matchingSwap\n              ? 1 / Number(matchingSwap.swaprate)\n              : 0;\n          totalValue =\n            denom === \"uusd\"\n              ? Number(\n                  formatUnits(terraNativeBalances[denom], NATIVE_TERRA_DECIMALS)\n                )\n              : matchingSwap\n              ? Number(amount) / Number(matchingSwap.swaprate)\n              : 0;\n        } catch (e) {}\n        arr.push({\n          amount,\n          assetAddress: denom,\n          originChain: CHAINS_BY_ID[CHAIN_ID_TERRA].name,\n          originChainId: CHAIN_ID_TERRA,\n          quotePrice,\n          totalValue,\n          logo: getNativeTerraIcon(symbol),\n          symbol,\n          decimals: NATIVE_TERRA_DECIMALS,\n        });\n      });\n    }\n    return arr;\n  }, [terraNativeBalances, terraSwaprates]);\n  return useMemo(\n    () => ({ terraTVL, isLoading: isTerraNativeLoading }),\n    [isTerraNativeLoading, terraTVL]\n  );\n};\n\nconst useSolanaPrices = (\n  mintAddresses: string[],\n  tokenMap: DataWrapper<TokenInfo[]>\n) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [priceMap, setPriceMap] = useState<Map<\n    string,\n    number | undefined\n  > | null>(null);\n  const [error] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!mintAddresses || !mintAddresses.length || !tokenMap.data) {\n      return;\n    }\n\n    const relevantMarkets: {\n      publicKey?: PublicKey;\n      name: string;\n      deprecated?: boolean;\n      mintAddress: string;\n    }[] = [];\n    mintAddresses.forEach((address) => {\n      const tokenInfo = tokenMap.data?.find((x) => x.address === address);\n      const relevantMarket = tokenInfo && serumMarkets[tokenInfo.symbol];\n      if (relevantMarket) {\n        relevantMarkets.push({ ...relevantMarket, mintAddress: address });\n      }\n    });\n\n    setIsLoading(true);\n    const priceMap: Map<string, number | undefined> = new Map();\n    const connection = new Connection(SOLANA_HOST);\n    const promises: Promise<void>[] = [];\n    //Load all the revelevant markets into the priceMap\n    relevantMarkets.forEach((market) => {\n      const marketName: string = market.name;\n      promises.push(\n        priceStore\n          .getPrice(connection, marketName)\n          .then((result) => {\n            priceMap.set(market.mintAddress, result);\n          })\n          .catch((e) => {\n            //Do nothing, we just won't load this price.\n            return Promise.resolve();\n          })\n      );\n    });\n\n    Promise.all(promises).then(() => {\n      //By this point all the relevant markets are loaded.\n      if (!cancelled) {\n        setPriceMap(priceMap);\n        setIsLoading(false);\n      }\n    });\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [mintAddresses, tokenMap.data]);\n\n  return useMemo(() => {\n    return {\n      isFetching: isLoading,\n      data: priceMap || null,\n      error: error,\n      receivedAt: null,\n    };\n  }, [error, priceMap, isLoading]);\n};\n\nconst useTVL = (): DataWrapper<TVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [avaxCovalentData, setAvaxCovalentData] = useState(undefined);\n  const [avaxCovalentIsLoading, setAvaxCovalentIsLoading] = useState(false);\n  const [avaxCovalentError, setAvaxCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n  const solanaTokenMap = useSolanaTokenMap();\n  const solanaPrices = useSolanaPrices(mintAddresses, solanaTokenMap);\n\n  const { isLoading: isTerraLoading, terraTVL } = useTerraTVL();\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata, solanaPrices),\n    [solanaCustodyTokens, solanaMetadata, solanaPrices]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n  const avaxTVL = useMemo(\n    () => calcEvmTVL(avaxCovalentData, CHAIN_ID_AVAX),\n    [avaxCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_ETH, ETH_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_BSC, BSC_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_TOKEN_BRIDGE_ADDRESS,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setAvaxCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(CHAIN_ID_AVAX, AVAX_TOKEN_BRIDGE_ADDRESS, false)\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setAvaxCovalentData(results.data);\n            setAvaxCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setAvaxCovalentError(\"Unable to retrieve Avax TVL.\");\n            setAvaxCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [\n      ...ethTVL,\n      ...bscTVL,\n      ...polygonTVL,\n      ...avaxTVL,\n      ...solanaTVL,\n      ...terraTVL,\n    ];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        avaxCovalentIsLoading ||\n        solanaCustodyTokensLoading ||\n        isTerraLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        avaxCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    polygonTVL,\n    avaxCovalentError,\n    avaxCovalentIsLoading,\n    avaxTVL,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n    isTerraLoading,\n    terraTVL,\n  ]);\n};\n\nexport default useTVL;\n","import React from \"react\";\n\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst TablePaginationActions = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n};\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nexport default TablePaginationActions;\n","import { IconButton } from \"@material-ui/core\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {\n  AddCircleOutline,\n  KeyboardArrowDown,\n  KeyboardArrowRight,\n  RemoveCircleOutline,\n} from \"@material-ui/icons\";\nimport React from \"react\";\nimport {\n  useExpanded,\n  useGlobalFilter,\n  useGroupBy,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport TablePaginationActions from \"./TablePaginationActions\";\n\nconst stopProp = (e) => {\n  e.stopPropagation();\n};\n\nconst EnhancedTable = ({ columns, data, skipPageReset, initialState = {} }) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    rows,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: !skipPageReset,\n      initialState,\n    },\n    useGlobalFilter,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination\n  );\n\n  const handlePageChange = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (event) => {\n    setPageSize(Number(event.target.value));\n  };\n\n  // Render the UI for your table\n  return (\n    <>\n      <TableContainer>\n        <MaUTable {...getTableProps()}>\n          <TableHead>\n            {headerGroups.map((headerGroup) => (\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <TableCell\n                    {...(column.id === \"selection\"\n                      ? column.getHeaderProps()\n                      : column.getHeaderProps(column.getSortByToggleProps()))}\n                    align={\n                      // TODO: better way to get column?\n                      columns.find((c) => c.Header === column.Header)?.align ||\n                      \"left\"\n                    }\n                  >\n                    {column.id !== \"selection\" ? (\n                      <TableSortLabel\n                        active={column.isSorted}\n                        // react-table has a unsorted state which is not treated here\n                        direction={column.isSortedDesc ? \"desc\" : \"asc\"}\n                      >\n                        {column.render(\"Header\")}\n                      </TableSortLabel>\n                    ) : (\n                      column.render(\"Header\")\n                    )}\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span onClick={stopProp}>\n                        <IconButton\n                          size=\"small\"\n                          {...column.getGroupByToggleProps()}\n                        >\n                          {column.isGrouped ? (\n                            <RemoveCircleOutline fontSize=\"inherit\" />\n                          ) : (\n                            <AddCircleOutline fontSize=\"inherit\" />\n                          )}\n                        </IconButton>\n                      </span>\n                    ) : null}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {page.map((row, i) => {\n              prepareRow(row);\n              return (\n                <TableRow {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <TableCell\n                        {...cell.getCellProps()}\n                        align={cell.column.align || \"left\"}\n                      >\n                        {cell.isGrouped ? (\n                          // If it's a grouped cell, add an expander and row count\n                          <>\n                            <IconButton\n                              size=\"small\"\n                              {...row.getToggleRowExpandedProps()}\n                            >\n                              {row.isExpanded ? (\n                                <KeyboardArrowDown fontSize=\"inherit\" />\n                              ) : (\n                                <KeyboardArrowRight fontSize=\"inherit\" />\n                              )}\n                            </IconButton>{\" \"}\n                            {cell.render(\"Cell\")} ({row.subRows.length})\n                          </>\n                        ) : cell.isAggregated ? (\n                          // If the cell is aggregated, use the Aggregated\n                          // renderer for cell\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                          // Otherwise, just render the regular cell\n                          cell.render(\"Cell\")\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </MaUTable>\n      </TableContainer>\n      <TablePagination\n        component=\"div\"\n        rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: rows.length }]}\n        count={rows.length}\n        rowsPerPage={pageSize}\n        page={pageIndex}\n        SelectProps={{\n          inputProps: { \"aria-label\": \"rows per page\" },\n          native: true,\n        }}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleRowsPerPageChange}\n        ActionsComponent={TablePaginationActions}\n      />\n    </>\n  );\n};\n\nexport default EnhancedTable;\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOL_CUSTODY_ADDRESS,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n}));\n\nconst CustodyAddresses: React.FC<any> = () => {\n  const classes = useStyles();\n  const data = useMemo(() => {\n    return [\n      {\n        chainName: \"Ethereum\",\n        chainId: CHAIN_ID_ETH,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_ETH),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_ETH),\n      },\n      {\n        chainName: \"Solana\",\n        chainId: CHAIN_ID_SOLANA,\n        tokenAddress: SOL_CUSTODY_ADDRESS,\n        nftAddress: SOL_NFT_CUSTODY_ADDRESS,\n      },\n      {\n        chainName: \"Binance Smart Chain\",\n        chainId: CHAIN_ID_BSC,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_BSC),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_BSC),\n      },\n      {\n        chainName: \"Terra\",\n        chainId: CHAIN_ID_TERRA,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_TERRA),\n        nftAddress: null,\n      },\n      {\n        chainName: \"Polygon\",\n        chainId: CHAIN_ID_POLYGON,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_POLYGON),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_POLYGON),\n      },\n      {\n        chainName: \"Avalanche\",\n        chainId: CHAIN_ID_AVAX,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_AVAX),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_AVAX),\n      },\n    ];\n  }, []);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      {\n        Header: \"Token Address\",\n        id: \"tokenAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.tokenAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.tokenAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n      {\n        Header: \"NFT Address\",\n        id: \"nftAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nftAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.nftAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h5\">Custody Addresses</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          These are the custody addresses which hold collateralized assets for\n          the token bridge.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{}}\n    />\n  );\n\n  return (\n    <>\n      {header}\n      {table}\n    </>\n  );\n};\n\nexport default CustodyAddresses;\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BSC_NFT_BRIDGE_ADDRESS,\n  COVALENT_GET_TOKENS_URL,\n  ETH_NFT_BRIDGE_ADDRESS,\n  getNFTBridgeAddressForChain,\n  POLYGON_NFT_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\n\nexport type NFTTVL = NFTParsedTokenAccount & { chainId: ChainId };\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): NFTTVL[] => {\n  const output: NFTTVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    //TODO remove non nfts\n    if (item.balance > 0 && item.contract_address && item.nft_data) {\n      item.nft_data.forEach((nftData: any) => {\n        if (nftData.token_id) {\n          output.push({\n            amount: item.balance,\n            mintKey: item.contract_address,\n            tokenId: nftData.token_id,\n            publicKey: getNFTBridgeAddressForChain(chainId),\n            decimals: 0,\n            uiAmount: 0,\n            uiAmountString: item.balance.toString(),\n            chainId: chainId,\n            uri: nftData.token_url,\n            animation_url: nftData.external_data?.animation_url,\n            external_url: nftData.external_data?.external_url,\n            image: nftData.external_data?.image,\n            image_256: nftData.external_data?.image_256,\n            nftName: nftData.external_data?.name,\n            description: nftData.external_data?.description,\n          });\n        }\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>\n) => {\n  const output: NFTTVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const raw: Metadata | undefined = genericMetadata?.raw;\n\n    if (\n      item.account.data.parsed?.info?.tokenAmount?.uiAmount > 0 &&\n      item.account.data.parsed?.info?.tokenAmount?.decimals === 0\n    ) {\n      output.push({\n        amount: item.account.data.parsed?.info?.tokenAmount?.amount,\n        mintKey: item.account.data.parsed?.info?.mint,\n        publicKey: getNFTBridgeAddressForChain(CHAIN_ID_SOLANA),\n        decimals: 0,\n        uiAmount: 0,\n        uiAmountString:\n          item.account.data.parsed?.info?.tokenAmount?.uiAmountString,\n        chainId: CHAIN_ID_SOLANA,\n        uri: raw?.data?.uri,\n        symbol: raw?.data?.symbol,\n        // external_url: nftData.external_data?.external_url,\n        // image: nftData.external_data?.image,\n        // image_256: nftData.external_data?.image_256,\n        // nftName: nftData.external_data?.name,\n        // description: nftData.external_data?.description,\n      });\n    }\n  });\n\n  return output;\n};\n\nconst useNFTTVL = (): DataWrapper<NFTTVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [avaxCovalentData, setAvaxCovalentData] = useState(undefined);\n  const [avaxCovalentIsLoading, setAvaxCovalentIsLoading] = useState(false);\n  const [avaxCovalentError, setAvaxCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata),\n    [solanaCustodyTokens, solanaMetadata]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n\n  const avaxTVL = useMemo(\n    () => calcEvmTVL(avaxCovalentData, CHAIN_ID_AVAX),\n    [avaxCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_ETH,\n          ETH_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_BSC,\n          BSC_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setAvaxCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_AVAX,\n          getNFTBridgeAddressForChain(CHAIN_ID_AVAX),\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setAvaxCovalentData(results.data);\n            setAvaxCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setAvaxCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setAvaxCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_NFT_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [\n      ...ethTVL,\n      ...bscTVL,\n      ...polygonTVL,\n      ...avaxTVL,\n      ...solanaTVL,\n    ];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        avaxCovalentIsLoading ||\n        solanaCustodyTokensLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        avaxCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonTVL,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n    avaxTVL,\n    avaxCovalentIsLoading,\n    avaxCovalentError,\n  ]);\n};\n\nexport default useNFTTVL;\n","export const DENY_LIST = [\n  \"D9cX654dGb4GFzqq3RY7rhZbRkQqUkfggDZdnYxqv97g\",\n  \"0xfeA43A080297B02F2eBB88a27Cb0FA6DB1b33B1d\",\n  \"GUSNP2z7nXjMpmYWeFbS819VwHb5tp7VoGbC6iGHtXmE\",\n  \"ERfkrhhgBB6zRo3x4XAcQKjhxu1JdX1PBfdj1RbHsfc7\",\n  \"f8DrFDG8dd6kV34WdjoEZd9vZin2pJAck8eMFUXZv1G\",\n  \"0x72b6dc1003e154ac71c76d3795a3829cfd5e33b9\",\n];\n\nexport const ALLOW_LIST: string[] = [\n  \"0x915bcb55faf663429fcc1efeb4e346703a91e4b2\",\n  \"0xf642d8a98845a25844d3911fa1da1d70587c0acc\",\n  \"0x1c60841b70821dca733c9b1a26dbe1a33338bd43\",\n  \"0x5603172654f37b509d74c6fe3a3fc087104100d9\",\n  \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n  \"0xd136ad9eb0a53633156972e3f746ab10d6dced7d\",\n  \"0x68d5d4ff0274dd95760e300ef16b81c5eed09842\",\n  \"0x4961db588dd962abb20927aa38fa33e5225b3be2\",\n  \"0x2e956ed3d7337f4ed4316a6e8f2edf74bf84bb54\",\n  \"0xb411d36e034d87558c3f96636dd7f7b62e093a1e\",\n  \"0x7592e2f251a7f7da27211625d652092769f43a60\",\n  \"0x21b999ec13828edefa243675c64324298c03b831\",\n  \"0xad5f6cdda157694439ef9f6dd409424321c74628\",\n  \"0x9cf63efbe189091b7e3d364c7f6cfbe06997872b\",\n  \"0x7581f8e289f00591818f6c467939da7f9ab5a777\",\n  \"0x93b1077d163365e05c9421e8f72547e2fe1e0a5b\",\n  \"0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625\",\n  \"0x2fb5b875a85713cba312c097d16838c242cadaec\",\n  \"0x1e988ba4692e52bc50b375bcc8585b95c48aad77\",\n  \"0x0ae3c3a1504e41a6877de1b854c000ec64894bea\",\n  \"0xc6904fb685b4dfbdb98a5b70e40863cd9aef33dc\",\n  \"0xd58434f33a20661f186ff67626ea6bdf41b80bca\",\n  \"0x9bb7da8f68f15ece32fe323246e7a1abac6d895d\",\n  \"0xb7f7f6c52f2e2fdb1963eab30438024864c313f6\",\n  \"0x2a281305a50627a22ec3e7d82ae656adfee6d964\",\n  \"0x346868f7e783e8206335bb14f74ba59a87c44f35\",\n  \"0x549d38f104ac46d856c1b2bf2a20d170efdb2a8d\",\n  \"0x138ff21a21dfc06fbfccf15f2d9fd290a660e152\",\n  \"0x15533781a650f0c34f587cdb60965cdfd16ff624\",\n  \"0xaae71bbbaa359be0d81d5cbc9b1e88a8b7c58a94\",\n  \"0x4721d66937b16274fac603509e9d61c5372ff220\",\n  \"0x72dcccb74cade0aca67739fe0a7956c5dead4a8a\",\n  \"0x07fe07226a376e8b74e4da2094537843fdf16318\",\n  \"0x1ddb2c0897daf18632662e71fdd2dbdc0eb3a9ec\",\n  \"0x2d956093d27621ec0c4628b77eaeac6c734da02c\",\n  \"0x312b151a0e87785649ed835d946c2b0de5745c30\",\n  \"0x32afc8dc2ff4af284fa5341954050f917357a5f1\",\n  \"0x4ba782b05c7d580ab6b896c6a63b8e5de53738b3\",\n  \"0x5bc94e9347f3b9be8415bdfd24af16666704e44f\",\n  \"0x5ddff6f22ee5df31403b9de994b4c70c8755a8ac\",\n  \"0x61f4a37676700f6e9bcbaeb05ff6c2f701c1c702\",\n  \"0xcb1f79791088d0f4397c35ec241f91c3727a6dba\",\n  \"0xd279d7e46f73961812c4853e065d0096a2657a71\",\n  \"0xd901b0618ce2b7f61457ced5621bea4820954ce4\",\n  \"0xdf7952b35f24acf7fc0487d01c8d5690a60dba07\",\n  \"0xf5db804101d8600c26598a1ba465166c33cdaa4b\",\n  \"0x299b6f57922533e1dd9edb8fe76ef632fb2b081e\",\n  \"0x36a8377e2bb3ec7d6b0f1675e243e542eb6a4764\",\n  \"0x4173eff368153f1f1c87be05226ebca9e5f5748b\",\n  \"0x684cd10b02cdade20f1858c6315052d66d1eafc2\",\n  \"0x7227e371540cf7b8e512544ba6871472031f3335\",\n  \"0xd317cfff093c08a43062b39075e51ac2060317f2\",\n  \"FxN1Q3vzdUmkx3qVgsnLiQtRWfYK1MAejEjret9dY68E\",\n  \"4V8LnMchSg7LpgNNJxGrcJaheeW5eSiJKRuocxf4YvXn\",\n  \"9ayoVUQVpHRcDyrdJ1dDUmkxtY74SYgEo7fMRSbW7GQ6\",\n  \"83ENiVFRQvVLAsP2gp4pW9EDphsiorgXaZjSuaWwjQEq\",\n  \"2nVCGdoR6xehmoPfTAof7xSvdnGaEKhvXi48BeaXbxNW\",\n  \"3mUeDoxSzSpBudaWVygwszkVSHUkeJ7q4C5DGjhi9twL\",\n  \"J1JLJjYotfACqTQ8g1vWUW9BHRSkJ3NxTqJiukf3aTmn\",\n  \"CECj5imCnAv7avNjSETanhRMxWz5yR2ZN5jfFqAijzmK\",\n  \"GHVaMJPwJYrqDaHCGLksvsfGoNaS6NVHL5wc31osASYZ\",\n  \"85d8VHCBpER7NeT8Quzcos7iGoZouLkaZNfqfQ5VN3kP\",\n  \"EBDEioh6L5UZxuyPPZ9gY3H6fsRqmPEvSXL2EKv588qz\",\n  \"BZM9yMv9CXZDYV2JGNWSdNJc6xWGfEHY4vUWX9rc4W4n\",\n  \"4cc5svLcu1xyYCGcfwDop64ZMs6WJiCY6JrKF711GDLu\",\n  \"8cWC1faRe7fkTMu5wAVQoSbkYChJUNTTCneLhZprqMBj\",\n  \"F14j998PJo8CdNU4aS7vEWqm8duNuZAZ6bgrAJhJHPNw\",\n  \"DZUjZ8p3QtuSnozqFsuHYTjPFCWkgkgWhD7b71AvbKEC\",\n  \"AtjDYmFmnjhh8VMJHAEY3CYMdWCPEDzJzxjjTrMrcY4K\",\n  \"GwBPGaMyR8cDKVuGgFUdLqevDkMbKNNKRerhvqJD6hL3\",\n  \"B3fYjDpfJ9q7YJfnrjeFgALaiLn5DaobPje3VQZ8zk4a\",\n  \"3KeSd9UcWFWq7DQnUWT9tXkgb54yUUCynLzJZkaMoqEX\",\n  \"XUhiSfF7NN3s8T4gZByoae7sKKuLfffkgF14G6PYHPH\",\n  \"2BLYg54F2ejko6Dz6gDPDDGUMxFPHe4v6oNTsshRnS9S\",\n  \"HEr369zRti7fShFufrxg7zpmGsRcWey8XNoGdr6bfFHp\",\n  \"997VfMfoCp6uh8ZjJZeSm7yDEP9x2iJVPqrLk2M6XBx4\",\n  \"BuUUVQeiCNoChQ2CRAgVuXCS56ZF5m8AtGen8LtcjdTv\",\n  \"DHUFjTnK94Yx9MybaosFxFFa4pmvxoo2toHxDXZisthU\",\n  \"73nxe85cw4XqQ2o5znPCZDVXL5zf3wpM59boCqnhRzqz\",\n  \"BbMsktYU3XDZNTB2jNU75RZPak2pu75jDRudHtjbLBMD\",\n  \"2K8p6q9KVkDBcedrXpVgAkr4AH9BAZf2BvvXkQvgC3L1\",\n  \"G1k5umwEmgziVLAetgmuGRw6sBRodRCGviRNT5HW3CK6\",\n  \"2XNvSJhJjpXBbvmhrnbx3BNMTC3JhAmyC11nkmWkTtuM\",\n  \"FBoetbUNf5GVJfnCXDf5uo9HMVwmvuSYBMmEVKTKDFd3\",\n  \"8TgS1Z1H3YM2qer6wQfVgfs1zrrkEhN8jwqZwEkuaoQs\",\n  \"2P2hiNdVyn6BhC4zhGiT1Ct2Jm47F8eShfkwwEDeerCu\",\n  \"8nTjurPHAGSttLJHhfPws5wqnPF2ogNg2BWGyJV9Tpt\",\n  \"gJbDs6Mp78jMV2vuwZei6oRaPfVQycYxvZXkc8emKoi\",\n  \"55VXhAfPKEG5LhQyakH3eUrxy3zrC6pryQSPy5SMDpRW\",\n  \"FKxYYQNyigzTfyig4Gyvxkcq9wFb4FEQPq9KvNLoMQ2R\",\n  \"9fhR7uHDtJEWBzE9hiwCemggMiKiZGzMmMS22mG3DNuN\",\n  \"Cjduv1s4nUkt8i7syFr8yjUvYa5GiNASVKPnNorPSjyo\",\n  \"5Gak12U6pxnyh8akeDY4jdaUBJ6FziEVSTDFDSX97acs\",\n  \"8Urs8EzwgvNSyRXgSVkuBAD4B5odLfKih6rTn75YnXes\",\n  \"Ft4y4KR1Vf45js7RBWbuT7nTFaZmty11sCTGcfJ4fAsx\",\n  \"4iKnL1CTvA3yrcchB17vz3yBSmaj2aLvhxPhtBEXvtdd\",\n  \"2KfyLN3iyBHYGajiHzEj75aZqeNM22FA9jh8QaKQbwD2\",\n  \"5tBZ5feptkoEWiGhisi1y81gzYg3PAJ9v5QbY6uJ4P9a\",\n  \"AJnfVpnmtN3oo5jMT1Rxr9VQdVxLUuF6U35oSFRMtten\",\n  \"8TEPXUw4vtZuy2xizHfDcccCfsNMxpADrEBw9FJXe3tJ\",\n  \"CVsnX3yUwQoe2WappLEhBbu4vxZAE6Bym33UkKuYgKqf\",\n  \"8TxaeiYDUhVL6cJVxHeS5Gx6UpE3G4zsQJMaejHttb5x\",\n  \"5usxCLasTHRAJqC2kzqboAzQQA4jibxWPCbb3Xtc5r7z\",\n  \"FsBzFoC4YYeAvdRX1d4AmYcwtZbcp3ctGs137AsGzLRe\",\n  \"CYPz33SnBXkCf1SfsN5yWk5jRCU7r4m4m236K7LYQYUn\",\n  \"DmGzNiorJqWac5cNejfUkk3vxYPkbarsB29y3ZdZ2chi\",\n  \"6Z551xuQRipV5tfiLawgALuufBtMYRhHiL8Mco1uoQHp\",\n  \"8QFELiySN2tQutqamND7v557BpuE3Nu4h5KLxnaLa92K\",\n  \"HciHdyzYoCuhFCgYCvCYsXssJuxkHhE68anbgBvqsa4Y\",\n  \"AsVWRy4KfRErkcyif5ZXXvVdTeeWLKJaLo5ZKAfYxuFe\",\n  \"DNKy4mE6onmzDYYGd4vP9BuJByDoPYdoFKvHUtveCarn\",\n  \"EBms1LbV3o6h4eCTAzyZ4xoBmJ1T4SuhQLLguCJ88LBA\",\n  \"7xaMEDQ1gTJhXTZ1LYgoMBEeGXiZNmY3QhPxcnBKjkcS\",\n  \"71hXBp4hbpYrVSsKMuFACF5UJMBasCmPybpN3dyNdFxJ\",\n  \"EstAdgD62RLLPCsLVgJWxxQAeQAJ8iX7Yid9EJp99CQ7\",\n  \"HHodYwygcTYuxBNrQx1aLwfQLkJaAMcioXvMs7LNK6Jf\",\n  \"AkydeQuFwTsWj8YrmKdhV4TE1w5Nc9DF5ipgfNGs2k8q\",\n  \"AmJ52MAQXAjtFkFdAYkLWKZU3zp2BDryLcbQQ1hMSBcp\",\n  \"BQHvhpAwZr83joHaEJrKUY4Lij4ZXqKgi9MzeBeiatbX\",\n  \"7oEGhi9YJECDHvfbp41spBwGU1pEfgS5mHo8cXGwfxug\",\n  \"364ue6kuFJM6reWX7Lz8LwCxA7TeVbWuMXBFrv1EZYWS\",\n  \"88R54Zx8TLM4roQPTrHSpA5BfLFQVu5CcH9DyxWmfxDV\",\n  \"F11NLrf3w5WuR8kyPFfgpdG9qMM7QoS9JdkMyFu9B6z\",\n  \"DzgpaoTtvcxmfAuceZR3Q4xAJjjHCcFURJ4orMiAP1oB\",\n  \"8iNwAG4LCFoxZWmpAPq2AUXmdBAeeGNgxUZnRNJ2oaxZ\",\n  \"Jzv1Tp99guHWs4WxmcSV3ty3UHhqwv312Wb7A59Cm6B\",\n  \"HqTSsezCJ49VjpcRvGtN4WbLHgywkpqrQZAPPR4sid7P\",\n  \"7b9xH9DZ5EjehncbST6Cw2cVVVmJccYsoYa7CmVxV74w\",\n  \"FE5zmTuD1zaaDheJf8HxDJS8HFVHaFTHbeonxqrBMYhm\",\n  \"JD9NiPVbSHGAanmxnXCcmYaXfa56rWwzvB6TVAXkirYS\",\n  \"F2kkKqoUr8gCfjXTUknLQZ8TEvedkNA5s6Ne6XS4CPQf\",\n  \"38QnWX1xq83uspnp9nY6cEhdcRcx1dw5VJwxudZ7ugDM\",\n  \"Gzkr9pHFCQ3WqkyRMZobPSXZNheFQKYrjJCVs1Xmhj6R\",\n  \"jfLuStusES8VBAHqFSBB9XXX5vQjjWxZGyEYdDRS2yz\",\n  \"9dFPAaubJzhHFpsc8s4qbSepMFEKecaQYHrUKQMRoZcs\",\n  \"6yCBHAmvBAZkFSXi7u8Sj7n9pNPuDFrGahNnLxpAk9YJ\",\n  \"A2SgMawSkCjdhQpBypwRpCSryAPa6B65dRetu3YGX4ay\",\n  \"9wPZRx3jrYQ2U3AwrxRJ8dQXFgVt8Qc5BxjD2reAD81\",\n  \"C6FGVFzzwGqxEGnEqQva4zZ6tdVXHDY4KsPuDFMKQipA\",\n  \"28awX2aLeyDik4aYtLe3xgvx5rnA9PeJrUmEepbps1XU\",\n  \"7B3esUC5uCw3yLcpvU91q3poeVENLpyfLU7SCZxy7YnF\",\n  \"5qoDyfChkPokzd5BXGcbNmqFYwF3dYerLfnN2ujxTCjU\",\n  \"5K5hobUAQLYTiKMGqJBJauZWbQJHLnjmwfbYRu3Kdt59\",\n  \"pavej29HVNfxHEkDxR9fE8zgCozmFuCFFCk7u9dUfci\",\n  \"4hKuAuo8dXgkRLfz78qNHNGs188epLoVmcKPKuDDKFNj\",\n  \"AzX2c2bFMeZcnj1Y6DokKAacDnsRzAo6pyVJmMiVUuVQ\",\n  \"D6uV9j31HV2yv6Cg6uuJuAeSMVdJ7PpVrzRtm1d5N3pV\",\n  \"2VNQusXvHEjMBTkY4gYUUhvdkCMc9DADSSxbdS7sJ1CK\",\n  \"Cug1VKTudanAUbUMh4sw1bicJgcfXqs8x4tjHHPtqkEA\",\n  \"HQnijpcihTRLRaQpywJfo4cM5pZHBffvTATFiomE8g8u\",\n  \"73kJkeEFQYPxT3cHDRG8iiyvUhmSBY2Nc33JpB6DFK2R\",\n  \"4rZifPfY8DdPkWv4mqvctLgcGaBScBQHMCPguZQC28C4\",\n  \"GZivmjaWrg2Va9seuxY4D7SGPP8WnKsKwwc5a87hMAgn\",\n  \"9rMUmiujvmthZoVBaFff2Jf8YW2cX4SzWDK2nritZXK3\",\n  \"CkAD1HLVnqhfMeCXzKuEuhjFd4FmTXRtCVe535jJKVH2\",\n  \"8tfmWiyX4efiXb3P9ti4GfCZZ5FNcwbRZgzfA688K9tC\",\n  \"HXrkcTcRNF6EnvfFaXMpqbSeik7fgbn9DLraBaNmRD5u\",\n  \"59j1gA2ANhYkzvvCZauoisnpfnVk6UbycFHMNBij2jy\",\n  \"5Dot4FyLAdx9LkxrmG4zi6nrRQQcPZjvBAjZ5VmvYWpp\",\n  \"BbL5V1TJuLnMonChPVAfP3uarM5G2XKCfcEaTxzXEqPK\",\n  \"4hmEUPcgHimQ1vNrr3WNGYb1RezmRLD6fVv9TVwAU9yj\",\n  \"Gnmnh3LNaaQ1UmnQMkdGTH7ja2aTHQyxkS7tCfYkxvtD\",\n  \"9BUEx9ULoTQhs3QVzyQvSecxfbTPV8PcuHkHeuRE8LF8\",\n  \"6UF8mqUg1aGakkW2yS4oRPiX1YNBJiqxcoyN9u6pBYo9\",\n  \"7vEHTQ9mmy7T7fkhns3fBFrWqRhXPTZUPgn64QxVirhY\",\n  \"71HGRqeeDwcXJs9CxzPyTurLNdwYwsBBb17CmxoW4VTD\",\n  \"5v2fhVgjH2Xv2v78ysSZWvhZ5wu8ycD4pJE6LRBbaf1G\",\n  \"7rjPaxZ5p5jzZFhEZwVFCsLwvxppmJ8nmsrgxmRMeKMq\",\n  \"7JHruL5Baoqj66RniPDpB1SiKz8jegNuiKLxcvCDVYCa\",\n  \"3xA3wJk9YpgwxNuSc9GHQ6E1Wt8zeKC5oK8yQLg2JzrF\",\n  \"3c7r6ZtTDxN1fxc1ixM8Ay26hTyfnucs3yx42vVH4LM3\",\n  \"4jsaQWBKn3aSpZbwboxiNRRiagY2xdkoSomfoBRDrdcs\",\n  \"B9txgFSjNXjFQv5VTCu2vhMyCEWnyp9UQWpeZzTLdeKP\",\n  \"96GjikTDDt1FuznnmwE9rzKi2i7gZ3gYwW7g2daW8s2r\",\n  \"C4otrRtEHVeeTkkmMy6WkLkMEbtK49BUgkfYXMNiJhGq\",\n  \"Dtesdhkc5WFDHvjy7JzrpSL7xbN7DHsQhrK5i8vgzogi\",\n  \"Cf2fzzcUhBqtXokdEEg4HVuc4dNmgrsz2J8QsvPwMnFU\",\n  \"DoqovGZ86RjsFZd3TGaLDwaU8mXmw3C195BfV31UuG85\",\n  \"Au3h7j9twciHo6YQ9vznx97rC1D82dcqdBgBqkzwKMGm\",\n  \"93N68g43aiDTJTTQdJL5djSBytTCSqL62woXubFrX2vJ\",\n  \"6WwzhMYbAWem22ZcVcS2NohsccjmrWZbq1aHDySABTZ2\",\n  \"DGkYVSFoq5cafZJZboHPuzdrKtVYrm4R5oS18nEuZaGu\",\n  \"8MLm9nLqLsDQgoN7nHkUoeu2oqe8J3cuZKc2KCX8Zde2\",\n  \"9Zn1R4fdAHZSrq6hrXdQWdRVJhAUEtpU9gT26KRgRjCb\",\n  \"6j53Ln8GvosfZXar1WCNrmURVxjR8GV9Es2HE6fTvkz9\",\n  \"9Kevoh8H31NQV8kB89aocRTrkt2UGqbs7Ani73WkACrf\",\n  \"8MTsYKzp4qNEFXzM6nWhRk759qqSMbur5DXjbWwDNFCj\",\n  \"CcCVqUaMsKNcQwWHHA3H5yydjcspcD3LhBYP9aYrmweK\",\n  \"FCiSbFdcZSpx1YZFfUCV56KQ34C8CJY9A3JrnMGopNip\",\n  \"5R5cr6dq3v25Z4Cq7qM2dG4hxN5gbY5eUKzETRnBYXUf\",\n  \"DeQDKoAuR1BYvspX8dHehyua3VRuCmD2zbEvZ97NLjas\",\n  \"C6nyuPc5wZLB1c3rFvchbF4aLZBn4yujtDyeqsJDhXSL\",\n  \"7vzFUmX9qZiznTikem4Eu2v2aa1BkqDsuT3gvYLq2rRT\",\n  \"Nf2WRYpG8hquo3BsvioYxKZmDECvuS7HmDhHrpQrdYv\",\n  \"Fz5jKMiXi5SN4TqQ12fYm49QFxJkeLoyYEZWVwRwyBCC\",\n  \"FCs3xYBoo55HenGpeNETpuWjuPfzegHhDQFzEuu3HWuM\",\n  \"CC56nm4aRSd7RzcnrX9VH5VXnfj5Bq1XLGRxXy9oDm2p\",\n  \"BLJg1tgRZdzPxXhJngtbCnuJ8PtsVpFjFcoUby2NXxjH\",\n  \"4Y3Lfzeh9m45GomuKpqjj6bVRLpNnn7wyosPzRyx8bQW\",\n  \"8GCrwThSdG2JUXwwisFtwEs5gkGGxjNKQYArRtq6bEPc\",\n  \"78wF4F64K31GbbC9jhi3me4kSqznGtf6KHFLTUTkrEjB\",\n  \"Cy57RjcnLmWhY2ccjEwcFu6SvoySbq6mevDhY54DxVLh\",\n  \"FVTRVzRagRDQj7Lp2n1GyRJ85TNSErhYk4xf283Svnrn\",\n  \"rMH5QQxx9WNZYeCgTEr7TogXT1rnATDaibWcvibHxRp\",\n  \"ENFgBr93NsoG9QHUTHbfEobWtnFmV1fEsAuiaNq1Qxiv\",\n  \"454LshEu93z3auzq2cMbA7PsSw9v8zhuvQRGkfP6eGMx\",\n  \"aHe1GAdAVgijtp55eUmPe6DdUYonRVw6Xdq1QpTmVeM\",\n  \"4BG5Yo4o2nHGDgA1AqH94oUk2CouLuGCSK7ZjqHQaT2J\",\n  \"CCDKm4AEVxeeNVdYNM7X8CBQmtNpySEhBvp1yQ93jjdY\",\n  \"27XFvenPT5LpkJ8FVJdHf3CPaARqgCWm1EsSRt2HrDcH\",\n  \"DqH8Q3e5Bts3rCsC6UpTP18Hf1fD7dfGaP71uR6HpxRg\",\n  \"FPfgDLbWDjSx1FnEdeM5DWqJNpRqv5oDqpmvW18Ef5QQ\",\n  \"6u1TPKaTboYQ8gU7DF7AgEp5cP9N3FTuxxsu5oWi5uJ5\",\n  \"CCg1C49hNR91425PeS1HatXobQkAniJ775N6pjWAiqp2\",\n  \"ENxmdaEsTWXkufsTLngp3sZ89dFZWNoke7F95aVE67Kz\",\n  \"39h7MdBeuMFvcBz5FKGQBqnqR7BSAfp4ob8qLphLc4yo\",\n  \"CRGEVCx5HrRjsbX71RM8acuydKHiXwRwWysF9BJvYTG9\",\n  \"3mzktRHfhxjPirgHF9sjbXf2kwW1RZSudaRpyc478BAA\",\n  \"9J7F9nx2UyVYPuTk21ni2jxprgBpzfMpN7HxJqgKUWxd\",\n  \"3K8NyBHkMdWX672bqqtJC5mZASvqCHtZXPRMhKz8iP2x\",\n  \"65sAs4U5puLv3UC8f5y1DVCGAhpMtTRUoKpMdUMFY1sY\",\n  \"Dxb5mPASvxsoDRhHZEu2arYRqvYByYgyvrtUYxnFJsGg\",\n  \"GF2hTcNvU7HFj5682KBVpffoS223aVhYaaCcM9ngxehs\",\n  \"BBF6JkFMRLMqW5F4Ri8VUNnAK5T2n9MLmRhtuXQNJmZh\",\n  \"8x8J5MGViuLTtxwjwnrLM29USZqx7TcbGvqdaNfA1m8X\",\n  \"U4Babgbjm7ciqth5XDJppzVk7WhGnHNZUGvPL2ox8HB\",\n  \"3Y9f4MxYEvjWfiBJexTSnRQcKVD8e1aSUs4Z6FZYj5K1\",\n  \"CZZ5B1Az9kW2nyRHM5mABS2NWuStoHCPcfh75KFo2UsN\",\n  \"tRKmpQWu48phJXR7W4d2skG9W4nvb5cb976bkGQYAuN\",\n  \"3iAabhw1Rdu2HimbzT9gDCDcuod7TmBtcZwFWxGQyFfQ\",\n  \"5TTRcMNMwhiGUZ8JtTnqB6sW3g6P4fAFhWLsV2kJWEsg\",\n  \"8B8VaqcxunjTnbq4mGhPW3C2eHuByWVBRjqKthwX2aRQ\",\n  \"9hi9yukj5ZjtD2Z73zRLca8kARChJmgEaMtYefx454Q3\",\n  \"DTrqt4Wb1H16hdrLwEfFkNVwGYWPqnghb3pREEZejhtS\",\n  \"EitHiKHGWWadEhZahZLHURVoxPqAUofKLEXfYU9NsvMp\",\n  \"4ZscrWACeLLYrsFLQjX16bdjCqLy6vkKuHa2w3fsakDe\",\n  \"FuPR7rUMzphpQ3YhmENUJUt5gvtDpJDbUqSa6FA82U6p\",\n  \"2o9C56tqnc54QF54MxGn38DNNEa9vAMow3bc5VMqogMV\",\n  \"Ffgr3YTKvhWkdv2pSW2F5VEVvLQvnatje1ookcuJpBAF\",\n  \"J9rKCnTuERL9G95FmFQnYDeLVYrNa7pQBiL13oqGgH3t\",\n  \"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\",\n  \"779kNT4696bMaAkeAHxezAuniTrVjfvrp3vABvhdPGWs\",\n  \"4fA5U4w4DfmNojhKKBCVHeAY5VQ4dYpx5uFQSsrknSFA\",\n  \"BU2oyceVSZXYzxURwhAvfULBSe59v22LQfuYgS585L1g\",\n  \"3BApsMpiSaHfF2a59aW9XAPfGQ8WMaQd7Q1F9rTbhGqv\",\n  \"5oWeivCzcQrcmueDbUAfPQRfjGeDqkVDxErchHUz8NCh\",\n  \"2rrZbBRpt5o7GKnTHusTqRANsj1vs5t4WC9CQPt2cujb\",\n  \"CbN1vKsz99qbQidVR5RfBLmrxPoYbJguEAnsFi5BN5WU\",\n  \"CTwRHSdPNGucwLuLqUMSc5ddJbnSN7GjKFYfm91wJHVo\",\n  \"6NKWLHZENHKvditMFu7z97qJypmJTsz1PbjFVpsmrXMY\",\n  \"5D2kc7J4RNcMzfoAQz1E4NWjLS7GzTnJKvTV3HiospCZ\",\n  \"9hrjJvaYETxp6VcRRX4yzT8jtH6gzoVtFUqdaCksisx4\",\n  \"2kUMSNYvpWXqrpSV2L1GV5UWYH3CFXF7F9QbGkgv9kNw\",\n  \"8nRkgYkufaLQVtuaaPGwrKJBSS7tu55YWx3EiRufD9uU\",\n  \"7aLAz1NE2hx7adjrgDs87GT49gwTkmW2n8gHSRJUVzHa\",\n  \"G2kuL2iKEdYmZBnM1a8rA5j5si4AqySJUq3ujPaJxkDk\",\n  \"FQJUJSHQACz7WLHVM7iS2dKnZVWwFHTuwUdtByLMxXF8\",\n  \"AhtJTzNB7zwLB7RxqbYcpAKBeEfxYrczz12Nn4FgVb2y\",\n  \"7zEHcoELyPvmipqXL297edddhxLfx25UGTvY8dMrZqzT\",\n  \"38mqzHtHLmUMCZyuZKEQB8Zkg2fGkToYw4gVwPC3NoH3\",\n  \"3kL3aPezAbZxzamMurWvjMpXkVQgLAgrh9wT1CeS3CnK\",\n  \"EB7hzkjRjV3AFCfQDuPK8joneM6dW2a96rJCHvc7p1fW\",\n  \"AVbSKg271GmzqrtPmU5fRza9uR2HGLhTy3yiM1mMPTpw\",\n  \"CoVJmrq8KeRZGAcKa6h6mueQsFotVkibehWeKGCZBXe\",\n  \"5bwpMvAA65frL4A1B3nYQcQjLHGUzHhkHX5FV4CVi1s8\",\n  \"Kyi9YmFqBARjW8KwS192hyrfzwyQbCR6utt5yr6hoNg\",\n  \"ESrJ2tXdmkGv81FNJmJcezunQLz3fP6WFzfmZd6d4FPn\",\n  \"8qMsDP7hFWZAKGA2taL7u8rERH4te4D4i8cxzHKtAMcA\",\n  \"5c1ymadNzqM9cE8K8gqDguNYg2jWnGcNBV5S3tGGdhM2\",\n  \"Gx4Y9M67BPsAViveoBcm4JocVh82S7pZsaXc4PH9EibE\",\n  \"5Xb7BoMNP19cXPgLdzrAkJCarznkYAfpmyyCvynJam7K\",\n  \"EZH44QW2BzUijN79rrngRUoGHCJGWitabxkVkT82XpeA\",\n];\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useNFTTVL from \"../../hooks/useNFTTVL\";\nimport {\n  BETA_CHAINS,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n} from \"../../utils/consts\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport {\n  //DENY_LIST,\n  ALLOW_LIST,\n} from \"./nftLists\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  tableBox: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    flexWrap: \"wrap\",\n  },\n  randomButton: {\n    margin: \"0px auto 8px\",\n    display: \"block\",\n  },\n  randomNftContainer: {\n    minHeight: \"550px\",\n    maxWidth: \"100%\",\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n  tableContainer: {\n    flexGrow: 1,\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n  },\n}));\n\nconst NFTStats: React.FC<any> = () => {\n  const classes = useStyles();\n  const nftTVL = useNFTTVL();\n\n  //Disable this to quickly turn off\n  //TODO also change what data is fetched off this\n  const enableRandomNFT = true;\n\n  const [randomNumber, setRandomNumber] = useState<number | null>(null);\n  const randomNft = useMemo(\n    () =>\n      (randomNumber !== null && nftTVL.data && nftTVL.data[randomNumber]) ||\n      null,\n    [randomNumber, nftTVL.data]\n  );\n  const genRandomNumber = useCallback(() => {\n    if (!nftTVL || !nftTVL.data || !nftTVL.data?.length || nftTVL.isFetching) {\n      setRandomNumber(null);\n    } else {\n      let found = false;\n      let nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n\n      while (!found) {\n        if (!nftTVL.data) {\n          return null;\n        }\n        const item = nftTVL?.data[nextNumber]?.mintKey?.toLowerCase() || null;\n        if (ALLOW_LIST.find((x) => x.toLowerCase() === item)) {\n          found = true;\n        } else {\n          nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n        }\n      }\n\n      setRandomNumber(nextNumber);\n    }\n  }, [nftTVL]);\n  useEffect(() => {\n    genRandomNumber();\n  }, [nftTVL.isFetching, genRandomNumber]);\n\n  const data = useMemo(() => {\n    const output: any[] = [];\n    if (nftTVL.data && !nftTVL.isFetching) {\n      CHAINS_WITH_NFT_SUPPORT.filter(\n        (chain) => !BETA_CHAINS.find((x) => x === chain.id)\n      ).forEach((chain) => {\n        output.push({\n          nfts: nftTVL?.data?.filter((x) => x.chainId === chain.id),\n          chainName: chain.name,\n          chainId: chain.id,\n          chainLogo: chain.logo,\n          contractAddress: getNFTBridgeAddressForChain(chain.id),\n        });\n      });\n    }\n\n    return output;\n  }, [nftTVL]);\n\n  //Generate allow list\n  // useEffect(() => {\n  //   const output: string[] = [];\n  //   if (nftTVL.data) {\n  //     nftTVL.data.forEach((item) => {\n  //       if (\n  //         !DENY_LIST.find((x) => x.toLowerCase() === item.mintKey.toLowerCase())\n  //       ) {\n  //         if (!output.includes(item.mintKey)) {\n  //           output.push(item.mintKey);\n  //         }\n  //       }\n  //     });\n  //   }\n  //   console.log(JSON.stringify(output));\n  // }, [nftTVL.data]);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      // {\n      //   Header: \"Address\",\n      //   accessor: \"contractAddress\",\n      //   disableGroupBy: true,\n      //   Cell: (value: any) =>\n      //     value.row?.original?.contractAddress &&\n      //     value.row?.original?.chainId ? (\n      //       <SmartAddress\n      //         chainId={value.row?.original?.chainId}\n      //         address={value.row?.original?.contractAddress}\n      //       />\n      //     ) : (\n      //       \"\"\n      //     ),\n      // },\n      {\n        Header: \"NFTs Locked\",\n        id: \"nftCount\",\n        accessor: \"nftCount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nfts?.length !== undefined\n            ? numeral(value.row?.original?.nfts?.length).format(\"0 a\")\n            : \"\",\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h5\">Total NFTs Locked</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          These NFTs are currently locked by the NFT Bridge contracts.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n      {!nftTVL.isFetching ? (\n        <div\n          className={clsx(classes.explainerContainer, classes.totalContainer)}\n        >\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"div\"\n            noWrap\n          >\n            {\"Total \"}\n          </Typography>\n          <Typography\n            variant=\"h3\"\n            component=\"div\"\n            noWrap\n            className={classes.totalValue}\n          >\n            {nftTVL.data?.length || \"0\"}\n          </Typography>\n        </div>\n      ) : null}\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{ sortBy: [{ id: \"nftCount\", desc: true }] }}\n    />\n  );\n\n  const randomNFTContent =\n    enableRandomNFT && randomNft ? (\n      <div className={classes.randomNftContainer}>\n        <Button\n          className={classes.randomButton}\n          variant=\"contained\"\n          onClick={genRandomNumber}\n          color=\"primary\"\n        >\n          Load Random Wormhole NFT\n        </Button>\n        <NFTViewer chainId={randomNft.chainId} value={randomNft} />\n      </div>\n    ) : null;\n\n  // const allNfts =\n  //   nftTVL?.data?.map((thing) => (\n  //     <NFTViewer chainId={thing.chainId} value={thing} />\n  //   )) || [];\n\n  return (\n    <>\n      {header}\n      {nftTVL.isFetching ? (\n        <CircularProgress className={classes.alignCenter} />\n      ) : (\n        <div className={classes.tableBox}>\n          <div className={classes.tableContainer}>{table}</div>\n          {randomNFTContent}\n        </div>\n      )}\n      {/* {allNfts} */}\n    </>\n  );\n};\n\nexport default NFTStats;\n","import axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  RECENT_TRANSACTIONS_WORMHOLE,\n  TOTAL_TRANSACTIONS_WORMHOLE,\n  VAA_EMITTER_ADDRESSES,\n} from \"../utils/consts\";\n\nexport type TransactionCount = {\n  totalAllTime: number;\n  total24h: number;\n  mostRecent: any; //This will be a signedVAA\n};\n\nconst mergeResults = (totals: any, recents: any): TransactionCount | null => {\n  let totalAllTime = 0;\n  let total24h = 0;\n  VAA_EMITTER_ADDRESSES.forEach((address: string) => {\n    let totalAll = (totals?.TotalCount && totals.TotalCount[address]) || 0;\n    let total24 = (totals?.LastDayCount && totals.LastDayCount[address]) || 0;\n\n    totalAllTime += totalAll;\n    total24h += total24;\n  });\n\n  return {\n    totalAllTime,\n    total24h,\n    mostRecent: null,\n  };\n};\n\nconst useTransactionCount = (): DataWrapper<TransactionCount> => {\n  const [totals, setTotals] = useState(null);\n  const [recents, setRecents] = useState(null);\n\n  const [loadingTotals, setLoadingTotals] = useState(false);\n  const [loadingRecents, setLoadingRecents] = useState(false);\n\n  const [totalsError, setTotalsError] = useState(\"\");\n  const [recentsError, setRecentsError] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingTotals(true);\n    axios.get(TOTAL_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setTotals(results.data);\n          setLoadingTotals(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setTotalsError(\"Unable to retrieve transaction totals.\");\n          setLoadingTotals(false);\n        }\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingRecents(true);\n    axios.get(RECENT_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setRecents(results.data);\n          setLoadingRecents(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setRecentsError(\"Unable to retrieve recent transactions.\");\n          setLoadingRecents(false);\n        }\n      }\n    );\n  }, []);\n\n  return useMemo(() => {\n    const data = mergeResults(totals, recents);\n    return {\n      isFetching: loadingRecents || loadingTotals,\n      error: totalsError || recentsError,\n      receivedAt: null,\n      data: data,\n    };\n  }, [\n    totals,\n    recents,\n    loadingRecents,\n    loadingTotals,\n    recentsError,\n    totalsError,\n  ]);\n};\n\nexport default useTransactionCount;\n","import {\n  CircularProgress,\n  Link,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport useTransactionCount from \"../../hooks/useTransactionCount\";\nimport { WORMHOLE_EXPLORER_BASE } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  totalsBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n  },\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  typog: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nconst TransactionMetrics: React.FC<any> = () => {\n  const transactionCount = useTransactionCount();\n  const classes = useStyles();\n  const isFetching = transactionCount.isFetching;\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div>\n        <Typography variant=\"h5\">Transaction Count</Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          This is how many transactions the Token Bridge has processed.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const content = (\n    <div className={classes.totalsBox}>\n      <div className={classes.totalContainer}>\n        <Typography\n          variant=\"body2\"\n          color=\"textSecondary\"\n          component=\"div\"\n          noWrap\n        >\n          {\"Last 48 Hours\"}\n        </Typography>\n        <Typography\n          variant=\"h3\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {transactionCount.data?.total24h || \"0\"}\n        </Typography>\n      </div>\n      <div className={classes.totalContainer}>\n        <Typography\n          variant=\"body2\"\n          color=\"textSecondary\"\n          component=\"div\"\n          noWrap\n        >\n          {\"All Time\"}\n        </Typography>\n        <Typography\n          variant=\"h3\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {transactionCount.data?.totalAllTime || \"0\"}\n        </Typography>\n      </div>\n    </div>\n  );\n\n  const networkExplorer = (\n    <Typography\n      variant=\"subtitle1\"\n      className={clsx(classes.alignCenter, classes.typog)}\n    >\n      To see metrics for the entire Wormhole Network (not just this bridge),\n      check out the{\" \"}\n      <Link href={WORMHOLE_EXPLORER_BASE} target=\"_blank\">\n        Wormhole Network Explorer\n      </Link>\n    </Typography>\n  );\n\n  return (\n    <>\n      {header}\n      {isFetching ? (\n        <CircularProgress className={classes.alignCenter} />\n      ) : (\n        <>\n          {content}\n          {networkExplorer}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default TransactionMetrics;\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { formatUnits, parseUnits } from \"@ethersproject/units\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useMemo } from \"react\";\nimport useTVL from \"../../hooks/useTVL\";\nimport { COLORS } from \"../../muiTheme\";\nimport SmartAddress from \"../SmartAddress\";\nimport { balancePretty } from \"../TokenSelectors/TokenPicker\";\nimport CustodyAddresses from \"./CustodyAddresses\";\nimport NFTStats from \"./NFTStats\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport TransactionMetrics from \"./TransactionMetrics\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(2),\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(1),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n}));\n\nconst StatsRoot: React.FC<any> = () => {\n  const classes = useStyles();\n  const tvl = useTVL();\n\n  const sortTokens = useMemo(() => {\n    return (rowA: any, rowB: any) => {\n      if (rowA.isGrouped && rowB.isGrouped) {\n        return rowA.values.assetAddress > rowB.values.assetAddress ? 1 : -1;\n      } else if (rowA.isGrouped && !rowB.isGrouped) {\n        return 1;\n      } else if (!rowA.isGrouped && rowB.isGrouped) {\n        return -1;\n      } else if (rowA.original.symbol && !rowB.original.symbol) {\n        return 1;\n      } else if (rowB.original.symbol && !rowA.original.symbol) {\n        return -1;\n      } else if (rowA.original.symbol && rowB.original.symbol) {\n        return rowA.original.symbol > rowB.original.symbol ? 1 : -1;\n      } else {\n        return rowA.original.assetAddress > rowB.original.assetAddress ? 1 : -1;\n      }\n    };\n  }, []);\n  const tvlColumns = useMemo(() => {\n    return [\n      {\n        Header: \"Token\",\n        id: \"assetAddress\",\n        sortType: sortTokens,\n        disableGroupBy: true,\n        accessor: (value: any) => ({\n          chainId: value.originChainId,\n          symbol: value.symbol,\n          name: value.name,\n          logo: value.logo,\n          assetAddress: value.assetAddress,\n        }),\n        aggregate: (leafValues: any) => leafValues.length,\n        Aggregated: ({ value }: { value: any }) =>\n          `${value} Token${value === 1 ? \"\" : \"s\"}`,\n        Cell: (value: any) => (\n          <div className={classes.tokenContainer}>\n            <div className={classes.logoPositioner}>\n              {value.row?.original?.logo ? (\n                <img\n                  src={value.row?.original?.logo}\n                  alt=\"\"\n                  className={classes.logo}\n                />\n              ) : null}\n            </div>\n            <SmartAddress\n              chainId={value.row?.original?.originChainId}\n              address={value.row?.original?.assetAddress}\n              symbol={value.row?.original?.symbol}\n              tokenName={value.row?.original?.name}\n            />\n          </div>\n        ),\n      },\n      { Header: \"Chain\", accessor: \"originChain\" },\n      {\n        Header: \"Amount\",\n        accessor: \"amount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.amount !== undefined\n            ? numeral(value.row?.original?.amount).format(\"0,0.00\")\n            : \"\",\n      },\n      {\n        Header: \"Total Value (USD)\",\n        id: \"totalValue\",\n        accessor: \"totalValue\",\n        align: \"right\",\n        disableGroupBy: true,\n        aggregate: (leafValues: any) =>\n          balancePretty(\n            formatUnits(\n              leafValues.reduce(\n                (p: BigNumber, v: number | null | undefined) =>\n                  v ? p.add(parseUnits(v.toFixed(18).toString(), 18)) : p,\n                BigNumber.from(0)\n              ),\n              18\n            )\n          ),\n        Aggregated: ({ value }: { value: any }) => value,\n        Cell: (value: any) =>\n          value.row?.original?.totalValue !== undefined\n            ? numeral(value.row?.original?.totalValue).format(\"0.0 a\")\n            : \"\",\n      },\n      {\n        Header: \"Unit Price (USD)\",\n        accessor: \"quotePrice\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.quotePrice !== undefined\n            ? numeral(value.row?.original?.quotePrice).format(\"0,0.00\")\n            : \"\",\n      },\n    ];\n  }, [\n    classes.logo,\n    classes.tokenContainer,\n    classes.logoPositioner,\n    sortTokens,\n  ]);\n  const tvlString = useMemo(() => {\n    if (!tvl.data) {\n      return \"\";\n    } else {\n      let sum = 0;\n      tvl.data.forEach((val) => {\n        if (val.totalValue) sum += val.totalValue;\n      });\n      return numeral(sum).format(\"0 a\").toUpperCase();\n    }\n  }, [tvl.data]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Paper className={classes.mainPaper}>\n        <>\n          <div className={classes.flexBox}>\n            <div className={classes.explainerContainer}>\n              <Typography variant=\"h5\">Total Value Locked</Typography>\n              <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                These assets are currently locked by the Token Bridge contracts.\n              </Typography>\n            </div>\n            <div className={classes.grower} />\n            {!tvl.isFetching ? (\n              <div\n                className={clsx(\n                  classes.explainerContainer,\n                  classes.totalContainer\n                )}\n              >\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  component=\"div\"\n                  noWrap\n                >\n                  {\"Total (USD)\"}\n                </Typography>\n                <Typography\n                  variant=\"h3\"\n                  component=\"div\"\n                  noWrap\n                  className={classes.totalValue}\n                >\n                  {tvlString}\n                </Typography>\n              </div>\n            ) : null}\n          </div>\n          {!tvl.isFetching ? (\n            <MuiReactTable\n              columns={tvlColumns}\n              data={tvl.data}\n              skipPageReset={false}\n              initialState={{ sortBy: [{ id: \"totalValue\", desc: true }] }}\n            />\n          ) : (\n            <CircularProgress className={classes.alignCenter} />\n          )}\n        </>\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <NFTStats />\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <TransactionMetrics />\n      </Paper>\n      <Paper className={classes.mainPaper}>\n        <CustodyAddresses />\n      </Paper>\n    </Container>\n  );\n};\n\nexport default StatsRoot;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n  uint8ArrayToNative,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOLANA_SYSTEM_PROGRAM_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type OriginalAssetInfo = {\n  originChain: ChainId | null;\n  originAddress: string | null;\n  originTokenId: string | null;\n};\n\nexport async function getOriginalAssetToken(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  provider?: Web3Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider) {\n      promise = await getOriginalAssetEth(\n        getTokenBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = await getOriginalAssetSol(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    } else if (foreignChain === CHAIN_ID_TERRA) {\n      const lcd = new LCDClient(TERRA_HOST);\n      promise = await getOriginalAssetTerra(lcd, foreignNativeStringAddress);\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\nexport async function getOriginalAssetNFT(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  tokenId?: string,\n  provider?: Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider && tokenId) {\n      promise = getOriginalAssetEthNFT(\n        getNFTBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        tokenId,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = getOriginalAssetSolNFT(\n        connection,\n        SOL_NFT_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\n//TODO refactor useCheckIfWormholeWrapped to use this function, and probably move to SDK\nexport async function getOriginalAsset(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  nft: boolean,\n  tokenId?: string,\n  provider?: Provider\n): Promise<WormholeWrappedNFTInfo> {\n  const result = nft\n    ? await getOriginalAssetNFT(\n        foreignChain,\n        foreignNativeStringAddress,\n        tokenId,\n        provider\n      )\n    : await getOriginalAssetToken(\n        foreignChain,\n        foreignNativeStringAddress,\n        provider\n      );\n\n  if (\n    isEVMChain(result.chainId) &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      ethers.constants.AddressZero\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n  if (\n    result.chainId === CHAIN_ID_SOLANA &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      SOLANA_SYSTEM_PROGRAM_ADDRESS\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n\n  return result;\n}\n\n//This potentially returns the same chain as the foreign chain, in the case where the asset is native\nfunction useOriginalAsset(\n  foreignChain: ChainId,\n  foreignAddress: string,\n  nft: boolean,\n  tokenId?: string\n): DataWrapper<OriginalAssetInfo> {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const [originAddress, setOriginAddress] = useState<string | null>(null);\n  const [originTokenId, setOriginTokenId] = useState<string | null>(null);\n  const [originChain, setOriginChain] = useState<ChainId | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previousArgs, setPreviousArgs] = useState<{\n    foreignChain: ChainId;\n    foreignAddress: string;\n    nft: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.foreignChain === foreignChain &&\n    previousArgs.foreignAddress === foreignAddress &&\n    previousArgs.nft === nft &&\n    previousArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () => setPreviousArgs({ foreignChain, foreignAddress, nft, tokenId }),\n    [foreignChain, foreignAddress, nft, tokenId]\n  );\n\n  const argumentError = useMemo(\n    () =>\n      !foreignChain ||\n      !foreignAddress ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && nft && !tokenId) ||\n      argsEqual,\n    [isReady, nft, tokenId, argsEqual, foreignChain, foreignAddress]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setError(\"\");\n      setOriginAddress(null);\n      setOriginTokenId(null);\n      setOriginChain(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n\n    getOriginalAsset(foreignChain, foreignAddress, nft, tokenId, provider)\n      .then((result) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setArgs();\n          setOriginAddress(\n            hexToNativeString(\n              uint8ArrayToHex(result.assetAddress),\n              result.chainId\n            ) || null\n          );\n          setOriginTokenId(result.tokenId || null);\n          setOriginChain(result.chainId);\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Unable to determine original asset.\");\n        }\n      });\n  }, [\n    foreignChain,\n    foreignAddress,\n    nft,\n    provider,\n    setArgs,\n    argumentError,\n    tokenId,\n    argsEqual,\n  ]);\n\n  const output: DataWrapper<OriginalAssetInfo> = useMemo(\n    () => ({\n      error: error,\n      isFetching: isLoading,\n      data:\n        originChain || originAddress || originTokenId\n          ? { originChain, originAddress, originTokenId }\n          : null,\n      receivedAt: null,\n    }),\n    [isLoading, originAddress, originChain, originTokenId, error]\n  );\n\n  return output;\n}\n\nexport default useOriginalAsset;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport useFetchForeignAsset, {\n  ForeignAssetInfo,\n} from \"../hooks/useFetchForeignAsset\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetadata from \"../hooks/useMetadata\";\nimport useOriginalAsset, { OriginalAssetInfo } from \"../hooks/useOriginalAsset\";\nimport { COLORS } from \"../muiTheme\";\nimport { BETA_CHAINS, CHAINS, CHAINS_BY_ID } from \"../utils/consts\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport SmartAddress from \"./SmartAddress\";\nimport { RegisterNowButtonCore } from \"./Transfer/RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(2),\n    },\n  },\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  spacer: {\n    height: theme.spacing(3),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  arrowIcon: {\n    margin: \"0 auto\",\n    fontSize: \"70px\",\n  },\n  resultContainer: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction PrimaryAssetInfomation({\n  lookupChain,\n  lookupAsset,\n  originChain,\n  originAsset,\n  showLoader,\n}: {\n  lookupChain: ChainId;\n  lookupAsset: string;\n  originChain: ChainId;\n  originAsset: string;\n  showLoader: boolean;\n}) {\n  const classes = useStyles();\n  const tokenArray = useMemo(() => [originAsset], [originAsset]);\n  const metadata = useMetadata(originChain, tokenArray);\n  const nativeContent = (\n    <div>\n      <Typography>{`This is not a Wormhole wrapped token.`}</Typography>\n    </div>\n  );\n  const wrapped = (\n    <div>\n      <Typography>{`This is wrapped by Wormhole! Here is the original token: `}</Typography>\n      <div className={classes.flexBox}>\n        <Typography>{`Chain: ${CHAINS_BY_ID[originChain].name}`}</Typography>\n        <div>\n          <Typography component=\"div\">\n            {\"Token: \"}\n            <SmartAddress\n              address={originAsset}\n              chainId={originChain}\n              symbol={metadata.data?.get(originAsset)?.symbol}\n              tokenName={metadata.data?.get(originAsset)?.tokenName}\n            />\n          </Typography>\n        </div>\n      </div>\n    </div>\n  );\n  return lookupChain === originChain ? nativeContent : wrapped;\n}\n\nfunction SecondaryAssetInformation({\n  chainId,\n  foreignAssetInfo,\n  originAssetInfo,\n}: {\n  chainId: ChainId;\n  foreignAssetInfo?: ForeignAssetInfo;\n  originAssetInfo?: OriginalAssetInfo;\n}) {\n  const classes = useStyles();\n  const tokenArray: string[] = useMemo(() => {\n    //Saved to a variable to help typescript cope\n    const originAddress = originAssetInfo?.originAddress;\n    return originAddress && chainId === originAssetInfo?.originChain\n      ? [originAddress]\n      : foreignAssetInfo?.address\n      ? [foreignAssetInfo?.address]\n      : [];\n  }, [foreignAssetInfo, originAssetInfo, chainId]);\n  const metadata = useMetadata(chainId, tokenArray);\n  //TODO when this is the origin chain\n  return !originAssetInfo ? null : chainId === originAssetInfo.originChain ? (\n    <div>\n      <Typography>{`Transferring to ${CHAINS_BY_ID[chainId].name} will unwrap the token:`}</Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={originAssetInfo.originAddress || undefined}\n          symbol={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")\n              ?.tokenName || undefined\n          }\n        />\n      </div>\n    </div>\n  ) : !foreignAssetInfo ? null : foreignAssetInfo.doesExist === false ? (\n    <div>\n      <Typography>{`This token has not yet been registered on ${CHAINS_BY_ID[chainId].name}`}</Typography>\n      <RegisterNowButtonCore\n        originChain={originAssetInfo?.originChain || undefined}\n        originAsset={\n          nativeToHexString(\n            originAssetInfo?.originAddress || undefined,\n            originAssetInfo?.originChain || CHAIN_ID_SOLANA // this should exist\n          ) || undefined\n        }\n        targetChain={chainId}\n      />\n    </div>\n  ) : (\n    <div>\n      <Typography>When bridged, this asset becomes: </Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={foreignAssetInfo.address || undefined}\n          symbol={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.tokenName ||\n            undefined\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function TokenOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n\n  const [primaryLookupChain, setPrimaryLookupChain] = useState(CHAIN_ID_SOLANA);\n  const [primaryLookupAsset, setPrimaryLookupAsset] = useState(\"\");\n\n  const [secondaryLookupChain, setSecondaryLookupChain] =\n    useState(CHAIN_ID_TERRA);\n\n  const primaryLookupChainOptions = useMemo(\n    () => (isBeta ? CHAINS.filter((x) => !BETA_CHAINS.includes(x.id)) : CHAINS),\n    [isBeta]\n  );\n  const secondaryLookupChainOptions = useMemo(\n    () =>\n      isBeta\n        ? CHAINS.filter(\n            (x) => !BETA_CHAINS.includes(x.id) && x.id !== primaryLookupChain\n          )\n        : CHAINS.filter((x) => x.id !== primaryLookupChain),\n    [isBeta, primaryLookupChain]\n  );\n\n  const handlePrimaryLookupChainChange = useCallback(\n    (e) => {\n      setPrimaryLookupChain(e.target.value);\n      if (secondaryLookupChain === e.target.value) {\n        setSecondaryLookupChain(\n          e.target.value === CHAIN_ID_SOLANA ? CHAIN_ID_TERRA : CHAIN_ID_SOLANA\n        );\n      }\n      setPrimaryLookupAsset(\"\");\n    },\n    [secondaryLookupChain]\n  );\n  const handleSecondaryLookupChainChange = useCallback((e) => {\n    setSecondaryLookupChain(e.target.value);\n  }, []);\n  const handlePrimaryLookupAssetChange = useCallback((event) => {\n    setPrimaryLookupAsset(event.target.value);\n  }, []);\n\n  const originInfo = useOriginalAsset(\n    primaryLookupChain,\n    primaryLookupAsset,\n    false\n  );\n  const foreignAssetInfo = useFetchForeignAsset(\n    originInfo.data?.originChain || 1,\n    originInfo.data?.originAddress || \"\",\n    secondaryLookupChain\n  );\n\n  const primaryWalletIsActive = !originInfo.data;\n  const secondaryWalletIsActive = !primaryWalletIsActive;\n\n  const primaryWallet = useIsWalletReady(\n    primaryLookupChain,\n    primaryWalletIsActive\n  );\n  const secondaryWallet = useIsWalletReady(\n    secondaryLookupChain,\n    secondaryWalletIsActive\n  );\n\n  const primaryWalletError =\n    isEVMChain(primaryLookupChain) &&\n    primaryLookupAsset &&\n    !originInfo.data &&\n    !originInfo.error &&\n    (!primaryWallet.isReady ? primaryWallet.statusMessage : \"\");\n  const originError = originInfo.error;\n  const primaryError = primaryWalletError || originError;\n\n  const secondaryWalletError =\n    isEVMChain(secondaryLookupChain) &&\n    originInfo.data?.originAddress &&\n    originInfo.data?.originChain &&\n    !foreignAssetInfo.data &&\n    (!secondaryWallet.isReady ? secondaryWallet.statusMessage : \"\");\n  const foreignError = foreignAssetInfo.error;\n  const secondaryError = secondaryWalletError || foreignError;\n\n  const primaryContent = (\n    <>\n      <Typography variant=\"h5\">Source Information</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Enter a token from any supported chain to get started.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Chain\"\n        value={primaryLookupChain}\n        onChange={handlePrimaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {primaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        label=\"Paste an address\"\n        value={primaryLookupAsset}\n        onChange={handlePrimaryLookupAssetChange}\n      />\n      <div className={classes.centered}>\n        {isEVMChain(primaryLookupChain) ? (\n          <KeyAndBalance chainId={primaryLookupChain} />\n        ) : null}\n        {primaryError ? (\n          <Typography color=\"error\">{primaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {originInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <PrimaryAssetInfomation\n            lookupAsset={primaryLookupAsset}\n            lookupChain={primaryLookupChain}\n            originChain={originInfo.data.originChain}\n            originAsset={originInfo.data.originAddress}\n            showLoader={originInfo.isFetching}\n          />\n        ) : null}\n      </div>\n    </>\n  );\n\n  const secondaryContent = originInfo.data ? (\n    <>\n      <Typography variant=\"h5\">Bridge Results</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Select a chain to see the result of bridging this token.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Other Chain\"\n        value={secondaryLookupChain}\n        onChange={handleSecondaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {secondaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <div className={classes.centered}>\n        {isEVMChain(secondaryLookupChain) ? (\n          <KeyAndBalance chainId={secondaryLookupChain} />\n        ) : null}\n        {secondaryError ? (\n          <Typography color=\"error\">{secondaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {foreignAssetInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <SecondaryAssetInformation\n            foreignAssetInfo={foreignAssetInfo.data || undefined}\n            originAssetInfo={originInfo.data || undefined}\n            chainId={secondaryLookupChain}\n          />\n        ) : null}\n      </div>\n    </>\n  ) : null;\n\n  const content = (\n    <div>\n      <Container maxWidth=\"md\" className={classes.centered}>\n        <HeaderText white small>\n          Token Origin Verifier\n        </HeaderText>\n        <div className={classes.spacer} />\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>{primaryContent}</Card>\n        {secondaryContent ? (\n          <>\n            <div className={classes.centered}>\n              <ArrowDropDownIcon className={classes.arrowIcon} />\n            </div>\n            <Card className={classes.mainCard}>{secondaryContent}</Card>\n          </>\n        ) : null}\n      </Container>\n    </div>\n  );\n\n  return content;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useAssociatedAccountExistsState } from \"../components/SolanaCreateAssociatedAddress\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../utils/solana\";\n\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\n//If the pool doesn't exist in this app, it's an error.\nexport type SolanaMigratorInformation = {\n  poolAddress: string;\n  fromMint: string;\n  toMint: string;\n  fromMintDecimals: number;\n  fromAssociatedTokenAccountExists: boolean;\n  toAssociatedTokenAccountExists: boolean;\n  setToTokenAccountExists: any;\n  fromAssociatedTokenAccount: string;\n  toAssociatedTokenAccount: string;\n  fromAssociatedTokenAccountBalance: string;\n  toAssociatedTokenAccountBalance: string | null;\n  toCustodyAddress: string;\n  toCustodyBalance: string;\n\n  fromName: string | null;\n  fromSymbol: string | null;\n  fromLogo: string | null;\n  toName: string | null;\n  toSymbol: string | null;\n  toLogo: string | null;\n\n  getNotReadyCause: (amount: string) => string | null;\n\n  migrateTokens: (amount: string) => Promise<string>;\n};\n\n//TODO refactor the workflow page to use this hook\nexport default function useSolanaMigratorInformation(\n  fromMint: string,\n  toMint: string,\n  fromTokenAccount: string\n): DataWrapper<SolanaMigratorInformation> {\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA, false);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [error, setError] = useState(\"\");\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet && wallet.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet]);\n  /*\n      End effects\n      */\n\n  const migrateTokens = useCallback(\n    async (amount) => {\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(amount, fromMintDecimals).toBigInt()\n      );\n      return await signSendAndConfirm(wallet, connection, instruction);\n    },\n    [\n      connection,\n      fromMint,\n      fromTokenAccount,\n      toMint,\n      toTokenAccount,\n      wallet,\n      fromMintDecimals,\n    ]\n  );\n\n  const fromParse = useCallback(\n    (amount: string) => {\n      try {\n        return parseUnits(amount, fromMintDecimals).toBigInt();\n      } catch (e) {\n        return BigInt(0);\n      }\n    },\n    [fromMintDecimals]\n  );\n\n  const getNotReadyCause = useCallback(\n    (amount: string) => {\n      const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n      const accountsReady = fromTokenAccountExists && toTokenAccountExists;\n      const amountGreaterThanZero = fromParse(amount) > BigInt(0);\n      const sufficientFromTokens =\n        fromTokenAccountBalance &&\n        amount &&\n        fromParse(amount) <= fromParse(fromTokenAccountBalance);\n      const sufficientPoolBalance =\n        toCustodyBalance &&\n        amount &&\n        parseFloat(amount) <= parseFloat(toCustodyBalance);\n\n      if (!hasRequisiteData) {\n        return \"This asset is not supported.\";\n      } else if (!isReady) {\n        return \"Wallet is not connected.\";\n      } else if (!accountsReady) {\n        return \"You have not created the necessary token accounts.\";\n      } else if (!amount) {\n        return \"Enter an amount to transfer.\";\n      } else if (!amountGreaterThanZero) {\n        return \"Enter an amount greater than zero.\";\n      } else if (!sufficientFromTokens) {\n        return \"There are not sufficient funds in your wallet for this transfer.\";\n      } else if (!sufficientPoolBalance) {\n        return \"There are not sufficient funds in the pool for this transfer.\";\n      } else {\n        return \"\";\n      }\n    },\n    [\n      fromMint,\n      fromParse,\n      fromTokenAccountBalance,\n      fromTokenAccountExists,\n      isReady,\n      poolAddress,\n      poolExists,\n      toCustodyBalance,\n      toMint,\n      toTokenAccountExists,\n    ]\n  );\n\n  const getMetadata = useCallback(\n    (address: string) => {\n      const tokenMapItem = solanaTokenMap.data?.find(\n        (x) => x.address === address\n      );\n      const metaplexItem = metaplexData.data?.get(address);\n\n      return {\n        symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n        name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n        logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n      };\n    },\n    [metaplexData.data, solanaTokenMap.data]\n  );\n\n  const isFetching = solanaTokenMap.isFetching || metaplexData.isFetching; //TODO add loading state on the actual Solana information\n  const hasRequisiteData = !!(\n    fromMintDecimals !== null &&\n    fromMintDecimals !== undefined &&\n    toTokenAccount &&\n    fromTokenAccountBalance &&\n    toCustodyAddress &&\n    toCustodyBalance\n  );\n\n  const output: DataWrapper<SolanaMigratorInformation> = useMemo(() => {\n    let data: SolanaMigratorInformation | null = null;\n    if (hasRequisiteData) {\n      data = {\n        poolAddress,\n        fromMint,\n        toMint,\n        fromMintDecimals,\n        fromAssociatedTokenAccountExists: fromTokenAccountExists,\n        toAssociatedTokenAccountExists: toTokenAccountExists,\n        fromAssociatedTokenAccount: fromTokenAccount,\n        toAssociatedTokenAccount: toTokenAccount,\n        fromAssociatedTokenAccountBalance: fromTokenAccountBalance,\n        toAssociatedTokenAccountBalance: toTokenAccountBalance || null,\n        toCustodyAddress,\n        toCustodyBalance,\n\n        fromName: getMetadata(fromMint)?.name || null,\n        fromSymbol: getMetadata(fromMint)?.symbol || null,\n        fromLogo: getMetadata(fromMint)?.logo || null,\n        toName: getMetadata(toMint)?.name || null,\n        toSymbol: getMetadata(toMint)?.symbol || null,\n        toLogo: getMetadata(toMint)?.logo || null,\n\n        setToTokenAccountExists,\n\n        getNotReadyCause: getNotReadyCause,\n\n        migrateTokens,\n      };\n    }\n\n    return {\n      isFetching: isFetching,\n      error: error || !hasRequisiteData,\n      receivedAt: null,\n      data,\n    };\n  }, [\n    error,\n    isFetching,\n    hasRequisiteData,\n    poolAddress,\n    fromMint,\n    toMint,\n    fromMintDecimals,\n    fromTokenAccountExists,\n    toTokenAccountExists,\n    fromTokenAccount,\n    toTokenAccount,\n    fromTokenAccountBalance,\n    toTokenAccountBalance,\n    toCustodyAddress,\n    toCustodyBalance,\n    getMetadata,\n    getNotReadyCause,\n    migrateTokens,\n    setToTokenAccountExists,\n  ]);\n\n  return output;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSolanaMigratorInformation from \"../../hooks/useSolanaMigratorInformation\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  CHAINS_BY_ID,\n  getMigrationAssetMap,\n  SOLANA_HOST,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\nfunction SolanaMigrationLineItem({\n  migratorInfo,\n  onLoadComplete,\n}: {\n  migratorInfo: DefaultAssociatedTokenAccountInfo;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const poolInfo = useSolanaMigratorInformation(\n    migratorInfo.fromMintKey,\n    migratorInfo.toMintKey,\n    migratorInfo.defaultFromTokenAccount\n  );\n\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [migrationError, setMigrationError] = useState(\"\");\n\n  const handleMigrateClick = useCallback(() => {\n    if (!poolInfo.data) {\n      return;\n    }\n    setMigrationIsProcessing(true);\n    setMigrationError(\"\");\n    poolInfo.data\n      .migrateTokens(poolInfo.data.fromAssociatedTokenAccountBalance)\n      .then((result) => {\n        setMigrationIsProcessing(false);\n        setTransaction(result);\n      })\n      .catch((e) => {\n        setMigrationError(\"Unable to perform migration.\");\n        setMigrationIsProcessing(false);\n      });\n  }, [poolInfo.data]);\n\n  const precheckError =\n    poolInfo.data &&\n    poolInfo.data.getNotReadyCause(\n      poolInfo.data.fromAssociatedTokenAccountBalance\n    );\n\n  useEffect(() => {\n    if (poolInfo.data || poolInfo.error) {\n      onLoadComplete();\n    }\n  }, [poolInfo, onLoadComplete]);\n\n  if (!poolInfo.data) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Failed to load migration information for token\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={migratorInfo.fromMintKey}\n          />\n        </div>\n      </div>\n    );\n  } else if (transaction) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx\n            chainId={CHAIN_ID_SOLANA}\n            tx={{ id: transaction, block: 1 }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.fromAssociatedTokenAccount}\n            symbol={poolInfo.data.fromSymbol || undefined}\n            tokenName={poolInfo.data.fromName || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.toAssociatedTokenAccount}\n            symbol={poolInfo.data.toSymbol || undefined}\n            tokenName={poolInfo.data.toName || undefined}\n          />\n        </div>\n        {!poolInfo.data.toAssociatedTokenAccountExists ? (\n          <div className={classes.convertButton}>\n            <SolanaCreateAssociatedAddress\n              mintAddress={migratorInfo.toMintKey}\n              readableTargetAddress={poolInfo.data?.toAssociatedTokenAccount}\n              associatedAccountExists={\n                poolInfo.data.toAssociatedTokenAccountExists\n              }\n              setAssociatedAccountExists={poolInfo.data.setToTokenAccountExists}\n            />\n          </div>\n        ) : (\n          <div className={classes.convertButton}>\n            <ButtonWithLoader\n              showLoader={migrationIsProcessing}\n              onClick={handleMigrateClick}\n              error={\n                poolInfo.error\n                  ? poolInfo.error\n                  : migrationError\n                  ? migrationError\n                  : precheckError\n                  ? precheckError\n                  : \"\"\n              }\n              disabled={\n                !!poolInfo.error || !!precheckError || migrationIsProcessing\n              }\n            >\n              Convert\n            </ButtonWithLoader>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\ntype DefaultAssociatedTokenAccountInfo = {\n  fromMintKey: string;\n  toMintKey: string;\n  defaultFromTokenAccount: string;\n  fromAccountInfo: AccountInfo<ParsedAccountData> | null;\n};\n\nconst getTokenBalances = async (\n  walletAddress: string,\n  migrationMap: Map<string, string>\n): Promise<DefaultAssociatedTokenAccountInfo[]> => {\n  try {\n    const connection = new Connection(SOLANA_HOST);\n    const output: DefaultAssociatedTokenAccountInfo[] = [];\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      new PublicKey(walletAddress),\n      { programId: TOKEN_PROGRAM_ID },\n      \"confirmed\"\n    );\n    tokenAccounts.value.forEach((item) => {\n      if (\n        item.account != null &&\n        item.account.data?.parsed?.info?.tokenAmount?.uiAmountString &&\n        item.account.data?.parsed.info?.tokenAmount?.amount !== \"0\"\n      ) {\n        const fromMintKey = item.account.data.parsed.info.mint;\n        const toMintKey = migrationMap.get(fromMintKey);\n        if (toMintKey) {\n          output.push({\n            fromMintKey,\n            toMintKey: toMintKey,\n            defaultFromTokenAccount: item.pubkey.toString(),\n            fromAccountInfo: item.account,\n          });\n        }\n      }\n    });\n\n    return output;\n  } catch (e) {\n    console.error(e);\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function SolanaQuickMigrate() {\n  const chainId = CHAIN_ID_SOLANA;\n  const classes = useStyles();\n  const { isReady, walletAddress } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const [migrators, setMigrators] = useState<\n    DefaultAssociatedTokenAccountInfo[] | null\n  >(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && walletAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getTokenBalances(walletAddress, migrationMap).then(\n        (result) => {\n          if (!cancelled) {\n            setMigratorsFinishedLoading(0);\n            setMigrators(result.filter((x) => x.fromAccountInfo && x));\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, walletAddress, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <SolanaWalletKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((info) => {\n              return (\n                <SolanaMigrationLineItem\n                  migratorInfo={info}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import { useCallback, useState } from \"react\";\nimport { MsgExecuteContract } from \"@terra-money/terra.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport {\n  SUPPORTED_TERRA_TOKENS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport TerraWalletKey from \"./TerraWalletKey\";\nimport {\n  Container,\n  FormControl,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport { useSnackbar } from \"notistack\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n    textAlign: \"center\",\n  },\n}));\n\nconst withdraw = async (wallet: ConnectedWallet, token: string) => {\n  const withdraw = new MsgExecuteContract(\n    wallet.walletAddress,\n    TERRA_TOKEN_BRIDGE_ADDRESS,\n    {\n      withdraw_tokens: {\n        asset: {\n          native_token: {\n            denom: token,\n          },\n        },\n      },\n    },\n    {}\n  );\n  const txResult = await postWithFees(\n    wallet,\n    [withdraw],\n    \"Wormhole - Withdraw Tokens\"\n  );\n  await waitForTerraExecution(txResult);\n};\n\nexport default function WithdrawTokensTerra() {\n  const wallet = useConnectedWallet();\n  const [token, setToken] = useState(SUPPORTED_TERRA_TOKENS[0]);\n  const [isLoading, setIsLoading] = useState(false);\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleClick = useCallback(() => {\n    if (wallet) {\n      (async () => {\n        setIsLoading(true);\n        try {\n          await withdraw(wallet, token);\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"success\">Transaction confirmed.</Alert>,\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">Error withdrawing tokens.</Alert>,\n          });\n          console.error(e);\n        }\n        setIsLoading(false);\n      })();\n    }\n  }, [wallet, token, enqueueSnackbar]);\n\n  return (\n    <Container maxWidth=\"md\">\n      <Typography style={{ textAlign: \"center\" }}>\n        Withdraw tokens from the Terra token bridge\n      </Typography>\n      <TerraWalletKey />\n      <FormControl className={classes.formControl}>\n        <InputLabel>Token</InputLabel>\n        <Select\n          value={token}\n          onChange={(event) => {\n            setToken(event.target.value as string);\n          }}\n        >\n          {SUPPORTED_TERRA_TOKENS.map((name) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n        <ButtonWithLoader\n          onClick={handleClick}\n          disabled={!wallet || isLoading}\n          showLoader={isLoading}\n        >\n          Withdraw\n        </ButtonWithLoader>\n      </FormControl>\n    </Container>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  AppBar,\n  Button,\n  Container,\n  Hidden,\n  IconButton,\n  Link,\n  makeStyles,\n  Tab,\n  Tabs,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { BarChart, HelpOutline, Send } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport { useCallback } from \"react\";\nimport { useHistory, useLocation, useRouteMatch } from \"react-router\";\nimport {\n  Link as RouterLink,\n  NavLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Attest from \"./components/Attest\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./components/Home\";\nimport Migration from \"./components/Migration\";\nimport EvmQuickMigrate from \"./components/Migration/EvmQuickMigrate\";\nimport NFT from \"./components/NFT\";\nimport NFTOriginVerifier from \"./components/NFTOriginVerifier\";\nimport Recovery from \"./components/Recovery\";\nimport Transfer from \"./components/Transfer\";\nimport { useBetaContext } from \"./contexts/BetaContext\";\nimport { COLORS } from \"./muiTheme\";\nimport { CLUSTER } from \"./utils/consts\";\nimport Stats from \"./components/Stats\";\nimport TokenOriginVerifier from \"./components/TokenOriginVerifier\";\nimport SolanaQuickMigrate from \"./components/Migration/SolanaQuickMigrate\";\nimport Wormhole from \"./icons/wormhole-network.svg\";\nimport WithdrawTokensTerra from \"./components/WithdrawTokensTerra\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    background: COLORS.nearBlackWithMinorTransparency,\n    \"& > .MuiToolbar-root\": {\n      margin: \"auto\",\n      width: \"100%\",\n      maxWidth: 1100,\n    },\n  },\n  spacer: {\n    flex: 1,\n    width: \"100vw\",\n  },\n  link: {\n    ...theme.typography.body1,\n    color: theme.palette.text.primary,\n    marginLeft: theme.spacing(6),\n    [theme.breakpoints.down(\"sm\")]: {\n      marginLeft: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: theme.spacing(1),\n    },\n    \"&.active\": {\n      color: theme.palette.primary.light,\n    },\n  },\n  bg: {\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,.1) 0%, rgba(138,146,178,.1) 33%, rgba(69,74,117,.1) 66%, rgba(98,104,143,.1) 100%), linear-gradient(45deg, rgba(153,69,255,.1) 0%, rgba(121,98,231,.1) 20%, rgba(0,209,140,.1) 100%)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n  },\n  content: {\n    margin: theme.spacing(2, 0),\n    [theme.breakpoints.up(\"md\")]: {\n      margin: theme.spacing(4, 0),\n    },\n  },\n  brandLink: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    \"&:hover\": {\n      textDecoration: \"none\",\n    },\n  },\n  brandText: {\n    ...theme.typography.h5,\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: 22,\n    },\n    fontWeight: \"500\",\n    background: `linear-gradient(160deg, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 100%);`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n    letterSpacing: \"3px\",\n    display: \"inline-block\",\n    marginLeft: theme.spacing(0.5),\n  },\n  iconButton: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginRight: theme.spacing(1),\n    },\n  },\n  gradientButton: {\n    backgroundImage: `linear-gradient(45deg, ${COLORS.blue} 0%, ${COLORS.nearBlack}20 50%,  ${COLORS.blue}30 62%, ${COLORS.nearBlack}50  120%)`,\n    transition: \"0.75s\",\n    backgroundSize: \"200% auto\",\n    boxShadow: \"0 0 20px #222\",\n    \"&:hover\": {\n      backgroundPosition:\n        \"right center\" /* change the direction of the change here */,\n    },\n  },\n  betaBanner: {\n    background: `linear-gradient(to left, ${COLORS.blue}40, ${COLORS.green}40);`,\n    padding: theme.spacing(1, 0),\n  },\n  wormholeIcon: {\n    height: 32,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    display: \"inline-block\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const isHomepage = useRouteMatch({ path: \"/\", exact: true });\n  const { push } = useHistory();\n  const { pathname } = useLocation();\n  const handleTabChange = useCallback(\n    (event, value) => {\n      push(value);\n    },\n    [push]\n  );\n  return (\n    <div className={classes.bg}>\n      <AppBar position=\"static\" color=\"inherit\" className={classes.appBar}>\n        <Toolbar>\n          <Link component={RouterLink} to=\"/\" className={classes.brandLink}>\n            <img\n              src={Wormhole}\n              alt=\"Wormhole\"\n              className={classes.wormholeIcon}\n            />\n            <Typography className={clsx(classes.link, classes.brandText)}>\n              wormhole\n            </Typography>\n          </Link>\n          <div className={classes.spacer} />\n          <Hidden implementation=\"css\" xsDown>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              {isHomepage ? (\n                <>\n                  <Tooltip title=\"View wormhole network stats\">\n                    <IconButton\n                      component={NavLink}\n                      to=\"/stats\"\n                      size=\"small\"\n                      className={clsx(classes.link, classes.iconButton)}\n                    >\n                      <BarChart />\n                    </IconButton>\n                  </Tooltip>\n                  <Button\n                    component={RouterLink}\n                    to=\"/transfer\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    className={classes.gradientButton}\n                  >\n                    Transfer Tokens\n                  </Button>\n                </>\n              ) : (\n                <Tooltip title=\"View the FAQ\">\n                  <Button\n                    href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    variant=\"outlined\"\n                    endIcon={<HelpOutline />}\n                  >\n                    FAQ\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          </Hidden>\n          <Hidden implementation=\"css\" smUp>\n            {isHomepage ? (\n              <>\n                <Tooltip title=\"View wormhole network stats\">\n                  <IconButton\n                    component={NavLink}\n                    to=\"/stats\"\n                    size=\"small\"\n                    className={classes.link + \" \" + classes.iconButton}\n                  >\n                    <BarChart />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Transfer tokens to another blockchain\">\n                  <IconButton\n                    component={NavLink}\n                    to=\"/transfer\"\n                    size=\"small\"\n                    className={classes.link}\n                  >\n                    <Send />\n                  </IconButton>\n                </Tooltip>\n              </>\n            ) : (\n              <Tooltip title=\"View the FAQ\">\n                <IconButton\n                  href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  size=\"small\"\n                  className={classes.link}\n                >\n                  <HelpOutline />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Hidden>\n        </Toolbar>\n      </AppBar>\n      {CLUSTER === \"mainnet\" ? null : (\n        <AppBar position=\"static\" className={classes.betaBanner}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You are using the {CLUSTER} build of this app.\n          </Typography>\n        </AppBar>\n      )}\n      {isBeta ? (\n        <AppBar position=\"static\" className={classes.betaBanner}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You have enabled the beta. Enter the secret code again to\n            disable.\n          </Typography>\n        </AppBar>\n      ) : null}\n      <div className={classes.content}>\n        {[\"/transfer\", \"/nft\", \"/redeem\"].includes(pathname) ? (\n          <Container maxWidth=\"md\" style={{ paddingBottom: 24 }}>\n            <Tabs\n              value={pathname}\n              variant=\"fullWidth\"\n              onChange={handleTabChange}\n              indicatorColor=\"primary\"\n            >\n              <Tab label=\"Tokens\" value=\"/transfer\" />\n              <Tab label=\"NFTs\" value=\"/nft\" />\n              <Tab label=\"Redeem\" value=\"/redeem\" to=\"/redeem\" />\n            </Tabs>\n          </Container>\n        ) : null}\n        <Switch>\n          <Route exact path=\"/transfer\">\n            <Transfer />\n          </Route>\n          <Route exact path=\"/nft\">\n            <NFT />\n          </Route>\n          <Route exact path=\"/redeem\">\n            <Recovery />\n          </Route>\n          <Route exact path=\"/nft-origin-verifier\">\n            <NFTOriginVerifier />\n          </Route>\n          <Route exact path=\"/token-origin-verifier\">\n            <TokenOriginVerifier />\n          </Route>\n          <Route exact path=\"/register\">\n            <Attest />\n          </Route>\n          <Route exact path=\"/migrate/Solana/:legacyAsset/:fromTokenAccount\">\n            <Migration chainId={CHAIN_ID_SOLANA} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Solana/\">\n            <SolanaQuickMigrate />\n          </Route>\n          <Route exact path=\"/stats\">\n            <Stats />\n          </Route>\n          <Route exact path=\"/withdraw-tokens-terra\">\n            <WithdrawTokensTerra />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route>\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </div>\n      <div className={classes.spacer} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { makeStyles } from \"@material-ui/core\";\n// import { useRouteMatch } from \"react-router\";\n\nconst useStyles = makeStyles((theme) => ({\n  holeOuterContainer: {\n    maxWidth: \"100%\",\n    width: \"100%\",\n    position: \"relative\",\n  },\n  holeInnerContainer: {\n    position: \"absolute\",\n    zIndex: -1,\n    left: \"50%\",\n    transform: \"translate(-50%, 0)\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  holeImage: {\n    width: \"max(1200px, 100vw)\",\n    maxWidth: \"1600px\",\n  },\n  blurred: {\n    filter: \"blur(2px)\",\n    opacity: \".9\",\n  },\n}));\n\nconst BackgroundImage = () => {\n  const classes = useStyles();\n  // const isHomepage = useRouteMatch({ path: \"/\", exact: true });\n\n  return (\n    <div className={classes.holeOuterContainer}>\n      <div className={classes.holeInnerContainer}></div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Typography variant=\"h5\" style={{ textAlign: \"center\", marginTop: 24 }}>\n          An unexpected error has occurred. Please refresh the page.\n        </Typography>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport attestReducer from \"./attestSlice\";\nimport nftReducer from \"./nftSlice\";\nimport transferReducer from \"./transferSlice\";\nimport tokenReducer from \"./tokenSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    attest: attestReducer,\n    nft: nftReducer,\n    transfer: transferReducer,\n    tokens: tokenReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { SnackbarProvider } from \"notistack\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport BackgroundImage from \"./components/BackgroundImage\";\nimport { BetaContextProvider } from \"./contexts/BetaContext\";\nimport { EthereumProviderProvider } from \"./contexts/EthereumProviderContext\";\nimport { SolanaWalletProvider } from \"./contexts/SolanaWalletContext.tsx\";\nimport { TerraWalletProvider } from \"./contexts/TerraWalletContext.tsx\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { theme } from \"./muiTheme\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <ErrorBoundary>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <ErrorBoundary>\n          <SnackbarProvider maxSnack={3}>\n            <BetaContextProvider>\n              <SolanaWalletProvider>\n                <EthereumProviderProvider>\n                  <TerraWalletProvider>\n                    <HashRouter>\n                      <BackgroundImage />\n                      <App />\n                    </HashRouter>\n                  </TerraWalletProvider>\n                </EthereumProviderProvider>\n              </SolanaWalletProvider>\n            </BetaContextProvider>\n          </SnackbarProvider>\n        </ErrorBoundary>\n      </ThemeProvider>\n    </Provider>\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { RootState } from \".\";\n\n/*\n * Attest\n */\n\nexport const selectAttestActiveStep = (state: RootState) =>\n  state.attest.activeStep;\nexport const selectAttestSourceChain = (state: RootState) =>\n  state.attest.sourceChain;\nexport const selectAttestSourceAsset = (state: RootState) =>\n  state.attest.sourceAsset;\nexport const selectAttestTargetChain = (state: RootState) =>\n  state.attest.targetChain;\nexport const selectAttestAttestTx = (state: RootState) => state.attest.attestTx;\nexport const selectAttestSignedVAAHex = (state: RootState) =>\n  state.attest.signedVAAHex;\nexport const selectAttestIsSending = (state: RootState) =>\n  state.attest.isSending;\nexport const selectAttestIsCreating = (state: RootState) =>\n  state.attest.isCreating;\nexport const selectAttestCreateTx = (state: RootState) => state.attest.createTx;\nexport const selectAttestIsSourceComplete = (state: RootState) =>\n  !!state.attest.sourceChain && !!state.attest.sourceAsset;\n// TODO: check wrapped asset exists or is native attest\nexport const selectAttestIsTargetComplete = (state: RootState) =>\n  selectAttestIsSourceComplete(state) && !!state.attest.targetChain;\nexport const selectAttestIsSendComplete = (state: RootState) =>\n  !!selectAttestSignedVAAHex(state);\nexport const selectAttestIsCreateComplete = (state: RootState) =>\n  !!selectAttestCreateTx(state);\nexport const selectAttestShouldLockFields = (state: RootState) =>\n  selectAttestIsSending(state) || selectAttestIsSendComplete(state);\n\n/*\n * NFT\n */\n\nexport const selectNFTActiveStep = (state: RootState) => state.nft.activeStep;\nexport const selectNFTSourceChain = (state: RootState) => state.nft.sourceChain;\nexport const selectNFTSourceAsset = (state: RootState) => {\n  return state.nft.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectNFTIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.nft.isSourceAssetWormholeWrapped;\nexport const selectNFTOriginChain = (state: RootState) => state.nft.originChain;\nexport const selectNFTOriginAsset = (state: RootState) => state.nft.originAsset;\nexport const selectNFTOriginTokenId = (state: RootState) =>\n  state.nft.originTokenId;\nexport const selectNFTSourceWalletAddress = (state: RootState) =>\n  state.nft.sourceWalletAddress;\nexport const selectNFTSourceParsedTokenAccount = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount;\nexport const selectNFTSourceParsedTokenAccounts = (state: RootState) =>\n  state.nft.sourceParsedTokenAccounts;\nexport const selectNFTSourceBalanceString = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectNFTTargetChain = (state: RootState) => state.nft.targetChain;\nexport const selectNFTTargetAddressHex = (state: RootState) =>\n  state.nft.targetAddressHex;\nexport const selectNFTTargetAsset = (state: RootState) =>\n  state.nft.targetAsset.data?.address;\nexport const selectNFTTransferTx = (state: RootState) => state.nft.transferTx;\nexport const selectNFTSignedVAAHex = (state: RootState) =>\n  state.nft.signedVAAHex;\nexport const selectNFTIsSending = (state: RootState) => state.nft.isSending;\nexport const selectNFTIsRedeeming = (state: RootState) => state.nft.isRedeeming;\nexport const selectNFTRedeemTx = (state: RootState) => state.nft.redeemTx;\nexport const selectNFTSourceError = (state: RootState): string | undefined => {\n  if (!state.nft.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.nft.sourceParsedTokenAccount) {\n    return \"Select an NFT\";\n  }\n  if (\n    state.nft.sourceChain === CHAIN_ID_SOLANA &&\n    !state.nft.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.nft.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  if (state.nft.sourceParsedTokenAccount.decimals !== 0) {\n    // TODO: more advanced NFT check - also check supply and uri\n    return \"For non-NFTs, use the Transfer flow\";\n  }\n  if (\n    state.nft.sourceParsedTokenAccount?.uri === null ||\n    state.nft.sourceParsedTokenAccount?.uri === undefined\n  ) {\n    return \"Failed to load NFT Metadata.\";\n  }\n  if (\n    state.nft.sourceParsedTokenAccount?.uri &&\n    state.nft.sourceParsedTokenAccount?.uri.length > 200\n  ) {\n    return \"This NFT has a URL longer than the maximum supported length of 200.\";\n  }\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.nft.sourceParsedTokenAccount.uiAmountString,\n        state.nft.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Balance must be greater than zero\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectNFTIsSourceComplete = (state: RootState) =>\n  !selectNFTSourceError(state);\nexport const selectNFTTargetError = (state: RootState) => {\n  const sourceError = selectNFTSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.nft.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.nft.sourceChain === state.nft.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (\n    state.nft.targetChain === CHAIN_ID_SOLANA &&\n    !selectNFTTargetAsset(state)\n  ) {\n    // target asset is only required for solana\n    // in the cases of new transfers, target asset will not exist and be created on redeem\n    // Solana requires the derived address to derive the associated token account which is the target on the vaa\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.nft.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectNFTIsTargetComplete = (state: RootState) =>\n  !selectNFTTargetError(state);\nexport const selectNFTIsSendComplete = (state: RootState) =>\n  !!selectNFTSignedVAAHex(state);\nexport const selectNFTIsRedeemComplete = (state: RootState) =>\n  !!selectNFTRedeemTx(state);\nexport const selectNFTShouldLockFields = (state: RootState) =>\n  selectNFTIsSending(state) || selectNFTIsSendComplete(state);\nexport const selectNFTIsRecovery = (state: RootState) => state.nft.isRecovery;\n/*\n * Transfer\n */\n\nexport const selectTransferActiveStep = (state: RootState) =>\n  state.transfer.activeStep;\nexport const selectTransferSourceChain = (state: RootState) =>\n  state.transfer.sourceChain;\nexport const selectTransferSourceAsset = (state: RootState) => {\n  return state.transfer.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectTransferIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.transfer.isSourceAssetWormholeWrapped;\nexport const selectTransferOriginChain = (state: RootState) =>\n  state.transfer.originChain;\nexport const selectTransferOriginAsset = (state: RootState) =>\n  state.transfer.originAsset;\nexport const selectSourceWalletAddress = (state: RootState) =>\n  state.transfer.sourceWalletAddress;\nexport const selectTransferSourceParsedTokenAccount = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount;\nexport const selectTransferSourceParsedTokenAccounts = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccounts;\nexport const selectTransferSourceBalanceString = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferAmount = (state: RootState) => state.transfer.amount;\nexport const selectTransferTargetChain = (state: RootState) =>\n  state.transfer.targetChain;\nexport const selectTransferTargetAddressHex = (state: RootState) =>\n  state.transfer.targetAddressHex;\nexport const selectTransferTargetAssetWrapper = (state: RootState) =>\n  state.transfer.targetAsset;\nexport const selectTransferTargetAsset = (state: RootState) =>\n  state.transfer.targetAsset.data?.address;\nexport const selectTransferTargetParsedTokenAccount = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount;\nexport const selectTransferTargetBalanceString = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferTransferTx = (state: RootState) =>\n  state.transfer.transferTx;\nexport const selectTransferSignedVAAHex = (state: RootState) =>\n  state.transfer.signedVAAHex;\nexport const selectTransferIsSending = (state: RootState) =>\n  state.transfer.isSending;\nexport const selectTransferIsRedeeming = (state: RootState) =>\n  state.transfer.isRedeeming;\nexport const selectTransferRedeemTx = (state: RootState) =>\n  state.transfer.redeemTx;\nexport const selectTransferIsApproving = (state: RootState) =>\n  state.transfer.isApproving;\nexport const selectTransferSourceError = (\n  state: RootState\n): string | undefined => {\n  if (!state.transfer.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount) {\n    return \"Select a token\";\n  }\n  if (!state.transfer.amount) {\n    return \"Enter an amount\";\n  }\n  if (\n    state.transfer.sourceChain === CHAIN_ID_SOLANA &&\n    !state.transfer.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  // no NFT check - NFTs should be blocked by all token pickers\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Amount must be greater than zero\";\n    }\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).gt(\n        parseUnits(\n          state.transfer.sourceParsedTokenAccount.uiAmountString,\n          state.transfer.sourceParsedTokenAccount.decimals\n        )\n      )\n    ) {\n      return \"Amount may not be greater than balance\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectTransferIsSourceComplete = (state: RootState) =>\n  !selectTransferSourceError(state);\nexport const UNREGISTERED_ERROR_MESSAGE =\n  \"Target asset unavailable. Is the token registered?\";\nexport const selectTransferTargetError = (state: RootState) => {\n  const sourceError = selectTransferSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.transfer.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.transfer.sourceChain === state.transfer.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (!selectTransferTargetAsset(state)) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (\n    isEVMChain(state.transfer.targetChain) &&\n    selectTransferTargetAsset(state) === ethers.constants.AddressZero\n  ) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.transfer.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectTransferIsTargetComplete = (state: RootState) =>\n  !selectTransferTargetError(state);\nexport const selectTransferIsSendComplete = (state: RootState) =>\n  !!selectTransferSignedVAAHex(state);\nexport const selectTransferIsRedeemComplete = (state: RootState) =>\n  !!selectTransferRedeemTx(state);\nexport const selectTransferShouldLockFields = (state: RootState) =>\n  selectTransferIsSending(state) || selectTransferIsSendComplete(state);\nexport const selectTransferIsRecovery = (state: RootState) =>\n  state.transfer.isRecovery;\n\nexport const selectSolanaTokenMap = (state: RootState) => {\n  return state.tokens.solanaTokenMap;\n};\n\nexport const selectTerraTokenMap = (state: RootState) => {\n  return state.tokens.terraTokenMap;\n};\n\nexport const selectMarketsMap = (state: RootState) => {\n  return state.tokens.marketsMap;\n};\n","import {\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  MenuItem,\n  OutlinedTextFieldProps,\n  TextField,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { useMemo } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { BETA_CHAINS, ChainInfo } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\nconst createChainMenuItem = ({ id, name, logo }: ChainInfo, classes: any) => (\n  <MenuItem key={id} value={id}>\n    <ListItemIcon className={classes.listItemIcon}>\n      <img src={logo} alt={name} className={classes.icon} />\n    </ListItemIcon>\n    <ListItemText>{name}</ListItemText>\n  </MenuItem>\n);\n\ninterface ChainSelectProps extends OutlinedTextFieldProps {\n  chains: ChainInfo[];\n}\n\nexport default function ChainSelect({ chains, ...rest }: ChainSelectProps) {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const filteredChains = useMemo(\n    () =>\n      chains.filter(({ id }) => (isBeta ? true : !BETA_CHAINS.includes(id))),\n    [chains, isBeta]\n  );\n  return (\n    <TextField {...rest} className={clsx(classes.select, rest.className)}>\n      {filteredChains.map((chain) => createChainMenuItem(chain, classes))}\n    </TextField>\n  );\n}\n","import { ChainId, getSignedVAA } from \"@certusone/wormhole-sdk\";\nimport { WORMHOLE_RPC_HOSTS } from \"./consts\";\n\nexport let CURRENT_WORMHOLE_RPC_HOST = -1;\n\nexport const getNextRpcHost = () =>\n  ++CURRENT_WORMHOLE_RPC_HOST % WORMHOLE_RPC_HOSTS.length;\n\nexport async function getSignedVAAWithRetry(\n  emitterChain: ChainId,\n  emitterAddress: string,\n  sequence: string,\n  retryAttempts?: number\n) {\n  let result;\n  let attempts = 0;\n  while (!result) {\n    attempts++;\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      result = await getSignedVAA(\n        WORMHOLE_RPC_HOSTS[getNextRpcHost()],\n        emitterChain,\n        emitterAddress,\n        sequence\n      );\n    } catch (e) {\n      if (retryAttempts !== undefined && attempts > retryAttempts) {\n        throw e;\n      }\n    }\n  }\n  return result;\n}\n","import React, { ReactChildren, useContext, useEffect, useState } from \"react\";\n\nconst BetaContext = React.createContext<boolean>(false);\n\nexport const BetaContextProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [isBetaEnabled, setIsBetaEnabled] = useState(false);\n\n  useEffect(() => {\n    let userEntered = [];\n    const secretSequence = [\n      \"38\",\n      \"38\",\n      \"40\",\n      \"40\",\n      \"37\",\n      \"39\",\n      \"37\",\n      \"39\",\n      \"66\",\n      \"65\",\n    ];\n    const secretListener = (event: KeyboardEvent) => {\n      const k = event.keyCode.toString();\n      if (k === secretSequence[userEntered.length]) {\n        userEntered.push(k);\n        if (userEntered.length === secretSequence.length) {\n          userEntered = [];\n          setIsBetaEnabled((prev) => !prev);\n        }\n      } else {\n        userEntered = [];\n      }\n    };\n    window.addEventListener(\"keydown\", secretListener);\n    return () => {\n      window.removeEventListener(\"keydown\", secretListener);\n    };\n  }, []);\n\n  return (\n    <BetaContext.Provider value={isBetaEnabled}>\n      {children}\n    </BetaContext.Provider>\n  );\n};\n\nexport const useBetaContext = () => {\n  return useContext(BetaContext);\n};\n","export default __webpack_public_path__ + \"static/media/eth.364436c5.svg\";","export default __webpack_public_path__ + \"static/media/oasis-network-rose-logo.c910dc42.svg\";","export default __webpack_public_path__ + \"static/media/avax.234db155.svg\";","export default __webpack_public_path__ + \"static/media/polygon.97ff139c.svg\";","import { Typography } from \"@material-ui/core\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst EthereumSignerKey = () => {\n  const { connect, disconnect, signerAddress, providerError } =\n    useEthereumProvider();\n  return (\n    <>\n      <ToggleConnectedButton\n        connect={connect}\n        disconnect={disconnect}\n        connected={!!signerAddress}\n        pk={signerAddress || \"\"}\n      />\n      {providerError ? (\n        <Typography variant=\"body2\" color=\"error\">\n          {providerError}\n        </Typography>\n      ) : null}\n    </>\n  );\n};\n\nexport default EthereumSignerKey;\n","import { makeStyles } from \"@material-ui/core\";\nimport DisconnectIcon from \"@material-ui/icons/LinkOff\";\nimport {\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-material-ui\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: \"center\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  disconnectButton: {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst SolanaWalletKey = () => {\n  const classes = useStyles();\n  const wallet = useSolanaWallet();\n  return (\n    <div className={classes.root}>\n      <WalletMultiButton />\n      {wallet && (\n        <WalletDisconnectButton\n          startIcon={<DisconnectIcon />}\n          className={classes.disconnectButton}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SolanaWalletKey;\n","export default __webpack_public_path__ + \"static/media/bsc.2e866e3f.svg\";","export default __webpack_public_path__ + \"static/media/solana.fa522d66.svg\";","import { PublicKey, AccountInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { deserializeUnchecked } from \"borsh\";\nimport { BinaryReader, BinaryWriter } from \"borsh\";\nconst base58: any = require(\"bs58\");\n\n// eslint-disable-next-line\nexport const METADATA_REPLACE = new RegExp(\"\\u0000\", \"g\");\nexport const EDITION_MARKER_BIT_SIZE = 248;\nexport const METADATA_PREFIX = \"metadata\";\nexport const EDITION = \"edition\";\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = \"\";\n  lamports: number = 0;\n\n  get data() {\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== \"string\") {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nexport const MEMO_ID = new PublicKey(\n  \"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"\n);\n\nexport const METADATA_PROGRAM_ID =\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\" as StringPublicKey;\n\nexport const VAULT_ID =\n  \"vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn\" as StringPublicKey;\n\nexport const AUCTION_ID =\n  \"auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8\" as StringPublicKey;\n\nexport const METAPLEX_ID =\n  \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\" as StringPublicKey;\n\nexport const SYSTEM = new PublicKey(\"11111111111111111111111111111111\");\n\nexport const getStoreID = async (storeOwnerAddress?: string) => {\n  if (!storeOwnerAddress) {\n    return undefined;\n  }\n\n  const programs = await findProgramAddress(\n    [\n      Buffer.from(\"metaplex\"),\n      toPublicKey(METAPLEX_ID).toBuffer(),\n      toPublicKey(storeOwnerAddress).toBuffer(),\n    ],\n    toPublicKey(METAPLEX_ID)\n  );\n  const storeAddress = programs[0];\n\n  return storeAddress;\n};\n\nexport const setProgramIds = async (store?: string) => {\n  STORE = store ? toPublicKey(store) : undefined;\n};\n\nlet STORE: PublicKey | undefined;\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    metadata: METADATA_PROGRAM_ID,\n    memo: MEMO_ID,\n    vault: VAULT_ID,\n    auction: AUCTION_ID,\n    metaplex: METAPLEX_ID,\n    store: STORE,\n  };\n};\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n) => {\n  const key =\n    \"pda-\" +\n    seeds.reduce((agg, item) => agg + item.toString(\"hex\"), \"\") +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\nexport type StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport async function getEdition(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  const PROGRAM_IDS = programIds();\n\n  return (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        toPublicKey(PROGRAM_IDS.metadata).toBuffer(),\n        toPublicKey(tokenMint).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      toPublicKey(PROGRAM_IDS.metadata)\n    )\n  )[0];\n}\n\nclass CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\nclass UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n    this.primarySaleHappened = args.primarySaleHappened;\n  }\n}\n\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n\n  public async init() {\n    const edition = await getEdition(this.mint);\n    this.edition = edition;\n    this.masterEdition = edition;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass MintPrintingTokensArgs {\n  instruction: number = 9;\n  supply: BN;\n\n  constructor(args: { supply: BN }) {\n    this.supply = args.supply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error(\"bad index for edition\");\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    // eslint-disable-next-line\n    return appliedMask != 0;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", Data],\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", { kind: \"option\", type: Data }],\n        [\"updateAuthority\", { kind: \"option\", type: \"pubkeyAsString\" }],\n        [\"primarySaleHappened\", { kind: \"option\", type: \"u8\" }],\n      ],\n    },\n  ],\n\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    MintPrintingTokensArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"supply\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV1,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n        [\"printingMint\", \"pubkeyAsString\"],\n        [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"parent\", \"pubkeyAsString\"],\n        [\"edition\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"ledger\", [31]],\n      ],\n    },\n  ],\n]);\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, \"\");\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, \"\");\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, \"\");\n  return metadata;\n};\n\nexport const getMetadataAddress = async (\n  mintKey: string\n): Promise<[PublicKey, number]> => {\n  const seeds = [\n    Buffer.from(\"metadata\"),\n    new PublicKey(METADATA_PROGRAM_ID).toBuffer(),\n    new PublicKey(mintKey).toBuffer(),\n  ];\n  return PublicKey.findProgramAddress(\n    seeds,\n    new PublicKey(METADATA_PROGRAM_ID)\n  );\n};\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface ParsedTokenAccount {\n  publicKey: string;\n  mintKey: string;\n  amount: string;\n  decimals: number;\n  uiAmount: number;\n  uiAmountString: string;\n  symbol?: string;\n  name?: string;\n  logo?: string;\n  isNativeAsset?: boolean;\n}\n\nexport interface Transaction {\n  id: string;\n  block: number;\n}\n\nexport interface TransferState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: ParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<ParsedTokenAccount[]>;\n  amount: string;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  targetParsedTokenAccount: ParsedTokenAccount | undefined;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isApproving: boolean;\n  isRecovery: boolean;\n}\n\nconst initialState: TransferState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  amount: \"\",\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  targetParsedTokenAccount: undefined,\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isApproving: false,\n  isRecovery: false,\n};\n\nexport const transferSlice = createSlice({\n  name: \"transfer\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setAmount: (state, action: PayloadAction<string>) => {\n      state.amount = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n      state.targetParsedTokenAccount = undefined;\n    },\n    setTargetParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.targetParsedTokenAccount = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    setIsApproving: (state, action: PayloadAction<boolean>) => {\n      state.isApproving = action.payload;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string;\n          amount: string;\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.amount = action.payload.parsedPayload.amount;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setAmount,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTargetParsedTokenAccount,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  setIsApproving,\n  reset,\n  setRecoveryVaa,\n} = transferSlice.actions;\n\nexport default transferSlice.reducer;\n","import { Button, makeStyles, Tooltip } from \"@material-ui/core\";\nimport { LinkOff } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n}));\n\nconst ToggleConnectedButton = ({\n  connect,\n  disconnect,\n  connected,\n  pk,\n}: {\n  connect(): any;\n  disconnect(): any;\n  connected: boolean;\n  pk: string;\n}) => {\n  const classes = useStyles();\n  const is0x = pk.startsWith(\"0x\");\n  return connected ? (\n    <Tooltip title={pk}>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        onClick={disconnect}\n        className={classes.button}\n        startIcon={<LinkOff />}\n      >\n        Disconnect {pk.substring(0, is0x ? 6 : 3)}...\n        {pk.substr(pk.length - (is0x ? 4 : 3))}\n      </Button>\n    </Tooltip>\n  ) : (\n    <Button\n      color=\"primary\"\n      variant=\"contained\"\n      size=\"small\"\n      onClick={connect}\n      className={classes.button}\n    >\n      Connect\n    </Button>\n  );\n};\n\nexport default ToggleConnectedButton;\n","import { useTerraWallet } from \"../contexts/TerraWalletContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst TerraWalletKey = () => {\n  const { connect, disconnect, connected, wallet } = useTerraWallet();\n  const pk =\n    (wallet &&\n      wallet.wallets &&\n      wallet.wallets.length > 0 &&\n      wallet.wallets[0].terraAddress) ||\n    \"\";\n  return (\n    <ToggleConnectedButton\n      connect={connect}\n      disconnect={disconnect}\n      connected={connected}\n      pk={pk}\n    />\n  );\n};\n\nexport default TerraWalletKey;\n","import {\n  NetworkInfo,\n  Wallet,\n  WalletProvider,\n  useWallet,\n} from \"@terra-money/wallet-provider\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nconst mainnet = {\n  name: \"mainnet\",\n  chainID: \"columbus-4\",\n  lcd: \"https://lcd.terra.dev\",\n};\n\nconst localnet = {\n  name: \"localnet\",\n  chainID: \"localnet\",\n  lcd: TERRA_HOST.URL,\n};\n\nconst walletConnectChainIds: Record<number, NetworkInfo> = {\n  0: localnet,\n  1: mainnet,\n};\n\ninterface ITerraWalletContext {\n  connect(): void;\n  disconnect(): void;\n  connected: boolean;\n  wallet: any;\n}\n\nconst TerraWalletContext = React.createContext<ITerraWalletContext>({\n  connect: () => {},\n  disconnect: () => {},\n  connected: false,\n  wallet: null,\n});\n\nexport const TerraWalletWrapper = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  // TODO: Use wallet instead of useConnectedWallet.\n  const terraWallet = useWallet();\n  const [, setWallet] = useState<Wallet | undefined>(undefined);\n  const [connected, setConnected] = useState(false);\n\n  const connect = useCallback(() => {\n    const CHROME_EXTENSION = 1;\n    if (terraWallet) {\n      terraWallet.connect(terraWallet.availableConnectTypes[CHROME_EXTENSION]);\n      setWallet(terraWallet);\n      setConnected(true);\n    }\n  }, [terraWallet]);\n\n  const disconnect = useCallback(() => {\n    setConnected(false);\n    setWallet(undefined);\n  }, []);\n\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      connected,\n      wallet: terraWallet,\n    }),\n    [connect, disconnect, connected, terraWallet]\n  );\n\n  return (\n    <TerraWalletContext.Provider value={contextValue}>\n      {children}\n    </TerraWalletContext.Provider>\n  );\n};\n\nexport const TerraWalletProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  return (\n    <WalletProvider\n      defaultNetwork={localnet}\n      walletConnectChainIds={walletConnectChainIds}\n    >\n      <TerraWalletWrapper>{children}</TerraWalletWrapper>\n    </WalletProvider>\n  );\n};\n\nexport const useTerraWallet = () => {\n  return useContext(TerraWalletContext);\n};\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferSignedVAA() {\n  const signedVAAHex = useSelector(selectTransferSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BigNumber, ethers } from \"ethers\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\n\nexport type Provider = ethers.providers.Web3Provider | undefined;\nexport type Signer = ethers.Signer | undefined;\n\ninterface IEthereumProviderContext {\n  connect(): void;\n  disconnect(): void;\n  provider: Provider;\n  chainId: number | undefined;\n  signer: Signer;\n  signerAddress: string | undefined;\n  providerError: string | null;\n}\n\nconst EthereumProviderContext = React.createContext<IEthereumProviderContext>({\n  connect: () => {},\n  disconnect: () => {},\n  provider: undefined,\n  chainId: undefined,\n  signer: undefined,\n  signerAddress: undefined,\n  providerError: null,\n});\nexport const EthereumProviderProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [providerError, setProviderError] = useState<string | null>(null);\n  const [provider, setProvider] = useState<Provider>(undefined);\n  const [chainId, setChainId] = useState<number | undefined>(undefined);\n  const [signer, setSigner] = useState<Signer>(undefined);\n  const [signerAddress, setSignerAddress] = useState<string | undefined>(\n    undefined\n  );\n  const connect = useCallback(() => {\n    setProviderError(null);\n    detectEthereumProvider()\n      .then((detectedProvider) => {\n        if (detectedProvider) {\n          const provider = new ethers.providers.Web3Provider(\n            // @ts-ignore\n            detectedProvider,\n            \"any\"\n          );\n          provider\n            .send(\"eth_requestAccounts\", [])\n            .then(() => {\n              setProviderError(null);\n              setProvider(provider);\n              provider\n                .getNetwork()\n                .then((network) => {\n                  setChainId(network.chainId);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the network\"\n                  );\n                });\n              const signer = provider.getSigner();\n              setSigner(signer);\n              signer\n                .getAddress()\n                .then((address) => {\n                  setSignerAddress(address);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the signer address\"\n                  );\n                });\n              // TODO: try using ethers directly\n              // @ts-ignore\n              if (detectedProvider && detectedProvider.on) {\n                // @ts-ignore\n                detectedProvider.on(\"chainChanged\", (chainId) => {\n                  try {\n                    setChainId(BigNumber.from(chainId).toNumber());\n                  } catch (e) {}\n                });\n                // @ts-ignore\n                detectedProvider.on(\"accountsChanged\", (accounts) => {\n                  try {\n                    const signer = provider.getSigner();\n                    setSigner(signer);\n                    signer\n                      .getAddress()\n                      .then((address) => {\n                        setSignerAddress(address);\n                      })\n                      .catch(() => {\n                        setProviderError(\n                          \"An error occurred while getting the signer address\"\n                        );\n                      });\n                  } catch (e) {}\n                });\n              }\n            })\n            .catch(() => {\n              setProviderError(\n                \"An error occurred while requesting eth accounts\"\n              );\n            });\n        } else {\n          setProviderError(\"Please install MetaMask\");\n        }\n      })\n      .catch(() => {\n        setProviderError(\"Please install MetaMask\");\n      });\n  }, []);\n  const disconnect = useCallback(() => {\n    setProviderError(null);\n    setProvider(undefined);\n    setChainId(undefined);\n    setSigner(undefined);\n    setSignerAddress(undefined);\n  }, []);\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    }),\n    [\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    ]\n  );\n  return (\n    <EthereumProviderContext.Provider value={contextValue}>\n      {children}\n    </EthereumProviderContext.Provider>\n  );\n};\nexport const useEthereumProvider = () => {\n  return useContext(EthereumProviderContext);\n};\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { hexlify, hexStripZeros } from \"@ethersproject/bytes\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useCallback, useMemo } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { CLUSTER, getEvmChainId } from \"../utils/consts\";\n\nconst createWalletStatus = (\n  isReady: boolean,\n  statusMessage: string = \"\",\n  forceNetworkSwitch: () => void,\n  walletAddress?: string\n) => ({\n  isReady,\n  statusMessage,\n  forceNetworkSwitch,\n  walletAddress,\n});\n\nfunction useIsWalletReady(\n  chainId: ChainId,\n  enableNetworkAutoswitch: boolean = true\n): {\n  isReady: boolean;\n  statusMessage: string;\n  walletAddress?: string;\n  forceNetworkSwitch: () => void;\n} {\n  const autoSwitch = enableNetworkAutoswitch;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const hasTerraWallet = !!terraWallet;\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasEthInfo = !!provider && !!signerAddress;\n  const correctEvmNetwork = getEvmChainId(chainId);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const forceNetworkSwitch = useCallback(() => {\n    if (provider && correctEvmNetwork) {\n      if (!isEVMChain(chainId)) {\n        return;\n      }\n      try {\n        provider.send(\"wallet_switchEthereumChain\", [\n          { chainId: hexStripZeros(hexlify(correctEvmNetwork)) },\n        ]);\n      } catch (e) {}\n    }\n  }, [provider, correctEvmNetwork, chainId]);\n\n  return useMemo(() => {\n    if (\n      chainId === CHAIN_ID_TERRA &&\n      hasTerraWallet &&\n      terraWallet?.walletAddress\n    ) {\n      // TODO: terraWallet does not update on wallet changes\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        terraWallet.walletAddress\n      );\n    }\n    if (chainId === CHAIN_ID_SOLANA && solPK) {\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        solPK.toString()\n      );\n    }\n    if (isEVMChain(chainId) && hasEthInfo && signerAddress) {\n      if (hasCorrectEvmNetwork) {\n        return createWalletStatus(\n          true,\n          undefined,\n          forceNetworkSwitch,\n          signerAddress\n        );\n      } else {\n        if (provider && correctEvmNetwork && autoSwitch) {\n          forceNetworkSwitch();\n        }\n        return createWalletStatus(\n          false,\n          `Wallet is not connected to ${CLUSTER}. Expected Chain ID: ${correctEvmNetwork}`,\n          forceNetworkSwitch,\n          undefined\n        );\n      }\n    }\n\n    return createWalletStatus(\n      false,\n      \"Wallet not connected\",\n      forceNetworkSwitch,\n      undefined\n    );\n  }, [\n    chainId,\n    autoSwitch,\n    forceNetworkSwitch,\n    hasTerraWallet,\n    solPK,\n    hasEthInfo,\n    correctEvmNetwork,\n    hasCorrectEvmNetwork,\n    provider,\n    signerAddress,\n    terraWallet,\n  ]);\n}\n\nexport default useIsWalletReady;\n","export type DataWrapper<T> = {\n  data: T | null;\n  error: any | null;\n  isFetching: boolean;\n  receivedAt: string | null;\n  //possibly invalidate\n};\n\nexport function getEmptyDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function receiveDataWrapper<T>(data: T): DataWrapper<T> {\n  return {\n    data,\n    error: null,\n    isFetching: false,\n    receivedAt: new Date().toISOString(),\n  };\n}\n\nexport function errorDataWrapper<T>(error: string): DataWrapper<T> {\n  return {\n    data: null,\n    error,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function fetchDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: true,\n    receivedAt: null,\n  };\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\nimport { ParsedTokenAccount, Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\n// these all are optional so NFT could share TokenSelectors\nexport interface NFTParsedTokenAccount extends ParsedTokenAccount {\n  tokenId?: string;\n  uri?: string;\n  animation_url?: string | null;\n  external_url?: string | null;\n  image?: string;\n  image_256?: string;\n  nftName?: string;\n  description?: string;\n}\n\nexport interface NFTState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  originTokenId: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: NFTParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<NFTParsedTokenAccount[]>;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isRecovery: boolean;\n}\n\nconst initialState: NFTState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  originTokenId: undefined,\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isRecovery: false,\n};\n\nexport const nftSlice = createSlice({\n  name: \"nft\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n      state.originTokenId = action.payload.tokenId;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.originTokenId = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string; //TODO maximum amount of fields\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      state.targetAsset = getEmptyDataWrapper();\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.originTokenId = undefined;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  reset,\n  setRecoveryVaa,\n} = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","export default __webpack_public_path__ + \"static/media/terra.4c802748.svg\";","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bscIcon from \"../icons/bsc.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport solanaIcon from \"../icons/solana.svg\";\nimport terraIcon from \"../icons/terra.svg\";\n\nexport type Cluster = \"devnet\" | \"testnet\" | \"mainnet\";\nexport const CLUSTER: Cluster =\n  process.env.REACT_APP_CLUSTER === \"mainnet\"\n    ? \"mainnet\"\n    : process.env.REACT_APP_CLUSTER === \"testnet\"\n    ? \"testnet\"\n    : \"devnet\";\nexport interface ChainInfo {\n  id: ChainId;\n  name: string;\n  logo: string;\n}\nexport const CHAINS =\n  CLUSTER === \"mainnet\"\n    ? [\n        {\n          id: CHAIN_ID_AVAX,\n          name: \"Avalanche\",\n          logo: avaxIcon,\n        },\n        {\n          id: CHAIN_ID_OASIS,\n          name: \"Oasis\",\n          logo: oasisIcon,\n        },\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        {\n          id: CHAIN_ID_AVAX,\n          name: \"Avalanche\",\n          logo: avaxIcon,\n        },\n        {\n          id: CHAIN_ID_OASIS,\n          name: \"Oasis\",\n          logo: oasisIcon,\n        },\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum (Goerli)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_ETHEREUM_ROPSTEN,\n          name: \"Ethereum (Ropsten)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : [\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ];\nexport const BETA_CHAINS: ChainId[] =\n  CLUSTER === \"mainnet\" ? [CHAIN_ID_OASIS] : [];\nexport const CHAINS_WITH_NFT_SUPPORT = CHAINS.filter(\n  ({ id }) =>\n    id === CHAIN_ID_AVAX ||\n    id === CHAIN_ID_BSC ||\n    id === CHAIN_ID_ETH ||\n    id === CHAIN_ID_ETHEREUM_ROPSTEN ||\n    id === CHAIN_ID_POLYGON ||\n    id === CHAIN_ID_OASIS ||\n    id === CHAIN_ID_SOLANA\n);\nexport type ChainsById = { [key in ChainId]: ChainInfo };\nexport const CHAINS_BY_ID: ChainsById = CHAINS.reduce((obj, chain) => {\n  obj[chain.id] = chain;\n  return obj;\n}, {} as ChainsById);\n\nexport const COMING_SOON_CHAINS = [\n  {\n    id: CHAIN_ID_OASIS,\n    name: \"Oasis\",\n    logo: oasisIcon,\n  },\n];\nexport const getDefaultNativeCurrencySymbol = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? \"SOL\"\n    : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"ETH\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BNB\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"LUNA\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"MATIC\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"AVAX\"\n    : chainId === CHAIN_ID_OASIS\n    ? \"ROSE\"\n    : \"\";\nexport const getExplorerName = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"Etherscan\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BscScan\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"Finder\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"Polygonscan\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"Snowtrace\"\n    : \"Explorer\";\nexport const WORMHOLE_RPC_HOSTS =\n  CLUSTER === \"mainnet\"\n    ? [\n        \"https://wormhole-v2-mainnet-api.certus.one\",\n        \"https://wormhole.inotel.ro\",\n        \"https://wormhole-v2-mainnet-api.mcf.rocks\",\n        \"https://wormhole-v2-mainnet-api.chainlayer.network\",\n        \"https://wormhole-v2-mainnet-api.staking.fund\",\n        \"https://wormhole-v2-mainnet.01node.com\",\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\"https://wormhole-v2-testnet-api.certus.one\"]\n    : [\"http://localhost:7071\"];\nexport const ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 5 : 1337;\nexport const ROPSTEN_ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 3 : 1337;\nexport const BSC_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 56 : CLUSTER === \"testnet\" ? 97 : 1397;\nexport const POLYGON_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 137 : CLUSTER === \"testnet\" ? 80001 : 1381;\nexport const AVAX_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 43114 : CLUSTER === \"testnet\" ? 43113 : 1381;\nexport const OASIS_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 42262 : CLUSTER === \"testnet\" ? 42261 : 1381;\nexport const getEvmChainId = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH\n    ? ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_NETWORK_CHAIN_ID\n    : undefined;\nexport const SOLANA_HOST = process.env.REACT_APP_SOLANA_API_URL\n  ? process.env.REACT_APP_SOLANA_API_URL\n  : CLUSTER === \"mainnet\"\n  ? clusterApiUrl(\"mainnet-beta\")\n  : CLUSTER === \"testnet\"\n  ? clusterApiUrl(\"devnet\")\n  : \"http://localhost:8899\";\n\nexport const TERRA_HOST =\n  CLUSTER === \"mainnet\"\n    ? {\n        URL: \"https://lcd.terra.dev\",\n        chainID: \"columbus-5\",\n        name: \"mainnet\",\n      }\n    : CLUSTER === \"testnet\"\n    ? {\n        URL: \"https://bombay-lcd.terra.dev\",\n        chainID: \"bombay-12\",\n        name: \"testnet\",\n      }\n    : {\n        URL: \"http://localhost:1317\",\n        chainID: \"columbus-5\",\n        name: \"localterra\",\n      };\nexport const ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x706abc4E45D419950511e474C7B9Ed348A4a716c\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD8E4C2DbDd2e2bd8F1336EA691dBFF6952B1a6eB\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF890982f9310df57d00f659cf4fd87e65adEd8d7\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const BSC_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const BSC_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xcD16E5613EF35599dc82B24Cb45B5A93D779f1EE\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const BSC_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xB6F6D86a8f9879A9c87f643768d9efc38c1Da6E7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9dcF9D205C9De35334D646BeE44b2D2859712A09\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const POLYGON_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0CBE91CF822c73C2315FB05100C2F714765d5c20\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const POLYGON_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x90BBd86a6Fe93D3bc3ed6335935447E75fAb7fCf\"\n    : CLUSTER === \"testnet\"\n    ? \"0x51a02d0dcb5e52F5b92bdAA38FA013C91c7309A9\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const POLYGON_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x377D55a7928c046E18eEbb61977e714d2a76472a\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const AVAX_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x54a8e5f9c4CbA08F9943965859F6c34eAF03E26c\"\n    : CLUSTER === \"testnet\"\n    ? \"0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const AVAX_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xf7B6737Ca9c4e08aE573F75A97B73D7a813f5De5\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD601BAf2EEE3C028344471684F6b27E789D9075D\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const AVAX_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0e082F06FF657D94310cB8cE8B0D9a04541d8052\"\n    : CLUSTER === \"testnet\"\n    ? \"0x61E44E506Ca5659E6c0bba9b678586fA2d729756\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const OASIS_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xfE8cD454b4A1CA468B57D79c0cc77Ef5B6f64585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc1C338397ffA53a2Eb12A7038b4eeb34791F8aCb\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const OASIS_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x04952D522Ff217f40B5Ef3cbF659EcA7b952a6c1\"\n    : CLUSTER === \"testnet\"\n    ? \"0xC5c25B41AB0b797571620F5204Afa116A44c0ebA\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const OASIS_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5848C791e09901b40A9Ef749f2a6735b418d7564\"\n    : CLUSTER === \"testnet\"\n    ? \"0x88d8004A9BdbfD9D28090A02010C19897a29605c\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const SOL_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth\"\n    : CLUSTER === \"testnet\"\n    ? \"3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5\"\n    : \"Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o\";\nexport const SOL_NFT_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WnFt12ZrnzZrFZkt2xsNsaNWoQribnuQ5B5FrDbwDhD\"\n    : CLUSTER === \"testnet\"\n    ? \"2rHhojZ7hpu1zA91nvZmT8TqWWvMcKmmNBCr2mKTtMq4\"\n    : \"NFTWqJR8YnRVqPDvTJrYuLrQDitTG5AScqbeghi4zSA\";\nexport const SOL_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb\"\n    : CLUSTER === \"testnet\"\n    ? \"DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe\"\n    : \"B6RHG3mfcckmrYN1UhmJzyS1XX3fZKbkeUcpJe9Sy3FE\";\nexport const ROPSTEN_ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x210c5F5e2AF958B4defFe715Dc621b7a3BA888c5\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ROPSTEN_ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x2b048Da40f69c8dc386a56705915f8E966fe1eba\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF174F9A837536C449321df1Ca093Bb96948D5386\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\n\nexport const SOL_CUSTODY_ADDRESS =\n  \"GugU1tP7doLeTw9hQP51xRJyS8Da1fWxuiy2rVrnMD2m\";\nexport const SOL_NFT_CUSTODY_ADDRESS =\n  \"D63bhHo634eXSj4Jq3xgu2fjB5XKc8DFHzDY9iZk7fv1\";\nexport const TERRA_TEST_TOKEN_ADDRESS =\n  \"terra13nkgqrfymug724h8pprpexqj9h629sa3ncw7sh\";\nexport const TERRA_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pd65m0q9tl3v8znnz5f5ltsfegyzah7g42cx5v\"\n    : \"terra18vd8fpwxzck93qlwghaj6arh4p7c5n896xzem5\";\nexport const TERRA_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pseddrv0yfsn76u4zxrjmtf45kdlmalswdv39a\"\n    : \"terra10pyejy66429refv3g35g2t7am0was7ya7kz2a4\";\n\nexport const getBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_BRIDGE_ADDRESS\n    : \"\";\nexport const getNFTBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_NFT_BRIDGE_ADDRESS\n    : \"\";\nexport const getTokenBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_TOKEN_BRIDGE_ADDRESS\n    : \"\";\n\nexport const COVALENT_API_KEY = process.env.REACT_APP_COVALENT_API_KEY\n  ? process.env.REACT_APP_COVALENT_API_KEY\n  : \"\";\n\nexport const COVALENT_ETHEREUM = 1; // Covalent only supports mainnet and Kovan\nexport const COVALENT_BSC = CLUSTER === \"devnet\" ? 56 : BSC_NETWORK_CHAIN_ID;\nexport const COVALENT_POLYGON =\n  CLUSTER === \"devnet\" ? 137 : POLYGON_NETWORK_CHAIN_ID;\nexport const COVALENT_AVAX = CLUSTER === \"devnet\" ? 137 : AVAX_NETWORK_CHAIN_ID;\nexport const COVALENT_OASIS = CLUSTER === \"devnet\" ? null : null;\nexport const COVALENT_GET_TOKENS_URL = (\n  chainId: ChainId,\n  walletAddress: string,\n  nft?: boolean,\n  noNftMetadata?: boolean\n) => {\n  const chainNum =\n    chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? COVALENT_ETHEREUM\n      : chainId === CHAIN_ID_BSC\n      ? COVALENT_BSC\n      : chainId === CHAIN_ID_POLYGON\n      ? COVALENT_POLYGON\n      : chainId === CHAIN_ID_AVAX\n      ? COVALENT_AVAX\n      : chainId === CHAIN_ID_OASIS\n      ? COVALENT_OASIS\n      : \"\";\n  // https://www.covalenthq.com/docs/api/#get-/v1/{chain_id}/address/{address}/balances_v2/\n  return `https://api.covalenthq.com/v1/${chainNum}/address/${walletAddress}/balances_v2/?key=${COVALENT_API_KEY}${\n    nft ? \"&nft=true\" : \"\"\n  }${noNftMetadata ? \"&no-nft-fetch=true\" : \"\"}`;\n};\nexport const TERRA_SWAPRATE_URL =\n  \"https://fcd.terra.dev/v1/market/swaprate/uusd\";\n\nexport const WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WETH_DECIMALS = 18;\n\nexport const WBNB_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\n    : CLUSTER === \"testnet\"\n    ? \"0xae13d989dac2f0debff460ac112a837c89baa7cd\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WBNB_DECIMALS = 18;\n\nexport const WMATIC_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WMATIC_DECIMALS = 18;\n\nexport const ROPSTEN_WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc778417e063141139fce010982780140aa0cd5ab\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const ROPSTEN_WETH_DECIMALS = 18;\n\nexport const WAVAX_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7\"\n    : CLUSTER === \"testnet\"\n    ? \"0xd00ae08403b9bbb9124bb305c09058e32c39a48c\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WAVAX_DECIMALS = 18;\n\nexport const WROSE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xE4F5F5910b347A5AEFd12745a98eEEA97F69180e\"\n    : CLUSTER === \"testnet\"\n    ? \"0x792296e2a15e6Ceb5f5039DecaE7A1f25b00B0B0\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WROSE_DECIMALS = 18;\n\nexport const WORMHOLE_V1_ETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"\n    : CLUSTER === \"testnet\"\n    ? \"0xdae0Cba01eFc4bfEc1F7Fece73Fe8b8d2Eda65B0\"\n    : \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"; //TODO something that doesn't explode in localhost\nexport const WORMHOLE_V1_SOLANA_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC\"\n    : CLUSTER === \"testnet\"\n    ? \"BrdgiFmZN3BKkcY3danbPYyxPKwb8RhQzpM2VY5L97ED\"\n    : \"\";\n\nexport const TERRA_TOKEN_METADATA_URL =\n  \"https://assets.terra.money/cw20/tokens.json\";\n\nexport const WORMHOLE_V1_MINT_AUTHORITY =\n  CLUSTER === \"mainnet\"\n    ? \"9zyPU1mjgzaVyQsYwKJJ7AhVz5bgx5uc1NPABvAcUXsT\"\n    : CLUSTER === \"testnet\"\n    ? \"BJa7dq3bRP216zaTdw4cdcV71WkPc1HXvmnGeFVDi5DC\"\n    : \"\";\n\n// hardcoded addresses for warnings\nexport const SOLANA_TOKENS_THAT_EXIST_ELSEWHERE = [\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\", //  SRM\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n  \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\", //  KIN\n  \"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5\", // renBTC\n  \"8wv2KAykQstNAj2oW6AHANGBiFKVFhvMiyyzzjhkmGvE\", // renLUNA\n  \"G1a6jxYz3m8DVyMqYnuV7s86wD4fvuXYneWSpLJkmsXj\", // renBCH\n  \"FKJvvVJ242tX7zFtzTmzqoA631LqHh4CdgcN8dcfFSju\", // renDGB\n  \"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU\", // renDOGE\n  \"E99CQ2gFMmbiyK2bwiaFNWUUmwz4r8k2CVEFxwuvQ7ue\", // renZEC\n  \"De2bU64vsXKU9jq4bCjeDxNRGPn8nr3euaTK8jBYmD3J\", // renFIL\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", // USDT\n];\nexport const ETH_TOKENS_THAT_EXIST_ELSEWHERE = [\n  getAddress(\"0x476c5E26a75bd202a9683ffD34359C0CC15be0fF\"), // SRM\n  getAddress(\"0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5\"), // KIN\n  getAddress(\"0xeb4c2781e4eba804ce9a9803c67d0893436bb27d\"), // renBTC\n  getAddress(\"0x52d87F22192131636F93c5AB18d0127Ea52CB641\"), // renLUNA\n  getAddress(\"0x459086f2376525bdceba5bdda135e4e9d3fef5bf\"), // renBCH\n  getAddress(\"0xe3cb486f3f5c639e98ccbaf57d95369375687f80\"), // renDGB\n  getAddress(\"0x3832d2F059E55934220881F831bE501D180671A7\"), // renDOGE\n  getAddress(\"0x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2\"), // renZEC\n  getAddress(\"0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5\"), // renFIL\n];\nexport const ETH_TOKENS_THAT_CAN_BE_SWAPPED_ON_SOLANA = [\n  getAddress(\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"), // USDC\n  getAddress(\"0xdac17f958d2ee523a2206206994597c13d831ec7\"), // USDT\n];\nexport const BSC_MARKET_WARNINGS = [\n  getAddress(WBNB_ADDRESS),\n  getAddress(\"0xe9e7cea3dedca5984780bafc599bd69add087d56\"), // BUSD\n  getAddress(\"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"), // USDC\n  getAddress(\"0x55d398326f99059ff775485246999027b3197955\"), // BSC-USD\n];\n\nexport const MIGRATION_PROGRAM_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"whmRZnmyxdr2TkHXcZoFdtvNYRLQ5Jtbkf6ZbGkJjdk\"\n    : CLUSTER === \"testnet\"\n    ? \"\"\n    : \"Ex9bCdVMSfx7EzB3pgSi2R4UHwJAXvTw18rBQm5YQ8gK\";\n\nexport const MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // HUSD\n          \"BybpSTBoZHsmKnfxYG47GDhVPKrnEKX31CScShbrzUhX\",\n          \"7VQo3HFLNH5QqGtM8eC3XQbPkJUu7nS9LeGWjerRh5Sw\",\n        ],\n        [\n          // BUSD\n          \"AJ1W9A9N9dEMdVyoDiam2rV44gnBm2csrPDP7xqcapgX\",\n          \"33fsBLA8djQm82RpHmE3SuVrPGtZBWNYExsEUeKX1HXX\",\n        ],\n        [\n          // HBTC\n          \"8pBc4v9GAwCBNWPB5XKA93APexMGAS4qMr37vNke9Ref\",\n          \"7dVH61ChzgmN9BwG4PkzwRP8PbYwPJ7ZPNF2vamKT2H8\",\n        ],\n        [\n          // DAI\n          \"FYpdBuyAHSbdaAyD1sKkxyLWbAP8uUW9h6uvdhK74ij1\",\n          \"EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o\",\n        ],\n        [\n          // FRAX\n          \"8L8pDf3jutdpdr4m3np68CL9ZroLActrqwxi6s9Ah5xU\",\n          \"FR87nWEUxVgerFGhZM8Y4AggKGLnaXswr1Pd8wZ4kZcp\",\n        ],\n        [\n          // USDK\n          \"2kycGCD8tJbrjJJqWN2Qz5ysN9iB4Bth3Uic4mSB7uak\",\n          \"43m2ewFV5nDepieFjT9EmAQnc1HRtAF247RBpLGFem5F\",\n        ],\n        // [\n        //   // UST\n        //   \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n        //   \"5Un6AdG9GBjxVhTSvvt2x6X6vtN1zrDxkkDpDcShnHfF\",\n        // ],\n        [\n          // UST\n          \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n          \"9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i\",\n        ],\n        // [\n        //   // Wrapped LUNA\n        //   \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n        //   \"EQTV1LW23Mgtjb5LXSg9NGw1J32oqTV4HCPmHCVSGmqD\",\n        // ],\n        [\n          // Wrapped LUNA\n          \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n          \"F6v4wfAdJB8D8p77bMXZgYt8TDKsYxLYxH5AFhUkYx9W\",\n        ],\n        [\n          // FTT\n          \"GbBWwtYTMPis4VHb8MrBbdibPhn28TSrLB53KvUmb7Gi\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // SRM\n          \"2jXy799YnEcRXneFo2GEAB6SDRsAa767HpWmktRr1DaP\",\n          \"xnorPhAzWXUczCP3KjU5yDxmKKZi5cSbxytQ1LgE3kG\",\n        ],\n        [\n          // FTT (Sollet)\n          \"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // WETH (Sollet)\n          \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n          \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n        ],\n        [\n          // UNI (Sollet)\n          \"DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw\",\n          \"8FU95xFJhUUkyyCLU13HSzDLs7oC4QZdXQHL6SCeab36\",\n        ],\n        [\n          // HXRO (Sollet)\n          \"DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc\",\n          \"HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK\",\n        ],\n        [\n          // ALEPH (Sollet)\n          \"CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K\",\n          \"3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x\",\n        ],\n        [\n          // TOMOE (Sollet)\n          \"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd\",\n          \"46AiRdka3HYGkhV6r9gyS6Teo9cojfGXfK8oniALYMZx\",\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        [\n          \"orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L\", //This is not actually a v1 asset\n          \"orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L\",\n        ],\n      ]\n    : [\n        // [\n        //   \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\",\n        //   \"GcdupcwxkmVGM6s9F8bHSjNoznXAb3hRJTioABNYkn31\",\n        // ],\n      ]\n);\n\nexport const ETH_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9\"),\n          getAddress(\"0xe76820F1DB773B1d62a3D22F47259705cC5fA4E6\"),\n        ],\n        [\n          // UST\n          getAddress(\"0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\"),\n          getAddress(\"0xF39C29d8f6851d87c40c83b61078EB7384f7Cb51\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const BSC_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xECCF35F941Ab67FfcAA9A1265C2fF88865caA005\"),\n          getAddress(\"0x355A116ef1Cf566B12Ef3a8e409A64e303c53740\"),\n        ],\n        [\n          // UST\n          getAddress(\"0x23396cF899Ca06c4472205fC903bDB4de249D6fC\"),\n          getAddress(\"0x0F98AB919D04a291838B3b075c57181057D4CF75\"),\n        ],\n        [\n          // ORION\n          getAddress(\"0x5530ec23f4ee1521182bd158c09f4ca7efec1ef0\"),\n          getAddress(\"0x084fa354e65b521e6fb9d1602549cf8693cdb4f8\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const getMigrationAssetMap = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_BSC) {\n    return BSC_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_ETH) {\n    return ETH_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return MIGRATION_ASSET_MAP;\n  } else {\n    return new Map<string, string>();\n  }\n};\n\nexport const SUPPORTED_TERRA_TOKENS = [\"uluna\", \"uusd\"];\n\nexport const TERRA_FCD_BASE =\n  CLUSTER === \"mainnet\"\n    ? \"https://fcd.terra.dev\"\n    : CLUSTER === \"testnet\"\n    ? \"https://bombay-fcd.terra.dev\"\n    : \"http://localhost:3060\";\nexport const TERRA_GAS_PRICES_URL = `${TERRA_FCD_BASE}/v1/txs/gas_prices`;\n\nexport const TOTAL_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-totals?groupBy=address`;\n\nexport const RECENT_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-recent?groupBy=address&numRows=2`;\n\nexport const VAA_EMITTER_ADDRESSES = [\n  `${CHAIN_ID_SOLANA}:ec7372995d5cc8732397fb0ad35c0121e0eaa90d26f828a534cab54391b3a4f5`, //SOLANA TOKEN\n  `${CHAIN_ID_SOLANA}:0def15a24423e1edd1a5ab16f557b9060303ddbab8c803d2ee48f4b78a1cfd6b`, //SOLAN NFT\n  `${CHAIN_ID_ETH}:0000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585`, //ETH token\n  `${CHAIN_ID_ETH}:0000000000000000000000006ffd7ede62328b3af38fcd61461bbfc52f5651fe`, //ETH NFT\n  `${CHAIN_ID_TERRA}:0000000000000000000000007cf7b764e38a0a5e967972c1df77d432510564e2`, //terra\n  `${CHAIN_ID_BSC}:000000000000000000000000b6f6d86a8f9879a9c87f643768d9efc38c1da6e7`, //bsc\n  `${CHAIN_ID_BSC}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //bsc nft\n  `${CHAIN_ID_POLYGON}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //Polygon\n  `${CHAIN_ID_POLYGON}:00000000000000000000000090bbd86a6fe93d3bc3ed6335935447e75fab7fcf`, //Polygon nft\n];\n\nexport const WORMHOLE_EXPLORER_BASE = \"https://wormholenetwork.com/en/explorer\";\n\nexport type MultiChainInfo = {\n  [key in ChainId]: { [address: string]: string };\n};\nexport const MULTI_CHAIN_TOKENS: MultiChainInfo =\n  //EVM chains should format the addresses to all lowercase\n  CLUSTER === \"mainnet\"\n    ? ({\n        [CHAIN_ID_SOLANA]: {\n          EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: \"USDC\",\n          Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: \"USDT\",\n        },\n        [CHAIN_ID_ETH]: {\n          \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\": \"USDC\",\n          \"0xdac17f958d2ee523a2206206994597c13d831ec7\": \"USDT\",\n        },\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {\n          \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\": \"USDC\",\n          \"0x55d398326f99059ff775485246999027b3197955\": \"USDT\",\n        },\n        [CHAIN_ID_POLYGON]: {\n          \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\": \"USDC\",\n          \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\": \"USDT\",\n        },\n      } as MultiChainInfo)\n    : ({\n        [CHAIN_ID_SOLANA]: {\n          \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\": \"SOLT\",\n        },\n        [CHAIN_ID_ETH]: {},\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {},\n        [CHAIN_ID_POLYGON]: {},\n      } as MultiChainInfo);\n\nexport const AVAILABLE_MARKETS_URL =\n  \"https://docs.wormholenetwork.com/wormhole/overview-liquid-markets\";\n\nexport const SOLANA_SYSTEM_PROGRAM_ADDRESS = \"11111111111111111111111111111111\";\nexport const FEATURED_MARKETS_JSON_URL =\n  \"https://raw.githubusercontent.com/certusone/wormhole-token-list/main/src/markets.json\";\n\nexport const logoOverrides = new Map<string, string>([\n  [\n    \"0x727f064a78dc734d33eec18d5370aef32ffd46e4\",\n    \"https://orion.money/assets/ORION-LOGO-2.1-GREEN@256x256.png\",\n  ],\n]);\n\nexport const getHowToAddTokensToWalletUrl = (chainId: ChainId) => {\n  if (isEVMChain(chainId)) {\n    return \"https://docs.wormholenetwork.com/wormhole/video-tutorial-how-to-manually-add-tokens-to-your-wallet#1.-metamask-ethereum-polygon-and-bsc\";\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return \"https://docs.wormholenetwork.com/wormhole/video-tutorial-how-to-manually-add-tokens-to-your-wallet#2.-terra-station\";\n  }\n  return \"\";\n};\n\nexport const getHowToAddToTokenListUrl = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_SOLANA) {\n    return \"https://github.com/solana-labs/token-list\";\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return \"https://github.com/terra-money/assets\";\n  }\n  return \"\";\n};\n\nexport const SOLANA_TOKEN_METADATA_PROGRAM_URL =\n  \"https://github.com/metaplex-foundation/metaplex/tree/master/rust/token-metadata/program\";\nexport const MAX_VAA_UPLOAD_RETRIES_SOLANA = 5;\n\nexport const POLYGON_TERRA_WRAPPED_TOKENS = [\n  \"0x692597b009d13c4049a947cab2239b7d6517875f\", // Wrapped UST Token\n  \"0x24834bbec7e39ef42f4a75eaf8e5b6486d3f0e57\", // Wrapped LUNA Token\n];\n\nexport const JUPITER_SWAP_BASE_URL = \"https://jup.ag/swap\";\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    textTransform: \"none\",\n    width: \"100%\",\n  },\n  loader: {\n    position: \"absolute\",\n    bottom: 0,\n    left: \"50%\",\n    marginLeft: -12,\n    marginBottom: 6,\n  },\n  error: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function ButtonWithLoader({\n  disabled,\n  onClick,\n  showLoader,\n  error,\n  children,\n}: {\n  disabled?: boolean;\n  onClick: () => void;\n  showLoader?: boolean;\n  error?: string;\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.root}>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          className={classes.button}\n          disabled={disabled}\n          onClick={onClick}\n        >\n          {children}\n        </Button>\n        {showLoader ? (\n          <CircularProgress\n            size={24}\n            color=\"inherit\"\n            className={classes.loader}\n          />\n        ) : null}\n      </div>\n      {error ? (\n        <Typography variant=\"body2\" color=\"error\" className={classes.error}>\n          {error}\n        </Typography>\n      ) : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface AttestState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  sourceAsset: string;\n  targetChain: ChainId;\n  attestTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isCreating: boolean;\n  createTx: Transaction | undefined;\n}\n\nconst initialState: AttestState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  sourceAsset: \"\",\n  targetChain: CHAIN_ID_ETH,\n  attestTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isCreating: false,\n  createTx: undefined,\n};\n\nexport const attestSlice = createSlice({\n  name: \"attest\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceAsset = \"\";\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceAsset: (state, action: PayloadAction<string>) => {\n      state.sourceAsset = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceAsset = \"\";\n      }\n    },\n    setAttestTx: (state, action: PayloadAction<Transaction>) => {\n      state.attestTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsCreating: (state, action: PayloadAction<boolean>) => {\n      state.isCreating = action.payload;\n    },\n    setCreateTx: (state, action: PayloadAction<Transaction>) => {\n      state.createTx = action.payload;\n      state.isCreating = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceAsset,\n  setTargetChain,\n  setAttestTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsCreating,\n  setCreateTx,\n  reset,\n} = attestSlice.actions;\n\nexport default attestSlice.reducer;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  createWrappedOnEth,\n  createWrappedOnSolana,\n  createWrappedOnTerra,\n  updateWrappedOnEth,\n  updateWrappedOnTerra,\n  updateWrappedOnSolana,\n  postVaaSolanaWithRetry,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useAttestSignedVAA from \"./useAttestSignedVAA\";\nimport { setCreateTx, setIsCreating } from \"../store/attestSlice\";\nimport {\n  selectAttestIsCreating,\n  selectAttestTargetChain,\n} from \"../store/selectors\";\nimport {\n  getTokenBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const receipt = shouldUpdate\n      ? await updateWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await createWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setCreateTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, // TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolanaWithRetry(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA),\n      MAX_VAA_UPLOAD_RETRIES_SOLANA\n    );\n    const transaction = shouldUpdate\n      ? await updateWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await createWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setCreateTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const msg = shouldUpdate\n      ? await updateWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        )\n      : await createWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Create Wrapped\"\n    );\n    dispatch(\n      setCreateTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nexport function useHandleCreateWrapped(shouldUpdate: boolean) {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const signedVAA = useAttestSignedVAA();\n  const isCreating = useSelector(selectAttestIsCreating);\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const handleCreateClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && !!signedVAA) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        signedVAA,\n        targetChain,\n        shouldUpdate\n      );\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        shouldUpdate\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && !!signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA, shouldUpdate);\n    } else {\n      // enqueueSnackbar(\n      //   \"Creating wrapped tokens on this chain is not yet supported\",\n      //   {\n      //     variant: \"error\",\n      //   }\n      // );\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    signedVAA,\n    signer,\n    shouldUpdate,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleCreateClick,\n      disabled: !!isCreating,\n      showLoader: !!isCreating,\n    }),\n    [handleCreateClick, isCreating]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useAttestSignedVAA() {\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getClaimAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  postVaaSolanaWithRetry,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  createMetaOnSolana,\n  getForeignAssetSol,\n  isNFTVAASolanaNative,\n  redeemOnEth,\n  redeemOnSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/nftSlice\";\nimport { selectNFTIsRedeeming, selectNFTTargetChain } from \"../store/selectors\";\nimport {\n  getNFTBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getMetadataAddress } from \"../utils/metaplex\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTSignedVAA from \"./useNFTSignedVAA\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = await redeemOnEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      signedVAA\n    );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const claimAddress = await getClaimAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS,\n      signedVAA\n    );\n    const claimInfo = await connection.getAccountInfo(claimAddress);\n    let txid;\n    if (!claimInfo) {\n      await postVaaSolanaWithRetry(\n        connection,\n        wallet.signTransaction,\n        SOL_BRIDGE_ADDRESS,\n        payerAddress,\n        Buffer.from(signedVAA),\n        MAX_VAA_UPLOAD_RETRIES_SOLANA\n      );\n      // TODO: how do we retry in between these steps\n      const transaction = await redeemOnSolana(\n        connection,\n        SOL_BRIDGE_ADDRESS,\n        SOL_NFT_BRIDGE_ADDRESS,\n        payerAddress,\n        signedVAA\n      );\n      txid = await signSendAndConfirm(wallet, connection, transaction);\n      // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    }\n    const isNative = await isNFTVAASolanaNative(signedVAA);\n    if (!isNative) {\n      const { parse_vaa } = await import(\n        \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n      );\n      const parsedVAA = parse_vaa(signedVAA);\n      const { originChain, originAddress, tokenId } = parseNFTPayload(\n        Buffer.from(new Uint8Array(parsedVAA.payload))\n      );\n      const mintAddress = await getForeignAssetSol(\n        SOL_NFT_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAddress),\n        arrayify(tokenId)\n      );\n      const [metadataAddress] = await getMetadataAddress(mintAddress);\n      const metadata = await connection.getAccountInfo(metadataAddress);\n      if (!metadata) {\n        const transaction = await createMetaOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_NFT_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n        txid = await signSendAndConfirm(wallet, connection, transaction);\n      }\n    }\n    dispatch(setRedeemTx({ id: txid || \"\", block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleNFTRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const signedVAA = useNFTSignedVAA();\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTSignedVAA() {\n  const signedVAAHex = useSelector(selectNFTSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  parseTransferPayload,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Card,\n  CircularProgress,\n  Container,\n  Divider,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { COLORS } from \"../muiTheme\";\nimport { setRecoveryVaa as setRecoveryNFTVaa } from \"../store/nftSlice\";\nimport { setRecoveryVaa } from \"../store/transferSlice\";\nimport {\n  CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n  WORMHOLE_RPC_HOSTS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport ChainSelect from \"./ChainSelect\";\nimport KeyAndBalance from \"./KeyAndBalance\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: theme.spacing(2),\n    backgroundColor: COLORS.nearBlackWithMinorTransparency,\n  },\n  advancedContainer: {\n    padding: theme.spacing(2, 0),\n  },\n}));\n\nasync function evm(\n  provider: ethers.providers.Web3Provider,\n  tx: string,\n  enqueueSnackbar: any,\n  chainId: ChainId,\n  nft: boolean\n) {\n  try {\n    const receipt = await provider.getTransactionReceipt(tx);\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      nft\n        ? getNFTBridgeAddressForChain(chainId)\n        : getTokenBridgeAddressForChain(chainId)\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function solana(tx: string, enqueueSnackbar: any, nft: boolean) {\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const info = await connection.getTransaction(tx);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      nft ? SOL_NFT_BRIDGE_ADDRESS : SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function terra(tx: string, enqueueSnackbar: any) {\n  try {\n    const lcd = new LCDClient(TERRA_HOST);\n    const info = await lcd.tx.txInfo(tx);\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence,\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nexport default function Recovery() {\n  const classes = useStyles();\n  const { push } = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const { provider } = useEthereumProvider();\n  const [type, setType] = useState(\"Token\");\n  const isNFT = type === \"NFT\";\n  const [recoverySourceChain, setRecoverySourceChain] =\n    useState(CHAIN_ID_SOLANA);\n  const [recoverySourceTx, setRecoverySourceTx] = useState(\"\");\n  const [recoverySourceTxIsLoading, setRecoverySourceTxIsLoading] =\n    useState(false);\n  const [recoverySourceTxError, setRecoverySourceTxError] = useState(\"\");\n  const [recoverySignedVAA, setRecoverySignedVAA] = useState(\"\");\n  const [recoveryParsedVAA, setRecoveryParsedVAA] = useState<any>(null);\n  const { isReady, statusMessage } = useIsWalletReady(recoverySourceChain);\n  const walletConnectError =\n    isEVMChain(recoverySourceChain) && !isReady ? statusMessage : \"\";\n  const parsedPayload = useMemo(() => {\n    try {\n      return recoveryParsedVAA?.payload\n        ? isNFT\n          ? parseNFTPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n          : parseTransferPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n        : null;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }, [recoveryParsedVAA, isNFT]);\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathSourceTransaction = query.get(\"transactionId\");\n\n  //This effect initializes the state based on the path params.\n  useEffect(() => {\n    if (!pathSourceChain && !pathSourceTransaction) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathSourceChain || \"\") as ChainId]?.id;\n\n      if (sourceChain) {\n        setRecoverySourceChain(sourceChain);\n      }\n      if (pathSourceTransaction) {\n        setRecoverySourceTx(pathSourceTransaction);\n      }\n    } catch (e) {\n      console.error(e);\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathSourceTransaction]);\n\n  useEffect(() => {\n    if (recoverySourceTx && (!isEVMChain(recoverySourceChain) || isReady)) {\n      let cancelled = false;\n      if (isEVMChain(recoverySourceChain) && provider) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await evm(\n            provider,\n            recoverySourceTx,\n            enqueueSnackbar,\n            recoverySourceChain,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_SOLANA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await solana(\n            recoverySourceTx,\n            enqueueSnackbar,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_TERRA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await terra(recoverySourceTx, enqueueSnackbar);\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    recoverySourceChain,\n    recoverySourceTx,\n    provider,\n    enqueueSnackbar,\n    isNFT,\n    isReady,\n  ]);\n  const handleTypeChange = useCallback((event) => {\n    setRecoverySourceChain((prevChain) =>\n      event.target.value === \"NFT\" &&\n      !CHAINS_WITH_NFT_SUPPORT.find((chain) => chain.id === prevChain)\n        ? CHAIN_ID_SOLANA\n        : prevChain\n    );\n    setType(event.target.value);\n  }, []);\n  const handleSourceChainChange = useCallback((event) => {\n    setRecoverySourceTx(\"\");\n    setRecoverySourceChain(event.target.value);\n  }, []);\n  const handleSourceTxChange = useCallback((event) => {\n    setRecoverySourceTx(event.target.value.trim());\n  }, []);\n  const handleSignedVAAChange = useCallback((event) => {\n    setRecoverySignedVAA(event.target.value.trim());\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    if (recoverySignedVAA) {\n      (async () => {\n        try {\n          const { parse_vaa } = await import(\n            \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n          );\n          const parsedVAA = parse_vaa(hexToUint8Array(recoverySignedVAA));\n          if (!cancelled) {\n            setRecoveryParsedVAA(parsedVAA);\n          }\n        } catch (e) {\n          console.log(e);\n          if (!cancelled) {\n            setRecoveryParsedVAA(null);\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [recoverySignedVAA]);\n  const parsedPayloadTargetChain = parsedPayload?.targetChain;\n  const enableRecovery = recoverySignedVAA && parsedPayloadTargetChain;\n  const handleRecoverClick = useCallback(() => {\n    if (enableRecovery && recoverySignedVAA && parsedPayloadTargetChain) {\n      // TODO: make recovery reducer\n      if (isNFT) {\n        dispatch(\n          setRecoveryNFTVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n            },\n          })\n        );\n        push(\"/nft\");\n      } else {\n        dispatch(\n          setRecoveryVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n              amount:\n                \"amount\" in parsedPayload\n                  ? parsedPayload.amount.toString()\n                  : \"\",\n            },\n          })\n        );\n        push(\"/transfer\");\n      }\n    }\n  }, [\n    dispatch,\n    enableRecovery,\n    recoverySignedVAA,\n    parsedPayloadTargetChain,\n    parsedPayload,\n    isNFT,\n    push,\n  ]);\n  return (\n    <Container maxWidth=\"md\">\n      <Card className={classes.mainCard}>\n        <Alert severity=\"info\" variant=\"outlined\">\n          If you have sent your tokens but have not redeemed them, you may paste\n          in the Source Transaction ID (from Step 3) to resume your transfer.\n        </Alert>\n        <TextField\n          select\n          variant=\"outlined\"\n          label=\"Type\"\n          disabled={!!recoverySignedVAA}\n          value={type}\n          onChange={handleTypeChange}\n          fullWidth\n          margin=\"normal\"\n        >\n          <MenuItem value=\"Token\">Token</MenuItem>\n          <MenuItem value=\"NFT\">NFT</MenuItem>\n        </TextField>\n        <ChainSelect\n          select\n          variant=\"outlined\"\n          label=\"Source Chain\"\n          disabled={!!recoverySignedVAA}\n          value={recoverySourceChain}\n          onChange={handleSourceChainChange}\n          fullWidth\n          margin=\"normal\"\n          chains={isNFT ? CHAINS_WITH_NFT_SUPPORT : CHAINS}\n        />\n        {isEVMChain(recoverySourceChain) ? (\n          <KeyAndBalance chainId={recoverySourceChain} />\n        ) : null}\n        <TextField\n          variant=\"outlined\"\n          label=\"Source Tx (paste here)\"\n          disabled={\n            !!recoverySignedVAA ||\n            recoverySourceTxIsLoading ||\n            !!walletConnectError\n          }\n          value={recoverySourceTx}\n          onChange={handleSourceTxChange}\n          error={!!recoverySourceTxError || !!walletConnectError}\n          helperText={recoverySourceTxError || walletConnectError}\n          fullWidth\n          margin=\"normal\"\n        />\n        <ButtonWithLoader\n          onClick={handleRecoverClick}\n          disabled={!enableRecovery}\n          showLoader={recoverySourceTxIsLoading}\n        >\n          Recover\n        </ButtonWithLoader>\n        <div className={classes.advancedContainer}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              Advanced\n            </AccordionSummary>\n            <AccordionDetails>\n              <div>\n                <Box position=\"relative\">\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Signed VAA (Hex)\"\n                    disabled={recoverySourceTxIsLoading}\n                    value={recoverySignedVAA || \"\"}\n                    onChange={handleSignedVAAChange}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                  {recoverySourceTxIsLoading ? (\n                    <Box\n                      position=\"absolute\"\n                      style={{\n                        top: 0,\n                        right: 0,\n                        left: 0,\n                        bottom: 0,\n                        backgroundColor: \"rgba(0,0,0,0.5)\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <CircularProgress />\n                    </Box>\n                  ) : null}\n                </Box>\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Chain\"\n                  disabled\n                  value={recoveryParsedVAA?.emitter_chain || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Address\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      hexToNativeString(\n                        recoveryParsedVAA.emitter_address,\n                        recoveryParsedVAA.emitter_chain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Sequence\"\n                  disabled\n                  value={recoveryParsedVAA?.sequence || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Timestamp\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      new Date(\n                        recoveryParsedVAA.timestamp * 1000\n                      ).toLocaleString()) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Chain\"\n                  disabled\n                  value={parsedPayload?.originChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Token Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.originAddress,\n                        parsedPayload.originChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Origin Token ID\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.tokenId || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                ) : null}\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Chain\"\n                  disabled\n                  value={parsedPayload?.targetChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.targetAddress,\n                        parsedPayload.targetChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? null : (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Amount\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.amount.toString() || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                )}\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  postVaaSolanaWithRetry,\n  redeemAndUnwrapOnSolana,\n  redeemOnEth,\n  redeemOnEthNative,\n  redeemOnSolana,\n  redeemOnTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport {\n  selectTransferIsRedeeming,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/transferSlice\";\nimport {\n  getTokenBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = isNative\n      ? await redeemOnEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await redeemOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  isNative: boolean\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolanaWithRetry(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA),\n      MAX_VAA_UPLOAD_RETRIES_SOLANA\n    );\n    // TODO: how do we retry in between these steps\n    const transaction = isNative\n      ? await redeemAndUnwrapOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await redeemOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setRedeemTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const msg = await redeemOnTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      signedVAA\n    );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Complete Transfer\"\n    );\n    dispatch(\n      setRedeemTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const signedVAA = useTransferSignedVAA();\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, false, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        false\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n  ]);\n\n  const handleRedeemNativeClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, true, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        true\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA); //TODO isNative = true\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n  ]);\n\n  return useMemo(\n    () => ({\n      handleNativeClick: handleRedeemNativeClick,\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming, handleRedeemNativeClick]\n  );\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport {\n  AccountInfo,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nexport async function signSendAndConfirm(\n  wallet: WalletContextState,\n  connection: Connection,\n  transaction: Transaction\n) {\n  if (!wallet.signTransaction) {\n    throw new Error(\"wallet.signTransaction is undefined\");\n  }\n  const signed = await wallet.signTransaction(transaction);\n  const txid = await connection.sendRawTransaction(signed.serialize());\n  await connection.confirmTransaction(txid);\n  return txid;\n}\n\nexport interface ExtractedMintInfo {\n  mintAuthority?: string;\n  supply?: string;\n}\n\nexport function extractMintInfo(\n  account: AccountInfo<Buffer>\n): ExtractedMintInfo {\n  const data = Buffer.from(account.data);\n  const mintInfo = MintLayout.decode(data);\n\n  const uintArray = mintInfo?.mintAuthority;\n  const pubkey = new PublicKey(uintArray);\n  const supply = BigNumber.from(mintInfo?.supply.reverse()).toString();\n  const output = {\n    mintAuthority: pubkey?.toString(),\n    supply: supply.toString(),\n  };\n\n  return output;\n}\n\nexport async function getMultipleAccountsRPC(\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  return getMultipleAccounts(connection, pubkeys, \"confirmed\");\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  pubkeys: PublicKey[],\n  commitment: string\n) => {\n  return (\n    await Promise.all(\n      chunks(pubkeys, 99).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk, commitment)\n      )\n    )\n  ).flat();\n};\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function shortenAddress(address: string) {\n  return address.length > 10\n    ? `${address.slice(0, 4)}...${address.slice(-4)}`\n    : address;\n}\n","import { createTheme, responsiveFontSizes } from \"@material-ui/core\";\n\nexport const COLORS = {\n  blue: \"#1975e6\",\n  blueWithTransparency: \"rgba(25, 117, 230, 0.8)\",\n  gray: \"#4e4e54\",\n  green: \"#0ac2af\",\n  greenWithTransparency: \"rgba(10, 194, 175, 0.8)\",\n  lightGreen: \"rgba(51, 242, 223, 1)\",\n  lightBlue: \"#83b9fc\",\n  nearBlack: \"#000008\",\n  nearBlackWithMinorTransparency: \"rgba(0,0,0,.25)\",\n  red: \"#aa0818\",\n  darkRed: \"#810612\",\n};\n\nexport const theme = responsiveFontSizes(\n  createTheme({\n    palette: {\n      type: \"dark\",\n      background: {\n        default: COLORS.nearBlack,\n        paper: COLORS.nearBlack,\n      },\n      divider: COLORS.gray,\n      text: {\n        primary: \"rgba(255,255,255,0.98)\",\n      },\n      primary: {\n        main: COLORS.blueWithTransparency, // #0074FF\n        light: COLORS.lightBlue,\n      },\n      secondary: {\n        main: COLORS.greenWithTransparency, // #00EFD8\n        light: COLORS.lightGreen,\n      },\n      error: {\n        main: COLORS.red,\n      },\n    },\n    typography: {\n      fontFamily: \"'Sora', sans-serif\",\n      h1: {\n        fontWeight: \"200\",\n      },\n      h2: {\n        fontWeight: \"200\",\n      },\n      h4: {\n        fontWeight: \"500\",\n      },\n    },\n    overrides: {\n      MuiCssBaseline: {\n        \"@global\": {\n          \"*\": {\n            scrollbarWidth: \"thin\",\n            scrollbarColor: `${COLORS.gray} ${COLORS.nearBlackWithMinorTransparency}`,\n          },\n          \"*::-webkit-scrollbar\": {\n            width: \"8px\",\n            height: \"8px\",\n            backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          },\n          \"*::-webkit-scrollbar-thumb\": {\n            backgroundColor: COLORS.gray,\n            borderRadius: \"4px\",\n          },\n          \"*::-webkit-scrollbar-corner\": {\n            // this hides an annoying white box which appears when both scrollbars are present\n            backgroundColor: \"transparent\",\n          },\n        },\n      },\n      MuiAccordion: {\n        root: {\n          backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          \"&:before\": {\n            display: \"none\",\n          },\n        },\n        rounded: {\n          \"&:first-child\": {\n            borderTopLeftRadius: \"16px\",\n            borderTopRightRadius: \"16px\",\n          },\n          \"&:last-child\": {\n            borderBottomLeftRadius: \"16px\",\n            borderBottomRightRadius: \"16px\",\n          },\n        },\n      },\n      MuiAlert: {\n        root: {\n          borderRadius: \"8px\",\n          border: \"1px solid\",\n        },\n      },\n      MuiButton: {\n        root: {\n          borderRadius: \"5px\",\n          textTransform: \"none\",\n        },\n      },\n      MuiLink: {\n        root: {\n          color: COLORS.lightBlue,\n        },\n      },\n      MuiPaper: {\n        rounded: {\n          borderRadius: \"16px\",\n        },\n      },\n      MuiStepper: {\n        root: {\n          backgroundColor: \"transparent\",\n          padding: 0,\n        },\n      },\n      MuiStep: {\n        root: {\n          backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          borderRadius: \"16px\",\n          padding: 16,\n        },\n      },\n      MuiStepConnector: {\n        lineVertical: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepContent: {\n        root: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepLabel: {\n        label: {\n          fontSize: 16,\n          fontWeight: \"300\",\n          \"&.MuiStepLabel-active\": {\n            fontWeight: \"300\",\n          },\n          \"&.MuiStepLabel-completed\": {\n            fontWeight: \"300\",\n          },\n        },\n      },\n      MuiTab: {\n        root: {\n          fontSize: 18,\n          fontWeight: \"300\",\n          padding: 12,\n          textTransform: \"none\",\n        },\n      },\n    },\n  })\n);\n","import { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { useWallet, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getMathWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport React, { FC, useMemo } from \"react\";\n\nexport const SolanaWalletProvider: FC = (props) => {\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you want to instantiate here will be compiled into your application\n  const wallets = useMemo(() => {\n    return [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      // getTorusWallet({\n      //     options: { clientId: 'Go to https://developer.tor.us and create a client ID' }\n      // }),\n      // getLedgerWallet(),\n      // getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ];\n  }, []);\n\n  return (\n    <WalletProvider wallets={wallets}>\n      <WalletDialogProvider>{props.children}</WalletDialogProvider>\n    </WalletProvider>\n  );\n};\n\nexport const useSolanaWallet = useWallet;\n","import {\n  canonicalAddress,\n  isNativeDenom,\n  isNativeTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ConnectedWallet, TxResult } from \"@terra-money/wallet-provider\";\nimport axios from \"axios\";\n// import { TerraTokenMetadata } from \"../hooks/useTerraTokenMap\";\nimport { TERRA_GAS_PRICES_URL, TERRA_HOST } from \"./consts\";\n\nexport const NATIVE_TERRA_DECIMALS = 6;\n\nexport const getNativeTerraIcon = (symbol = \"\") =>\n  `https://assets.terra.money/icon/60/${symbol}.png`;\n\n// inspired by https://github.com/terra-money/station/blob/dca7de43958ce075c6e46605622203b9859b0e14/src/lib/utils/format.ts#L38\nexport const formatNativeDenom = (denom = \"\"): string => {\n  const unit = denom.slice(1).toUpperCase();\n  const isValidTerra = isNativeTerra(denom);\n  return denom === \"uluna\"\n    ? \"Luna\"\n    : isValidTerra\n    ? unit.slice(0, 2) + \"T\"\n    : \"\";\n};\n\nexport const formatTerraNativeBalance = (balance = \"\"): string =>\n  formatUnits(balance, 6);\n\nexport async function waitForTerraExecution(transaction: TxResult) {\n  const lcd = new LCDClient(TERRA_HOST);\n  let info;\n  while (!info) {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      info = await lcd.tx.txInfo(transaction.result.txhash);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (info.code !== undefined) {\n    // error code\n    throw new Error(\n      `Tx ${transaction.result.txhash}: error code ${info.code}: ${info.raw_log}`\n    );\n  }\n  return info;\n}\n\nexport const isValidTerraAddress = (address: string) => {\n  if (isNativeDenom(address)) {\n    return true;\n  }\n  try {\n    const startsWithTerra = address && address.startsWith(\"terra\");\n    const isParseable = canonicalAddress(address);\n    const isLength20 = isParseable.length === 20;\n    return !!(startsWithTerra && isParseable && isLength20);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport async function postWithFees(\n  wallet: ConnectedWallet,\n  msgs: any[],\n  memo: string\n) {\n  // don't try/catch, let errors propagate\n  const lcd = new LCDClient(TERRA_HOST);\n  //let gasPrices = await lcd.config.gasPrices //Unsure if the values returned from this are hardcoded or not.\n  //Thus, we are going to pull it directly from the current FCD.\n  let gasPrices = await axios\n    .get(TERRA_GAS_PRICES_URL)\n    .then((result) => result.data);\n\n  const feeEstimate = await lcd.tx.estimateFee(\n    wallet.walletAddress,\n    [...msgs],\n    {\n      memo,\n      feeDenoms: [\"uluna\"],\n      gasPrices,\n    }\n  );\n\n  const result = await wallet.post({\n    msgs: [...msgs],\n    memo,\n    feeDenoms: [\"uluna\"],\n    gasPrices,\n    fee: feeEstimate,\n  });\n\n  return result;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport EthereumSignerKey from \"./EthereumSignerKey\";\nimport SolanaWalletKey from \"./SolanaWalletKey\";\nimport TerraWalletKey from \"./TerraWalletKey\";\n\nfunction KeyAndBalance({ chainId }: { chainId: ChainId }) {\n  if (isEVMChain(chainId)) {\n    return (\n      <>\n        <EthereumSignerKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_SOLANA) {\n    return (\n      <>\n        <SolanaWalletKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <>\n        <TerraWalletKey />\n      </>\n    );\n  }\n  return null;\n}\n\nexport default KeyAndBalance;\n","const MM_ERR_WITH_INFO_START =\n  \"VM Exception while processing transaction: revert \";\nconst parseError = (e: any) =>\n  e?.data?.message?.startsWith(MM_ERR_WITH_INFO_START)\n    ? e.data.message.replace(MM_ERR_WITH_INFO_START, \"\")\n    : e?.response?.data?.error // terra error\n    ? e.response.data.error\n    : e?.message\n    ? e.message\n    : \"An unknown error occurred\";\nexport default parseError;\n"],"sourceRoot":""}