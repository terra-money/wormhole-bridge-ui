{"version":3,"sources":["store/selectors.ts","components/HeaderText.tsx","hooks/useFetchForeignAsset.ts","store/feeSlice.ts","hooks/useTerraNativeBalances.ts","components/TerraFeeDenomPicker.tsx","components/Transfer/WaitingForWalletMessage.tsx","components/Attest/WaitingForWalletMessage.tsx","components/Attest/Create.tsx","components/ShowTx.tsx","components/Attest/CreatePreview.tsx","hooks/useHandleAttest.tsx","hooks/useMetaplexData.ts","components/TransactionProgress.tsx","components/Attest/Send.tsx","components/Attest/SendPreview.tsx","hooks/useTransactionFees.tsx","components/LowBalanceWarning.tsx","components/Attest/Source.tsx","hooks/useCopyToClipboard.tsx","utils/pushToClipboard.ts","components/SmartAddress.tsx","components/Attest/SourcePreview.tsx","components/Attest/Target.tsx","components/Attest/TargetPreview.tsx","components/Attest/index.tsx","icons/Discord.svg","icons/Github.svg","icons/Medium.svg","icons/portal_logo_w.svg","icons/Telegram.svg","icons/Twitter.svg","images/Footer.png","components/Footer.tsx","hooks/useEthereumMigratorInformation.tsx","components/NumberTextField.tsx","components/Migration/EvmWorkflow.tsx","store/tokenSlice.ts","hooks/useSolanaTokenMap.ts","components/SolanaCreateAssociatedAddress.tsx","components/Migration/SolanaWorkflow.tsx","components/Migration/index.tsx","components/Migration/EvmQuickMigrate.tsx","hooks/useSolanaMigratorInformation.tsx","components/Migration/SolanaQuickMigrate.tsx","hooks/useCheckIfWormholeWrapped.ts","hooks/useFetchTargetAsset.ts","components/SolanaTPSWarning.tsx","components/StepDescription.tsx","components/NFT/WaitingForWalletMessage.tsx","components/NFT/Redeem.tsx","components/NFT/RedeemPreview.tsx","hooks/useHandleNFTTransfer.tsx","hooks/useNFTTargetAddress.ts","components/NFT/Send.tsx","components/NFT/SendPreview.tsx","icons/bnb.svg","hooks/useGetSourceParsedTokenAccounts.ts","utils/ethereum.ts","hooks/useMarketsMap.ts","icons/wormhole-network.svg","components/TokenSelectors/NFTViewer.tsx","components/TokenSelectors/TokenPicker.tsx","components/TokenSelectors/EvmTokenPicker.tsx","components/TokenSelectors/RefreshButtonWrapper.tsx","utils/sort.ts","components/TokenSelectors/SolanaTokenPicker.tsx","components/TokenSelectors/TerraTokenPicker.tsx","components/TokenSelectors/SourceTokenSelector.tsx","components/NFT/Source.tsx","components/NFT/SourcePreview.tsx","hooks/useSyncTargetAddress.ts","components/NFT/Target.tsx","components/NFT/TargetPreview.tsx","components/NFT/index.tsx","components/NFTOriginVerifier.tsx","utils/coinGecko.ts","hooks/useTVL.ts","components/Stats/tableComponents/TablePaginationActions.jsx","components/Stats/tableComponents/MuiReactTable.jsx","components/Stats/CustodyAddresses.tsx","hooks/useEvmMetadata.ts","hooks/useTerraMetadata.ts","hooks/useTerraTokenMap.ts","hooks/useMetadata.ts","hooks/useNFTTVL.ts","components/Stats/nftLists.ts","components/Stats/NFTStats.tsx","hooks/useTransactionCount.ts","components/Stats/TransactionMetrics.tsx","components/Stats/index.tsx","hooks/useOriginalAsset.ts","components/Transfer/RegisterNowButton.tsx","components/TokenOriginVerifier.tsx","components/Transfer/AddToMetamask.tsx","components/Transfer/Redeem.tsx","hooks/useGetIsTransferCompleted.ts","components/Transfer/FeaturedMarkets.tsx","components/Transfer/RedeemPreview.tsx","hooks/useHandleTransfer.tsx","hooks/useTransferTargetAddress.ts","hooks/useGetTargetParsedTokenAccounts.ts","components/Transfer/Target.tsx","components/Transfer/TokenWarning.tsx","components/Transfer/SendConfirmationDialog.tsx","components/Transfer/Send.tsx","hooks/useAllowance.ts","components/Transfer/SendPreview.tsx","components/ChainSelectArrow.tsx","components/Transfer/SourceAssetWarning.tsx","components/Transfer/Source.tsx","components/Transfer/SourcePreview.tsx","components/Transfer/TargetPreview.tsx","components/Transfer/index.tsx","components/WithdrawTokensTerra.tsx","icons/portal_logo.svg","images/Header.png","App.js","components/BackgroundImage.tsx","contexts/TerraWalletContext.tsx","ErrorBoundary.js","store/index.ts","index.js","components/ChainSelect.tsx","utils/getSignedVAAWithRetry.ts","contexts/BetaContext.tsx","icons/eth.svg","icons/avax.svg","icons/oasis-network-rose-logo.svg","icons/polygon.svg","components/EthereumSignerKey.tsx","components/SolanaWalletKey.tsx","icons/bsc.svg","icons/solana.svg","utils/metaplex.ts","store/transferSlice.ts","components/ToggleConnectedButton.tsx","hooks/useTransferSignedVAA.ts","components/TerraConnectWalletDialog.tsx","components/TerraWalletKey.tsx","store/helpers.ts","contexts/EthereumProviderContext.tsx","hooks/useIsWalletReady.ts","icons/terra.svg","utils/consts.ts","store/nftSlice.ts","components/ButtonWithLoader.tsx","store/attestSlice.ts","hooks/useHandleCreateWrapped.tsx","hooks/useAttestSignedVAA.ts","utils/terra.ts","hooks/useHandleNFTRedeem.tsx","hooks/useNFTSignedVAA.ts","components/Recovery.tsx","hooks/useHandleRedeem.tsx","utils/solana.ts","contexts/SolanaWalletContext.tsx","components/KeyAndBalance.tsx","utils/parseError.ts","muiTheme.js"],"names":["selectAttestActiveStep","state","attest","activeStep","selectAttestSourceChain","sourceChain","selectAttestSourceAsset","sourceAsset","selectAttestTargetChain","targetChain","selectAttestAttestTx","attestTx","selectAttestSignedVAAHex","signedVAAHex","selectAttestIsSending","isSending","selectAttestIsCreating","isCreating","selectAttestCreateTx","createTx","selectAttestIsSourceComplete","selectAttestIsTargetComplete","selectAttestIsSendComplete","selectAttestIsCreateComplete","selectAttestShouldLockFields","selectNFTActiveStep","nft","selectNFTSourceChain","selectNFTSourceAsset","sourceParsedTokenAccount","mintKey","undefined","selectNFTIsSourceAssetWormholeWrapped","isSourceAssetWormholeWrapped","selectNFTOriginChain","originChain","selectNFTOriginAsset","originAsset","selectNFTOriginTokenId","originTokenId","selectNFTSourceWalletAddress","sourceWalletAddress","selectNFTSourceParsedTokenAccount","selectNFTSourceParsedTokenAccounts","sourceParsedTokenAccounts","selectNFTSourceBalanceString","uiAmountString","selectNFTTargetChain","selectNFTTargetAddressHex","targetAddressHex","selectNFTTargetAsset","targetAsset","data","address","selectNFTTransferTx","transferTx","selectNFTSignedVAAHex","selectNFTIsSending","selectNFTIsRedeeming","isRedeeming","selectNFTRedeemTx","redeemTx","selectNFTSourceError","CHAIN_ID_SOLANA","publicKey","decimals","uri","length","parseUnits","lte","e","message","substring","indexOf","selectNFTIsSourceComplete","selectNFTTargetError","sourceError","UNREGISTERED_ERROR_MESSAGE","selectNFTIsTargetComplete","selectNFTIsSendComplete","selectNFTIsRedeemComplete","selectNFTShouldLockFields","selectNFTIsRecovery","isRecovery","selectTransferActiveStep","transfer","selectTransferSourceChain","selectTransferSourceAsset","selectTransferIsSourceAssetWormholeWrapped","selectTransferOriginChain","selectTransferOriginAsset","selectSourceWalletAddress","selectTransferSourceParsedTokenAccount","selectTransferSourceParsedTokenAccounts","selectTransferSourceBalanceString","selectTransferAmount","amount","selectTransferTargetChain","selectTransferTargetAddressHex","selectTransferTargetAssetWrapper","selectTransferTargetAsset","selectTransferTargetParsedTokenAccount","targetParsedTokenAccount","selectTransferTargetBalanceString","selectTransferTransferTx","selectTransferSignedVAAHex","selectTransferIsSending","selectTransferIsRedeeming","selectTransferRedeemTx","selectTransferIsApproving","isApproving","selectTransferSourceError","gt","selectTransferIsSourceComplete","selectTransferTargetError","isEVMChain","ethers","constants","AddressZero","selectTransferIsTargetComplete","selectTransferIsSendComplete","selectTransferIsRedeemComplete","selectTransferShouldLockFields","selectTransferIsRecovery","selectSolanaTokenMap","tokens","solanaTokenMap","selectTerraTokenMap","terraTokenMap","selectMarketsMap","marketsMap","selectTerraFeeDenom","fee","terraFeeDenom","useStyles","makeStyles","theme","centeredContainer","marginTop","spacing","marginBottom","minHeight","textAlign","width","linearGradient","background","COLORS","blue","green","WebkitBackgroundClip","backgroundClip","WebkitTextFillColor","MozBackgroundClip","MozTextFillColor","HeaderText","children","white","small","subtitle","classes","className","Typography","variant","component","clsx","gutterBottom","useFetchForeignAsset","foreignChain","useEthereumProvider","provider","evmChainId","chainId","isReady","useIsWalletReady","hasCorrectEvmNetwork","getEvmChainId","useState","assetAddress","setAssetAddress","doesExist","setDoesExist","error","setError","isLoading","setIsLoading","originAssetHex","useMemo","nativeToHexString","previousArgs","setPreviousArgs","argsEqual","setArgs","useCallback","argumentError","useEffect","getForeignAssetEth","getTokenBridgeAddressForChain","hexToUint8Array","CHAIN_ID_TERRA","lcd","LCDClient","TERRA_HOST","getForeignAssetTerra","TERRA_TOKEN_BRIDGE_ADDRESS","connection","Connection","SOLANA_HOST","getForeignAssetSolana","SOL_TOKEN_BRIDGE_ADDRESS","then","result","catch","compoundError","isFetching","receivedAt","initialState","TERRA_DEFAULT_FEE_DENOM","feeSlice","createSlice","name","reducers","setTerraFeeDenom","action","payload","reset","actions","useTerraNativeBalances","walletAddress","refreshRef","balances","setBalances","refresh","setRefresh","current","bank","balance","map","denom","reduce","obj","toString","feePickerContainer","display","flexDirection","margin","maxWidth","select","alignItems","listItemIcon","minWidth","icon","height","TerraFeeDenomPicker","props","useSelector","wallet","useConnectedWallet","dispatch","useDispatch","feeDenomItems","items","Object","entries","symbol","formatNativeDenom","push","getNativeTerraIcon","find","item","TextField","size","fullWidth","value","onChange","event","target","disabled","MenuItem","ListItemIcon","src","alt","color","palette","warning","light","WAITING_FOR_WALLET_AND_CONF","WaitingForWalletMessage","alignCenter","spacer","Create","statusMessage","foreignAssetInfo","shouldUpdate","useHandleCreateWrapped","handleClick","showLoader","console","log","KeyAndBalance","CircularProgress","ButtonWithLoader","onClick","tx","viewButton","ShowTx","showExplorerLink","CLUSTER","explorerAddress","CHAIN_ID_ETH","id","CHAIN_ID_ETHEREUM_ROPSTEN","CHAIN_ID_BSC","CHAIN_ID_POLYGON","CHAIN_ID_AVAX","CHAIN_ID_OASIS","explorerName","getExplorerName","noWrap","Button","href","rel","description","alert","CreatePreview","useHistory","handleResetClick","handleReturnClick","howToAddToTokenListUrl","getHowToAddToTokenListUrl","Alert","severity","Link","enqueueSnackbar","signer","a","setIsSending","attestFromEth","receipt","setAttestTx","transactionHash","block","blockNumber","content","sequence","parseSequenceFromLogEth","getBridgeAddressForChain","emitterAddress","getEmitterAddressEth","getSignedVAAWithRetry","vaaBytes","setSignedVAAHex","uint8ArrayToHex","parseError","solPK","attestFromSolana","SOL_BRIDGE_ADDRESS","transaction","signSendAndConfirm","txid","getTransaction","info","Error","slot","parseSequenceFromLogSolana","getEmitterAddressSolana","asset","feeDenom","attestFromTerra","terraAddress","msg","postWithFees","waitForTerraExecution","txhash","parseSequenceFromLogTerra","getEmitterAddressTerra","useHandleAttest","useSnackbar","isTargetComplete","isSendComplete","solanaWallet","useSolanaWallet","terraWallet","handleAttestClick","evm","solana","terra","getMetaplexData","mintAddresses","promises","getMetadataAddress","Promise","all","metaAddresses","getMultipleAccountsRPC","pair","results","output","account","decodeMetadata","useMetaplexData","addresses","setResults","setReceivedAt","useLayoutEffect","cancelled","metadatas","Map","forEach","metadata","x","mint","set","createResultMap","Date","toISOString","root","TransactionProgress","currentBlock","setCurrentBlock","resolve","setTimeout","getBlockNumber","newBlock","sub","onSlotChange","slotInfo","removeSlotChangeListener","blockDiff","expectedBlocks","LinearProgress","CHAINS_BY_ID","SolanaTokenMetadataWarning","sourceAssetArrayed","metaplexData","get","SOLANA_TOKEN_METADATA_PROGRAM_URL","Send","SendPreview","SOLANA_THRESHOLD_LAMPORTS","BigInt","ETHEREUM_THRESHOLD_WEI","TERRA_THRESHOLD_ULUNA","TERRA_THRESHOLD_UUSD","isSufficientBalance","getBalanceSolana","PublicKey","lamports","getBalanceEvm","getBalance","toBigInt","getBalancesTerra","TARGET_DENOMS","filter","includes","reject","toBalanceString","formatUnits","NATIVE_TERRA_DECIMALS","useEthereumGasPrice","contract","estimateResults","setEstimateResults","getGasEstimates","EthGasEstimateSummary","methodType","estimate","style","flexWrap","LocalGasStation","fontSize","currentGasPrice","lowEstimate","highEstimate","getDefaultNativeCurrencySymbol","terraEstimatesByContract","lowGasEstimate","highGasEstimate","evmEstimatesByContract","createWrapped","lowEstimateGasAmount","highEstimateGasAmount","getGasPrice","priceInWei","parseFloat","toFixed","TerraGasEstimateSummary","GasEstimateSummary","LowBalanceWarning","transactionFeeWarning","setBalance","terraBalances","setTerraBalances","loadStart","adjustedresult","adjustedResults","some","balanceString","useTransactionFees","displayWarning","warningMessage","transferField","Source","isSourceComplete","shouldLockFields","handleSourceChange","setSourceChain","handleAssetChange","setSourceAsset","handleNextClick","incrementStep","ChainSelect","chains","CHAINS","label","useCopyToClipboard","navigator","clipboard","writeText","pushToClipboard","mainTypog","marginLeft","marginRight","textDecoration","textUnderlineOffset","noGutter","noUnderline","buttons","StyledTooltip","withStyles","tooltip","Tooltip","SmartAddress","parsedTokenAccount","tokenName","extraContent","isNativeTerra","isNativeDenom","useableAddress","useableSymbol","isNative","isNativeAsset","addressShort","shortenAddress","useableName","copyToClipboard","explorerButton","startIcon","OpenInNew","copyButton","FileCopy","tooltipContent","title","interactive","SourcePreview","explainerContent","Target","c","handleTargetChange","setTargetChain","TargetPreview","explainerString","Attest","isCreateComplete","preventNavigation","window","onbeforeunload","Container","Stepper","orientation","Step","expanded","StepButton","setStep","StepContent","footer","position","backdrop","zIndex","footerImg","backgroundRepeat","backgroundPosition","backgroundSize","opacity","breakpoints","up","container","paddingTop","paddingBottom","flex","borderTop","logoWrapper","paddingLeft","flexGrow","linksWrapper","order","mb","linkStyle","linkActiveStyle","socialWrapper","padding","socialHeader","socialIcon","builtWithContainer","justifyContent","wormholeIcon","copyWrapper","flexBasis","Footer","to","Portal","NavLink","underline","activeClassName","IconButton","Discord","Github","Medium","Telegram","Twitter","getRequisiteData","migrator","signerAddress","poolAddress","fromAsset","fromAddress","toAsset","toAddress","fromToken","TokenImplementation__factory","connect","toToken","fromSymbol","toSymbol","fromDecimals","toNumber","toDecimals","sharesDecimals","balanceOf","fromWalletBalance","toWalletBalance","fromPoolBalance","toPoolBalance","walletSharesBalance","useEthereumMigratorInformation","migratorAddress","toggleRefresh","Migrator__factory","setData","NumberTextField","onMaxClick","type","InputProps","endAdornment","InputAdornment","containerDiv","EvmWorkflow","setToggleRefresh","forceRefresh","prevState","poolInfo","migrationAmount","setMigrationAmount","migrationIsProcessing","setMigrationIsProcessing","setTransaction","fromParse","hasRequisiteData","amountGreaterThanZero","sufficientFromTokens","sufficientPoolBalance","isReadyToTransfer","handleAmountChange","handleMaxClick","migrateTokens","approve","migrate","wait","hash","toTokenPretty","fromTokenPretty","poolPretty","fatalError","mainWorkflow","EthereumSignerKey","getEmptyDataWrapper","tokenSlice","receiveSolanaTokenMap","receiveDataWrapper","fetchSolanaTokenMap","fetchDataWrapper","errorSolanaTokenMap","errorDataWrapper","receiveTerraTokenMap","fetchTerraTokenMap","errorTerraTokenMap","receiveMarketsMap","fetchMarketsMap","errorMarketsMap","environment","ENV","Testnet","MainnetBeta","getSolanaTokenMap","TokenListProvider","tokenList","filterByChainId","getList","useSolanaTokenMap","tokenMap","shouldFire","useAssociatedAccountExistsState","mintAddress","readableTargetAddress","associatedAccountExists","setAssociatedAccountExists","mintPublicKey","payerPublicKey","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","associatedAddress","getAccountInfo","SolanaCreateAssociatedAddress","setIsCreating","Transaction","createAssociatedTokenAccountInstruction","add","getRecentBlockhash","blockhash","recentBlockhash","feePayer","SolanaCreateAssociatedAddressAlternate","addressHex","base58TargetAddress","hexToNativeString","base58OriginAddress","setTargetAsset","handleForceCreateClick","mainPaper","backgroundColor","whiteWithTransparency","divider","getDecimals","setter","pk","getParsedAccountInfo","parsed","tokenAmount","Workflow","fromMint","toMint","fromTokenAccount","metaplexArray","setPoolAddress","poolExists","setPoolExists","fromTokenAccountBalance","setFromTokenAccountBalance","toTokenAccount","setToTokenAccount","toTokenAccountBalance","setToTokenAccountBalance","fromMintDecimals","setFromMintDecimals","fromTokenAccountExists","toTokenAccountExists","setToTokenAccountExists","toCustodyAddress","setToCustodyAddress","toCustodyBalance","setToCustodyBalance","getPoolAddress","MIGRATION_PROGRAM_ADDRESS","key","getMultipleAccounts","getToCustodyAddress","migrateTokensTx","instruction","accountsReady","getMetadata","tokenMapItem","metaplexItem","logo","logoURI","toMetadata","fromMetadata","toMintPretty","fromMintPretty","SolanaWalletKey","SolanaRoot","legacyAsset","match","params","MIGRATION_ASSET_MAP","fromTokenAcct","EthereumRoot","targetPool","getMigrationAssetMap","getAddress","withRouter","Paper","lineItem","alignSelf","flewGrow","hidden","convertButton","EvmMigrationLineItem","onLoadComplete","loaded","setLoaded","valueA","decimalsA","valueB","decimalsB","decimalsBasis","normalizedA","normalizedB","compareWithDecimalOffset","migrationAmountAbs","getAddressBalances","factory","EvmQuickMigrate","migrationMap","eligibleTokens","Array","from","keys","migrators","setMigrators","migratorsError","setMigratorsError","migratorsLoading","setMigratorsLoading","migratorsFinishedLoading","setMigratorsFinishedLoading","reportLoadComplete","migratorAddresses","tokenAddress","hasEligibleAssets","chainName","centered","SolanaMigrationLineItem","migratorInfo","getNotReadyCause","fromAssociatedTokenAccountExists","toAssociatedTokenAccountExists","fromAssociatedTokenAccount","toAssociatedTokenAccount","fromAssociatedTokenAccountBalance","toAssociatedTokenAccountBalance","fromName","fromLogo","toName","toLogo","useSolanaMigratorInformation","fromMintKey","toMintKey","defaultFromTokenAccount","migrationError","setMigrationError","handleMigrateClick","precheckError","getTokenBalances","getParsedTokenAccountsByOwner","programId","pubkey","fromAccountInfo","SolanaQuickMigrate","makeStateSafe","useCheckIfWormholeWrapped","nftSourceParsedTokenAccount","tokenId","setSourceWormholeWrappedInfo","setNFTSourceWormholeWrappedInfo","setTransferSourceWormholeWrappedInfo","getOriginalAssetEthNFT","getNFTBridgeAddressForChain","getOriginalAssetEth","wrappedInfo","getOriginalAssetSolNFT","SOL_NFT_BRIDGE_ADDRESS","getOriginalAssetSol","getOriginalAssetTerra","useFetchTargetAsset","setNFTTargetAsset","setTransferTargetAsset","lastSuccessfulArgs","setLastSuccessfulArgs","argsMatchLastSuccess","getForeignAssetEthNFT","getForeignAssetSolNFT","arrayify","BigNumber","SolanaTPSWarning","tps","setTps","interval","setInterval","getRecentPerformanceSamples","samples","short","sample","numTransactions","samplePeriodSecs","avgTps","clearInterval","numeral","format","StepDescription","Redeem","useHandleNFTRedeem","RedeemPreview","recipientChain","recipientAddress","transferFromEth","setTransferTx","payerAddress","targetAddress","originAddressStr","originAddress","zeroPad","transferFromSolana","useHandleNFTTransfer","sourceTokenId","useNFTTargetAddressHex","sourceTokenPublicKey","handleTransferClick","isWrongWallet","isDisabled","errorMessage","createParsedTokenAccount","uiAmount","createNFTParsedTokenAccount","animation_url","external_url","image","image_256","nftName","createParsedTokenAccountFromInfo","createParsedTokenAccountFromCovalent","covalent","contract_address","contract_decimals","Number","contract_ticker_symbol","contract_name","logoOverrides","logo_url","createNativeSolParsedTokenAccount","fetchAccounts","WSOL_ADDRESS","WSOL_DECIMALS","createNativeEthParsedTokenAccount","balanceInWei","balanceInEth","utils","formatEther","WETH_ADDRESS","WETH_DECIMALS","ethIcon","createNativeEthRopstenParsedTokenAccount","ROPSTEN_WETH_ADDRESS","ROPSTEN_WETH_DECIMALS","createNativeBscParsedTokenAccount","WBNB_ADDRESS","WBNB_DECIMALS","bnbIcon","createNativePolygonParsedTokenAccount","WMATIC_ADDRESS","WMATIC_DECIMALS","polygonIcon","createNativeAvaxParsedTokenAccount","WAVAX_ADDRESS","WAVAX_DECIMALS","avaxIcon","createNativeOasisParsedTokenAccount","WROSE_ADDRESS","WROSE_DECIMALS","oasisIcon","createNFTParsedTokenAccountFromCovalent","nft_data","token_balance","token_id","token_url","external_data","getEthereumAccountsCovalent","url","COVALENT_GET_TOKENS_URL","axios","response","supports_erc","getSolanaParsedTokenAccounts","fetchSourceParsedTokenAccountsNFT","fetchSourceParsedTokenAccounts","splParsedTokenAccounts","receiveSourceParsedTokenAccountsNFT","nativeAccount","unshift","receiveSourceParsedTokenAccounts","errorSourceParsedTokenAccountsNFT","errorSourceParsedTokenAccounts","useGetAvailableTokens","tokenAccounts","lookupChain","setCovalent","covalentLoading","setCovalentLoading","covalentError","setCovalentError","ethNativeAccount","setEthNativeAccount","ethNativeAccountLoading","setEthNativeAccountLoading","ethNativeAccountError","setEthNativeAccountError","solanaMintAccounts","setSolanaMintAccounts","solanaMintAccountsLoading","setSolanaMintAccountsLoading","solanaMintAccountsError","setSolanaMintAccountsError","selectedSourceWalletAddress","currentSourceWalletAddress","resetSourceAccounts","setSourceWalletAddressNFT","setSourceWalletAddress","setSourceParsedTokenAccountNFT","setSourceParsedTokenAccount","setSourceParsedTokenAccountsNFT","setSourceParsedTokenAccounts","setAmount","index","extractMintInfo","accounts","arr","ethAccounts","slice","mintAccounts","resetAccounts","getEthereumToken","token","ethTokenToParsedTokenAccount","getEthereumNFT","NFTImplementation__factory","isNFT","erc721metadata","supportsInterface","supportsErc721","supportsErc721Metadata","ethNFTToNFTParsedTokenAccount","ownerOf","tokenURI","isValidEthereumAddress","isAddress","getMarketsMap","FEATURED_MARKETS_JSON_URL","useMarketsMap","internalShouldFire","safeIPFS","startsWith","replace","LogoIcon","Avatar","solanaIcon","bscIcon","card","borderRadius","transition","transform","silverBorder","cardInset","textContent","detailsContent","mediaContent","border","silverMediaBorder","borderColor","eth","bsc","polygon","skeleton","placeItems","verticalAlign","wormholePositioner","ViewerLoader","Skeleton","animation","Wormhole","NFTViewer","setMetadata","isMediaLoading","setIsMediaLoading","onLoad","m","image_url","big_image","small_image","animLower","toLowerCase","hasVideo","endsWith","hasAudio","hasImage","copyTokenId","videoSrc","imageSrc","audioSrc","onError","media","autoPlay","controls","loop","onLoadedData","Card","elevation","CardContent","CardMedia","align","arrow","substr","createStyles","optionContainer","optionContent","maxHeight","overflow","dialogContent","overflowX","selectionButtonContainer","selectionButton","values","sm","tokenOverviewContainer","flexShrink","tokenImageContainer","tokenImage","tokenMarketsList","migrationAlert","flexTitle","grower","balancePretty","uiString","numberString","split","gte","noClickThrough","stopPropagation","BasicAccountRender","isMigrationEligible","displayBalance","marketsData","mintPrettyString","shouldDisplayBalance","nftContent","wordBreak","tokenContent","markets","market","Launch","link","migrationRender","TokenPicker","options","RenderOption","isValidAddress","useTokenId","holderString","setHolderString","tokenIdHolderString","setTokenIdHolderString","loadingError","setLoadingError","isLocalLoading","setLocalLoading","dialogIsOpen","setDialogIsOpen","selectionError","setSelectionError","openDialog","closeDialog","handleSelectOption","option","newOption","resetAccountsWrapper","searchFilter","optionString","searchString","marketChainTokens","featuredMarkets","tokenMarkets","featuredOptions","ownedMarketTokens","nonFeaturedOptions","localFind","localLoader","displayLocalError","dialog","Dialog","onClose","open","DialogTitle","DialogContent","AVAILABLE_MARKETS_URL","List","InfoOutlined","ListItem","button","Divider","selectionChip","isWormholev1","WormholeAbi__factory","WORMHOLE_V1_ETH_ADDRESS","isWrappedAsset","EvmTokenPicker","selectedTokenAccount","tokenAccount","selectedMintMatch","selectedTokenIdMatch","getEthAddress","onChangeWrapper","v1","migration","RenderComp","inlineContentWrapper","flexWrapper","RefreshButtonWrapper","callback","sortParsedTokenAccounts","b","localeCompare","SolanaSourceTokenSelector","mintAuth","metaplex","memoizedTokenMap","getLogo","getSymbol","getName","filteredOptions","is721CompatibleNFT","supply","sort","accountsWithMetadata","mintAuthority","WORMHOLE_V1_MINT_AUTHORITY","newValue","returnsFalse","TerraTokenPicker","nativeRefresh","useRef","nativeIsLoading","resetAccountWrapper","terraTokenArray","SUPPORTED_TERRA_TOKENS","lookupTerraAddress","lookupAsset","wasm","contractQuery","token_info","isSearchableAddress","isValidTerraAddress","TokenSelector","walletIsReady","setNFTSourceParsedTokenAccount","setTransferSourceParsedTokenAccount","setNFTSourceWalletAddress","setTransferSourceWalletAddress","handleOnChange","newTokenAccount","maps","useGetSourceParsedTokens","placeholder","VerifiedUser","CHAINS_WITH_NFT_SUPPORT","useSyncTargetAddress","targetTokenAccountPublicKey","setTargetAddressHex","setNFTTargetAddressHex","setTransferTargetAddressHex","toBytes","associatedTokenAccount","canonicalAddress","targetAddressNative","NFT","isRedeemComplete","search","useLocation","query","URLSearchParams","pathSourceChain","pathTargetChain","completed","mainCard","originHeader","viewButtonWrapper","loaderWrapper","NFTOriginVerifier","isBeta","useBetaContext","setLookupChain","setLookupAsset","lookupTokenId","setLookupTokenId","lookupError","setLookupError","setParsedTokenAccount","originInfo","setOriginInfo","handleChainChange","handleTokenIdChange","newParsedTokenAccount","readableAddress","displayError","BETA_CHAINS","COIN_GECKO_IMAGE_URLS","partneroid","metaseer","only1","floof","mim","raydium","mixmarvel","ariadne","apyswap","xhashtag","hapi","sail","solrazr","samoyedcoin","babytigergold","bitcoin","bilira","sushi","aurory","ethereum","bitsong","renbtc","chainlink","cashcow","defil","tether","cropperfinance","aldrin","bonfida","victorum","monkeyball","sypool","genopets","goosefx","dexlab","meanfi","marinade","blockasset","tudabirds","serum","saber","zoints","allbridge","aave","kin","msol","orca","solanium","rai","tomoe","math","wasder","decentraland","gala","audius","ageur","usdk","bancor","uniswap","ovr","augur","jpyc","aleph","hex","throne","rune","ramp","chiliz","parsiq","kleekai","olympus","opendao","chain","civic","ridotto","chronobank","hxro","fantom","vlaunch","contentos","launchpool","pixelverse","dai","million","gene","xsgd","xdefi","sarcophagus","xsigma","hedget","constitutiondao","polkastarter","frax","upbots","opium","akropolis","swipe","dydx","artem","gaj","quiztok","lunachow","terrausd","binancecoin","weth","erc20","torg","ampleforth","cindicator","adapad","husd","curate","banana","pillar","bitspawn","defire","nftlaunch","pontoon","chronologic","everid","botxcoin","charli3","enjincoin","essentia","orbs","playnity","starterra","bitlocus","anchorust","secret","cake","lasereyes","soldoge","recharge","mysterium","insurace","cardano","echoin","litecoin","wolfsafepoorpeople","ztcoin","wraith","investin","psyoptions","polkadot","shirtum","safemoon","hashpanda","benqi","gemguardian","nuls","openocean","synchrony","biswap","iotex","nothing","coin98","maticverse","dogecoin","wbnb","idefiyieldprotocol","catzcoin","infinitup","catecoin","rougecoin","starlaunch","ontology","chi","wmatic","ispolink","celo","easyfi","streamr","one","quick","mimatic","sifchain","boozedoge","banano","tryhards","joe","livepeer","useTVL","tvl","setTvl","TVL_URL","notionalTvl","AllTime","chainAssets","originChainId","lockedAsset","CoinGeckoId","Symbol","Name","Amount","totalValue","Notional","quotePrice","TokenPrice","createTVLArray","TablePaginationActions","useTheme","count","page","rowsPerPage","onPageChange","direction","Math","ceil","max","stopProp","EnhancedTable","columns","skipPageReset","useTable","autoResetPage","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","getTableProps","headerGroups","prepareRow","gotoPage","setPageSize","rows","pageIndex","pageSize","TableContainer","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","getSortByToggleProps","Header","TableSortLabel","active","isSorted","isSortedDesc","render","canGroupBy","getGroupByToggleProps","isGrouped","RemoveCircleOutline","AddCircleOutline","TableBody","row","i","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","KeyboardArrowRight","subRows","isAggregated","isPlaceholder","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onRowsPerPageChange","ActionsComponent","flexBox","down","explainerContainer","CustodyAddresses","nftAddress","SOL_CUSTODY_ADDRESS","SOL_NFT_CUSTODY_ADDRESS","tvlColumns","accessor","disableGroupBy","Cell","original","header","table","MuiReactTable","ERC20_BASIC_ABI","handleError","fetchSingleMetadata","Contract","fetchEthMetadata","resultsArray","useEvmMetadata","setIsFetching","fetchTerraMetadata","useTerraMetadata","getTerraTokenMap","TERRA_TOKEN_METADATA_URL","useTerraTokenMap","useMetadata","solanaAddresses","terraAddresses","ethereumAddresses","terraMetadata","ethMetadata","tokenInfo","raw","constructSolanaMetadata","metadataMap","meta","constructEthMetadata","mainnet","constructTerraMetadata","calcEvmTVL","covalentReport","nftData","useNFTTVL","ethCovalentData","setEthCovalentData","ethCovalentIsLoading","setEthCovalentIsLoading","ethCovalentError","setEthCovalentError","bscCovalentData","setBscCovalentData","bscCovalentIsLoading","setBscCovalentIsLoading","bscCovalentError","setBscCovalentError","polygonCovalentData","setPolygonCovalentData","polygonCovalentIsLoading","setPolygonCovalentIsLoading","polygonCovalentError","setPolygonCovalentError","avaxCovalentData","setAvaxCovalentData","avaxCovalentIsLoading","setAvaxCovalentIsLoading","avaxCovalentError","setAvaxCovalentError","solanaCustodyTokens","setSolanaCustodyTokens","solanaCustodyTokensLoading","setSolanaCustodyTokensLoading","solanaCustodyTokensError","setSolanaCustodyTokensError","solanaMetadata","solanaTVL","metaData","genericMetadata","calcSolanaTVL","ethTVL","bscTVL","polygonTVL","avaxTVL","ETH_NFT_BRIDGE_ADDRESS","BSC_NFT_BRIDGE_ADDRESS","POLYGON_NFT_BRIDGE_ADDRESS","tvlArray","ALLOW_LIST","logoPositioner","tokenContainer","totalContainer","tableBox","randomButton","randomNftContainer","tableContainer","NFTStats","nftTVL","randomNumber","setRandomNumber","randomNft","genRandomNumber","found","nextNumber","floor","random","nfts","chainLogo","contractAddress","sortBy","desc","randomNFTContent","useTransactionCount","totals","setTotals","recents","setRecents","loadingTotals","setLoadingTotals","loadingRecents","setLoadingRecents","totalsError","setTotalsError","recentsError","setRecentsError","TOTAL_TRANSACTIONS_WORMHOLE","RECENT_TRANSACTIONS_WORMHOLE","totalAllTime","total48h","lastDays","DailyTotals","lastTwoDays","VAA_EMITTER_ADDRESSES","totalAll","TotalCount","total48","mostRecent","mergeResults","totalsBox","paddingRight","fontWeight","typog","TransactionMetrics","transactionCount","networkExplorer","WORMHOLE_EXPLORER_BASE","StatsRoot","sortTokens","rowA","rowB","sortType","aggregate","leafValues","Aggregated","p","v","tvlString","sum","val","toUpperCase","getOriginalAssetToken","foreignNativeStringAddress","promise","getOriginalAssetNFT","uint8ArrayToNative","SOLANA_SYSTEM_PROGRAM_ADDRESS","useOriginalAsset","foreignAddress","setOriginAddress","setOriginTokenId","setOriginChain","getOriginalAsset","RegisterNowButtonCore","history","canSwitch","nativeAsset","RegisterNowButton","arrowIcon","resultContainer","PrimaryAssetInfomation","nativeContent","wrapped","SecondaryAssetInformation","originAssetInfo","tokenArray","TokenOriginVerifier","primaryLookupChain","setPrimaryLookupChain","primaryLookupAsset","setPrimaryLookupAsset","secondaryLookupChain","setSecondaryLookupChain","primaryLookupChainOptions","secondaryLookupChainOptions","handlePrimaryLookupChainChange","handleSecondaryLookupChainChange","handlePrimaryLookupAssetChange","primaryWalletIsActive","secondaryWalletIsActive","primaryWallet","secondaryWallet","primaryWalletError","originError","primaryError","secondaryWalletError","foreignError","secondaryError","primaryContent","secondaryContent","addButton","AddToMetamask","detectEthereumProvider","request","method","useHandleRedeem","handleNativeClick","recoveryOnly","isTransferCompleted","setIsTransferCompleted","signedVAA","useTransferSignedVAA","transferCompleted","getIsTransferCompletedEth","getIsTransferCompletedSolana","lcdClient","getIsTransferCompletedTerra","TERRA_GAS_PRICES_URL","isTransferCompletedLoading","useGetIsTransferCompleted","isEthNative","isEthRopstenNative","isBscNative","isPolygonNative","isAvaxNative","isOasisNative","isSolNative","isNativeEligible","useNativeRedeem","setUseNativeRedeem","toggleNativeRedeem","howToAddTokensUrl","getHowToAddTokensToWalletUrl","FormControlLabel","control","Checkbox","checked","getJupiterSwapUrl","sourceSymbol","targetSymbol","JUPITER_SWAP_BASE_URL","FeaturedMarkets","tokenMarketButtons","marketInfo","amountParsed","transferFromEthNative","transferNativeSol","transferFromTerra","msgs","useHandleTransfer","useTransferTargetAddressHex","useGetTargetParsedTokenAccounts","targetAssetArrayed","hasResolvedMetadata","setTargetParsedTokenAccount","n","useTargetInfo","targetAssetError","transferAmount","line","WormholeWrappedWarning","Box","MultichainWarning","RewardsWarning","TokenWarning","searchableAddress","isWormholeWrapped","multichainSymbol","MULTI_CHAIN_TOKENS","isMultiChain","showMultiChainWarning","showWrappedWarning","showRewardsWarning","SendConfirmationContent","deservesTimeout","countdown","setCountdown","ArrowDownward","DialogActions","SendConfirmationDialog","isConfirmOpen","setIsConfirmOpen","handleConfirmClick","handleConfirmClose","sourceAmount","sourceDecimals","sourceIsNative","sourceAmountParsed","oneParsed","allowanceError","setAllowanceError","shouldApproveUnlimited","setShouldApproveUnlimited","toggleShouldApproveUnlimited","allowance","setAllowance","isAllowanceFetching","setIsAllowanceFetching","isApproveProcessing","sufficientAllowance","getAllowanceEth","approveAmount","setIsApproving","approveEth","useAllowance","approveButtonNeeded","notOne","approveExactAmount","approveUnlimited","MaxUint256","ChainSelectArrow","showSwap","setShowSwap","onMouseEnter","onMouseLeave","SwapHoriz","ArrowForward","PolygonTerraWrappedWarning","SoureAssetWarning","showPolygonTerraWrappedWarning","POLYGON_TERRA_WRAPPED_TOKENS","chainSelectWrapper","chainSelectContainer","chainSelectArrow","top","targetChainOptions","hasParsedTokenAccount","isSolanaMigration","isEthereumMigration","ETH_MIGRATION_ASSET_MAP","isBscMigration","BSC_MIGRATION_ASSET_MAP","isMigrationAsset","handleMigrationClick","Transfer","formControl","withdraw","MsgExecuteContract","withdraw_tokens","native_token","txResult","WithdrawTokensTerra","setToken","TerraWalletKey","FormControl","InputLabel","Select","appBar","typography","body2","bg","headerImage","brandLink","iconButton","betaBanner","App","pathname","handleTabChange","AppBar","Toolbar","RouterLink","Hidden","implementation","xsDown","smUp","HelpOutline","Tabs","indicatorColor","Tab","exact","path","Recovery","Migration","Stats","holeOuterContainer","holeInnerContainer","left","holeImage","blurred","BackgroundImage","chainID","testnet","walletConnectChainIds","TerraWalletProvider","defaultNetwork","ErrorBoundary","hasError","errorInfo","this","React","Component","store","configureStore","reducer","attestReducer","nftReducer","transferReducer","tokenReducer","feeReducer","ReactDOM","ThemeProvider","CssBaseline","maxSnack","BetaContext","document","getElementById","rest","filteredChains","createChainMenuItem","CURRENT_WORMHOLE_RPC_HOST","getNextRpcHost","WORMHOLE_RPC_HOSTS","emitterChain","retryAttempts","attempts","getSignedVAA","createContext","BetaContextProvider","isBetaEnabled","setIsBetaEnabled","userEntered","secretSequence","secretListener","k","keyCode","prev","addEventListener","removeEventListener","Provider","useContext","disconnect","providerError","connected","disconnectButton","STORE","MetadataKey","base58","require","METADATA_REPLACE","RegExp","METADATA_PREFIX","EDITION","PubKeysInternedMap","toPublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BPF_UPGRADE_LOADER_ID","MEMO_ID","METADATA_PROGRAM_ID","METAPLEX_ID","SYSTEM","programIds","associatedToken","bpf_upgrade_loader","system","memo","vault","auction","findProgramAddress","seeds","agg","cached","localStorage","getItem","JSON","parse","parseInt","nonce","setItem","stringify","toBase58","getEdition","tokenMint","PROGRAM_IDS","Buffer","toBuffer","Creator","args","verified","share","Data","sellerFeeBasisPoints","creators","Metadata","updateAuthority","primarySaleHappened","isMutable","editionNonce","masterEdition","edition","MetadataV1","METADATA_SCHEMA","kind","fields","maxSupply","printingMint","oneTimePrintingAuthorizationMint","MasterEditionV1","MasterEditionV2","parent","EditionV1","ledger","EditionMarker","editionOffset","indexOffset","positionInBitsetFromRight","mask","pow","BinaryReader","prototype","readPubkey","array","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","encode","writePubkeyAsString","decode","buffer","deserializeUnchecked","transferSlice","decrementStep","prevSourceChain","isWrapped","prevTargetChain","setIsRedeeming","setRedeemTx","setRecoveryVaa","vaa","parsedPayload","ToggleConnectedButton","is0x","WalletOptions","identifier","ListItemText","TerraConnectWalletDialog","isOpen","useWallet","availableConnections","availableInstallations","filteredConnections","ConnectType","READONLY","filteredInstallations","connectedWallet","isDialogOpen","setIsDialogOpen","EthereumProviderContext","EthereumProviderProvider","setProviderError","setProvider","setChainId","setSigner","setSignerAddress","detectedProvider","providers","Web3Provider","send","getNetwork","network","getSigner","on","contextValue","createWalletStatus","forceNetworkSwitch","enableNetworkAutoswitch","autoSwitch","hasTerraWallet","hasEthInfo","correctEvmNetwork","hexStripZeros","hexlify","terraIcon","ETH_NETWORK_CHAIN_ID","ROPSTEN_ETH_NETWORK_CHAIN_ID","BSC_NETWORK_CHAIN_ID","POLYGON_NETWORK_CHAIN_ID","AVAX_NETWORK_CHAIN_ID","OASIS_NETWORK_CHAIN_ID","process","URL","ETH_BRIDGE_ADDRESS","ETH_TOKEN_BRIDGE_ADDRESS","BSC_BRIDGE_ADDRESS","BSC_TOKEN_BRIDGE_ADDRESS","POLYGON_BRIDGE_ADDRESS","POLYGON_TOKEN_BRIDGE_ADDRESS","AVAX_BRIDGE_ADDRESS","AVAX_NFT_BRIDGE_ADDRESS","AVAX_TOKEN_BRIDGE_ADDRESS","OASIS_BRIDGE_ADDRESS","OASIS_NFT_BRIDGE_ADDRESS","OASIS_TOKEN_BRIDGE_ADDRESS","ROPSTEN_ETH_BRIDGE_ADDRESS","ROPSTEN_ETH_NFT_BRIDGE_ADDRESS","ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS","TERRA_BRIDGE_ADDRESS","COVALENT_BSC","COVALENT_POLYGON","COVALENT_AVAX","noNftMetadata","chainNum","EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v","Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB","MAX_VAA_UPLOAD_RETRIES_SOLANA","nftSlice","loader","bottom","attestSlice","setCreateTx","updateWrappedOnEth","createWrappedOnEth","signTransaction","postVaaSolanaWithRetry","updateWrappedOnSolana","createWrappedOnSolana","updateWrappedOnTerra","createWrappedOnTerra","useAttestSignedVAA","handleCreateClick","unit","isValidTerra","txInfo","isTxError","code","raw_log","startsWithTerra","isParseable","isLength20","feeDenoms","gasPrices","auth","accountInfo","estimateFee","sequenceNumber","getSequenceNumber","getPublicKey","feeEstimate","post","redeemOnEth","getClaimAddressSolana","claimAddress","redeemOnSolana","isNFTVAASolanaNative","parse_vaa","parsedVAA","parseNFTPayload","Uint8Array","getForeignAssetSol","metadataAddress","createMetaOnSolana","useNFTSignedVAA","handleRedeemClick","advancedContainer","getTransactionReceipt","setType","recoverySourceChain","setRecoverySourceChain","recoverySourceTx","setRecoverySourceTx","recoverySourceTxIsLoading","setRecoverySourceTxIsLoading","recoverySourceTxError","setRecoverySourceTxError","recoverySignedVAA","setRecoverySignedVAA","recoveryParsedVAA","setRecoveryParsedVAA","walletConnectError","parseTransferPayload","pathSourceTransaction","handleTypeChange","prevChain","handleSourceChainChange","handleSourceTxChange","trim","handleSignedVAAChange","parsedPayloadTargetChain","enableRecovery","handleRecoverClick","setRecoveryNFTVaa","helperText","expandIcon","right","my","emitter_chain","emitter_address","timestamp","toLocaleString","redeemOnEthNative","redeemAndUnwrapOnSolana","redeemOnTerra","handleRedeemNativeClick","signed","sendRawTransaction","serialize","confirmTransaction","mintInfo","MintLayout","uintArray","reverse","pubkeys","commitment","chunks","chunk","getMultipleAccountsInfo","flat","apply","_","SolanaWalletProvider","wallets","getPhantomWallet","getSolflareWallet","getMathWallet","getSolletWallet","MM_ERR_WITH_INFO_START","blueWithTransparency","gray","greenWithTransparency","lightGreen","lightBlue","nearBlack","nearBlackWithMinorTransparency","red","darkRed","responsiveFontSizes","createTheme","default","paper","text","primary","main","secondary","fontFamily","h1","h2","h4","overrides","MuiCssBaseline","scrollbarWidth","scrollbarColor","MuiAccordion","rounded","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","MuiAlert","MuiButton","letterSpacing","outlinedSizeSmall","MuiLink","MuiPaper","backdropFilter","MuiStepper","MuiStep","MuiStepConnector","lineVertical","borderLeftWidth","MuiStepContent","MuiStepLabel","textTransform","MuiTabs","borderBottom","indicator","MuiTab","textColorInherit","MuiTableCell"],"mappings":"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AWD,EAAQgJ,WACnB7I,QAAQ,WANV,6BAUEunC,EAAW9mC,UAAY8I,IACzB,cAACK,GAAA,EAAD,CACEC,KAAI,qCAAgC+9B,GAAhC,cAAqDL,EAAWjb,SACpErlB,OAAO,SACP6C,IAAI,sBACJkO,UAAW,cAAComB,GAAA,EAAD,IACXt+B,UAAWD,EAAQgJ,WACnB7I,QAAQ,WANV,+BAUEunC,EAAW9mC,UAAY+I,IAAiB,KAC1C,cAACI,GAAA,EAAD,CACEC,KAAI,oCAA+B+9B,GAA/B,YAAkDL,EAAWjb,SACjErlB,OAAO,SACP6C,IAAI,sBACJkO,UAAW,cAAComB,GAAA,EAAD,IACXt+B,UAAWD,EAAQgJ,WACnB7I,QAAQ,WANV,kCAaJ,a,cCjWD+nC,GAA+C,CAC1D,gBACE,mFACFC,WACE,sHACFC,SACE,6EACFC,MACE,kFACFC,MACE,0FACF,WACE,wFACF,kBACE,+EACF,mBACE,wFACFC,IAAK,6EACLC,QACE,wFACFC,UACE,uGACFC,QACE,+FACFC,QACE,4EACFC,SACE,4EACF,oBACE,wFACF,cACE,uFACF,iBACE,8EACFC,KAAM,wFACNC,KAAM,4EACN,kBACE,oGACFC,QACE,4FACFC,YACE,+EACFC,cACE,sFACF,aACE,+EACF,WACE,oFACF,UACE,wFACF,aACE,wFACF,aACE,iFACFC,QACE,2EACF,aACE,qHACFC,OACE,wFACFC,MACE,4FACF,aACE,oFACFC,OACE,4EACF,cACE,sFACFC,SACE,8EACF,4BACE,wFACFC,QACE,mGACF,eACE,iFACF,eACE,6EACFC,OACE,+EACF,eACE,4EACFC,UACE,wFACFC,QACE,uGACF,yBACE,gGACFC,MACE,uFACFC,OACE,iFACF,cACE,+EACFC,eACE,qFACFC,OACE,8EACF,cACE,wFACFC,QACE,iFACFC,SACE,4FACF,YACE,wFACF,yBACE,+EACFC,WACE,kFACFC,OACE,8EACF,mBACE,kFACF,mBACE,2FACFC,SACE,kFACFC,QACE,+EACF,eACE,kFACF,aACE,wFACF,QACE,sHACF,iBACE,8EACFC,OACE,2GACF,8BACE,kFACF,kBACE,4EACFC,OACE,gFACFC,SACE,4EACF,gBACE,mFACFC,WACE,kFACF,kBACE,2EACFC,UACE,wFACFC,MACE,kFACF,mBACE,4GACFC,MACE,wFACF,iBACE,8EACF,eACE,4EACFC,OACE,oGACFC,UACE,2EACF,kBACE,8EACFC,KAAM,4EACNC,IAAK,yEACLC,KAAM,4EACNC,KAAM,iFACNC,SACE,kFACF,aACE,qHACF,iBACE,wFACF,YACE,iFACFC,IAAK,qFACL,eACE,4GACF,gBACE,6EACFC,MACE,kFACFC,KAAM,4FACN,cACE,qFACF,kBACE,+FACF,iBACE,wFACFC,OACE,yFACF,wBACE,2FACFC,aACE,uFACF,QACE,mFACFC,KAAM,sFACNC,OACE,yFACFC,MACE,6EACFC,KAAM,2EACNC,OACE,gFACFC,QACE,mFACFC,IAAK,gFACLC,MACE,yEACF,kBACE,2FACFC,KAAM,wFACN,aACE,2EACF,YACE,wFACF,aACE,4EACFC,MACE,uFACFC,IAAK,gFACL,UACE,6EACFC,OACE,wFACF,iBACE,wFACFC,KAAM,oFACN,YACE,oFACFC,KAAM,6FACN,aACE,kFACFC,OACE,6EACFC,OACE,+EACF,aACE,oGACFC,QACE,qFACFC,QACE,yFACF,cACE,oFACFC,QACE,wFACFC,MACE,kFACFC,MACE,qFACF,YACE,gFACF,WACE,2EACF,uBACE,2EACF,iBACE,+FACFC,QACE,wFACFC,WACE,gFACFC,KAAM,+FACNC,OACE,6EACF,cACE,2EACF,YACE,wEACFC,QACE,kFACFC,UACE,2EACF,WACE,gFACF,uBACE,6EACF,gBACE,wFACFC,WACE,wFACFC,WACE,kFACF,gBACE,kFACFC,IAAK,2EACLC,QACE,mFACFC,KAAM,6FACN,eACE,4EACF,eACE,4EACF,iBACE,qFACF,aACE,uFACF,oBACE,4EACFC,KAAM,uHACN,cACE,gFACFC,MACE,6EACF,kBACE,gFACF,eACE,wFACF,eACE,4EACFC,YACE,wFACFC,OACE,gFACFC,OACE,8EACFC,gBACE,wFACF,gBACE,uFACF,gBACE,8EACFC,aACE,oFACFC,KAAM,iFACNC,OACE,4EACF,eACE,uFACF,uBACE,0EACF,eACE,kGACFC,MACE,iGACFC,UACE,gFACFC,MACE,4EACFC,KAAM,gFACN,YACE,6EACF,uBACE,kFACFC,MACE,8FACF,sBACE,sFACFC,IAAK,mFACLC,QACE,4EACF,aACE,+EACF,gBACE,4EACF,cACE,2EACFC,SACE,wFACFC,SACE,2EACF,uBACE,+EACF,oBACE,kFACF,8BACE,+EACF,eACE,kFACF,YACE,2GACF,cACE,wFACFC,YACE,kFACF,gBACE,0FACF,kBACE,sFACF,qBACE,6GACF,4BACE,4EACFC,KAAM,2EACN,wBACE,wFACFC,MACE,uGACF,cACE,mGACF,2BACE,6EACF,aACE,oFACF,YACE,mFACF,gBACE,4EACF,qBACE,2EACFC,KAAM,yFACN,sBACE,iFACF,gBACE,6EACF,SACE,2EACF/d,SACE,oFACFge,WACE,iFACF,iBACE,wFACFC,WACE,iFACF,kBACE,6EACF,YACE,qFACFC,OACE,wFACF,eACE,8FACF,YACE,iGACFC,KAAM,2EACN,kBACE,2FACFC,OACE,uGACFC,OACE,+EACF,qBACE,wFACFC,OACE,8EACFC,SACE,kFACFC,OACE,8EACFC,UACE,4EACFC,QACE,+EACFC,YACE,yFACFC,OACE,8EACFC,SACE,2EACF,YACE,2EACFC,QACE,8FACF,UACE,6EACFC,UACE,sFACF,iBACE,qFACFC,SACE,qFACFC,KAAM,2EACN,yBACE,wFACFC,SACE,2EACFC,UACE,sFACF,iBACE,+FACF,kBACE,4FACF,kBACE,+FACFC,SACE,2EACF,wBACE,2EACF,kBACE,+FACFC,UACE,4EACF,mBACE,+FACF,iBACE,kFACF,iBACE,+FACFC,OACE,8EACF,gBACE,oFACFC,KAAM,4EACN,aACE,wFACF,qBACE,gFACF,YACE,sFACFC,UACE,2EACF,wBACE,+EACF,cACE,+EACFC,QACE,+EACF,gBACE,sFACFC,SACE,iFACFC,UACE,+EACF,wBACE,qFACFC,SACE,6EACFC,QACE,6EACFC,OACE,uFACF3iC,OACE,6EACF4iC,SACE,4EACFC,mBACE,gFACF,mBACE,6EACF,wBACE,2EACF,qBACE,6EACF,oBACE,+EACFC,OACE,6EACFC,OACE,mFACFC,SACE,gFACFC,WACE,gFACFC,SACE,gFACF,kBACE,uFACFC,QACE,+EACF,iBACE,iFACF,iBACE,6FACF,YACE,iFACF,eACE,oFACFC,SACE,qFACFC,UACE,oGACFC,MACE,wFACF,eACE,mFACFC,YACE,4EACFC,KAAM,2EACNC,UACE,+EACFC,UACE,sFACFC,OACE,8EACFC,MACE,iFACF,aACE,iFACFC,QACE,qFACFC,OACE,4EACF,mBACE,wFACFC,WACE,kHACFC,SACE,4EACFC,KAAM,yFACNC,mBACE,oFACFC,SACE,gFACF,aACE,yFACFC,UACE,wFACF,iBACE,iFACF,qBACE,iFACF,0BACE,wFACF,kBACE,4FACF,gBACE,6EACF,iBACE,kFACFC,SACE,4EACFC,UACE,iFACF,eACE,uFACFC,WACE,wFACFC,SACE,0EACFC,IAAK,+EACLC,OACE,6EACF,oBACE,iFACF,qBACE,+EACFC,SACE,+EACFC,KAAM,gGACN,cACE,+EACF,WACE,2EACF,kBACE,2FACFC,OACE,iFACFC,QACE,0FACF,sBACE,uGACF,WACE,6EACFC,IAAK,oFACL,iBACE,qFACFC,MACE,gGACF,WACE,iGACF,gBACE,kFACF,aACE,8FACFC,QACE,mFACFC,SACE,8EACF,0BACE,iFACF,sBACE,6EACFC,UACE,sFACFC,OACE,yFACFC,SACE,wFACF,gBACE,iFACF,iBACE,6EACFC,IAAK,mFACLC,SACE,wFACF,gBACE,4ECxkBWC,GA1BA,WACb,MAAsBxyC,mBAA6BigB,gBAAnD,mBAAOwyB,EAAP,KAAYC,EAAZ,KAsBA,OApBAxxC,qBAAU,WACR,IAAIkN,GAAY,EAchB,OAbAykB,KACG3iB,IAAiByiC,KACjB1wC,MAAK,SAAC6wB,GACA1kB,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AcC,kBAAQF,OAEnC,MAAO/iE,QAEV,CAACmG,EAAU48D,EAAmB18D,IAEjC,OAAOe,mBAAQ,WACb,OACEf,IAAY2B,KACZ66D,IADA,OAEAtvD,QAFA,IAEAA,OAFA,EAEAA,EAAa1J,eAGN44D,GACL,OACAhlE,EACAilE,EACAnvD,EAAY1J,eAGZxD,IAAY5G,KAAmBkS,EAC1B8wD,GACL,OACAhlE,EACAilE,EACA/wD,EAAMjH,YAGN7H,YAAWwD,IAAYy8D,GAAcvgD,EACnC/b,EACKi8D,GACL,OACAhlE,EACAilE,EACAngD,IAGEpc,GAAY48D,GAAqBH,GACnCF,IAEKD,GACL,EADuB,qCAEO7zD,IAFP,gCAEsCm0D,GAC7DL,OACAjlE,IAKCglE,GACL,EACA,uBACAC,OACAjlE,KAED,CACD4I,EACAu8D,EACAF,EACAG,EACAlxD,EACAmxD,EACAC,EACAv8D,EACAL,EACAoc,EACAhP,M,ixECzHW,MAA0B,kCCuB5B3E,EAEP,UASO8M,EACC,YAAZ9M,EACI,CACE,CACEG,GAAII,IACJ9F,KAAM,YACNojB,KAAMgM,KAER,CACE1pB,GAAIK,IACJ/F,KAAM,QACNojB,KAAMoM,KAER,CACE9pB,GAAIE,IACJ5F,KAAM,sBACNojB,KAAM0R,KAER,CACEpvB,GAAID,IACJzF,KAAM,WACNojB,KAAMiL,KAER,CACE3oB,GAAIG,IACJ7F,KAAM,UACNojB,KAAM4L,KAER,CACEtpB,GAAItP,IACJ4J,KAAM,SACNojB,KAAMyR,KAER,CACEnvB,GAAI/G,IACJqB,KAAM,QACNojB,KAAMy2C,IAGE,YAAZt0D,EACA,CACE,CACEG,GAAII,IACJ9F,KAAM,YACNojB,KAAMgM,KAER,CACE1pB,GAAIK,IACJ/F,KAAM,QACNojB,KAAMoM,KAER,CACE9pB,GAAIE,IACJ5F,KAAM,sBACNojB,KAAM0R,KAER,CACEpvB,GAAID,IACJzF,KAAM,oBACNojB,KAAMiL,KAER,CACE3oB,GAAIC,IACJ3F,KAAM,qBACNojB,KAAMiL,KAER,CACE3oB,GAAIG,IACJ7F,KAAM,UACNojB,KAAM4L,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BAC1B,YAAZ7e,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO01D,EAA6B72C,qBAC5B,YAAZ7e,EACI,6CACY,YAAZA,EACA,6CACA,8CAEOiD,EACC,YAAZjD,EACI,8CACY,YAAZA,EACA,+CACA,8CACO+jB,EACC,YAAZ/jB,EACI,8CACY,YAAZA,EACA,+CACA,8CACOlG,EACC,YAAZkG,EACI,8CACY,YAAZA,EACA,+CACA,+CACO21D,EAA6B92C,qBAC5B,YAAZ7e,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO41D,EAAiC/2C,qBAChC,YAAZ7e,EACI,6CACY,YAAZA,EACA,6CACA,8CAEO61D,EAAmCh3C,qBAClC,YAAZ7e,EACI,6CACY,YAAZA,EACA,6CACA,8CAGOowC,EACX,+CACWC,GACX,+CAGWylB,GACC,YAAZ91D,EACI,+CACY,YAAZA,EACA,+CACA,+CACOvG,GACC,YAAZuG,EACI,+CACY,YAAZA,EACA,+CACA,+CAEOuC,GAA2B,SAAC9K,GAAD,OACtCA,IAAY5G,IACRoS,EACAxL,IAAYyI,IACZ60D,EACAt9D,IAAY4I,IACZ40D,EACAx9D,IAAY2B,IACZ08D,GACAr+D,IAAY6I,IACZ60D,EACA19D,IAAY2I,IACZu1D,EACAl+D,IAAY8I,IACZ80D,EACA59D,IAAY+I,IACZg1D,EACA,IACO7xC,GAA8B,SAAClsB,GAAD,OACzCA,IAAY5G,IACRkzB,EACAtsB,IAAYyI,IACZk1C,EACA39C,IAAY4I,IACZg1C,EACA59C,IAAY6I,IACZg1C,EACA79C,IAAY2I,IACZw1D,EACAn+D,IAAY8I,IACZ+0D,EACA79D,IAAY+I,IACZi1D,EACA,IACOv8D,GAAgC,SAACzB,GAAD,OAC3CA,IAAY5G,IACRiJ,EACArC,IAAYyI,IACZ80D,EACAv9D,IAAY4I,IACZ60D,EACAz9D,IAAY2B,IACZK,GACAhC,IAAY6I,IACZ80D,EACA39D,IAAY2I,IACZy1D,EACAp+D,IAAY8I,IACZg1D,EACA99D,IAAY+I,IACZk1D,EACA,IAOOK,GAA2B,WAAZ/1D,EAAuB,GAAKy0D,EA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","file":"static/js/main.3043ac6a.chunk.js","sourcesContent":["import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { RootState } from \".\";\n\n/*\n * Attest\n */\n\nexport const selectAttestActiveStep = (state: RootState) =>\n  state.attest.activeStep;\nexport const selectAttestSourceChain = (state: RootState) =>\n  state.attest.sourceChain;\nexport const selectAttestSourceAsset = (state: RootState) =>\n  state.attest.sourceAsset;\nexport const selectAttestTargetChain = (state: RootState) =>\n  state.attest.targetChain;\nexport const selectAttestAttestTx = (state: RootState) => state.attest.attestTx;\nexport const selectAttestSignedVAAHex = (state: RootState) =>\n  state.attest.signedVAAHex;\nexport const selectAttestIsSending = (state: RootState) =>\n  state.attest.isSending;\nexport const selectAttestIsCreating = (state: RootState) =>\n  state.attest.isCreating;\nexport const selectAttestCreateTx = (state: RootState) => state.attest.createTx;\nexport const selectAttestIsSourceComplete = (state: RootState) =>\n  !!state.attest.sourceChain && !!state.attest.sourceAsset;\n// TODO: check wrapped asset exists or is native attest\nexport const selectAttestIsTargetComplete = (state: RootState) =>\n  selectAttestIsSourceComplete(state) && !!state.attest.targetChain;\nexport const selectAttestIsSendComplete = (state: RootState) =>\n  !!selectAttestSignedVAAHex(state);\nexport const selectAttestIsCreateComplete = (state: RootState) =>\n  !!selectAttestCreateTx(state);\nexport const selectAttestShouldLockFields = (state: RootState) =>\n  selectAttestIsSending(state) || selectAttestIsSendComplete(state);\n\n/*\n * NFT\n */\n\nexport const selectNFTActiveStep = (state: RootState) => state.nft.activeStep;\nexport const selectNFTSourceChain = (state: RootState) => state.nft.sourceChain;\nexport const selectNFTSourceAsset = (state: RootState) => {\n  return state.nft.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectNFTIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.nft.isSourceAssetWormholeWrapped;\nexport const selectNFTOriginChain = (state: RootState) => state.nft.originChain;\nexport const selectNFTOriginAsset = (state: RootState) => state.nft.originAsset;\nexport const selectNFTOriginTokenId = (state: RootState) =>\n  state.nft.originTokenId;\nexport const selectNFTSourceWalletAddress = (state: RootState) =>\n  state.nft.sourceWalletAddress;\nexport const selectNFTSourceParsedTokenAccount = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount;\nexport const selectNFTSourceParsedTokenAccounts = (state: RootState) =>\n  state.nft.sourceParsedTokenAccounts;\nexport const selectNFTSourceBalanceString = (state: RootState) =>\n  state.nft.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectNFTTargetChain = (state: RootState) => state.nft.targetChain;\nexport const selectNFTTargetAddressHex = (state: RootState) =>\n  state.nft.targetAddressHex;\nexport const selectNFTTargetAsset = (state: RootState) =>\n  state.nft.targetAsset.data?.address;\nexport const selectNFTTransferTx = (state: RootState) => state.nft.transferTx;\nexport const selectNFTSignedVAAHex = (state: RootState) =>\n  state.nft.signedVAAHex;\nexport const selectNFTIsSending = (state: RootState) => state.nft.isSending;\nexport const selectNFTIsRedeeming = (state: RootState) => state.nft.isRedeeming;\nexport const selectNFTRedeemTx = (state: RootState) => state.nft.redeemTx;\nexport const selectNFTSourceError = (state: RootState): string | undefined => {\n  if (!state.nft.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.nft.sourceParsedTokenAccount) {\n    return \"Select an NFT\";\n  }\n  if (\n    state.nft.sourceChain === CHAIN_ID_SOLANA &&\n    !state.nft.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.nft.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  if (state.nft.sourceParsedTokenAccount.decimals !== 0) {\n    // TODO: more advanced NFT check - also check supply and uri\n    return \"For non-NFTs, use the Transfer flow\";\n  }\n  if (\n    state.nft.sourceParsedTokenAccount?.uri === null ||\n    state.nft.sourceParsedTokenAccount?.uri === undefined\n  ) {\n    return \"Failed to load NFT Metadata.\";\n  }\n  if (\n    state.nft.sourceParsedTokenAccount?.uri &&\n    state.nft.sourceParsedTokenAccount?.uri.length > 200\n  ) {\n    return \"This NFT has a URL longer than the maximum supported length of 200.\";\n  }\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.nft.sourceParsedTokenAccount.uiAmountString,\n        state.nft.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Balance must be greater than zero\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectNFTIsSourceComplete = (state: RootState) =>\n  !selectNFTSourceError(state);\nexport const selectNFTTargetError = (state: RootState) => {\n  const sourceError = selectNFTSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.nft.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.nft.sourceChain === state.nft.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (\n    state.nft.targetChain === CHAIN_ID_SOLANA &&\n    !selectNFTTargetAsset(state)\n  ) {\n    // target asset is only required for solana\n    // in the cases of new transfers, target asset will not exist and be created on redeem\n    // Solana requires the derived address to derive the associated token account which is the target on the vaa\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.nft.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectNFTIsTargetComplete = (state: RootState) =>\n  !selectNFTTargetError(state);\nexport const selectNFTIsSendComplete = (state: RootState) =>\n  !!selectNFTSignedVAAHex(state);\nexport const selectNFTIsRedeemComplete = (state: RootState) =>\n  !!selectNFTRedeemTx(state);\nexport const selectNFTShouldLockFields = (state: RootState) =>\n  selectNFTIsSending(state) || selectNFTIsSendComplete(state);\nexport const selectNFTIsRecovery = (state: RootState) => state.nft.isRecovery;\n/*\n * Transfer\n */\n\nexport const selectTransferActiveStep = (state: RootState) =>\n  state.transfer.activeStep;\nexport const selectTransferSourceChain = (state: RootState) =>\n  state.transfer.sourceChain;\nexport const selectTransferSourceAsset = (state: RootState) => {\n  return state.transfer.sourceParsedTokenAccount?.mintKey || undefined;\n};\nexport const selectTransferIsSourceAssetWormholeWrapped = (state: RootState) =>\n  state.transfer.isSourceAssetWormholeWrapped;\nexport const selectTransferOriginChain = (state: RootState) =>\n  state.transfer.originChain;\nexport const selectTransferOriginAsset = (state: RootState) =>\n  state.transfer.originAsset;\nexport const selectSourceWalletAddress = (state: RootState) =>\n  state.transfer.sourceWalletAddress;\nexport const selectTransferSourceParsedTokenAccount = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount;\nexport const selectTransferSourceParsedTokenAccounts = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccounts;\nexport const selectTransferSourceBalanceString = (state: RootState) =>\n  state.transfer.sourceParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferAmount = (state: RootState) => state.transfer.amount;\nexport const selectTransferTargetChain = (state: RootState) =>\n  state.transfer.targetChain;\nexport const selectTransferTargetAddressHex = (state: RootState) =>\n  state.transfer.targetAddressHex;\nexport const selectTransferTargetAssetWrapper = (state: RootState) =>\n  state.transfer.targetAsset;\nexport const selectTransferTargetAsset = (state: RootState) =>\n  state.transfer.targetAsset.data?.address;\nexport const selectTransferTargetParsedTokenAccount = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount;\nexport const selectTransferTargetBalanceString = (state: RootState) =>\n  state.transfer.targetParsedTokenAccount?.uiAmountString || \"\";\nexport const selectTransferTransferTx = (state: RootState) =>\n  state.transfer.transferTx;\nexport const selectTransferSignedVAAHex = (state: RootState) =>\n  state.transfer.signedVAAHex;\nexport const selectTransferIsSending = (state: RootState) =>\n  state.transfer.isSending;\nexport const selectTransferIsRedeeming = (state: RootState) =>\n  state.transfer.isRedeeming;\nexport const selectTransferRedeemTx = (state: RootState) =>\n  state.transfer.redeemTx;\nexport const selectTransferIsApproving = (state: RootState) =>\n  state.transfer.isApproving;\nexport const selectTransferSourceError = (\n  state: RootState\n): string | undefined => {\n  if (!state.transfer.sourceChain) {\n    return \"Select a source chain\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount) {\n    return \"Select a token\";\n  }\n  if (!state.transfer.amount) {\n    return \"Enter an amount\";\n  }\n  if (\n    state.transfer.sourceChain === CHAIN_ID_SOLANA &&\n    !state.transfer.sourceParsedTokenAccount.publicKey\n  ) {\n    return \"Token account unavailable\";\n  }\n  if (!state.transfer.sourceParsedTokenAccount.uiAmountString) {\n    return \"Token amount unavailable\";\n  }\n  // no NFT check - NFTs should be blocked by all token pickers\n  try {\n    // these may trigger error: fractional component exceeds decimals\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).lte(0)\n    ) {\n      return \"Amount must be greater than zero\";\n    }\n    if (\n      parseUnits(\n        state.transfer.amount,\n        state.transfer.sourceParsedTokenAccount.decimals\n      ).gt(\n        parseUnits(\n          state.transfer.sourceParsedTokenAccount.uiAmountString,\n          state.transfer.sourceParsedTokenAccount.decimals\n        )\n      )\n    ) {\n      return \"Amount may not be greater than balance\";\n    }\n  } catch (e: any) {\n    if (e?.message) {\n      return e.message.substring(0, e.message.indexOf(\"(\"));\n    }\n    return \"Invalid amount\";\n  }\n  return undefined;\n};\nexport const selectTransferIsSourceComplete = (state: RootState) =>\n  !selectTransferSourceError(state);\nexport const UNREGISTERED_ERROR_MESSAGE =\n  \"Target asset unavailable. Is the token registered?\";\nexport const selectTransferTargetError = (state: RootState) => {\n  const sourceError = selectTransferSourceError(state);\n  if (sourceError) {\n    return `Error in source: ${sourceError}`;\n  }\n  if (!state.transfer.targetChain) {\n    return \"Select a target chain\";\n  }\n  if (state.transfer.sourceChain === state.transfer.targetChain) {\n    return \"Select a different target and source\";\n  }\n  if (!selectTransferTargetAsset(state)) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (\n    isEVMChain(state.transfer.targetChain) &&\n    selectTransferTargetAsset(state) === ethers.constants.AddressZero\n  ) {\n    return UNREGISTERED_ERROR_MESSAGE;\n  }\n  if (!state.transfer.targetAddressHex) {\n    return \"Target account unavailable\";\n  }\n};\nexport const selectTransferIsTargetComplete = (state: RootState) =>\n  !selectTransferTargetError(state);\nexport const selectTransferIsSendComplete = (state: RootState) =>\n  !!selectTransferSignedVAAHex(state);\nexport const selectTransferIsRedeemComplete = (state: RootState) =>\n  !!selectTransferRedeemTx(state);\nexport const selectTransferShouldLockFields = (state: RootState) =>\n  selectTransferIsSending(state) || selectTransferIsSendComplete(state);\nexport const selectTransferIsRecovery = (state: RootState) =>\n  state.transfer.isRecovery;\n\nexport const selectSolanaTokenMap = (state: RootState) => {\n  return state.tokens.solanaTokenMap;\n};\n\nexport const selectTerraTokenMap = (state: RootState) => {\n  return state.tokens.terraTokenMap;\n};\n\nexport const selectMarketsMap = (state: RootState) => {\n  return state.tokens.marketsMap;\n};\n\nexport const selectTerraFeeDenom = (state: RootState) => {\n  return state.fee.terraFeeDenom;\n};\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport { COLORS } from \"../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  centeredContainer: {\n    marginTop: theme.spacing(14),\n    marginBottom: theme.spacing(26),\n    minHeight: 208,\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n  linearGradient: {\n    background: `linear-gradient(to left, ${COLORS.blue}, ${COLORS.green});`,\n    WebkitBackgroundClip: \"text\",\n    backgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\",\n    MozBackgroundClip: \"text\",\n    MozTextFillColor: \"transparent\",\n  },\n}));\n\nexport default function HeaderText({\n  children,\n  white,\n  small,\n  subtitle,\n}: {\n  children: ReactChild;\n  white?: boolean;\n  small?: boolean;\n  subtitle?: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <div className={classes.centeredContainer}>\n      <Typography\n        variant={small ? \"h2\" : \"h1\"}\n        component=\"h1\"\n        className={clsx({ [classes.linearGradient]: !white })}\n        gutterBottom={!!subtitle}\n      >\n        {children}\n      </Typography>\n      {subtitle ? <Typography component=\"div\">{subtitle}</Typography> : null}\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToUint8Array,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type ForeignAssetInfo = {\n  doesExist: boolean;\n  address: string | null;\n};\n\nfunction useFetchForeignAsset(\n  originChain: ChainId,\n  originAsset: string,\n  foreignChain: ChainId\n): DataWrapper<ForeignAssetInfo> {\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const correctEvmNetwork = getEvmChainId(foreignChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const [assetAddress, setAssetAddress] = useState<string | null>(null);\n  const [doesExist, setDoesExist] = useState<boolean | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const originAssetHex = useMemo(() => {\n    try {\n      return nativeToHexString(originAsset, originChain);\n    } catch (e) {\n      return null;\n    }\n  }, [originAsset, originChain]);\n  const [previousArgs, setPreviousArgs] = useState<{\n    originChain: ChainId;\n    originAsset: string;\n    foreignChain: ChainId;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.originChain === originChain &&\n    previousArgs.originAsset === originAsset &&\n    previousArgs.foreignChain === foreignChain;\n  const setArgs = useCallback(() => {\n    setPreviousArgs({ foreignChain, originChain, originAsset });\n  }, [foreignChain, originChain, originAsset]);\n\n  const argumentError = useMemo(\n    () =>\n      !originChain ||\n      !originAsset ||\n      !foreignChain ||\n      !originAssetHex ||\n      foreignChain === originChain ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && !hasCorrectEvmNetwork) ||\n      argsEqual,\n    [\n      isReady,\n      foreignChain,\n      originAsset,\n      originChain,\n      hasCorrectEvmNetwork,\n      originAssetHex,\n      argsEqual,\n    ]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setAssetAddress(null);\n      setError(\"\");\n      setDoesExist(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError || !originAssetHex) {\n      return;\n    }\n\n    let cancelled = false;\n    setIsLoading(true);\n    try {\n      const getterFunc: () => Promise<string | null> = isEVMChain(foreignChain)\n        ? () =>\n            getForeignAssetEth(\n              getTokenBridgeAddressForChain(foreignChain),\n              provider as any, //why does this typecheck work elsewhere?\n              originChain,\n              hexToUint8Array(originAssetHex)\n            )\n        : foreignChain === CHAIN_ID_TERRA\n        ? () => {\n            const lcd = new LCDClient(TERRA_HOST);\n            return getForeignAssetTerra(\n              TERRA_TOKEN_BRIDGE_ADDRESS,\n              lcd,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          }\n        : () => {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            return getForeignAssetSolana(\n              connection,\n              SOL_TOKEN_BRIDGE_ADDRESS,\n              originChain,\n              hexToUint8Array(originAssetHex)\n            );\n          };\n\n      getterFunc()\n        .then((result) => {\n          if (!cancelled) {\n            if (\n              result &&\n              !(\n                isEVMChain(foreignChain) &&\n                result === ethers.constants.AddressZero\n              )\n            ) {\n              setArgs();\n              setDoesExist(true);\n              setIsLoading(false);\n              setAssetAddress(result);\n            } else {\n              setArgs();\n              setDoesExist(false);\n              setIsLoading(false);\n              setAssetAddress(null);\n            }\n          }\n        })\n        .catch((e) => {\n          if (!cancelled) {\n            setError(\"Could not retrieve the foreign asset.\");\n            setIsLoading(false);\n          }\n        });\n    } catch (e) {\n      //This catch mostly just detects poorly formatted addresses\n      if (!cancelled) {\n        setError(\"Could not retrieve the foreign asset.\");\n        setIsLoading(false);\n      }\n    }\n  }, [\n    argumentError,\n    foreignChain,\n    originAssetHex,\n    originChain,\n    provider,\n    setArgs,\n    argsEqual,\n  ]);\n\n  const compoundError = useMemo(() => {\n    return error ? error : \"\";\n  }, [error]); //now swallows wallet errors\n\n  const output: DataWrapper<ForeignAssetInfo> = useMemo(\n    () => ({\n      error: compoundError,\n      isFetching: isLoading,\n      data:\n        (assetAddress !== null && assetAddress !== undefined) ||\n        (doesExist !== null && doesExist !== undefined)\n          ? { address: assetAddress, doesExist: !!doesExist }\n          : null,\n      receivedAt: null,\n    }),\n    [compoundError, isLoading, assetAddress, doesExist]\n  );\n\n  return output;\n}\n\nexport default useFetchForeignAsset;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TERRA_DEFAULT_FEE_DENOM } from \"../utils/consts\";\n\nexport interface FeeSliceState {\n  terraFeeDenom: string;\n}\n\nconst initialState: FeeSliceState = {\n  terraFeeDenom: TERRA_DEFAULT_FEE_DENOM,\n};\n\nexport const feeSlice = createSlice({\n  name: \"fee\",\n  initialState,\n  reducers: {\n    setTerraFeeDenom: (state, action: PayloadAction<string>) => {\n      state.terraFeeDenom = action.payload;\n    },\n    reset: () => initialState,\n  },\n});\n\nexport const { setTerraFeeDenom, reset } = feeSlice.actions;\n\nexport default feeSlice.reducer;\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { MutableRefObject, useEffect, useMemo, useState } from \"react\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport interface TerraNativeBalances {\n  [index: string]: string;\n}\n\nexport default function useTerraNativeBalances(\n  walletAddress?: string,\n  refreshRef?: MutableRefObject<() => void>\n) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [balances, setBalances] = useState<TerraNativeBalances | undefined>({});\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    if (refreshRef) {\n      refreshRef.current = () => {\n        setRefresh(true);\n      };\n    }\n  }, [refreshRef]);\n  useEffect(() => {\n    setRefresh(false);\n    if (walletAddress) {\n      setIsLoading(true);\n      setBalances(undefined);\n      const lcd = new LCDClient(TERRA_HOST);\n      lcd.bank\n        .balance(walletAddress)\n        .then(([coins]) => {\n          // coins doesn't support reduce\n          const balancePairs = coins.map(({ amount, denom }) => [\n            denom,\n            amount,\n          ]);\n          const balance = balancePairs.reduce((obj, current) => {\n            obj[current[0].toString()] = current[1].toString();\n            return obj;\n          }, {} as TerraNativeBalances);\n          setIsLoading(false);\n          setBalances(balance);\n        })\n        .catch((e) => {\n          setIsLoading(false);\n          setBalances(undefined);\n        });\n    } else {\n      setIsLoading(false);\n      setBalances(undefined);\n    }\n  }, [walletAddress, refresh]);\n  const value = useMemo(() => ({ isLoading, balances }), [isLoading, balances]);\n  return value;\n}\n","import {\n  MenuItem,\n  makeStyles,\n  TextField,\n  Typography,\n  ListItemIcon,\n} from \"@material-ui/core\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setTerraFeeDenom } from \"../store/feeSlice\";\nimport { selectTerraFeeDenom } from \"../store/selectors\";\nimport useTerraNativeBalances from \"../hooks/useTerraNativeBalances\";\nimport { formatNativeDenom, getNativeTerraIcon } from \"../utils/terra\";\n\nconst useStyles = makeStyles((theme) => ({\n  feePickerContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: `${theme.spacing(1)}px auto`,\n    maxWidth: 200,\n    width: \"100%\",\n  },\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\ntype TerraFeeDenomPickerProps = {\n  disabled: boolean;\n};\n\nexport default function TerraFeeDenomPicker(props: TerraFeeDenomPickerProps) {\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const wallet = useConnectedWallet();\n  const { balances } = useTerraNativeBalances(wallet?.walletAddress);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const feeDenomItems = useMemo(() => {\n    const items = [];\n    if (balances) {\n      for (const [denom, amount] of Object.entries(balances)) {\n        if (amount === \"0\") continue;\n        const symbol = formatNativeDenom(denom);\n        if (symbol) {\n          items.push({\n            denom,\n            symbol,\n            icon: getNativeTerraIcon(symbol),\n          });\n        }\n      }\n    }\n    // prevent an out-of-range value from being selected\n    if (!items.find((item) => item.denom === terraFeeDenom)) {\n      const symbol = formatNativeDenom(terraFeeDenom);\n      items.push({\n        denom: terraFeeDenom,\n        symbol,\n        icon: getNativeTerraIcon(symbol),\n      });\n    }\n    return items;\n  }, [balances, terraFeeDenom]);\n\n  return (\n    <div className={classes.feePickerContainer}>\n      <Typography variant=\"caption\">Fee Denomination</Typography>\n      <TextField\n        variant=\"outlined\"\n        size=\"small\"\n        select\n        fullWidth\n        value={terraFeeDenom}\n        onChange={(event) => dispatch(setTerraFeeDenom(event.target.value))}\n        disabled={props.disabled}\n        className={classes.select}\n      >\n        {feeDenomItems.map((item) => {\n          return (\n            <MenuItem key={item.denom} value={item.denom}>\n              <ListItemIcon>\n                <img\n                  src={item.icon}\n                  alt={item.symbol}\n                  className={classes.icon}\n                />\n              </ListItemIcon>\n              {item.symbol}\n            </MenuItem>\n          );\n        })}\n      </TextField>\n    </div>\n  );\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferIsApproving,\n  selectTransferIsRedeeming,\n  selectTransferIsSending,\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport const WAITING_FOR_WALLET_AND_CONF =\n  \"Waiting for wallet approval (likely in a popup) and confirmation...\";\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isApproving = useSelector(selectTransferIsApproving);\n  const isSending = useSelector(selectTransferIsSending);\n  const transferTx = useSelector(selectTransferTransferTx);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const showWarning =\n    isApproving || (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestAttestTx,\n  selectAttestCreateTx,\n  selectAttestIsCreating,\n  selectAttestIsSending,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const isSending = useSelector(selectAttestIsSending);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const createTx = useSelector(selectAttestCreateTx);\n  const showWarning = (isSending && !attestTx) || (isCreating && !createTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isCreating\n        ? \"Note: there will be several transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport useFetchForeignAsset from \"../../hooks/useFetchForeignAsset\";\nimport { useHandleCreateWrapped } from \"../../hooks/useHandleCreateWrapped\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  spacer: {\n    height: theme.spacing(2),\n  },\n}));\n\nfunction Create() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const originAsset = useSelector(selectAttestSourceAsset);\n  const originChain = useSelector(selectAttestSourceChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  const foreignAssetInfo = useFetchForeignAsset(\n    originChain,\n    originAsset,\n    targetChain\n  );\n  const shouldUpdate = foreignAssetInfo.data?.doesExist;\n  const error = foreignAssetInfo.error || statusMessage;\n  const { handleClick, disabled, showLoader } = useHandleCreateWrapped(\n    shouldUpdate || false\n  );\n\n  console.log(\"foreign asset info\", foreignAssetInfo);\n\n  return (\n    <>\n      <KeyAndBalance chainId={targetChain} />\n      {targetChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      {foreignAssetInfo.isFetching ? (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={classes.alignCenter} />\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={!isReady || disabled}\n            onClick={handleClick}\n            showLoader={showLoader}\n            error={error}\n          >\n            {shouldUpdate ? \"Update\" : \"Create\"}\n          </ButtonWithLoader>\n          <WaitingForWalletMessage />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Create;\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function ShowTx({\n  chainId,\n  tx,\n}: {\n  chainId: ChainId;\n  tx: Transaction;\n}) {\n  const classes = useStyles();\n  const showExplorerLink =\n    CLUSTER === \"testnet\" ||\n    CLUSTER === \"mainnet\" ||\n    (CLUSTER === \"devnet\" &&\n      (chainId === CHAIN_ID_SOLANA || chainId === CHAIN_ID_TERRA));\n  const explorerAddress =\n    chainId === CHAIN_ID_ETH\n      ? `https://${CLUSTER === \"testnet\" ? \"goerli.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? `https://${CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"}etherscan.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_BSC\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}bscscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_POLYGON\n      ? `https://${CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"}polygonscan.com/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_AVAX\n      ? `https://${CLUSTER === \"testnet\" ? \"testnet.\" : \"\"}snowtrace.io/tx/${\n          tx?.id\n        }`\n      : chainId === CHAIN_ID_OASIS\n      ? `https://${\n          CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n        }explorer.emerald.oasis.dev/tx/${tx?.id}`\n      : chainId === CHAIN_ID_SOLANA\n      ? `https://explorer.solana.com/tx/${tx?.id}${\n          CLUSTER === \"testnet\"\n            ? \"?cluster=devnet\"\n            : CLUSTER === \"devnet\"\n            ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n            : \"\"\n        }`\n      : chainId === CHAIN_ID_TERRA\n      ? `https://finder.terra.money/${\n          CLUSTER === \"devnet\"\n            ? \"localterra\"\n            : CLUSTER === \"testnet\"\n            ? \"bombay-12\"\n            : \"columbus-5\"\n        }/tx/${tx?.id}`\n      : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  return (\n    <div className={classes.tx}>\n      <Typography noWrap component=\"div\" variant=\"body2\">\n        {tx.id}\n      </Typography>\n      {showExplorerLink && explorerAddress ? (\n        <Button\n          href={explorerAddress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          size=\"small\"\n          variant=\"outlined\"\n          className={classes.viewButton}\n        >\n          View on {explorerName}\n        </Button>\n      ) : null}\n    </div>\n  );\n}\n","import { Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectAttestCreateTx,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/attestSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport { useHistory } from \"react-router\";\nimport { getHowToAddToTokenListUrl } from \"../../utils/consts\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function CreatePreview() {\n  const { push } = useHistory();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const createTx = useSelector(selectAttestCreateTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const handleReturnClick = useCallback(() => {\n    dispatch(reset());\n    push(\"/transfer\");\n  }, [dispatch, push]);\n\n  const explainerString =\n    \"Success! The create wrapped transaction was submitted.\";\n  const howToAddToTokenListUrl = getHowToAddToTokenListUrl(targetChain);\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {createTx ? <ShowTx chainId={targetChain} tx={createTx} /> : null}\n      {howToAddToTokenListUrl ? (\n        <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n          Remember to add the token to the{\" \"}\n          <Link\n            href={howToAddToTokenListUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            token list\n          </Link>\n          {\".\"}\n        </Alert>\n      ) : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Attest Another Token!\n      </ButtonWithLoader>\n      <ButtonWithLoader onClick={handleReturnClick}>\n        Return to Transfer\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  attestFromEth,\n  attestFromSolana,\n  attestFromTerra,\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setAttestTx,\n  setIsSending,\n  setSignedVAAHex,\n} from \"../store/attestSlice\";\nimport {\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n  selectAttestIsTargetComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n  selectTerraFeeDenom,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  sourceAsset: string,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await attestFromEth(\n      getTokenBridgeAddressForChain(chainId),\n      signer,\n      sourceAsset\n    );\n    dispatch(\n      setAttestTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  solPK: PublicKey,\n  sourceAsset: string,\n  wallet: WalletContextState\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const transaction = await attestFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_TOKEN_BRIDGE_ADDRESS,\n      solPK.toString(),\n      sourceAsset\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      // TODO: error state\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setAttestTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string,\n  feeDenom: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const msg = await attestFromTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      asset\n    );\n    const result = await postWithFees(wallet, [msg], \"Create Wrapped\", [\n      feeDenom,\n    ]);\n    const info = await waitForTerraExecution(result);\n    dispatch(setAttestTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleAttest() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleAttestClick = useCallback(() => {\n    if (isEVMChain(sourceChain) && !!signer) {\n      evm(dispatch, enqueueSnackbar, signer, sourceAsset, sourceChain);\n    } else if (sourceChain === CHAIN_ID_SOLANA && !!solanaWallet && !!solPK) {\n      solana(dispatch, enqueueSnackbar, solPK, sourceAsset, solanaWallet);\n    } else if (sourceChain === CHAIN_ID_TERRA && !!terraWallet) {\n      terra(dispatch, enqueueSnackbar, terraWallet, sourceAsset, terraFeeDenom);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceAsset,\n    terraFeeDenom,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleAttestClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleAttestClick, disabled, isSending]\n  );\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { SOLANA_HOST } from \"../utils/consts\";\nimport {\n  decodeMetadata,\n  getMetadataAddress,\n  Metadata,\n} from \"../utils/metaplex\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\n\nexport const getMetaplexData = async (mintAddresses: string[]) => {\n  const promises = [];\n  for (const address of mintAddresses) {\n    promises.push(getMetadataAddress(address));\n  }\n  const metaAddresses = await Promise.all(promises);\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  const results = await getMultipleAccountsRPC(\n    connection,\n    metaAddresses.map((pair) => pair && pair[0])\n  );\n\n  const output = results.map((account) => {\n    if (account === null) {\n      return undefined;\n    } else {\n      if (account.data) {\n        try {\n          const MetadataParsed = decodeMetadata(account.data);\n          return MetadataParsed;\n        } catch (e) {\n          console.error(e);\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  });\n\n  return output;\n};\n\nconst createResultMap = (\n  addresses: string[],\n  metadatas: (Metadata | undefined)[]\n) => {\n  const output = new Map<string, Metadata | undefined>();\n\n  addresses.forEach((address) => {\n    const metadata = metadatas.find((x) => x?.mint === address);\n    if (metadata) {\n      output.set(address, metadata);\n    } else {\n      output.set(address, undefined);\n    }\n  });\n\n  return output;\n};\n\nconst useMetaplexData = (\n  addresses: string[]\n): DataWrapper<Map<string, Metadata | undefined> | undefined> => {\n  const [results, setResults] = useState<\n    Map<string, Metadata | undefined> | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [receivedAt, setReceivedAt] = useState<string | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    setIsLoading(true);\n    getMetaplexData(addresses).then(\n      (results) => {\n        if (!cancelled) {\n          setResults(createResultMap(addresses, results));\n          setIsLoading(false);\n          setError(\"\");\n          setReceivedAt(new Date().toISOString());\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setResults(undefined);\n          setIsLoading(false);\n          setError(\"Failed to fetch Metaplex data.\");\n          setReceivedAt(new Date().toISOString());\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, setResults, setIsLoading, setError]);\n\n  const output = useMemo(\n    () => ({\n      data: results,\n      isFetching: isLoading,\n      error,\n      receivedAt,\n    }),\n    [results, isLoading, error, receivedAt]\n  );\n  return output;\n};\n\nexport default useMetaplexData;\n","import {\n  ChainId,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { LinearProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { Transaction } from \"../store/transferSlice\";\nimport { CHAINS_BY_ID, SOLANA_HOST } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n    textAlign: \"center\",\n  },\n  message: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function TransactionProgress({\n  chainId,\n  tx,\n  isSendComplete,\n}: {\n  chainId: ChainId;\n  tx: Transaction | undefined;\n  isSendComplete: boolean;\n}) {\n  const classes = useStyles();\n  const { provider } = useEthereumProvider();\n  const [currentBlock, setCurrentBlock] = useState(0);\n  useEffect(() => {\n    if (isSendComplete || !tx) return;\n    if (isEVMChain(chainId) && provider) {\n      let cancelled = false;\n      (async () => {\n        while (!cancelled) {\n          await new Promise((resolve) => setTimeout(resolve, 500));\n          try {\n            const newBlock = await provider.getBlockNumber();\n            if (!cancelled) {\n              setCurrentBlock(newBlock);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n    if (chainId === CHAIN_ID_SOLANA) {\n      let cancelled = false;\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const sub = connection.onSlotChange((slotInfo) => {\n        if (!cancelled) {\n          setCurrentBlock(slotInfo.slot);\n        }\n      });\n      return () => {\n        cancelled = true;\n        connection.removeSlotChangeListener(sub);\n      };\n    }\n  }, [isSendComplete, chainId, provider, tx]);\n  const blockDiff =\n    tx && tx.block && currentBlock ? currentBlock - tx.block : undefined;\n  const expectedBlocks =\n    chainId === CHAIN_ID_POLYGON\n      ? 512 // minimum confirmations enforced by guardians\n      : chainId === CHAIN_ID_SOLANA\n      ? 32\n      : isEVMChain(chainId)\n      ? 15\n      : 1;\n  if (\n    !isSendComplete &&\n    (chainId === CHAIN_ID_SOLANA || isEVMChain(chainId)) &&\n    blockDiff !== undefined\n  ) {\n    return (\n      <div className={classes.root}>\n        <LinearProgress\n          value={\n            blockDiff < expectedBlocks ? (blockDiff / expectedBlocks) * 75 : 75\n          }\n          variant=\"determinate\"\n        />\n        <Typography variant=\"body2\" className={classes.message}>\n          {blockDiff < expectedBlocks\n            ? `Waiting for ${blockDiff} / ${expectedBlocks} confirmations on ${CHAINS_BY_ID[chainId].name}...`\n            : `Waiting for Wormhole Network consensus...`}\n        </Typography>\n      </div>\n    );\n  }\n  return null;\n}\n","import { CHAIN_ID_SOLANA, CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Link, makeStyles } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleAttest } from \"../../hooks/useHandleAttest\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport {\n  selectAttestAttestTx,\n  selectAttestIsSendComplete,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\nimport { SOLANA_TOKEN_METADATA_PROGRAM_URL } from \"../../utils/consts\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nconst SolanaTokenMetadataWarning = () => {\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const sourceAssetArrayed = useMemo(() => {\n    return [sourceAsset];\n  }, [sourceAsset]);\n  const metaplexData = useMetaplexData(sourceAssetArrayed);\n  const classes = useStyles();\n\n  if (metaplexData.isFetching || metaplexData.error) {\n    return null;\n  }\n\n  return !metaplexData.data?.get(sourceAsset) ? (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      This token is missing on-chain (Metaplex) metadata. Without it, the\n      wrapped token's name and symbol will be empty. See the{\" \"}\n      <Link\n        href={SOLANA_TOKEN_METADATA_PROGRAM_URL}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        metaplex repository\n      </Link>{\" \"}\n      for details.\n    </Alert>\n  ) : null;\n};\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleAttest();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n\n  return (\n    <>\n      <KeyAndBalance chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Attest\n      </ButtonWithLoader>\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTokenMetadataWarning />}\n      <WaitingForWalletMessage />\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={attestTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceChain,\n  selectAttestAttestTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const attestTx = useSelector(selectAttestAttestTx);\n\n  const explainerString = \"The token has been attested!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {attestTx ? <ShowTx chainId={sourceChain} tx={attestTx} /> : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Typography } from \"@material-ui/core\";\nimport { LocalGasStation } from \"@material-ui/icons\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  getDefaultNativeCurrencySymbol,\n  SOLANA_HOST,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport { getMultipleAccountsRPC } from \"../utils/solana\";\nimport { NATIVE_TERRA_DECIMALS } from \"../utils/terra\";\nimport useIsWalletReady from \"./useIsWalletReady\";\nimport { LCDClient } from \"@terra-money/terra.js\";\n\nexport type GasEstimate = {\n  currentGasPrice: string;\n  lowEstimate: string;\n  highEstimate: string;\n};\n\nexport type MethodType = \"nft\" | \"createWrapped\" | \"transfer\";\n\n//It's difficult to project how many fees the user will accrue during the\n//workflow, as a variable number of transactions can be sent, and different\n//execution paths can be hit in the smart contracts, altering gas used.\n//As such, for the moment it is best to just check for a reasonable 'low balance' threshold.\n//Still it would be good to calculate a reasonable value at runtime based off current gas prices,\n//rather than a hardcoded value.\nconst SOLANA_THRESHOLD_LAMPORTS: bigint = BigInt(300000);\nconst ETHEREUM_THRESHOLD_WEI: bigint = BigInt(35000000000000000);\nconst TERRA_THRESHOLD_ULUNA: bigint = BigInt(100000);\nconst TERRA_THRESHOLD_UUSD: bigint = BigInt(10000000);\n\nconst isSufficientBalance = (\n  chainId: ChainId,\n  balance: bigint | undefined,\n  terraFeeDenom?: string\n) => {\n  if (balance === undefined || !chainId) {\n    return true;\n  }\n  if (CHAIN_ID_SOLANA === chainId) {\n    return balance > SOLANA_THRESHOLD_LAMPORTS;\n  }\n  if (isEVMChain(chainId)) {\n    return balance > ETHEREUM_THRESHOLD_WEI;\n  }\n  if (terraFeeDenom === \"uluna\") {\n    return balance > TERRA_THRESHOLD_ULUNA;\n  }\n  if (terraFeeDenom === \"uusd\") {\n    return balance > TERRA_THRESHOLD_UUSD;\n  }\n\n  return true;\n};\n\ntype TerraBalance = {\n  denom: string;\n  balance: bigint;\n};\n\nconst isSufficientBalanceTerra = (balances: TerraBalance[]) => {\n  return balances.some(({ denom, balance }) => {\n    if (denom === \"uluna\") {\n      return balance > TERRA_THRESHOLD_ULUNA;\n    }\n    if (denom === \"uusd\") {\n      return balance > TERRA_THRESHOLD_UUSD;\n    }\n    return false;\n  });\n};\n\n//TODO move to more generic location\nconst getBalanceSolana = async (walletAddress: string) => {\n  const connection = new Connection(SOLANA_HOST);\n  return getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]).then(\n    (results) => {\n      if (results.length && results[0]) {\n        return BigInt(results[0].lamports);\n      }\n    },\n    (error) => {\n      return BigInt(0);\n    }\n  );\n};\n\nconst getBalanceEvm = async (walletAddress: string, provider: Provider) => {\n  return provider.getBalance(walletAddress).then((result) => result.toBigInt());\n};\n\nconst getBalancesTerra = async (walletAddress: string) => {\n  const TARGET_DENOMS = [\"uluna\", \"uusd\"];\n\n  const lcd = new LCDClient(TERRA_HOST);\n  return lcd.bank\n    .balance(walletAddress)\n    .then(([coins]) => {\n      const balances = coins\n        .filter(({ denom }) => {\n          return TARGET_DENOMS.includes(denom);\n        })\n        .map(({ amount, denom }) => {\n          return {\n            denom,\n            balance: BigInt(amount.toString()),\n          };\n        });\n      if (balances) {\n        return balances;\n      } else {\n        return Promise.reject();\n      }\n    })\n    .catch((e) => {\n      return Promise.reject();\n    });\n};\n\nconst toBalanceString = (balance: bigint | undefined, chainId: ChainId) => {\n  if (!chainId || balance === undefined) {\n    return \"\";\n  }\n  if (isEVMChain(chainId)) {\n    return formatUnits(balance, 18); //wei decimals\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return formatUnits(balance, 9); //lamports to sol decmals\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return formatUnits(balance, NATIVE_TERRA_DECIMALS);\n  }\n};\n\nexport default function useTransactionFees(chainId: ChainId) {\n  const { walletAddress, isReady } = useIsWalletReady(chainId);\n  const { provider } = useEthereumProvider();\n  const [balance, setBalance] = useState<bigint | undefined>(undefined);\n  const [terraBalances, setTerraBalances] = useState<TerraBalance[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loadStart = useCallback(() => {\n    setBalance(undefined);\n    setIsLoading(true);\n    setError(\"\");\n  }, []);\n\n  useEffect(() => {\n    if (chainId === CHAIN_ID_SOLANA && isReady && walletAddress) {\n      loadStart();\n      getBalanceSolana(walletAddress).then(\n        (result) => {\n          const adjustedresult =\n            result === undefined || result === null ? BigInt(0) : result;\n          setIsLoading(false);\n          setBalance(adjustedresult);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    } else if (isEVMChain(chainId) && isReady && walletAddress) {\n      if (provider) {\n        loadStart();\n        getBalanceEvm(walletAddress, provider).then(\n          (result) => {\n            const adjustedresult =\n              result === undefined || result === null ? BigInt(0) : result;\n            setIsLoading(false);\n            setBalance(adjustedresult);\n          },\n          (error) => {\n            setIsLoading(false);\n            setError(\"Cannot load wallet balance\");\n          }\n        );\n      }\n    } else if (chainId === CHAIN_ID_TERRA && isReady && walletAddress) {\n      loadStart();\n      getBalancesTerra(walletAddress).then(\n        (results) => {\n          const adjustedResults = results.map(({ denom, balance }) => {\n            return {\n              denom,\n              balance:\n                balance === undefined || balance === null ? BigInt(0) : balance,\n            };\n          });\n          setIsLoading(false);\n          setTerraBalances(adjustedResults);\n        },\n        (error) => {\n          setIsLoading(false);\n          setError(\"Cannot load wallet balance\");\n        }\n      );\n    }\n  }, [provider, walletAddress, isReady, chainId, loadStart]);\n\n  const results = useMemo(() => {\n    return {\n      isSufficientBalance:\n        chainId === CHAIN_ID_TERRA\n          ? isSufficientBalanceTerra(terraBalances)\n          : isSufficientBalance(chainId, balance),\n      balance,\n      balanceString: toBalanceString(balance, chainId),\n      isLoading,\n      error,\n    };\n  }, [balance, terraBalances, chainId, isLoading, error]);\n\n  return results;\n}\n\nexport function useEthereumGasPrice(contract: MethodType, chainId: ChainId) {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [estimateResults, setEstimateResults] = useState<GasEstimate | null>(\n    null\n  );\n\n  useEffect(() => {\n    if (provider && isReady && !estimateResults) {\n      getGasEstimates(provider, contract).then(\n        (results) => {\n          setEstimateResults(results);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n    }\n  }, [provider, isReady, estimateResults, contract]);\n\n  const results = useMemo(() => estimateResults, [estimateResults]);\n  return results;\n}\n\nfunction EthGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  const estimate = useEthereumGasPrice(methodType, chainId);\n  if (!estimate) {\n    return null;\n  }\n\n  return (\n    <Typography\n      component=\"div\"\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        marginTop: 8,\n        flexWrap: \"wrap\",\n      }}\n    >\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <LocalGasStation fontSize=\"inherit\" />\n        &nbsp;{estimate.currentGasPrice}\n      </div>\n      <div>&nbsp;&nbsp;&nbsp;</div>\n      <div>\n        Est. Fees: {estimate.lowEstimate} - {estimate.highEstimate}{\" \"}\n        {getDefaultNativeCurrencySymbol(chainId)}\n      </div>\n    </Typography>\n  );\n}\n\nconst terraEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(50000),\n    highGasEstimate: BigInt(90000),\n  },\n};\n\nconst evmEstimatesByContract = {\n  transfer: {\n    lowGasEstimate: BigInt(80000),\n    highGasEstimate: BigInt(130000),\n  },\n  nft: {\n    lowGasEstimate: BigInt(350000),\n    highGasEstimate: BigInt(500000),\n  },\n  createWrapped: {\n    lowGasEstimate: BigInt(450000),\n    highGasEstimate: BigInt(700000),\n  },\n};\n\nexport async function getGasEstimates(\n  provider: Provider,\n  contract: MethodType\n): Promise<GasEstimate | null> {\n  const lowEstimateGasAmount = evmEstimatesByContract[contract].lowGasEstimate;\n  const highEstimateGasAmount =\n    evmEstimatesByContract[contract].highGasEstimate;\n\n  let lowEstimate;\n  let highEstimate;\n  let currentGasPrice;\n  if (provider) {\n    const priceInWei = await provider.getGasPrice();\n    if (priceInWei) {\n      lowEstimate = parseFloat(\n        formatUnits(lowEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      highEstimate = parseFloat(\n        formatUnits(highEstimateGasAmount * priceInWei.toBigInt(), \"ether\")\n      ).toFixed(4);\n      currentGasPrice = parseFloat(formatUnits(priceInWei, \"gwei\")).toFixed(0);\n    }\n  }\n\n  const output =\n    currentGasPrice && highEstimate && lowEstimate\n      ? {\n          currentGasPrice,\n          lowEstimate,\n          highEstimate,\n        }\n      : null;\n\n  return output;\n}\n\nfunction TerraGasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (methodType === \"transfer\") {\n    const lowEstimate = formatUnits(\n      terraEstimatesByContract.transfer.lowGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    const highEstimate = formatUnits(\n      terraEstimatesByContract.transfer.highGasEstimate,\n      NATIVE_TERRA_DECIMALS\n    );\n    return (\n      <Typography\n        component=\"div\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          marginTop: 8,\n          flexWrap: \"wrap\",\n        }}\n      >\n        <div>\n          Est. Fees: {lowEstimate} - {highEstimate}{\" \"}\n          {getDefaultNativeCurrencySymbol(chainId)}\n        </div>\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function GasEstimateSummary({\n  methodType,\n  chainId,\n}: {\n  methodType: MethodType;\n  chainId: ChainId;\n}) {\n  if (isEVMChain(chainId)) {\n    return <EthGasEstimateSummary chainId={chainId} methodType={methodType} />;\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <TerraGasEstimateSummary chainId={chainId} methodType={methodType} />\n    );\n  } else {\n    return null;\n  }\n}\n","import { ChainId, CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useTransactionFees from \"../hooks/useTransactionFees\";\nimport { getDefaultNativeCurrencySymbol } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction LowBalanceWarning({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { isReady } = useIsWalletReady(chainId);\n  const transactionFeeWarning = useTransactionFees(chainId);\n  const displayWarning =\n    isReady &&\n    (chainId === CHAIN_ID_TERRA || transactionFeeWarning.balanceString) &&\n    transactionFeeWarning.isSufficientBalance === false;\n\n  const warningMessage =\n    chainId === CHAIN_ID_TERRA\n      ? \"This wallet may not have sufficient funds to pay for the upcoming transaction fees.\"\n      : `This wallet has a very low ${getDefaultNativeCurrencySymbol(\n          chainId\n        )} balance and may not be able to pay for the upcoming transaction fees.`;\n\n  const content = (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">{warningMessage}</Typography>\n      {chainId !== CHAIN_ID_TERRA ? (\n        <Typography variant=\"body1\">\n          {\"Current balance: \" + transactionFeeWarning.balanceString}\n        </Typography>\n      ) : null}\n    </Alert>\n  );\n\n  return displayWarning ? content : null;\n}\n\nexport default LowBalanceWarning;\n","import { makeStyles, TextField } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  incrementStep,\n  setSourceAsset,\n  setSourceChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestIsSourceComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n  const isSourceComplete = useSelector(selectAttestIsSourceComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAssetChange = useCallback(\n    (event) => {\n      dispatch(setSourceAsset(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS}\n      />\n      <KeyAndBalance chainId={sourceChain} />\n      <TextField\n        label=\"Asset\"\n        variant=\"outlined\"\n        fullWidth\n        className={classes.transferField}\n        value={sourceAsset}\n        onChange={handleAssetChange}\n        disabled={shouldLockFields}\n      />\n      <LowBalanceWarning chainId={sourceChain} />\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { Alert } from \"@material-ui/lab\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback } from \"react\";\nimport pushToClipboard from \"../utils/pushToClipboard\";\n\nexport default function useCopyToClipboard(content: string) {\n  const { enqueueSnackbar } = useSnackbar();\n  return useCallback(() => {\n    pushToClipboard(content)?.then(() => {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"success\">Copied.</Alert>,\n      });\n    });\n  }, [content, enqueueSnackbar]);\n}\n","export default function pushToClipboard(content: any) {\n  if (!navigator.clipboard) {\n    // Clipboard API not available\n    return;\n  }\n  return navigator.clipboard.writeText(content);\n}\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isNativeDenom,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles, Tooltip, Typography } from \"@material-ui/core\";\nimport { FileCopy, OpenInNew } from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport { ReactChild } from \"react\";\nimport useCopyToClipboard from \"../hooks/useCopyToClipboard\";\nimport { ParsedTokenAccount } from \"../store/transferSlice\";\nimport { CLUSTER, getExplorerName } from \"../utils/consts\";\nimport { shortenAddress } from \"../utils/solana\";\nimport { formatNativeDenom } from \"../utils/terra\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainTypog: {\n    display: \"inline-block\",\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    textDecoration: \"underline\",\n    textUnderlineOffset: \"2px\",\n  },\n  noGutter: {\n    marginLeft: 0,\n    marginRight: 0,\n  },\n  noUnderline: {\n    textDecoration: \"none\",\n  },\n  buttons: {\n    marginLeft: \".5rem\",\n    marginRight: \".5rem\",\n  },\n}));\n\nconst tooltipStyles = {\n  tooltip: {\n    minWidth: \"max-content\",\n    textAlign: \"center\",\n    \"& > *\": {\n      margin: \".25rem\",\n    },\n  },\n};\n\n// @ts-ignore\nconst StyledTooltip = withStyles(tooltipStyles)(Tooltip);\n\nexport default function SmartAddress({\n  chainId,\n  parsedTokenAccount,\n  address,\n  symbol,\n  tokenName,\n  variant,\n  noGutter,\n  noUnderline,\n  extraContent,\n}: {\n  chainId: ChainId;\n  parsedTokenAccount?: ParsedTokenAccount;\n  address?: string;\n  logo?: string;\n  tokenName?: string;\n  symbol?: string;\n  variant?: any;\n  noGutter?: boolean;\n  noUnderline?: boolean;\n  extraContent?: ReactChild;\n}) {\n  const classes = useStyles();\n  const isNativeTerra = chainId === CHAIN_ID_TERRA && isNativeDenom(address);\n  const useableAddress = parsedTokenAccount?.mintKey || address || \"\";\n  const useableSymbol = isNativeTerra\n    ? formatNativeDenom(address)\n    : parsedTokenAccount?.symbol || symbol || \"\";\n  // const useableLogo = logo || isNativeTerra ? getNativeTerraIcon(useableSymbol) : null\n  const isNative = parsedTokenAccount?.isNativeAsset || isNativeTerra || false;\n  const addressShort = shortenAddress(useableAddress) || \"\";\n\n  const useableName = isNative\n    ? \"Native Currency\"\n    : parsedTokenAccount?.name\n    ? parsedTokenAccount.name\n    : tokenName\n    ? tokenName\n    : \"\";\n  const explorerAddress = isNative\n    ? null\n    : chainId === CHAIN_ID_ETH\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"goerli.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"ropsten.\" : \"\"\n      }etherscan.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_BSC\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }bscscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_POLYGON\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"mumbai.\" : \"\"\n      }polygonscan.com/address/${useableAddress}`\n    : chainId === CHAIN_ID_AVAX\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }snowtrace.io/address/${useableAddress}`\n    : chainId === CHAIN_ID_OASIS\n    ? `https://${\n        CLUSTER === \"testnet\" ? \"testnet.\" : \"\"\n      }explorer.emerald.oasis.dev/address/${useableAddress}`\n    : chainId === CHAIN_ID_SOLANA\n    ? `https://explorer.solana.com/address/${useableAddress}${\n        CLUSTER === \"testnet\"\n          ? \"?cluster=devnet\"\n          : CLUSTER === \"devnet\"\n          ? \"?cluster=custom&customUrl=http%3A%2F%2Flocalhost%3A8899\"\n          : \"\"\n      }`\n    : chainId === CHAIN_ID_TERRA\n    ? `https://finder.terra.money/${\n        CLUSTER === \"devnet\"\n          ? \"localterra\"\n          : CLUSTER === \"testnet\"\n          ? \"bombay-12\"\n          : \"columbus-5\"\n      }/address/${useableAddress}`\n    : undefined;\n  const explorerName = getExplorerName(chainId);\n\n  const copyToClipboard = useCopyToClipboard(useableAddress);\n\n  const explorerButton = !explorerAddress ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      startIcon={<OpenInNew />}\n      className={classes.buttons}\n      href={explorerAddress}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {\"View on \" + explorerName}\n    </Button>\n  );\n  //TODO add icon here\n  const copyButton = isNative ? null : (\n    <Button\n      size=\"small\"\n      variant=\"outlined\"\n      startIcon={<FileCopy />}\n      onClick={copyToClipboard}\n      className={classes.buttons}\n    >\n      Copy\n    </Button>\n  );\n\n  const tooltipContent = (\n    <>\n      {useableName && <Typography>{useableName}</Typography>}\n      {useableSymbol && !isNative && (\n        <Typography noWrap variant=\"body2\">\n          {addressShort}\n        </Typography>\n      )}\n      <div>\n        {explorerButton}\n        {copyButton}\n      </div>\n      {extraContent ? extraContent : null}\n    </>\n  );\n\n  return (\n    <StyledTooltip\n      title={tooltipContent}\n      interactive={true}\n      className={classes.mainTypog}\n    >\n      <Typography\n        variant={variant || \"body1\"}\n        className={clsx(classes.mainTypog, {\n          [classes.noGutter]: noGutter,\n          [classes.noUnderline]: noUnderline,\n        })}\n        component=\"div\"\n      >\n        {useableSymbol || addressShort}\n      </Typography>\n    </StyledTooltip>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectAttestSourceAsset,\n  selectAttestSourceChain,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const sourceAsset = useSelector(selectAttestSourceAsset);\n\n  const explainerContent =\n    sourceChain && sourceAsset ? (\n      <>\n        <span>You will attest</span>\n        <SmartAddress chainId={sourceChain} address={sourceAsset} />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/attestSlice\";\nimport {\n  selectAttestIsTargetComplete,\n  selectAttestShouldLockFields,\n  selectAttestSourceChain,\n  selectAttestTargetChain,\n} from \"../../store/selectors\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectAttestSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectAttestTargetChain);\n  const isTargetComplete = useSelector(selectAttestIsTargetComplete);\n  const shouldLockFields = useSelector(selectAttestShouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <ChainSelect\n        select\n        variant=\"outlined\"\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={shouldLockFields}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to attest this token.{\" \"}\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary\n            methodType=\"createWrapped\"\n            chainId={targetChain}\n          />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      <ButtonWithLoader\n        disabled={!isTargetComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestTargetChain } from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectAttestTargetChain);\n\n  const explainerString = `to ${CHAINS_BY_ID[targetChain].name}`;\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerString}\n    </Typography>\n  );\n}\n","import {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setStep } from \"../../store/attestSlice\";\nimport {\n  selectAttestActiveStep,\n  selectAttestIsCreateComplete,\n  selectAttestIsCreating,\n  selectAttestIsSendComplete,\n  selectAttestIsSending,\n} from \"../../store/selectors\";\nimport HeaderText from \"../HeaderText\";\nimport Create from \"./Create\";\nimport CreatePreview from \"./CreatePreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Attest() {\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectAttestActiveStep);\n  const isSending = useSelector(selectAttestIsSending);\n  const isSendComplete = useSelector(selectAttestIsSendComplete);\n  const isCreating = useSelector(selectAttestIsCreating);\n  const isCreateComplete = useSelector(selectAttestIsCreateComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isCreating) && !isCreateComplete;\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white>Token Registration</HeaderText>\n      <Alert severity=\"info\">\n        This form allows you to register a token on a new foreign chain. Tokens\n        must be registered before they can be transferred.\n      </Alert>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1. Source\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isCreateComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))} icon={null}>\n            2. Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton onClick={() => dispatch(setStep(2))} icon={null}>\n            3. Send attestation\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete}\n            icon={null}\n          >\n            4. Create wrapped token\n          </StepButton>\n          <StepContent>\n            {isCreateComplete ? <CreatePreview /> : <Create />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Attest;\n","export default __webpack_public_path__ + \"static/media/Discord.9d433876.svg\";","export default __webpack_public_path__ + \"static/media/Github.834f0cd9.svg\";","export default __webpack_public_path__ + \"static/media/Medium.707cd3f2.svg\";","export default __webpack_public_path__ + \"static/media/portal_logo_w.7d00cc65.svg\";","export default __webpack_public_path__ + \"static/media/Telegram.21b850b0.svg\";","export default __webpack_public_path__ + \"static/media/Twitter.ac1250d0.svg\";","export default __webpack_public_path__ + \"static/media/Footer.7e77d3ac.png\";","import { IconButton, Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Link as RouterLink, NavLink } from \"react-router-dom\";\nimport Discord from \"../icons/Discord.svg\";\nimport Github from \"../icons/Github.svg\";\nimport Medium from \"../icons/Medium.svg\";\nimport Portal from \"../icons/portal_logo_w.svg\";\nimport Telegram from \"../icons/Telegram.svg\";\nimport Twitter from \"../icons/Twitter.svg\";\nimport footerImg from \"../images/Footer.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    position: \"relative\",\n  },\n  backdrop: {\n    position: \"absolute\",\n    zIndex: -1,\n    background: `url(${footerImg})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center center\",\n    backgroundSize: \"cover\",\n    width: \"100%\",\n    height: \"100%\",\n    opacity: 0.25,\n    [theme.breakpoints.up(\"md\")]: {\n      backgroundSize: \"auto\",\n      opacity: 1,\n      height: 444,\n      backgroundPosition: \"right bottom -326px\",\n    },\n  },\n  container: {\n    maxWidth: 1100,\n    margin: \"0px auto\",\n    paddingTop: theme.spacing(11),\n    paddingBottom: theme.spacing(6.5),\n    [theme.breakpoints.up(\"md\")]: {\n      paddingBottom: theme.spacing(12),\n    },\n  },\n  flex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginLeft: theme.spacing(3.5),\n    marginRight: theme.spacing(3.5),\n    borderTop: \"1px solid #585587\",\n    paddingTop: theme.spacing(7),\n    [theme.breakpoints.up(\"md\")]: {\n      flexWrap: \"wrap\",\n      flexDirection: \"row\",\n      alignItems: \"unset\",\n    },\n  },\n  logoWrapper: {\n    paddingLeft: theme.spacing(0),\n    paddingBottom: theme.spacing(2),\n    borderTop: \"1px solid #585587\",\n    paddingTop: theme.spacing(7),\n    width: \"100%\",\n    textAlign: \"center\",\n    [theme.breakpoints.up(\"md\")]: {\n      paddingLeft: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n      borderTop: \"none\",\n      paddingTop: theme.spacing(0),\n      width: \"auto\",\n      textAlign: \"left\",\n    },\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  linksWrapper: {\n    paddingLeft: theme.spacing(0),\n    order: -2,\n    textAlign: \"center\",\n    marginBottom: theme.spacing(7),\n    [theme.breakpoints.up(\"md\")]: {\n      paddingLeft: theme.spacing(2),\n      order: 0,\n      textAlign: \"left\",\n      mb: theme.spacing(0),\n    },\n  },\n  linkStyle: {\n    color: \"white\",\n    display: \"block\",\n    marginRight: theme.spacing(0),\n    marginBottom: theme.spacing(1.5),\n    fontSize: 14,\n    textUnderlineOffset: \"6px\",\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(7.5),\n    },\n  },\n  linkActiveStyle: { textDecoration: \"underline\" },\n  socialWrapper: {\n    padding: theme.spacing(0, 2),\n    order: -2,\n    textAlign: \"center\",\n    borderTop: \"1px solid #585587\",\n    paddingTop: theme.spacing(7),\n    width: \"100%\",\n    marginBottom: theme.spacing(7),\n    [theme.breakpoints.up(\"md\")]: {\n      order: 0,\n      textAlign: \"left\",\n      borderTop: \"none\",\n      paddingTop: theme.spacing(0),\n      width: \"auto\",\n      marginBottom: theme.spacing(0),\n    },\n  },\n  socialHeader: {\n    marginBottom: theme.spacing(3),\n  },\n  socialIcon: {\n    padding: theme.spacing(1),\n    \"& img\": {\n      height: 24,\n      width: 24,\n    },\n  },\n  builtWithContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    opacity: 0.5,\n    marginTop: theme.spacing(1),\n  },\n  wormholeIcon: {\n    height: 68,\n    marginTop: -24,\n  },\n  copyWrapper: {\n    flexBasis: \"100%\",\n    paddingTop: theme.spacing(0),\n    textAlign: \"center\",\n    [theme.breakpoints.up(\"md\")]: {\n      paddingTop: theme.spacing(0),\n      textAlign: \"left\",\n    },\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <div className={classes.backdrop} />\n      <div className={classes.container}>\n        <div className={classes.flex}>\n          <div className={classes.logoWrapper}>\n            <RouterLink to={\"/transfer\"}>\n              <img src={Portal} alt=\"Portal\" className={classes.wormholeIcon} />\n            </RouterLink>\n          </div>\n          <div className={classes.spacer} />\n          <div className={classes.linksWrapper}>\n            <div>\n              <Link\n                component={NavLink}\n                to={\"/transfer\"}\n                color=\"inherit\"\n                underline=\"hover\"\n                className={classes.linkStyle}\n                activeClassName={classes.linkActiveStyle}\n              >\n                Bridge\n              </Link>\n              <Link\n                href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                color=\"inherit\"\n                underline=\"hover\"\n                className={classes.linkStyle}\n              >\n                FAQ\n              </Link>\n              <Link\n                component={NavLink}\n                to={\"/stats\"}\n                color=\"inherit\"\n                underline=\"hover\"\n                className={classes.linkStyle}\n                activeClassName={classes.linkActiveStyle}\n              >\n                Stats\n              </Link>\n              <Link\n                href=\"https://wormholenetwork.com/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                color=\"inherit\"\n                underline=\"hover\"\n                className={classes.linkStyle}\n              >\n                Wormhole\n              </Link>\n            </div>\n          </div>\n          <div className={classes.spacer} />\n          <div className={classes.socialWrapper}>\n            <Typography className={classes.socialHeader}>\n              Let's be friends\n            </Typography>\n            <IconButton\n              href=\"https://discord.gg/wormholecrypto\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Discord} alt=\"Discord\" />\n            </IconButton>\n            <IconButton\n              href=\"https://github.com/certusone/wormhole\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Github} alt=\"Github\" />\n            </IconButton>\n            <IconButton\n              href=\"http://wormholecrypto.medium.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Medium} alt=\"Medium\" />\n            </IconButton>\n            <IconButton\n              href=\"https://t.me/wormholecrypto\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Telegram} alt=\"Telegram\" />\n            </IconButton>\n            <IconButton\n              href=\"https://twitter.com/wormholecrypto\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classes.socialIcon}\n            >\n              <img src={Twitter} alt=\"Twitter\" />\n            </IconButton>\n          </div>\n          <div className={classes.copyWrapper}>\n            <Typography variant=\"body2\">\n              2022 &copy; Wormhole. All Rights Reserved.\n            </Typography>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import {\n  Migrator,\n  Migrator__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nexport type EthMigrationInfo = {\n  isLoading: boolean;\n  error: string;\n  data: RequisiteData | null;\n};\n\nexport type RequisiteData = {\n  poolAddress: string;\n  fromAddress: string;\n  toAddress: string;\n  fromToken: TokenImplementation;\n  toToken: TokenImplementation;\n  migrator: Migrator;\n  fromSymbol: string;\n  toSymbol: string;\n  fromDecimals: number;\n  toDecimals: number;\n  sharesDecimals: number;\n  fromWalletBalance: string;\n  toWalletBalance: string;\n  fromPoolBalance: string;\n  toPoolBalance: string;\n  walletSharesBalance: string;\n};\n\nconst getRequisiteData = async (\n  migrator: Migrator,\n  signer: Signer,\n  signerAddress: string\n): Promise<RequisiteData> => {\n  try {\n    const poolAddress = migrator.address;\n    const fromAddress = await migrator.fromAsset();\n    const toAddress = await migrator.toAsset();\n\n    const fromToken = TokenImplementation__factory.connect(fromAddress, signer);\n    const toToken = TokenImplementation__factory.connect(toAddress, signer);\n\n    const fromSymbol = await fromToken.symbol();\n    const toSymbol = await toToken.symbol();\n\n    const fromDecimals = await (await migrator.fromDecimals()).toNumber();\n    const toDecimals = await (await migrator.toDecimals()).toNumber();\n    const sharesDecimals = await migrator.decimals();\n\n    const fromWalletBalance = formatUnits(\n      await fromToken.balanceOf(signerAddress),\n      fromDecimals\n    );\n    const toWalletBalance = formatUnits(\n      await toToken.balanceOf(signerAddress),\n      toDecimals\n    );\n\n    const fromPoolBalance = formatUnits(\n      await fromToken.balanceOf(poolAddress),\n      fromDecimals\n    );\n    const toPoolBalance = formatUnits(\n      await toToken.balanceOf(poolAddress),\n      toDecimals\n    );\n\n    const walletSharesBalance = formatUnits(\n      await migrator.balanceOf(signerAddress),\n      sharesDecimals\n    );\n\n    return {\n      poolAddress,\n      fromAddress,\n      toAddress,\n      fromToken,\n      toToken,\n      migrator,\n      fromSymbol,\n      toSymbol,\n      fromDecimals,\n      toDecimals,\n      fromWalletBalance,\n      toWalletBalance,\n      fromPoolBalance,\n      toPoolBalance,\n      walletSharesBalance,\n      sharesDecimals,\n    };\n  } catch (e) {\n    return Promise.reject(\"Failed to retrieve required data.\");\n  }\n};\n\nfunction useEthereumMigratorInformation(\n  migratorAddress: string | undefined,\n  signer: Signer | undefined,\n  signerAddress: string | undefined,\n  toggleRefresh: boolean\n): EthMigrationInfo {\n  const migrator = useMemo(\n    () =>\n      migratorAddress &&\n      signer &&\n      Migrator__factory.connect(migratorAddress, signer),\n    [migratorAddress, signer]\n  );\n  const [data, setData] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!signer || !migrator || !signerAddress) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n    getRequisiteData(migrator, signer, signerAddress).then(\n      (result) => {\n        if (!cancelled) {\n          setData(result);\n          setIsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Failed to retrieve necessary data.\");\n        }\n      }\n    );\n\n    return () => {\n      cancelled = true;\n      return;\n    };\n  }, [migrator, signer, signerAddress, toggleRefresh]);\n\n  return useMemo(() => {\n    if (!migratorAddress || !signer || !signerAddress) {\n      return {\n        isLoading: false,\n        error:\n          !signer || !signerAddress\n            ? \"Wallet not connected\"\n            : !migratorAddress\n            ? \"No contract address\"\n            : \"Error\",\n        data: null,\n      };\n    } else {\n      return {\n        isLoading,\n        error,\n        data,\n      };\n    }\n  }, [isLoading, error, data, migratorAddress, signer, signerAddress]);\n}\n\nexport default useEthereumMigratorInformation;\n","import {\n  Button,\n  InputAdornment,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\n\nexport default function NumberTextField({\n  onMaxClick,\n  ...props\n}: TextFieldProps & { onMaxClick?: () => void }) {\n  return (\n    <TextField\n      type=\"number\"\n      {...props}\n      InputProps={{\n        endAdornment: onMaxClick ? (\n          <InputAdornment position=\"end\">\n            <Button\n              onClick={onMaxClick}\n              disabled={props.disabled}\n              variant=\"outlined\"\n            >\n              Max\n            </Button>\n          </InputAdornment>\n        ) : undefined,\n        ...(props?.InputProps || {}),\n      }}\n    ></TextField>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n}));\n\nexport default function EvmWorkflow({\n  chainId,\n  migratorAddress,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const [toggleRefresh, setToggleRefresh] = useState(false);\n  const forceRefresh = useCallback(\n    () => setToggleRefresh((prevState) => !prevState),\n    []\n  );\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    toggleRefresh\n  );\n  const fromWalletBalance = poolInfo.data?.fromWalletBalance;\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  const fromParse = (amount: string) => {\n    try {\n      if (!poolInfo.data?.fromDecimals || !migrationAmount) {\n        return BigInt(0);\n      }\n      return parseUnits(amount, poolInfo.data.fromDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = poolInfo.data;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromWalletBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromWalletBalance);\n  const sufficientPoolBalance =\n    poolInfo.data?.toPoolBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(poolInfo.data.toPoolBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!isReady) {\n      return \"Connect your wallet to proceed.\";\n    } else if (poolInfo.error) {\n      return \"Unable to retrieve necessary information. This asset may not be supported.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"The transfer amount must be greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromWalletBalance) {\n      setMigrationAmount(fromWalletBalance);\n    }\n  }, [fromWalletBalance]);\n\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      setMigrationIsProcessing(true);\n      setError(\"\");\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        parseUnits(migrationAmount, poolInfo.data.fromDecimals)\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      forceRefresh();\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, migrationAmount, enqueueSnackbar, forceRefresh]);\n\n  //TODO tokenName\n  const toTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.toAddress}\n      symbol={poolInfo.data?.toSymbol}\n    />\n  );\n  const fromTokenPretty = (\n    <SmartAddress\n      chainId={chainId}\n      address={poolInfo.data?.fromAddress}\n      symbol={poolInfo.data?.fromSymbol}\n    />\n  );\n  const poolPretty = (\n    <SmartAddress chainId={chainId} address={poolInfo.data?.poolAddress} />\n  );\n\n  const fatalError = poolInfo.error\n    ? \"Unable to retrieve necessary information. This asset may not be supported.\"\n    : null;\n\n  const explainerContent = (\n    <div>\n      <Typography>This action will convert</Typography>\n      <Typography variant=\"h6\">\n        {fromTokenPretty} {`(Balance: ${fromWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>to</Typography>\n      <Typography variant=\"h6\">\n        {toTokenPretty} {`(Balance: ${poolInfo.data?.toWalletBalance || \"\"})`}\n      </Typography>\n      <div className={classes.spacer} />\n      <Typography>Utilizing this pool</Typography>\n      <Typography variant=\"h6\">\n        {poolPretty} {`(Balance: ${poolInfo.data?.toPoolBalance || \"\"})`}\n      </Typography>\n    </div>\n  );\n\n  const mainWorkflow = (\n    <>\n      {explainerContent}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromWalletBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx tx={{ id: transaction, block: 1 }} chainId={chainId} />\n        </>\n      ) : null}\n    </>\n  );\n\n  return (\n    <div className={classes.containerDiv}>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : poolInfo.isLoading ? (\n        <CircularProgress />\n      ) : fatalError ? (\n        <Typography variant=\"h6\">{fatalError}</Typography>\n      ) : (\n        mainWorkflow\n      )}\n    </div>\n  );\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { TerraTokenMap } from \"../hooks/useTerraTokenMap\";\nimport { MarketsMap } from \"../hooks/useMarketsMap\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nexport interface TokenMetadataState {\n  solanaTokenMap: DataWrapper<TokenInfo[]>;\n  terraTokenMap: DataWrapper<TerraTokenMap>; //TODO make a decent type for this.\n  marketsMap: DataWrapper<MarketsMap>;\n}\n\nconst initialState: TokenMetadataState = {\n  solanaTokenMap: getEmptyDataWrapper(),\n  terraTokenMap: getEmptyDataWrapper(),\n  marketsMap: getEmptyDataWrapper(),\n};\n\nexport const tokenSlice = createSlice({\n  name: \"tokenInfos\",\n  initialState,\n  reducers: {\n    receiveSolanaTokenMap: (state, action: PayloadAction<TokenInfo[]>) => {\n      state.solanaTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchSolanaTokenMap: (state) => {\n      state.solanaTokenMap = fetchDataWrapper();\n    },\n    errorSolanaTokenMap: (state, action: PayloadAction<string>) => {\n      state.solanaTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveTerraTokenMap: (state, action: PayloadAction<TerraTokenMap>) => {\n      state.terraTokenMap = receiveDataWrapper(action.payload);\n    },\n    fetchTerraTokenMap: (state) => {\n      state.terraTokenMap = fetchDataWrapper();\n    },\n    errorTerraTokenMap: (state, action: PayloadAction<string>) => {\n      state.terraTokenMap = errorDataWrapper(action.payload);\n    },\n\n    receiveMarketsMap: (state, action: PayloadAction<MarketsMap>) => {\n      state.marketsMap = receiveDataWrapper(action.payload);\n    },\n    fetchMarketsMap: (state) => {\n      state.marketsMap = fetchDataWrapper();\n    },\n    errorMarketsMap: (state, action: PayloadAction<string>) => {\n      state.marketsMap = errorDataWrapper(action.payload);\n    },\n\n    reset: () => initialState,\n  },\n});\n\nexport const {\n  receiveSolanaTokenMap,\n  fetchSolanaTokenMap,\n  errorSolanaTokenMap,\n  receiveTerraTokenMap,\n  fetchTerraTokenMap,\n  errorTerraTokenMap,\n  receiveMarketsMap,\n  fetchMarketsMap,\n  errorMarketsMap,\n  reset,\n} = tokenSlice.actions;\n\nexport default tokenSlice.reducer;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport { ENV, TokenInfo, TokenListProvider } from \"@solana/spl-token-registry\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectSolanaTokenMap } from \"../store/selectors\";\nimport {\n  errorSolanaTokenMap,\n  fetchSolanaTokenMap,\n  receiveSolanaTokenMap,\n} from \"../store/tokenSlice\";\nimport { CLUSTER } from \"../utils/consts\";\n\nconst environment = CLUSTER === \"testnet\" ? ENV.Testnet : ENV.MainnetBeta;\n\nconst useSolanaTokenMap = (): DataWrapper<TokenInfo[]> => {\n  const tokenMap = useSelector(selectSolanaTokenMap);\n  const dispatch = useDispatch();\n  const shouldFire =\n    tokenMap.data === undefined ||\n    (tokenMap.data === null && !tokenMap.isFetching);\n\n  useEffect(() => {\n    if (shouldFire) {\n      getSolanaTokenMap(dispatch);\n    }\n  }, [dispatch, shouldFire]);\n\n  return tokenMap;\n};\n\nconst getSolanaTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchSolanaTokenMap());\n\n  new TokenListProvider().resolve().then(\n    (tokens) => {\n      const tokenList = tokens.filterByChainId(environment).getList();\n      dispatch(receiveSolanaTokenMap(tokenList));\n    },\n    (error) => {\n      console.error(error);\n      dispatch(errorSolanaTokenMap(\"Failed to retrieve the Solana token map.\"));\n    }\n  );\n};\n\nexport default useSolanaTokenMap;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getForeignAssetSolana,\n  hexToNativeString,\n  hexToUint8Array,\n} from \"@certusone/wormhole-sdk\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetAddressHex,\n} from \"../store/selectors\";\nimport { SOLANA_HOST, SOL_TOKEN_BRIDGE_ADDRESS } from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport SmartAddress from \"./SmartAddress\";\n\nexport function useAssociatedAccountExistsState(\n  targetChain: ChainId,\n  mintAddress: string | null | undefined,\n  readableTargetAddress: string | undefined\n) {\n  const [associatedAccountExists, setAssociatedAccountExists] = useState(true); // for now, assume it exists until we confirm it doesn't\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  useEffect(() => {\n    setAssociatedAccountExists(true);\n    if (\n      targetChain !== CHAIN_ID_SOLANA ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    let cancelled = false;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          if (!cancelled) {\n            setAssociatedAccountExists(false);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [targetChain, mintAddress, readableTargetAddress, solPK]);\n  return useMemo(\n    () => ({ associatedAccountExists, setAssociatedAccountExists }),\n    [associatedAccountExists]\n  );\n}\n\nexport default function SolanaCreateAssociatedAddress({\n  mintAddress,\n  readableTargetAddress,\n  associatedAccountExists,\n  setAssociatedAccountExists,\n}: {\n  mintAddress: string;\n  readableTargetAddress: string;\n  associatedAccountExists: boolean;\n  setAssociatedAccountExists: (associatedAccountExists: boolean) => void;\n}) {\n  const [isCreating, setIsCreating] = useState(false);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleClick = useCallback(() => {\n    if (\n      associatedAccountExists ||\n      !mintAddress ||\n      !readableTargetAddress ||\n      !solPK\n    )\n      return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(mintAddress);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === readableTargetAddress;\n      if (match) {\n        const associatedAddressInfo = await connection.getAccountInfo(\n          associatedAddress\n        );\n        if (!associatedAddressInfo) {\n          setIsCreating(true);\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setIsCreating(false);\n          setAssociatedAccountExists(true);\n        } else {\n          console.log(\"Account already exists.\");\n        }\n      }\n    })();\n  }, [\n    associatedAccountExists,\n    setAssociatedAccountExists,\n    mintAddress,\n    solPK,\n    readableTargetAddress,\n    solanaWallet,\n  ]);\n  if (associatedAccountExists) return null;\n  return (\n    <>\n      <Typography color=\"error\" variant=\"body2\">\n        This associated token account doesn't exist.\n      </Typography>\n      <ButtonWithLoader\n        disabled={\n          !mintAddress || !readableTargetAddress || !solPK || isCreating\n        }\n        onClick={handleClick}\n        showLoader={isCreating}\n      >\n        Create Associated Token Account\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport function SolanaCreateAssociatedAddressAlternate() {\n  const { enqueueSnackbar } = useSnackbar();\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const addressHex = useSelector(selectTransferTargetAddressHex);\n  const base58TargetAddress = useMemo(\n    () => hexToNativeString(addressHex, CHAIN_ID_SOLANA) || \"\",\n    [addressHex]\n  );\n  const base58OriginAddress = useMemo(\n    () => hexToNativeString(originAsset, CHAIN_ID_SOLANA) || \"\",\n    [originAsset]\n  );\n  const connection = useMemo(() => new Connection(SOLANA_HOST), []);\n  const [targetAsset, setTargetAsset] = useState<string | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (!(originChain && originAsset && addressHex && base58TargetAddress)) {\n      setTargetAsset(null);\n    } else if (originChain === CHAIN_ID_SOLANA && base58OriginAddress) {\n      setTargetAsset(base58OriginAddress);\n    } else {\n      getForeignAssetSolana(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAsset)\n      ).then((result) => {\n        if (!cancelled) {\n          setTargetAsset(result);\n        }\n      });\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    originChain,\n    originAsset,\n    addressHex,\n    base58TargetAddress,\n    connection,\n    base58OriginAddress,\n  ]);\n\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      CHAIN_ID_SOLANA,\n      targetAsset,\n      base58TargetAddress\n    );\n\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const handleForceCreateClick = useCallback(() => {\n    if (!targetAsset || !base58TargetAddress || !solPK) return;\n    (async () => {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      const mintPublicKey = new PublicKey(targetAsset);\n      const payerPublicKey = new PublicKey(solPK); // currently assumes the wallet is the owner\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPublicKey,\n        payerPublicKey\n      );\n      const match = associatedAddress.toString() === base58TargetAddress;\n      if (match) {\n        try {\n          const transaction = new Transaction().add(\n            await Token.createAssociatedTokenAccountInstruction(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              mintPublicKey,\n              associatedAddress,\n              payerPublicKey, // owner\n              payerPublicKey // payer\n            )\n          );\n          const { blockhash } = await connection.getRecentBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = new PublicKey(payerPublicKey);\n          await signSendAndConfirm(solanaWallet, connection, transaction);\n          setAssociatedAccountExists(true);\n          enqueueSnackbar(null, {\n            content: (\n              <Alert severity=\"success\">\n                Successfully created associated token account\n              </Alert>\n            ),\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n          });\n        }\n      } else {\n        enqueueSnackbar(null, {\n          content: (\n            <Alert severity=\"error\">\n              Derived address does not match the target address. Do you have the\n              same wallet connected?\n            </Alert>\n          ),\n        });\n      }\n    })();\n  }, [\n    setAssociatedAccountExists,\n    targetAsset,\n    solPK,\n    base58TargetAddress,\n    solanaWallet,\n    enqueueSnackbar,\n  ]);\n\n  return targetAsset ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography variant=\"subtitle2\">Recipient Address:</Typography>\n      <Typography component=\"div\">\n        <SmartAddress\n          chainId={CHAIN_ID_SOLANA}\n          address={base58TargetAddress}\n          variant=\"h6\"\n          extraContent={\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={handleForceCreateClick}\n              disabled={!targetAsset || !base58TargetAddress || !solPK}\n            >\n              Force Create Account\n            </Button>\n          }\n        />\n      </Typography>\n      {associatedAccountExists ? null : (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={base58TargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      )}\n    </div>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSolanaWallet } from \"../../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { COLORS } from \"../../muiTheme\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../../utils/solana\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport NumberTextField from \"../NumberTextField\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\n//TODO move to utils/solana\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\n//TODO move to utils/solana\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\nexport default function Workflow({\n  fromMint,\n  toMint,\n  fromTokenAccount,\n}: {\n  fromMint: string;\n  toMint: string;\n  fromTokenAccount: string;\n}) {\n  const classes = useStyles();\n\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [migrationAmount, setMigrationAmount] = useState(\"\");\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [transaction, setTransaction] = useState<string | null>(null);\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet?.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet?.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet?.publicKey]);\n  /*\n    End effects\n    */\n\n  const migrateTokens = useCallback(async () => {\n    try {\n      setError(\"\");\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet?.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(migrationAmount, fromMintDecimals).toBigInt()\n      );\n      setMigrationIsProcessing(true);\n      signSendAndConfirm(wallet, connection, instruction).then(\n        (transaction: any) => {\n          setMigrationIsProcessing(false);\n          setTransaction(transaction);\n        },\n        (error) => {\n          console.log(error);\n          setError(\"Could not complete the migrateTokens transaction.\");\n          setMigrationIsProcessing(false);\n        }\n      );\n    } catch (e) {\n      console.log(e);\n      setError(\"Could not complete the migrateTokens transaction.\");\n      setMigrationIsProcessing(false);\n    }\n  }, [\n    connection,\n    fromMint,\n    fromTokenAccount,\n    migrationAmount,\n    toMint,\n    toTokenAccount,\n    wallet,\n    fromMintDecimals,\n  ]);\n\n  const fromParse = (amount: string) => {\n    try {\n      return parseUnits(amount, fromMintDecimals).toBigInt();\n    } catch (e) {\n      return BigInt(0);\n    }\n  };\n\n  const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n  const accountsReady =\n    fromTokenAccountExists && toTokenAccountExists && poolExists;\n  const amountGreaterThanZero = fromParse(migrationAmount) > BigInt(0);\n  const sufficientFromTokens =\n    fromTokenAccountBalance &&\n    migrationAmount &&\n    fromParse(migrationAmount) <= fromParse(fromTokenAccountBalance);\n  const sufficientPoolBalance =\n    toCustodyBalance &&\n    migrationAmount &&\n    parseFloat(migrationAmount) <= parseFloat(toCustodyBalance);\n\n  const isReadyToTransfer =\n    isReady &&\n    amountGreaterThanZero &&\n    sufficientFromTokens &&\n    sufficientPoolBalance &&\n    accountsReady &&\n    hasRequisiteData;\n\n  const getNotReadyCause = () => {\n    if (!fromMint || !toMint || !poolAddress || !poolExists) {\n      return \"This asset is not supported.\";\n    } else if (!isReady) {\n      return \"Wallet is not connected.\";\n    } else if (!toTokenAccountExists || !fromTokenAccountExists) {\n      return \"You have not created the necessary token accounts.\";\n    } else if (!migrationAmount) {\n      return \"Enter an amount to transfer.\";\n    } else if (!amountGreaterThanZero) {\n      return \"Enter an amount greater than zero.\";\n    } else if (!sufficientFromTokens) {\n      return \"There are not sufficient funds in your wallet for this transfer.\";\n    } else if (!sufficientPoolBalance) {\n      return \"There are not sufficient funds in the pool for this transfer.\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const handleAmountChange = useCallback(\n    (event) => setMigrationAmount(event.target.value),\n    [setMigrationAmount]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (fromTokenAccountBalance) {\n      setMigrationAmount(fromTokenAccountBalance);\n    }\n  }, [fromTokenAccountBalance]);\n\n  const getMetadata = (address: string) => {\n    const tokenMapItem = solanaTokenMap.data?.find(\n      (x) => x.address === address\n    );\n    const metaplexItem = metaplexData.data?.get(address);\n\n    return {\n      symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n      name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n      logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n    };\n  };\n\n  const toMetadata = getMetadata(toMint);\n  const fromMetadata = getMetadata(fromMint);\n\n  const toMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={toMint}\n      symbol={toMetadata?.symbol}\n      tokenName={toMetadata?.name}\n    />\n  );\n  const fromMintPretty = (\n    <SmartAddress\n      chainId={CHAIN_ID_SOLANA}\n      address={fromMint}\n      symbol={fromMetadata?.symbol}\n      tokenName={fromMetadata?.name}\n    />\n  );\n\n  return (\n    <div>\n      <SolanaWalletKey />\n      <div className={classes.spacer} />\n      {fromTokenAccount && toTokenAccount ? (\n        <>\n          <Typography variant=\"body2\" component=\"div\">\n            <span>This will migrate</span>\n            {fromMintPretty}\n            <span>tokens in this account:</span>\n          </Typography>\n          <Typography variant=\"h5\">\n            <SmartAddress\n              address={fromTokenAccount}\n              chainId={CHAIN_ID_SOLANA}\n            />\n            {`(Balance: ${fromTokenAccountBalance}${\n              fromMetadata.symbol && \" \" + fromMetadata.symbol\n            })`}\n          </Typography>\n          <div className={classes.spacer} />\n          <Typography variant=\"body2\" component=\"div\">\n            <span>into </span>\n            {toMintPretty}\n            <span> tokens in this account:</span>\n          </Typography>\n          <Typography\n            variant=\"h5\"\n            color={toTokenAccountExists ? \"textPrimary\" : \"textSecondary\"}\n          >\n            <SmartAddress address={toTokenAccount} chainId={CHAIN_ID_SOLANA} />\n            <span>\n              {toTokenAccountExists\n                ? ` (Balance: ${toTokenAccountBalance}${\n                    (toMetadata.symbol && \" \" + toMetadata.symbol) || \"\"\n                  })`\n                : \" (Not created yet)\"}\n            </span>\n          </Typography>\n          <SolanaCreateAssociatedAddress\n            mintAddress={toMint}\n            readableTargetAddress={toTokenAccount}\n            associatedAccountExists={toTokenAccountExists}\n            setAssociatedAccountExists={setToTokenAccountExists}\n          />\n          {poolAddress && toCustodyAddress && toCustodyBalance ? (\n            <>\n              <div className={classes.spacer} />\n              <Typography variant=\"body2\" component=\"div\">\n                <span>Using pool </span>\n                <SmartAddress address={poolAddress} chainId={CHAIN_ID_SOLANA} />\n                <span> holding tokens in this account:</span>\n              </Typography>\n              <Typography variant=\"h5\">\n                <SmartAddress\n                  address={toCustodyAddress}\n                  chainId={CHAIN_ID_SOLANA}\n                />\n                <span>{` (Balance: ${toCustodyBalance}${\n                  toMetadata.symbol && \" \" + toMetadata.symbol\n                })`}</span>\n              </Typography>\n            </>\n          ) : null}\n        </>\n      ) : null}\n      <div className={classes.spacer} />\n      <NumberTextField\n        variant=\"outlined\"\n        value={migrationAmount}\n        onChange={handleAmountChange}\n        label={\"Amount\"}\n        disabled={!!migrationIsProcessing || !!transaction}\n        onMaxClick={fromTokenAccountBalance ? handleMaxClick : undefined}\n      />\n\n      {!transaction && (\n        <ButtonWithLoader\n          disabled={!isReadyToTransfer || migrationIsProcessing}\n          showLoader={migrationIsProcessing}\n          onClick={migrateTokens}\n        >\n          {migrationAmount && isReadyToTransfer\n            ? \"Migrate \" + migrationAmount + \" Tokens\"\n            : \"Migrate\"}\n        </ButtonWithLoader>\n      )}\n      {(error || !isReadyToTransfer) && (\n        <Typography color=\"error\">{error || getNotReadyCause()}</Typography>\n      )}\n      {transaction ? (\n        <>\n          <Typography>\n            Successfully migrated your tokens! They will be available once this\n            transaction confirms.\n          </Typography>\n          <ShowTx\n            tx={{ id: transaction, block: 1 }}\n            chainId={CHAIN_ID_SOLANA}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Container, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { withRouter } from \"react-router\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { COLORS } from \"../../muiTheme\";\nimport { getMigrationAssetMap, MIGRATION_ASSET_MAP } from \"../../utils/consts\";\nimport HeaderText from \"../HeaderText\";\nimport EvmWorkflow from \"./EvmWorkflow\";\nimport SolanaWorkflow from \"./SolanaWorkflow\";\n\nconst useStyles = makeStyles(() => ({\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  spacer: {\n    height: \"2rem\",\n  },\n}));\n\ninterface RouteParams {\n  legacyAsset: string;\n  fromTokenAccount: string;\n}\n\ninterface Migration extends RouteComponentProps<RouteParams> {\n  chainId: ChainId;\n}\n\nconst SolanaRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const fromTokenAccount: string = props.match.params.fromTokenAccount;\n  const targetAsset: string | undefined = MIGRATION_ASSET_MAP.get(legacyAsset);\n\n  let fromMint: string | undefined = \"\";\n  let toMint: string | undefined = \"\";\n  let fromTokenAcct: string | undefined = \"\";\n  try {\n    fromMint = legacyAsset && new PublicKey(legacyAsset).toString();\n    toMint = targetAsset && new PublicKey(targetAsset).toString();\n    fromTokenAcct =\n      fromTokenAccount && new PublicKey(fromTokenAccount).toString();\n  } catch (e) {}\n\n  let content = null;\n\n  if (!fromMint || !toMint) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else if (!fromTokenAcct) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        Invalid token account.\n      </Typography>\n    );\n  } else {\n    content = (\n      <SolanaWorkflow\n        fromMint={fromMint}\n        toMint={toMint}\n        fromTokenAccount={fromTokenAcct}\n      />\n    );\n  }\n\n  return content;\n};\n\nconst EthereumRoot: React.FC<Migration> = (props) => {\n  const legacyAsset: string = props.match.params.legacyAsset;\n  const assetMap = getMigrationAssetMap(props.chainId);\n  const targetPool = assetMap.get(getAddress(legacyAsset));\n\n  let content = null;\n  if (!legacyAsset || !targetPool) {\n    content = (\n      <Typography style={{ textAlign: \"center\" }}>\n        This asset is not eligible for migration.\n      </Typography>\n    );\n  } else {\n    content = (\n      <EvmWorkflow migratorAddress={targetPool} chainId={props.chainId} />\n    );\n  }\n\n  return content;\n};\n\nconst MigrationRoot: React.FC<Migration> = (props) => {\n  const classes = useStyles();\n  let content = null;\n\n  if (props.chainId === CHAIN_ID_SOLANA) {\n    content = <SolanaRoot {...props} />;\n  } else if (props.chainId === CHAIN_ID_ETH || props.chainId === CHAIN_ID_BSC) {\n    content = <EthereumRoot {...props} />;\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText\n        white\n        subtitle=\"Convert assets from other bridges to Wormhole V2 tokens\"\n      >\n        Migrate Assets\n      </HeaderText>\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n};\n\nexport default withRouter(MigrationRoot);\n","import { ChainId, TokenImplementation__factory } from \"@certusone/wormhole-sdk\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { Alert } from \"@material-ui/lab\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useEthereumMigratorInformation from \"../../hooks/useEthereumMigratorInformation\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { COLORS } from \"../../muiTheme\";\nimport { CHAINS_BY_ID, getMigrationAssetMap } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport EthereumSignerKey from \"../EthereumSignerKey\";\nimport HeaderText from \"../HeaderText\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\n//TODO move elsewhere\nexport const compareWithDecimalOffset = (\n  valueA: string,\n  decimalsA: number,\n  valueB: string,\n  decimalsB: number\n) => {\n  //find which is larger, and offset by that amount\n  const decimalsBasis = decimalsA > decimalsB ? decimalsA : decimalsB;\n  const normalizedA = parseUnits(valueA, decimalsBasis).toBigInt();\n  const normalizedB = parseUnits(valueB, decimalsBasis).toBigInt();\n\n  if (normalizedA < normalizedB) {\n    return -1;\n  } else if (normalizedA === normalizedB) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\nfunction EvmMigrationLineItem({\n  chainId,\n  migratorAddress,\n  onLoadComplete,\n}: {\n  chainId: ChainId;\n  migratorAddress: string;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { signer, signerAddress } = useEthereumProvider();\n  const poolInfo = useEthereumMigratorInformation(\n    migratorAddress,\n    signer,\n    signerAddress,\n    false\n  );\n  const [loaded, setLoaded] = useState(false);\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const fromSymbol = poolInfo?.data?.fromSymbol;\n  const toSymbol = poolInfo?.data?.toSymbol;\n\n  const sufficientPoolBalance =\n    poolInfo.data &&\n    compareWithDecimalOffset(\n      poolInfo.data.fromWalletBalance,\n      poolInfo.data.fromDecimals,\n      poolInfo.data.toPoolBalance,\n      poolInfo.data.toDecimals\n    ) !== 1;\n\n  useEffect(() => {\n    if (!loaded && (poolInfo.data || poolInfo.error)) {\n      onLoadComplete();\n      setLoaded(true);\n    }\n  }, [loaded, poolInfo, onLoadComplete]);\n\n  //TODO use transaction loader\n  const migrateTokens = useCallback(async () => {\n    if (!poolInfo.data) {\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      }); //Should never be hit\n      return;\n    }\n    try {\n      const migrationAmountAbs = parseUnits(\n        poolInfo.data.fromWalletBalance,\n        poolInfo.data.fromDecimals\n      );\n      setMigrationIsProcessing(true);\n      await poolInfo.data.fromToken.approve(\n        poolInfo.data.migrator.address,\n        migrationAmountAbs\n      );\n      const transaction = await poolInfo.data.migrator.migrate(\n        migrationAmountAbs\n      );\n      await transaction.wait();\n      setTransaction(transaction.hash);\n      enqueueSnackbar(null, {\n        content: (\n          <Alert severity=\"success\">Successfully migrated the tokens.</Alert>\n        ),\n      });\n      setMigrationIsProcessing(false);\n    } catch (e) {\n      console.error(e);\n      enqueueSnackbar(null, {\n        content: <Alert severity=\"error\">Could not migrate the tokens.</Alert>,\n      });\n      setMigrationIsProcessing(false);\n      setError(\"Failed to send the transaction.\");\n    }\n  }, [poolInfo.data, enqueueSnackbar]);\n\n  if (!poolInfo.data) {\n    return null;\n  } else if (transaction) {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx chainId={chainId} tx={{ id: transaction, block: 1 }} />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.fromAddress}\n            symbol={fromSymbol || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromWalletBalance}\n          </Typography>\n          <SmartAddress\n            chainId={chainId}\n            address={poolInfo.data.toAddress}\n            symbol={toSymbol || undefined}\n          />\n        </div>\n        <div className={classes.convertButton}>\n          <ButtonWithLoader\n            showLoader={migrationIsProcessing}\n            onClick={migrateTokens}\n            error={\n              error\n                ? error\n                : !sufficientPoolBalance\n                ? \"The swap pool has insufficient funds.\"\n                : \"\"\n            }\n            disabled={!sufficientPoolBalance || migrationIsProcessing}\n          >\n            Convert\n          </ButtonWithLoader>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getAddressBalances = async (\n  signer: Signer,\n  signerAddress: string,\n  addresses: string[]\n): Promise<Map<string, BigNumber | null>> => {\n  try {\n    const promises: Promise<any>[] = [];\n    const output = new Map<string, BigNumber | null>();\n    addresses.forEach((address) => {\n      const factory = TokenImplementation__factory.connect(address, signer);\n      promises.push(\n        factory.balanceOf(signerAddress).then(\n          (result) => {\n            output.set(address, result);\n          },\n          (error) => {\n            output.set(address, null);\n          }\n        )\n      );\n    });\n    await Promise.all(promises);\n    return output;\n  } catch (e) {\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function EvmQuickMigrate({ chainId }: { chainId: ChainId }) {\n  const classes = useStyles();\n  const { signer, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const eligibleTokens = useMemo(\n    () => Array.from(migrationMap.keys()),\n    [migrationMap]\n  );\n  const [migrators, setMigrators] = useState<string[] | null>(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && signer && signerAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getAddressBalances(signer, signerAddress, eligibleTokens).then(\n        (result) => {\n          if (!cancelled) {\n            const migratorAddresses = [];\n            for (const tokenAddress of result.keys()) {\n              if (result.get(tokenAddress) && result.get(tokenAddress)?.gt(0)) {\n                const migratorAddress = migrationMap.get(\n                  getAddress(tokenAddress)\n                );\n                if (migratorAddress) {\n                  migratorAddresses.push(migratorAddress);\n                }\n              }\n            }\n            setMigratorsFinishedLoading(0);\n            setMigrators(migratorAddresses);\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, signer, signerAddress, eligibleTokens, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <EthereumSignerKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((address) => {\n              return (\n                <EvmMigrationLineItem\n                  key={address}\n                  chainId={chainId}\n                  migratorAddress={address}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText\n        white\n        subtitle=\"Convert assets from other bridges to Wormhole V2 tokens\"\n      >\n        Migrate Assets\n      </HeaderText>\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport migrateTokensTx from \"@certusone/wormhole-sdk/lib/esm/migration/migrateTokens\";\nimport getPoolAddress from \"@certusone/wormhole-sdk/lib/esm/migration/poolAddress\";\nimport getToCustodyAddress from \"@certusone/wormhole-sdk/lib/esm/migration/toCustodyAddress\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useAssociatedAccountExistsState } from \"../components/SolanaCreateAssociatedAddress\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetaplexData from \"../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { MIGRATION_PROGRAM_ADDRESS, SOLANA_HOST } from \"../utils/consts\";\nimport { getMultipleAccounts, signSendAndConfirm } from \"../utils/solana\";\n\nconst getDecimals = async (\n  connection: Connection,\n  mint: string,\n  setter: (decimals: number | undefined) => void\n) => {\n  setter(undefined);\n  if (mint) {\n    try {\n      const pk = new PublicKey(mint);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const decimals = info.value?.data.parsed.info.decimals;\n      setter(decimals);\n    } catch (e) {\n      console.log(`Unable to determine decimals of ${mint}`);\n    }\n  }\n};\n\nconst getBalance = async (\n  connection: Connection,\n  address: string | undefined,\n  setter: (balance: string | undefined) => void\n) => {\n  setter(undefined);\n  if (address) {\n    try {\n      const pk = new PublicKey(address);\n      const info = await connection.getParsedAccountInfo(pk);\n      // @ts-ignore\n      const balance = info.value?.data.parsed.info.tokenAmount.uiAmountString;\n      setter(balance);\n    } catch (e) {\n      console.log(`Unable to determine balance of ${address}`);\n    }\n  }\n};\n\n//If the pool doesn't exist in this app, it's an error.\nexport type SolanaMigratorInformation = {\n  poolAddress: string;\n  fromMint: string;\n  toMint: string;\n  fromMintDecimals: number;\n  fromAssociatedTokenAccountExists: boolean;\n  toAssociatedTokenAccountExists: boolean;\n  setToTokenAccountExists: any;\n  fromAssociatedTokenAccount: string;\n  toAssociatedTokenAccount: string;\n  fromAssociatedTokenAccountBalance: string;\n  toAssociatedTokenAccountBalance: string | null;\n  toCustodyAddress: string;\n  toCustodyBalance: string;\n\n  fromName: string | null;\n  fromSymbol: string | null;\n  fromLogo: string | null;\n  toName: string | null;\n  toSymbol: string | null;\n  toLogo: string | null;\n\n  getNotReadyCause: (amount: string) => string | null;\n\n  migrateTokens: (amount: string) => Promise<string>;\n};\n\n//TODO refactor the workflow page to use this hook\nexport default function useSolanaMigratorInformation(\n  fromMint: string,\n  toMint: string,\n  fromTokenAccount: string\n): DataWrapper<SolanaMigratorInformation> {\n  const connection = useMemo(\n    () => new Connection(SOLANA_HOST, \"confirmed\"),\n    []\n  );\n  const wallet = useSolanaWallet();\n  const { isReady } = useIsWalletReady(CHAIN_ID_SOLANA, false);\n  const solanaTokenMap = useSolanaTokenMap();\n  const metaplexArray = useMemo(() => [fromMint, toMint], [fromMint, toMint]);\n  const metaplexData = useMetaplexData(metaplexArray);\n\n  const [poolAddress, setPoolAddress] = useState(\"\");\n  const [poolExists, setPoolExists] = useState<boolean | undefined>(undefined);\n  const [fromTokenAccountBalance, setFromTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [toTokenAccount, setToTokenAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [toTokenAccountBalance, setToTokenAccountBalance] = useState<\n    string | undefined\n  >(undefined);\n  const [fromMintDecimals, setFromMintDecimals] = useState<number | undefined>(\n    undefined\n  );\n\n  const {\n    associatedAccountExists: fromTokenAccountExists,\n    //setAssociatedAccountExists: setFromTokenAccountExists,\n  } = useAssociatedAccountExistsState(\n    CHAIN_ID_SOLANA,\n    fromMint,\n    fromTokenAccount\n  );\n  const {\n    associatedAccountExists: toTokenAccountExists,\n    setAssociatedAccountExists: setToTokenAccountExists,\n  } = useAssociatedAccountExistsState(CHAIN_ID_SOLANA, toMint, toTokenAccount);\n\n  const [toCustodyAddress, setToCustodyAddress] = useState<string | undefined>(\n    undefined\n  );\n  const [toCustodyBalance, setToCustodyBalance] = useState<string | undefined>(\n    undefined\n  );\n\n  const [error, setError] = useState(\"\");\n\n  /* Effects\n   */\n  useEffect(() => {\n    getDecimals(connection, fromMint, setFromMintDecimals);\n  }, [connection, fromMint]);\n\n  //Retrieve user balance when fromTokenAccount changes\n  useEffect(() => {\n    // TODO: cancellable\n    if (fromTokenAccount && fromTokenAccountExists) {\n      getBalance(connection, fromTokenAccount, setFromTokenAccountBalance);\n    } else {\n      setFromTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    fromTokenAccountExists,\n    fromTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toTokenAccount && toTokenAccountExists) {\n      getBalance(connection, toTokenAccount, setToTokenAccountBalance);\n    } else {\n      setToTokenAccountBalance(undefined);\n    }\n  }, [\n    connection,\n    toTokenAccountExists,\n    toTokenAccount,\n    setFromTokenAccountBalance,\n  ]);\n\n  useEffect(() => {\n    // TODO: cancellable\n    if (toCustodyAddress) {\n      getBalance(connection, toCustodyAddress, setToCustodyBalance);\n    } else {\n      setToCustodyBalance(undefined);\n    }\n  }, [connection, toCustodyAddress, setToCustodyBalance]);\n\n  //Retrieve pool address on selectedTokens change\n  useEffect(() => {\n    if (toMint && fromMint) {\n      setPoolAddress(\"\");\n      setPoolExists(undefined);\n      getPoolAddress(MIGRATION_PROGRAM_ADDRESS, fromMint, toMint).then(\n        (result) => {\n          const key = new PublicKey(result).toString();\n          setPoolAddress(key);\n        },\n        (error) => console.log(\"Could not calculate pool address.\")\n      );\n    }\n  }, [toMint, fromMint, setPoolAddress]);\n\n  //Retrieve the poolAccount every time the pool address changes.\n  useEffect(() => {\n    if (poolAddress) {\n      setPoolExists(undefined);\n      try {\n        getMultipleAccounts(\n          connection,\n          [new PublicKey(poolAddress)],\n          \"confirmed\"\n        ).then((result) => {\n          if (result.length && result[0] !== null) {\n            setPoolExists(true);\n          } else if (result.length && result[0] === null) {\n            setPoolExists(false);\n            setError(\"There is no swap pool for this token.\");\n          } else {\n            setError(\n              \"unexpected error in fetching pool address. Please reload and try again\"\n            );\n          }\n        });\n      } catch (e) {\n        setError(\"Could not fetch pool address\");\n      }\n    }\n  }, [connection, poolAddress]);\n\n  //Set relevant information derived from poolAddress\n  useEffect(() => {\n    if (poolAddress) {\n      getToCustodyAddress(MIGRATION_PROGRAM_ADDRESS, poolAddress)\n        .then((result: any) =>\n          setToCustodyAddress(new PublicKey(result).toString())\n        )\n        .catch((e) => {\n          setToCustodyAddress(undefined);\n        });\n    } else {\n      setToCustodyAddress(undefined);\n    }\n  }, [poolAddress]);\n\n  useEffect(() => {\n    if (wallet && wallet.publicKey && toMint) {\n      Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(toMint),\n        wallet.publicKey || new PublicKey([])\n      ).then(\n        (result) => {\n          setToTokenAccount(result.toString());\n        },\n        (error) => {}\n      );\n    }\n  }, [toMint, wallet]);\n  /*\n      End effects\n      */\n\n  const migrateTokens = useCallback(\n    async (amount) => {\n      const instruction = await migrateTokensTx(\n        connection,\n        wallet.publicKey?.toString() || \"\",\n        MIGRATION_PROGRAM_ADDRESS,\n        fromMint,\n        toMint,\n        fromTokenAccount || \"\",\n        toTokenAccount || \"\",\n        parseUnits(amount, fromMintDecimals).toBigInt()\n      );\n      return await signSendAndConfirm(wallet, connection, instruction);\n    },\n    [\n      connection,\n      fromMint,\n      fromTokenAccount,\n      toMint,\n      toTokenAccount,\n      wallet,\n      fromMintDecimals,\n    ]\n  );\n\n  const fromParse = useCallback(\n    (amount: string) => {\n      try {\n        return parseUnits(amount, fromMintDecimals).toBigInt();\n      } catch (e) {\n        return BigInt(0);\n      }\n    },\n    [fromMintDecimals]\n  );\n\n  const getNotReadyCause = useCallback(\n    (amount: string) => {\n      const hasRequisiteData = fromMint && toMint && poolAddress && poolExists;\n      const accountsReady = fromTokenAccountExists && toTokenAccountExists;\n      const amountGreaterThanZero = fromParse(amount) > BigInt(0);\n      const sufficientFromTokens =\n        fromTokenAccountBalance &&\n        amount &&\n        fromParse(amount) <= fromParse(fromTokenAccountBalance);\n      const sufficientPoolBalance =\n        toCustodyBalance &&\n        amount &&\n        parseFloat(amount) <= parseFloat(toCustodyBalance);\n\n      if (!hasRequisiteData) {\n        return \"This asset is not supported.\";\n      } else if (!isReady) {\n        return \"Wallet is not connected.\";\n      } else if (!accountsReady) {\n        return \"You have not created the necessary token accounts.\";\n      } else if (!amount) {\n        return \"Enter an amount to transfer.\";\n      } else if (!amountGreaterThanZero) {\n        return \"Enter an amount greater than zero.\";\n      } else if (!sufficientFromTokens) {\n        return \"There are not sufficient funds in your wallet for this transfer.\";\n      } else if (!sufficientPoolBalance) {\n        return \"There are not sufficient funds in the pool for this transfer.\";\n      } else {\n        return \"\";\n      }\n    },\n    [\n      fromMint,\n      fromParse,\n      fromTokenAccountBalance,\n      fromTokenAccountExists,\n      isReady,\n      poolAddress,\n      poolExists,\n      toCustodyBalance,\n      toMint,\n      toTokenAccountExists,\n    ]\n  );\n\n  const getMetadata = useCallback(\n    (address: string) => {\n      const tokenMapItem = solanaTokenMap.data?.find(\n        (x) => x.address === address\n      );\n      const metaplexItem = metaplexData.data?.get(address);\n\n      return {\n        symbol: tokenMapItem?.symbol || metaplexItem?.data?.symbol || undefined,\n        name: tokenMapItem?.name || metaplexItem?.data?.name || undefined,\n        logo: tokenMapItem?.logoURI || metaplexItem?.data?.uri || undefined,\n      };\n    },\n    [metaplexData.data, solanaTokenMap.data]\n  );\n\n  const isFetching = solanaTokenMap.isFetching || metaplexData.isFetching; //TODO add loading state on the actual Solana information\n  const hasRequisiteData = !!(\n    fromMintDecimals !== null &&\n    fromMintDecimals !== undefined &&\n    toTokenAccount &&\n    fromTokenAccountBalance &&\n    toCustodyAddress &&\n    toCustodyBalance\n  );\n\n  const output: DataWrapper<SolanaMigratorInformation> = useMemo(() => {\n    let data: SolanaMigratorInformation | null = null;\n    if (hasRequisiteData) {\n      data = {\n        poolAddress,\n        fromMint,\n        toMint,\n        fromMintDecimals,\n        fromAssociatedTokenAccountExists: fromTokenAccountExists,\n        toAssociatedTokenAccountExists: toTokenAccountExists,\n        fromAssociatedTokenAccount: fromTokenAccount,\n        toAssociatedTokenAccount: toTokenAccount,\n        fromAssociatedTokenAccountBalance: fromTokenAccountBalance,\n        toAssociatedTokenAccountBalance: toTokenAccountBalance || null,\n        toCustodyAddress,\n        toCustodyBalance,\n\n        fromName: getMetadata(fromMint)?.name || null,\n        fromSymbol: getMetadata(fromMint)?.symbol || null,\n        fromLogo: getMetadata(fromMint)?.logo || null,\n        toName: getMetadata(toMint)?.name || null,\n        toSymbol: getMetadata(toMint)?.symbol || null,\n        toLogo: getMetadata(toMint)?.logo || null,\n\n        setToTokenAccountExists,\n\n        getNotReadyCause: getNotReadyCause,\n\n        migrateTokens,\n      };\n    }\n\n    return {\n      isFetching: isFetching,\n      error: error || !hasRequisiteData,\n      receivedAt: null,\n      data,\n    };\n  }, [\n    error,\n    isFetching,\n    hasRequisiteData,\n    poolAddress,\n    fromMint,\n    toMint,\n    fromMintDecimals,\n    fromTokenAccountExists,\n    toTokenAccountExists,\n    fromTokenAccount,\n    toTokenAccount,\n    fromTokenAccountBalance,\n    toTokenAccountBalance,\n    toCustodyAddress,\n    toCustodyBalance,\n    getMetadata,\n    getNotReadyCause,\n    migrateTokens,\n    setToTokenAccountExists,\n  ]);\n\n  return output;\n}\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSolanaMigratorInformation from \"../../hooks/useSolanaMigratorInformation\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  CHAINS_BY_ID,\n  getMigrationAssetMap,\n  SOLANA_HOST,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport HeaderText from \"../HeaderText\";\nimport ShowTx from \"../ShowTx\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress from \"../SolanaCreateAssociatedAddress\";\nimport SolanaWalletKey from \"../SolanaWalletKey\";\n\nconst useStyles = makeStyles((theme) => ({\n  spacer: {\n    height: \"2rem\",\n  },\n  containerDiv: {\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  lineItem: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    \"& > *\": {\n      alignSelf: \"flex-start\",\n      width: \"max-content\",\n    },\n  },\n  flexGrow: {\n    flewGrow: 1,\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n  divider: {\n    margin: \"2rem 0rem 2rem 0rem\",\n  },\n  balance: {\n    display: \"inline-block\",\n  },\n  convertButton: {\n    alignSelf: \"flex-end\",\n  },\n}));\n\nfunction SolanaMigrationLineItem({\n  migratorInfo,\n  onLoadComplete,\n}: {\n  migratorInfo: DefaultAssociatedTokenAccountInfo;\n  onLoadComplete: () => void;\n}) {\n  const classes = useStyles();\n  const poolInfo = useSolanaMigratorInformation(\n    migratorInfo.fromMintKey,\n    migratorInfo.toMintKey,\n    migratorInfo.defaultFromTokenAccount\n  );\n\n  const [migrationIsProcessing, setMigrationIsProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(\"\");\n  const [migrationError, setMigrationError] = useState(\"\");\n\n  const handleMigrateClick = useCallback(() => {\n    if (!poolInfo.data) {\n      return;\n    }\n    setMigrationIsProcessing(true);\n    setMigrationError(\"\");\n    poolInfo.data\n      .migrateTokens(poolInfo.data.fromAssociatedTokenAccountBalance)\n      .then((result) => {\n        setMigrationIsProcessing(false);\n        setTransaction(result);\n      })\n      .catch((e) => {\n        setMigrationError(\"Unable to perform migration.\");\n        setMigrationIsProcessing(false);\n      });\n  }, [poolInfo.data]);\n\n  const precheckError =\n    poolInfo.data &&\n    poolInfo.data.getNotReadyCause(\n      poolInfo.data.fromAssociatedTokenAccountBalance\n    );\n\n  useEffect(() => {\n    if (poolInfo.data || poolInfo.error) {\n      onLoadComplete();\n    }\n  }, [poolInfo, onLoadComplete]);\n\n  if (!poolInfo.data) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Failed to load migration information for token\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={migratorInfo.fromMintKey}\n          />\n        </div>\n      </div>\n    );\n  } else if (transaction) {\n    return (\n      <div className={classes.centered}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Successfully migrated your tokens. They will become available once\n            this transaction confirms.\n          </Typography>\n          <ShowTx\n            chainId={CHAIN_ID_SOLANA}\n            tx={{ id: transaction, block: 1 }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.lineItem}>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Current Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.fromAssociatedTokenAccount}\n            symbol={poolInfo.data.fromSymbol || undefined}\n            tokenName={poolInfo.data.fromName || undefined}\n          />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            will become\n          </Typography>\n          <ArrowRightAltIcon fontSize=\"large\" />\n        </div>\n        <div>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Wormhole Token\n          </Typography>\n          <Typography className={classes.balance}>\n            {poolInfo.data.fromAssociatedTokenAccountBalance}\n          </Typography>\n          <SmartAddress\n            chainId={CHAIN_ID_SOLANA}\n            address={poolInfo.data.toAssociatedTokenAccount}\n            symbol={poolInfo.data.toSymbol || undefined}\n            tokenName={poolInfo.data.toName || undefined}\n          />\n        </div>\n        {!poolInfo.data.toAssociatedTokenAccountExists ? (\n          <div className={classes.convertButton}>\n            <SolanaCreateAssociatedAddress\n              mintAddress={migratorInfo.toMintKey}\n              readableTargetAddress={poolInfo.data?.toAssociatedTokenAccount}\n              associatedAccountExists={\n                poolInfo.data.toAssociatedTokenAccountExists\n              }\n              setAssociatedAccountExists={poolInfo.data.setToTokenAccountExists}\n            />\n          </div>\n        ) : (\n          <div className={classes.convertButton}>\n            <ButtonWithLoader\n              showLoader={migrationIsProcessing}\n              onClick={handleMigrateClick}\n              error={\n                poolInfo.error\n                  ? poolInfo.error\n                  : migrationError\n                  ? migrationError\n                  : precheckError\n                  ? precheckError\n                  : \"\"\n              }\n              disabled={\n                !!poolInfo.error || !!precheckError || migrationIsProcessing\n              }\n            >\n              Convert\n            </ButtonWithLoader>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\ntype DefaultAssociatedTokenAccountInfo = {\n  fromMintKey: string;\n  toMintKey: string;\n  defaultFromTokenAccount: string;\n  fromAccountInfo: AccountInfo<ParsedAccountData> | null;\n};\n\nconst getTokenBalances = async (\n  walletAddress: string,\n  migrationMap: Map<string, string>\n): Promise<DefaultAssociatedTokenAccountInfo[]> => {\n  try {\n    const connection = new Connection(SOLANA_HOST);\n    const output: DefaultAssociatedTokenAccountInfo[] = [];\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      new PublicKey(walletAddress),\n      { programId: TOKEN_PROGRAM_ID },\n      \"confirmed\"\n    );\n    tokenAccounts.value.forEach((item) => {\n      if (\n        item.account != null &&\n        item.account.data?.parsed?.info?.tokenAmount?.uiAmountString &&\n        item.account.data?.parsed.info?.tokenAmount?.amount !== \"0\"\n      ) {\n        const fromMintKey = item.account.data.parsed.info.mint;\n        const toMintKey = migrationMap.get(fromMintKey);\n        if (toMintKey) {\n          output.push({\n            fromMintKey,\n            toMintKey: toMintKey,\n            defaultFromTokenAccount: item.pubkey.toString(),\n            fromAccountInfo: item.account,\n          });\n        }\n      }\n    });\n\n    return output;\n  } catch (e) {\n    console.error(e);\n    return Promise.reject(\"Unable to retrieve token balances.\");\n  }\n};\n\nexport default function SolanaQuickMigrate() {\n  const chainId = CHAIN_ID_SOLANA;\n  const classes = useStyles();\n  const { isReady, walletAddress } = useIsWalletReady(chainId);\n  const migrationMap = useMemo(() => getMigrationAssetMap(chainId), [chainId]);\n  const [migrators, setMigrators] = useState<\n    DefaultAssociatedTokenAccountInfo[] | null\n  >(null);\n  const [migratorsError, setMigratorsError] = useState(\"\");\n  const [migratorsLoading, setMigratorsLoading] = useState(false);\n\n  //This is for a callback into the line items, so a loader can be displayed while\n  //they are loading\n  //TODO don't just swallow loading errors.\n  const [migratorsFinishedLoading, setMigratorsFinishedLoading] = useState(0);\n  const reportLoadComplete = useCallback(() => {\n    setMigratorsFinishedLoading((prevState) => prevState + 1);\n  }, []);\n  const isLoading =\n    migratorsLoading ||\n    (migrators &&\n      migrators.length &&\n      migratorsFinishedLoading < migrators.length);\n\n  useEffect(() => {\n    if (isReady && walletAddress) {\n      let cancelled = false;\n      setMigratorsLoading(true);\n      setMigratorsError(\"\");\n      getTokenBalances(walletAddress, migrationMap).then(\n        (result) => {\n          if (!cancelled) {\n            setMigratorsFinishedLoading(0);\n            setMigrators(result.filter((x) => x.fromAccountInfo && x));\n            setMigratorsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setMigratorsLoading(false);\n            setMigratorsError(\n              \"Failed to retrieve available token information.\"\n            );\n          }\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [isReady, walletAddress, migrationMap]);\n\n  const hasEligibleAssets = migrators && migrators.length > 0;\n  const chainName = CHAINS_BY_ID[chainId]?.name;\n\n  const content = (\n    <div className={classes.containerDiv}>\n      <Typography variant=\"h5\">\n        {`This page allows you to convert certain wrapped tokens ${\n          chainName ? \"on \" + chainName : \"\"\n        } into\n        Wormhole V2 tokens.`}\n      </Typography>\n      <SolanaWalletKey />\n      {!isReady ? (\n        <Typography variant=\"body1\">Please connect your wallet.</Typography>\n      ) : migratorsError ? (\n        <Typography variant=\"h6\">{migratorsError}</Typography>\n      ) : (\n        <>\n          <div className={classes.spacer} />\n          <CircularProgress className={isLoading ? \"\" : classes.hidden} />\n          <div className={!isLoading ? \"\" : classes.hidden}>\n            <Typography>\n              {hasEligibleAssets\n                ? \"You have some assets that are eligible for migration! Click the 'Convert' button to swap them for Wormhole tokens.\"\n                : \"You don't have any assets eligible for migration.\"}\n            </Typography>\n            <div className={classes.spacer} />\n            {migrators?.map((info) => {\n              return (\n                <SolanaMigrationLineItem\n                  migratorInfo={info}\n                  onLoadComplete={reportLoadComplete}\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText\n        white\n        subtitle=\"Convert assets from other bridges to Wormhole V2 tokens\"\n      >\n        Migrate Assets\n      </HeaderText>\n      <Paper className={classes.mainPaper}>{content}</Paper>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  isEVMChain,\n  uint8ArrayToHex,\n  WormholeWrappedInfo,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { setSourceWormholeWrappedInfo as setNFTSourceWormholeWrappedInfo } from \"../store/nftSlice\";\nimport {\n  selectNFTIsRecovery,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferIsRecovery,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n} from \"../store/selectors\";\nimport { setSourceWormholeWrappedInfo as setTransferSourceWormholeWrappedInfo } from \"../store/transferSlice\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\n\nexport interface StateSafeWormholeWrappedInfo {\n  isWrapped: boolean;\n  chainId: ChainId;\n  assetAddress: string;\n  tokenId?: string;\n}\n\nconst makeStateSafe = (\n  info: WormholeWrappedInfo\n): StateSafeWormholeWrappedInfo => ({\n  ...info,\n  assetAddress: uint8ArrayToHex(info.assetAddress),\n});\n\n// Check if the tokens in the configured source chain/address are wrapped\n// tokens. Wrapped tokens are tokens that are non-native, I.E, are locked up on\n// a different chain than this one.\nfunction useCheckIfWormholeWrapped(nft?: boolean) {\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceAsset = useSelector(\n    nft ? selectNFTSourceAsset : selectTransferSourceAsset\n  );\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const tokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const setSourceWormholeWrappedInfo = nft\n    ? setNFTSourceWormholeWrappedInfo\n    : setTransferSourceWormholeWrappedInfo;\n  const { provider } = useEthereumProvider();\n  const isRecovery = useSelector(\n    nft ? selectNFTIsRecovery : selectTransferIsRecovery\n  );\n  useEffect(() => {\n    if (isRecovery) {\n      return;\n    }\n    // TODO: loading state, error state\n    let cancelled = false;\n    (async () => {\n      if (isEVMChain(sourceChain) && provider && sourceAsset) {\n        const wrappedInfo = makeStateSafe(\n          await (nft\n            ? getOriginalAssetEthNFT(\n                getNFTBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                tokenId,\n                sourceChain\n              )\n            : getOriginalAssetEth(\n                getTokenBridgeAddressForChain(sourceChain),\n                provider,\n                sourceAsset,\n                sourceChain\n              ))\n        );\n        if (!cancelled) {\n          dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n        }\n      }\n      if (sourceChain === CHAIN_ID_SOLANA && sourceAsset) {\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const wrappedInfo = makeStateSafe(\n            await (nft\n              ? getOriginalAssetSolNFT(\n                  connection,\n                  SOL_NFT_BRIDGE_ADDRESS,\n                  sourceAsset\n                )\n              : getOriginalAssetSol(\n                  connection,\n                  SOL_TOKEN_BRIDGE_ADDRESS,\n                  sourceAsset\n                ))\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n      if (sourceChain === CHAIN_ID_TERRA && sourceAsset) {\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const wrappedInfo = makeStateSafe(\n            await getOriginalAssetTerra(lcd, sourceAsset)\n          );\n          if (!cancelled) {\n            dispatch(setSourceWormholeWrappedInfo(wrappedInfo));\n          }\n        } catch (e) {}\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isRecovery,\n    sourceChain,\n    sourceAsset,\n    provider,\n    nft,\n    setSourceWormholeWrappedInfo,\n    tokenId,\n  ]);\n}\n\nexport default useCheckIfWormholeWrapped;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getForeignAssetEth,\n  getForeignAssetSolana,\n  getForeignAssetTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getForeignAssetEth as getForeignAssetEthNFT,\n  getForeignAssetSol as getForeignAssetSolNFT,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { setTargetAsset as setNFTTargetAsset } from \"../store/nftSlice\";\nimport {\n  selectNFTIsSourceAssetWormholeWrapped,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTTargetChain,\n  selectTransferIsSourceAssetWormholeWrapped,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetAsset as setTransferTargetAsset } from \"../store/transferSlice\";\nimport {\n  getEvmChainId,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\n\nfunction useFetchTargetAsset(nft?: boolean) {\n  const dispatch = useDispatch();\n  const isSourceAssetWormholeWrapped = useSelector(\n    nft\n      ? selectNFTIsSourceAssetWormholeWrapped\n      : selectTransferIsSourceAssetWormholeWrapped\n  );\n  const originChain = useSelector(\n    nft ? selectNFTOriginChain : selectTransferOriginChain\n  );\n  const originAsset = useSelector(\n    nft ? selectNFTOriginAsset : selectTransferOriginAsset\n  );\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const tokenId = originTokenId || \"\"; // this should exist by this step for NFT transfers\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const setTargetAsset = nft ? setNFTTargetAsset : setTransferTargetAsset;\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const correctEvmNetwork = getEvmChainId(targetChain);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n  const [lastSuccessfulArgs, setLastSuccessfulArgs] = useState<{\n    isSourceAssetWormholeWrapped: boolean | undefined;\n    originChain: ChainId | undefined;\n    originAsset: string | undefined;\n    targetChain: ChainId;\n    nft?: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsMatchLastSuccess =\n    !!lastSuccessfulArgs &&\n    lastSuccessfulArgs.isSourceAssetWormholeWrapped ===\n      isSourceAssetWormholeWrapped &&\n    lastSuccessfulArgs.originChain === originChain &&\n    lastSuccessfulArgs.originAsset === originAsset &&\n    lastSuccessfulArgs.targetChain === targetChain &&\n    lastSuccessfulArgs.nft === nft &&\n    lastSuccessfulArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () =>\n      setLastSuccessfulArgs({\n        isSourceAssetWormholeWrapped,\n        originChain,\n        originAsset,\n        targetChain,\n        nft,\n        tokenId,\n      }),\n    [\n      isSourceAssetWormholeWrapped,\n      originChain,\n      originAsset,\n      targetChain,\n      nft,\n      tokenId,\n    ]\n  );\n  useEffect(() => {\n    if (argsMatchLastSuccess) {\n      return;\n    }\n    setLastSuccessfulArgs(null);\n    if (isSourceAssetWormholeWrapped && originChain === targetChain) {\n      dispatch(\n        setTargetAsset(\n          receiveDataWrapper({\n            doesExist: true,\n            address: hexToNativeString(originAsset, originChain) || null,\n          })\n        )\n      );\n      setArgs();\n      return;\n    }\n    let cancelled = false;\n    (async () => {\n      if (\n        isEVMChain(targetChain) &&\n        provider &&\n        hasCorrectEvmNetwork &&\n        originChain &&\n        originAsset\n      ) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const asset = await (nft\n            ? getForeignAssetEthNFT(\n                getNFTBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              )\n            : getForeignAssetEth(\n                getTokenBridgeAddressForChain(targetChain),\n                provider,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({\n                  doesExist: asset !== ethers.constants.AddressZero,\n                  address: asset,\n                })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_SOLANA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const connection = new Connection(SOLANA_HOST, \"confirmed\");\n          const asset = await (nft\n            ? getForeignAssetSolNFT(\n                SOL_NFT_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset),\n                arrayify(BigNumber.from(tokenId || \"0\"))\n              )\n            : getForeignAssetSolana(\n                connection,\n                SOL_TOKEN_BRIDGE_ADDRESS,\n                originChain,\n                hexToUint8Array(originAsset)\n              ));\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n      if (targetChain === CHAIN_ID_TERRA && originChain && originAsset) {\n        dispatch(setTargetAsset(fetchDataWrapper()));\n        try {\n          const lcd = new LCDClient(TERRA_HOST);\n          const asset = await getForeignAssetTerra(\n            TERRA_TOKEN_BRIDGE_ADDRESS,\n            lcd,\n            originChain,\n            hexToUint8Array(originAsset)\n          );\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                receiveDataWrapper({ doesExist: !!asset, address: asset })\n              )\n            );\n            setArgs();\n          }\n        } catch (e) {\n          if (!cancelled) {\n            dispatch(\n              setTargetAsset(\n                errorDataWrapper(\n                  \"Unable to determine existence of wrapped asset\"\n                )\n              )\n            );\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    isSourceAssetWormholeWrapped,\n    originChain,\n    originAsset,\n    targetChain,\n    provider,\n    nft,\n    setTargetAsset,\n    tokenId,\n    hasCorrectEvmNetwork,\n    argsMatchLastSuccess,\n    setArgs,\n  ]);\n}\n\nexport default useFetchTargetAsset;\n","import { makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport numeral from \"numeral\";\nimport { useEffect, useState } from \"react\";\nimport { SOLANA_HOST } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport default function SolanaTPSWarning() {\n  const classes = useStyles();\n  const [tps, setTps] = useState<number | null>(null);\n  useEffect(() => {\n    let cancelled = false;\n    let interval = setInterval(() => {\n      (async () => {\n        try {\n          const connection = new Connection(SOLANA_HOST);\n          const samples = await connection.getRecentPerformanceSamples(1);\n          if (samples.length >= 1) {\n            let short = samples\n              .filter((sample) => sample.numTransactions !== 0)\n              .map(\n                (sample) => sample.numTransactions / sample.samplePeriodSecs\n              );\n            const avgTps = short[0];\n            if (!cancelled) {\n              setTps(avgTps);\n            }\n          }\n        } catch (e) {}\n      })();\n    }, 5000);\n    return () => {\n      cancelled = true;\n      clearInterval(interval);\n    };\n  }, []);\n  return tps !== null && tps < 1500 ? (\n    <Alert\n      variant=\"outlined\"\n      severity=\"warning\"\n      className={classes.alert}\n    >{`WARNING! The Solana Transactions Per Second (TPS) is below 1500. This is a sign of network congestion. Proceed with caution as you may have difficulty submitting transactions and the guardians may have difficulty witnessing them (this could lead to processing delays). Current TPS: ${numeral(\n      tps\n    ).format(\"0,0\")}`}</Alert>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginBottom: theme.spacing(4),\n  },\n}));\n\nexport default function StepDescription({\n  children,\n}: {\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <Typography component=\"div\" variant=\"body2\" className={classes.description}>\n      {children}\n    </Typography>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTIsRedeeming,\n  selectNFTIsSending,\n  selectNFTRedeemTx,\n  selectNFTSourceChain,\n  selectNFTTargetChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport { WAITING_FOR_WALLET_AND_CONF } from \"../Transfer/WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  message: {\n    color: theme.palette.warning.light,\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function WaitingForWalletMessage() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const isSending = useSelector(selectNFTIsSending);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const showWarning = (isSending && !transferTx) || (isRedeeming && !redeemTx);\n  return showWarning ? (\n    <Typography className={classes.message} variant=\"body2\">\n      {WAITING_FOR_WALLET_AND_CONF}{\" \"}\n      {targetChain === CHAIN_ID_SOLANA && isRedeeming\n        ? \"Note: there will be several transactions\"\n        : isEVMChain(sourceChain) && isSending\n        ? \"Note: there will be two transactions\"\n        : null}\n    </Typography>\n  ) : null;\n}\n","import { CHAIN_ID_SOLANA, CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTRedeem } from \"../../hooks/useHandleNFTRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { selectNFTTargetChain } from \"../../store/selectors\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Redeem() {\n  const { handleClick, disabled, showLoader } = useHandleNFTRedeem();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  return (\n    <>\n      <StepDescription>Receive the NFT on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      {targetChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      {targetChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={!isReady || disabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n    </>\n  );\n}\n\nexport default Redeem;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectNFTRedeemTx, selectNFTTargetChain } from \"../../store/selectors\";\nimport { reset } from \"../../store/nftSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const redeemTx = useSelector(selectNFTRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The NFT will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer Another NFT!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  transferFromEth,\n  transferFromSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { BigNumber, Signer } from \"ethers\";\nimport { arrayify, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTSourceAsset,\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectNFTTargetChain,\n} from \"../store/selectors\";\nimport {\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTTargetAddressHex from \"./useNFTTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  tokenId: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const receipt = await transferFromEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      tokenAddress,\n      tokenId,\n      recipientChain,\n      recipientAddress\n    );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getNFTBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  originAddressStr?: string,\n  originChain?: ChainId,\n  originTokenId?: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const transaction = await transferFromSolana(\n      connection,\n      SOL_BRIDGE_ADDRESS,\n      SOL_NFT_BRIDGE_ADDRESS,\n      payerAddress,\n      fromAddress,\n      mintAddress,\n      targetAddress,\n      targetChain,\n      originAddress,\n      originChain,\n      arrayify(BigNumber.from(originTokenId || \"0\"))\n    );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleNFTTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceAsset = useSelector(selectNFTSourceAsset);\n  const nftSourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenId = nftSourceParsedTokenAccount?.tokenId || \"\"; // this should exist by this step for NFT transfers\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useNFTTargetAddressHex();\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      !!sourceTokenId &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        sourceTokenId,\n        targetChain,\n        targetAddress,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        targetChain,\n        targetAddress,\n        originAsset,\n        originChain,\n        originTokenId\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    sourceTokenPublicKey,\n    sourceAsset,\n    sourceTokenId,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    originTokenId,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTTargetAddressHex() {\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import { CHAIN_ID_SOLANA, CHAIN_ID_TERRA } from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { useHandleNFTTransfer } from \"../../hooks/useHandleNFTTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectNFTSourceWalletAddress,\n  selectNFTSourceChain,\n  selectNFTTargetError,\n  selectNFTTransferTx,\n  selectNFTIsSendComplete,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleNFTTransfer();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const error = useSelector(selectNFTTargetError);\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectNFTSourceWalletAddress);\n  const transferTx = useSelector(selectNFTTransferTx);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const isDisabled = !isReady || isWrongWallet || disabled;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || undefined;\n  return (\n    <>\n      <StepDescription>\n        Transfer the NFT to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={isDisabled}\n        onClick={handleClick}\n        showLoader={showLoader}\n        error={errorMessage}\n      >\n        Transfer\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const transferTx = useSelector(selectNFTTransferTx);\n\n  const explainerString = \"The NFT has been sent!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/bnb.d8c61230.svg\";","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isEVMChain,\n  WSOL_ADDRESS,\n  WSOL_DECIMALS,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  errorSourceParsedTokenAccounts as errorSourceParsedTokenAccountsNFT,\n  fetchSourceParsedTokenAccounts as fetchSourceParsedTokenAccountsNFT,\n  NFTParsedTokenAccount,\n  receiveSourceParsedTokenAccounts as receiveSourceParsedTokenAccountsNFT,\n  setSourceParsedTokenAccount as setSourceParsedTokenAccountNFT,\n  setSourceParsedTokenAccounts as setSourceParsedTokenAccountsNFT,\n  setSourceWalletAddress as setSourceWalletAddressNFT,\n} from \"../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccounts,\n  selectNFTSourceWalletAddress,\n  selectSourceWalletAddress,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccounts,\n} from \"../store/selectors\";\nimport {\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  ParsedTokenAccount,\n  receiveSourceParsedTokenAccounts,\n  setAmount,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  setSourceWalletAddress,\n} from \"../store/transferSlice\";\nimport {\n  COVALENT_GET_TOKENS_URL,\n  logoOverrides,\n  ROPSTEN_WETH_ADDRESS,\n  ROPSTEN_WETH_DECIMALS,\n  SOLANA_HOST,\n  WAVAX_ADDRESS,\n  WAVAX_DECIMALS,\n  WBNB_ADDRESS,\n  WBNB_DECIMALS,\n  WETH_ADDRESS,\n  WETH_DECIMALS,\n  WMATIC_ADDRESS,\n  WMATIC_DECIMALS,\n  WROSE_ADDRESS,\n  WROSE_DECIMALS,\n} from \"../utils/consts\";\nimport {\n  ExtractedMintInfo,\n  extractMintInfo,\n  getMultipleAccountsRPC,\n} from \"../utils/solana\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bnbIcon from \"../icons/bnb.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\n\nexport function createParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  symbol?: string,\n  name?: string,\n  logo?: string,\n  isNativeAsset?: boolean\n): ParsedTokenAccount {\n  return {\n    publicKey: publicKey,\n    mintKey: mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    symbol,\n    name,\n    logo,\n    isNativeAsset,\n  };\n}\n\nexport function createNFTParsedTokenAccount(\n  publicKey: string,\n  mintKey: string,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n  uiAmountString: string,\n  tokenId: string,\n  symbol?: string,\n  name?: string,\n  uri?: string,\n  animation_url?: string,\n  external_url?: string,\n  image?: string,\n  image_256?: string,\n  nftName?: string,\n  description?: string\n): NFTParsedTokenAccount {\n  return {\n    publicKey,\n    mintKey,\n    amount,\n    decimals,\n    uiAmount,\n    uiAmountString,\n    tokenId,\n    uri,\n    animation_url,\n    external_url,\n    image,\n    image_256,\n    symbol,\n    name,\n    nftName,\n    description,\n  };\n}\n\nconst createParsedTokenAccountFromInfo = (\n  pubkey: PublicKey,\n  item: AccountInfo<ParsedAccountData>\n): ParsedTokenAccount => {\n  return {\n    publicKey: pubkey?.toString(),\n    mintKey: item.data.parsed?.info?.mint?.toString(),\n    amount: item.data.parsed?.info?.tokenAmount?.amount,\n    decimals: item.data.parsed?.info?.tokenAmount?.decimals,\n    uiAmount: item.data.parsed?.info?.tokenAmount?.uiAmount,\n    uiAmountString: item.data.parsed?.info?.tokenAmount?.uiAmountString,\n  };\n};\n\nconst createParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData\n): ParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: covalent.balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(formatUnits(covalent.balance, covalent.contract_decimals)),\n    uiAmountString: formatUnits(covalent.balance, covalent.contract_decimals),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: logoOverrides.get(covalent.contract_address) || covalent.logo_url,\n  };\n};\n\nconst createNativeSolParsedTokenAccount = async (\n  connection: Connection,\n  walletAddress: string\n) => {\n  // const walletAddress = \"H69q3Q8E74xm7swmMQpsJLVp2Q9JuBwBbxraAMX5Drzm\" // known solana mainnet wallet with tokens\n  const fetchAccounts = await getMultipleAccountsRPC(connection, [\n    new PublicKey(walletAddress),\n  ]);\n  if (!fetchAccounts || !fetchAccounts.length || !fetchAccounts[0]) {\n    return null;\n  } else {\n    return createParsedTokenAccount(\n      walletAddress, //publicKey\n      WSOL_ADDRESS, //Mint key\n      fetchAccounts[0].lamports.toString(), //amount\n      WSOL_DECIMALS, //decimals, 9\n      parseFloat(formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS)),\n      formatUnits(fetchAccounts[0].lamports, WSOL_DECIMALS).toString(),\n      \"SOL\",\n      \"Solana\",\n      undefined, //TODO logo. It's in the solana token map, so we could potentially use that URL.\n      true\n    );\n  }\n};\n\nconst createNativeEthParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeEthRopstenParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          ROPSTEN_WETH_ADDRESS, //Mint key, On the other side this will be WETH, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          ROPSTEN_WETH_DECIMALS, //Luckily both ETH and WETH have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ETH\", //A white lie for display purposes\n          \"Ethereum\", //A white lie for display purposes\n          ethIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeBscParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WBNB_ADDRESS, //Mint key, On the other side this will be WBNB, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WBNB_DECIMALS, //Luckily both BNB and WBNB have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"BNB\", //A white lie for display purposes\n          \"Binance Coin\", //A white lie for display purposes\n          bnbIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativePolygonParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WMATIC_ADDRESS, //Mint key, On the other side this will be WMATIC, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WMATIC_DECIMALS, //Luckily both MATIC and WMATIC have 18 decimals, so this should not be an issue.\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"MATIC\", //A white lie for display purposes\n          \"Matic\", //A white lie for display purposes\n          polygonIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeAvaxParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WAVAX_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WAVAX_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"AVAX\", //A white lie for display purposes\n          \"Avalanche\", //A white lie for display purposes\n          avaxIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNativeOasisParsedTokenAccount = (\n  provider: Provider,\n  signerAddress: string | undefined\n) => {\n  return !(provider && signerAddress)\n    ? Promise.reject()\n    : provider.getBalance(signerAddress).then((balanceInWei) => {\n        const balanceInEth = ethers.utils.formatEther(balanceInWei);\n        return createParsedTokenAccount(\n          signerAddress, //public key\n          WROSE_ADDRESS, //Mint key, On the other side this will be wavax, so this is hopefully a white lie.\n          balanceInWei.toString(), //amount, in wei\n          WROSE_DECIMALS,\n          parseFloat(balanceInEth), //This loses precision, but is a limitation of the current datamodel. This field is essentially deprecated\n          balanceInEth.toString(), //This is the actual display field, which has full precision.\n          \"ROSE\", //A white lie for display purposes\n          \"Rose\", //A white lie for display purposes\n          oasisIcon,\n          true //isNativeAsset\n        );\n      });\n};\n\nconst createNFTParsedTokenAccountFromCovalent = (\n  walletAddress: string,\n  covalent: CovalentData,\n  nft_data: CovalentNFTData\n): NFTParsedTokenAccount => {\n  return {\n    publicKey: walletAddress,\n    mintKey: covalent.contract_address,\n    amount: nft_data.token_balance,\n    decimals: covalent.contract_decimals,\n    uiAmount: Number(\n      formatUnits(nft_data.token_balance, covalent.contract_decimals)\n    ),\n    uiAmountString: formatUnits(\n      nft_data.token_balance,\n      covalent.contract_decimals\n    ),\n    symbol: covalent.contract_ticker_symbol,\n    name: covalent.contract_name,\n    logo: covalent.logo_url,\n    tokenId: nft_data.token_id,\n    uri: nft_data.token_url,\n    animation_url: nft_data.external_data.animation_url,\n    external_url: nft_data.external_data.external_url,\n    image: nft_data.external_data.image,\n    image_256: nft_data.external_data.image_256,\n    nftName: nft_data.external_data.name,\n    description: nft_data.external_data.description,\n  };\n};\n\nexport type CovalentData = {\n  contract_decimals: number;\n  contract_ticker_symbol: string;\n  contract_name: string;\n  contract_address: string;\n  logo_url: string | undefined;\n  balance: string;\n  quote: number | undefined;\n  quote_rate: number | undefined;\n  nft_data?: CovalentNFTData[];\n};\n\nexport type CovalentNFTExternalData = {\n  animation_url: string | null;\n  external_url: string | null;\n  image: string;\n  image_256: string;\n  name: string;\n  description: string;\n};\n\nexport type CovalentNFTData = {\n  token_id: string;\n  token_balance: string;\n  external_data: CovalentNFTExternalData;\n  token_url: string;\n};\n\nconst getEthereumAccountsCovalent = async (\n  walletAddress: string,\n  nft: boolean,\n  chainId: ChainId\n): Promise<CovalentData[]> => {\n  const url = COVALENT_GET_TOKENS_URL(chainId, walletAddress, nft);\n\n  try {\n    const output = [] as CovalentData[];\n    const response = await axios.get(url);\n    const tokens = response.data.data.items;\n\n    if (tokens instanceof Array && tokens.length) {\n      for (const item of tokens) {\n        // TODO: filter?\n        if (\n          item.contract_decimals !== undefined &&\n          item.contract_address &&\n          item.balance &&\n          item.balance !== \"0\" &&\n          (nft\n            ? item.supports_erc?.includes(\"erc721\")\n            : item.supports_erc?.includes(\"erc20\"))\n        ) {\n          output.push({ ...item } as CovalentData);\n        }\n      }\n    }\n\n    return output;\n  } catch (error) {\n    return Promise.reject(\"Unable to retrieve your Ethereum Tokens.\");\n  }\n};\n\nconst getSolanaParsedTokenAccounts = async (\n  walletAddress: string,\n  dispatch: Dispatch,\n  nft: boolean\n) => {\n  const connection = new Connection(SOLANA_HOST, \"confirmed\");\n  dispatch(\n    nft ? fetchSourceParsedTokenAccountsNFT() : fetchSourceParsedTokenAccounts()\n  );\n  try {\n    //No matter what, we retrieve the spl tokens associated to this address.\n    let splParsedTokenAccounts = await connection\n      .getParsedTokenAccountsByOwner(new PublicKey(walletAddress), {\n        programId: new PublicKey(TOKEN_PROGRAM_ID),\n      })\n      .then((result) => {\n        return result.value.map((item) =>\n          createParsedTokenAccountFromInfo(item.pubkey, item.account)\n        );\n      });\n\n    // uncomment to test token account in picker, useful for debugging\n    // splParsedTokenAccounts.push({\n    //   amount: \"1\",\n    //   decimals: 8,\n    //   mintKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   publicKey: \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n    //   uiAmount: 1,\n    //   uiAmountString: \"1\",\n    //   isNativeAsset: false,\n    // });\n\n    if (nft) {\n      //In the case of NFTs, we are done, and we set the accounts in redux\n      dispatch(receiveSourceParsedTokenAccountsNFT(splParsedTokenAccounts));\n    } else {\n      //In the transfer case, we also pull the SOL balance of the wallet, and prepend it at the beginning of the list.\n      const nativeAccount = await createNativeSolParsedTokenAccount(\n        connection,\n        walletAddress\n      );\n      if (nativeAccount !== null) {\n        splParsedTokenAccounts.unshift(nativeAccount);\n      }\n      dispatch(receiveSourceParsedTokenAccounts(splParsedTokenAccounts));\n    }\n  } catch (e) {\n    console.error(e);\n    dispatch(\n      nft\n        ? errorSourceParsedTokenAccountsNFT(\"Failed to load NFT metadata\")\n        : errorSourceParsedTokenAccounts(\"Failed to load token metadata.\")\n    );\n  }\n};\n\n/**\n * Fetches the balance of an asset for the connected wallet\n * This should handle every type of chain in the future, but only reads the Transfer state.\n */\nfunction useGetAvailableTokens(nft: boolean = false) {\n  const dispatch = useDispatch();\n\n  const tokenAccounts = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccounts\n      : selectTransferSourceParsedTokenAccounts\n  );\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { provider, signerAddress } = useEthereumProvider();\n\n  const [covalent, setCovalent] = useState<any>(undefined);\n  const [covalentLoading, setCovalentLoading] = useState(false);\n  const [covalentError, setCovalentError] = useState<string | undefined>(\n    undefined\n  );\n\n  const [ethNativeAccount, setEthNativeAccount] = useState<any>(undefined);\n  const [ethNativeAccountLoading, setEthNativeAccountLoading] = useState(false);\n  const [ethNativeAccountError, setEthNativeAccountError] = useState<\n    string | undefined\n  >(undefined);\n\n  const [solanaMintAccounts, setSolanaMintAccounts] = useState<\n    Map<string, ExtractedMintInfo | null> | undefined\n  >(undefined);\n  const [solanaMintAccountsLoading, setSolanaMintAccountsLoading] =\n    useState(false);\n  const [solanaMintAccountsError, setSolanaMintAccountsError] = useState<\n    string | undefined\n  >(undefined);\n\n  const selectedSourceWalletAddress = useSelector(\n    nft ? selectNFTSourceWalletAddress : selectSourceWalletAddress\n  );\n  const currentSourceWalletAddress: string | undefined = isEVMChain(lookupChain)\n    ? signerAddress\n    : lookupChain === CHAIN_ID_SOLANA\n    ? solPK?.toString()\n    : undefined;\n\n  const resetSourceAccounts = useCallback(() => {\n    dispatch(\n      nft\n        ? setSourceWalletAddressNFT(undefined)\n        : setSourceWalletAddress(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountNFT(undefined)\n        : setSourceParsedTokenAccount(undefined)\n    );\n    dispatch(\n      nft\n        ? setSourceParsedTokenAccountsNFT(undefined)\n        : setSourceParsedTokenAccounts(undefined)\n    );\n    !nft && dispatch(setAmount(\"\"));\n    setCovalent(undefined); //These need to be included in the reset because they have balances on them.\n    setCovalentLoading(false);\n    setCovalentError(\"\");\n\n    setEthNativeAccount(undefined);\n    setEthNativeAccountLoading(false);\n    setEthNativeAccountError(\"\");\n  }, [setCovalent, dispatch, nft]);\n\n  //TODO this useEffect could be somewhere else in the codebase\n  //It resets the SourceParsedTokens accounts when the wallet changes\n  useEffect(() => {\n    if (\n      selectedSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== undefined &&\n      currentSourceWalletAddress !== selectedSourceWalletAddress\n    ) {\n      resetSourceAccounts();\n      return;\n    } else {\n    }\n  }, [\n    selectedSourceWalletAddress,\n    currentSourceWalletAddress,\n    dispatch,\n    resetSourceAccounts,\n  ]);\n\n  //Solana accountinfos load\n  useEffect(() => {\n    if (lookupChain === CHAIN_ID_SOLANA && solPK) {\n      if (\n        !(tokenAccounts.data || tokenAccounts.isFetching || tokenAccounts.error)\n      ) {\n        getSolanaParsedTokenAccounts(solPK.toString(), dispatch, nft);\n      }\n    }\n\n    return () => {};\n  }, [dispatch, solanaWallet, lookupChain, solPK, tokenAccounts, nft]);\n\n  //Solana Mint Accounts lookup\n  useEffect(() => {\n    if (lookupChain !== CHAIN_ID_SOLANA || !tokenAccounts.data?.length) {\n      return () => {};\n    }\n\n    let cancelled = false;\n    setSolanaMintAccountsLoading(true);\n    setSolanaMintAccountsError(undefined);\n    const mintAddresses = tokenAccounts.data.map((x) => x.mintKey);\n    //This is a known wormhole v1 token on testnet\n    // mintAddresses.push(\"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\");\n    //SOLT devnet token\n    // mintAddresses.push(\"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\");\n    // bad monkey \"NFT\"\n    // mintAddresses.push(\"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\");\n    // degenerate monkey NFT\n    // mintAddresses.push(\"EzYsbigNNGbNuANRJ3mnnyJYU2Bk7mBYVsxuonUwAX7r\");\n\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    getMultipleAccountsRPC(\n      connection,\n      mintAddresses.map((x) => new PublicKey(x))\n    ).then(\n      (results) => {\n        if (!cancelled) {\n          const output = new Map<string, ExtractedMintInfo | null>();\n\n          results.forEach((result, index) =>\n            output.set(\n              mintAddresses[index],\n              (result && extractMintInfo(result)) || null\n            )\n          );\n\n          setSolanaMintAccounts(output);\n          setSolanaMintAccountsLoading(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setSolanaMintAccounts(undefined);\n          setSolanaMintAccountsLoading(false);\n          setSolanaMintAccountsError(\n            \"Could not retrieve Solana mint accounts.\"\n          );\n        }\n      }\n    );\n\n    return () => (cancelled = true);\n  }, [tokenAccounts.data, lookupChain]);\n\n  //Ethereum native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETH &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum (Ropsten) native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeEthRopstenParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your ETH balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Binance Smart Chain native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_BSC &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeBscParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your BNB balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Polygon native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_POLYGON &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativePolygonParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your MATIC balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //TODO refactor all these into an isEVM effect\n  //avax native asset load\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_AVAX &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeAvaxParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your AVAX balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (\n      signerAddress &&\n      lookupChain === CHAIN_ID_OASIS &&\n      !ethNativeAccount &&\n      !nft\n    ) {\n      setEthNativeAccountLoading(true);\n      createNativeOasisParsedTokenAccount(provider, signerAddress).then(\n        (result) => {\n          console.log(\"create native account returned with value\", result);\n          if (!cancelled) {\n            setEthNativeAccount(result);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"\");\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthNativeAccount(undefined);\n            setEthNativeAccountLoading(false);\n            setEthNativeAccountError(\"Unable to retrieve your Oasis balance.\");\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [lookupChain, provider, signerAddress, nft, ethNativeAccount]);\n\n  //Ethereum covalent accounts load\n  useEffect(() => {\n    //const testWallet = \"0xf60c2ea62edbfe808163751dd0d8693dcb30019c\";\n    // const nftTestWallet1 = \"0x3f304c6721f35ff9af00fd32650c8e0a982180ab\";\n    // const nftTestWallet2 = \"0x98ed231428088eb440e8edb5cc8d66dcf913b86e\";\n    // const nftTestWallet3 = \"0xb1fadf677a7e9b90e9d4f31c8ffb3dc18c138c6f\";\n    // const nftBscTestWallet1 = \"0x5f464a652bd1991df0be37979b93b3306d64a909\";\n    let cancelled = false;\n    const walletAddress = signerAddress;\n    if (walletAddress && isEVMChain(lookupChain) && !covalent) {\n      //TODO less cancel\n      !cancelled && setCovalentLoading(true);\n      !cancelled &&\n        dispatch(\n          nft\n            ? fetchSourceParsedTokenAccountsNFT()\n            : fetchSourceParsedTokenAccounts()\n        );\n      getEthereumAccountsCovalent(walletAddress, nft, lookupChain).then(\n        (accounts) => {\n          !cancelled && setCovalentLoading(false);\n          !cancelled && setCovalentError(undefined);\n          !cancelled && setCovalent(accounts);\n          !cancelled &&\n            dispatch(\n              nft\n                ? receiveSourceParsedTokenAccountsNFT(\n                    accounts.reduce((arr, current) => {\n                      if (current.nft_data) {\n                        current.nft_data.forEach((x) =>\n                          arr.push(\n                            createNFTParsedTokenAccountFromCovalent(\n                              walletAddress,\n                              current,\n                              x\n                            )\n                          )\n                        );\n                      }\n                      return arr;\n                    }, [] as NFTParsedTokenAccount[])\n                  )\n                : receiveSourceParsedTokenAccounts(\n                    accounts.map((x) =>\n                      createParsedTokenAccountFromCovalent(walletAddress, x)\n                    )\n                  )\n            );\n        },\n        () => {\n          !cancelled &&\n            dispatch(\n              nft\n                ? errorSourceParsedTokenAccountsNFT(\n                    \"Cannot load your Ethereum NFTs at the moment.\"\n                  )\n                : errorSourceParsedTokenAccounts(\n                    \"Cannot load your Ethereum tokens at the moment.\"\n                  )\n            );\n          !cancelled &&\n            setCovalentError(\"Cannot load your Ethereum tokens at the moment.\");\n          !cancelled && setCovalentLoading(false);\n        }\n      );\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [lookupChain, provider, signerAddress, dispatch, nft, covalent]);\n\n  //Terra accounts load\n  //At present, we don't have any mechanism for doing this.\n  useEffect(() => {}, []);\n\n  const ethAccounts = useMemo(() => {\n    const output = { ...tokenAccounts };\n    output.data = output.data?.slice() || [];\n    output.isFetching = output.isFetching || ethNativeAccountLoading;\n    output.error = output.error || ethNativeAccountError;\n    ethNativeAccount && output.data && output.data.unshift(ethNativeAccount);\n    return output;\n  }, [\n    ethNativeAccount,\n    ethNativeAccountLoading,\n    ethNativeAccountError,\n    tokenAccounts,\n  ]);\n\n  return lookupChain === CHAIN_ID_SOLANA\n    ? {\n        tokenAccounts: tokenAccounts,\n        mintAccounts: {\n          data: solanaMintAccounts,\n          isFetching: solanaMintAccountsLoading,\n          error: solanaMintAccountsError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : isEVMChain(lookupChain)\n    ? {\n        tokenAccounts: ethAccounts,\n        covalent: {\n          data: covalent,\n          isFetching: covalentLoading,\n          error: covalentError,\n          receivedAt: null, //TODO\n        },\n        resetAccounts: resetSourceAccounts,\n      }\n    : lookupChain === CHAIN_ID_TERRA\n    ? {\n        resetAccounts: resetSourceAccounts,\n      }\n    : undefined;\n}\n\nexport default useGetAvailableTokens;\n","import {\n  NFTImplementation,\n  NFTImplementation__factory,\n  TokenImplementation,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { arrayify, formatUnits } from \"ethers/lib/utils\";\nimport {\n  createNFTParsedTokenAccount,\n  createParsedTokenAccount,\n} from \"../hooks/useGetSourceParsedTokenAccounts\";\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumToken(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = TokenImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function ethTokenToParsedTokenAccount(\n  token: TokenImplementation,\n  signerAddress: string\n) {\n  const decimals = await token.decimals();\n  const balance = await token.balanceOf(signerAddress);\n  const symbol = await token.symbol();\n  const name = await token.name();\n  return createParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    symbol,\n    name\n  );\n}\n\n//This is a valuable intermediate step to the parsed token account, as the token has metadata information on it.\nexport async function getEthereumNFT(\n  tokenAddress: string,\n  provider: ethers.providers.Web3Provider\n) {\n  const token = NFTImplementation__factory.connect(tokenAddress, provider);\n  return token;\n}\n\nexport async function isNFT(token: NFTImplementation) {\n  const erc721 = \"0x80ac58cd\";\n  const erc721metadata = \"0x5b5e139f\";\n  const supportsErc721 = await token.supportsInterface(arrayify(erc721));\n  const supportsErc721Metadata = await token.supportsInterface(\n    arrayify(erc721metadata)\n  );\n  return supportsErc721 && supportsErc721Metadata;\n}\n\nexport async function ethNFTToNFTParsedTokenAccount(\n  token: NFTImplementation,\n  tokenId: string,\n  signerAddress: string\n) {\n  const decimals = 0;\n  const balance = (await token.ownerOf(tokenId)) === signerAddress ? 1 : 0;\n  const symbol = await token.symbol();\n  const name = await token.name();\n  const uri = await token.tokenURI(tokenId);\n  return createNFTParsedTokenAccount(\n    signerAddress,\n    token.address,\n    balance.toString(),\n    decimals,\n    Number(formatUnits(balance, decimals)),\n    formatUnits(balance, decimals),\n    tokenId,\n    symbol,\n    name,\n    uri\n  );\n}\n\nexport function isValidEthereumAddress(address: string) {\n  return ethers.utils.isAddress(address);\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectMarketsMap } from \"../store/selectors\";\nimport {\n  errorMarketsMap,\n  fetchMarketsMap,\n  receiveMarketsMap,\n} from \"../store/tokenSlice\";\nimport { FEATURED_MARKETS_JSON_URL } from \"../utils/consts\";\n\nexport type MarketsMap = {\n  markets?: {\n    [index: string]: {\n      name: string;\n      link: string;\n    };\n  };\n  tokens?: {\n    [key in ChainId]?: {\n      [index: string]: {\n        symbol: string;\n        logo: string;\n      };\n    };\n  };\n  tokenMarkets?: {\n    [key in ChainId]?: {\n      [key in ChainId]?: {\n        [index: string]: {\n          symbol: string;\n          logo: string;\n          markets: string[];\n        };\n      };\n    };\n  };\n};\n\nconst useMarketsMap = (shouldFire: boolean): DataWrapper<MarketsMap> => {\n  const marketsMap = useSelector(selectMarketsMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (marketsMap.data === undefined ||\n      (marketsMap.data === null && !marketsMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getMarketsMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return marketsMap;\n};\n\nconst getMarketsMap = (dispatch: Dispatch) => {\n  dispatch(fetchMarketsMap());\n  axios.get(FEATURED_MARKETS_JSON_URL).then(\n    (response) => {\n      dispatch(receiveMarketsMap(response.data as MarketsMap));\n    },\n    (error) => {\n      dispatch(errorMarketsMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useMarketsMap;\n","export default __webpack_public_path__ + \"static/media/wormhole-network.5bb90ed1.svg\";","import {\n  Avatar,\n  Card,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport clsx from \"clsx\";\nimport {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_OASIS,\n} from \"@certusone/wormhole-sdk\";\nimport SmartAddress from \"../SmartAddress\";\nimport avaxIcon from \"../../icons/avax.svg\";\nimport bscIcon from \"../../icons/bsc.svg\";\nimport ethIcon from \"../../icons/eth.svg\";\nimport solanaIcon from \"../../icons/solana.svg\";\nimport polygonIcon from \"../../icons/polygon.svg\";\nimport oasisIcon from \"../../icons/oasis-network-rose-logo.svg\";\nimport useCopyToClipboard from \"../../hooks/useCopyToClipboard\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Wormhole from \"../../icons/wormhole-network.svg\";\n\nconst safeIPFS = (uri: string) =>\n  uri.startsWith(\"ipfs://ipfs/\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/\")\n    : uri.startsWith(\"ipfs://\")\n    ? uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\n    : uri.startsWith(\"https://cloudflare-ipfs.com/ipfs/\") // no CORS support?\n    ? uri.replace(\"https://cloudflare-ipfs.com/ipfs/\", \"https://ipfs.io/ipfs/\")\n    : uri;\n\nconst LogoIcon = ({ chainId }: { chainId: ChainId }) =>\n  chainId === CHAIN_ID_SOLANA ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"4px\",\n      }}\n      src={solanaIcon}\n      alt=\"Solana\"\n    />\n  ) : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN ? (\n    <Avatar\n      style={{\n        backgroundColor: \"white\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n      }}\n      src={ethIcon}\n      alt=\"Ethereum\"\n    />\n  ) : chainId === CHAIN_ID_BSC ? (\n    <Avatar\n      style={{\n        backgroundColor: \"rgb(20, 21, 26)\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"2px\",\n      }}\n      src={bscIcon}\n      alt=\"Binance Smart Chain\"\n    />\n  ) : chainId === CHAIN_ID_POLYGON ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={polygonIcon}\n      alt=\"Polygon\"\n    />\n  ) : chainId === CHAIN_ID_AVAX ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={avaxIcon}\n      alt=\"Avalanche\"\n    />\n  ) : chainId === CHAIN_ID_OASIS ? (\n    <Avatar\n      style={{\n        backgroundColor: \"black\",\n        height: \"1em\",\n        width: \"1em\",\n        marginLeft: \"4px\",\n        padding: \"3px\",\n      }}\n      src={oasisIcon}\n      alt=\"Oasis\"\n    />\n  ) : null;\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    borderRadius: 9,\n    maxWidth: \"100%\",\n    width: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: 8,\n    position: \"relative\",\n    zIndex: 1,\n    transition: \"background-position 1s, transform 0.25s\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n      transform: \"scale(1.25)\",\n    },\n    backgroundSize: \"200% auto\",\n    backgroundColor: \"#ffb347\",\n    background:\n      \"linear-gradient(to right, #ffb347 0%, #ffcc33  51%, #ffb347  100%)\",\n  },\n  silverBorder: {\n    backgroundColor: \"#D9D8D6\",\n    backgroundSize: \"200% auto\",\n    background:\n      \"linear-gradient(to bottom right, #757F9A 0%, #D7DDE8  51%, #757F9A  100%)\",\n    \"&:hover\": {\n      backgroundPosition: \"right center\",\n    },\n  },\n  cardInset: {},\n  textContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    display: \"flex\",\n  },\n  detailsContent: {\n    background: \"transparent\",\n    paddingTop: 4,\n    paddingBottom: 2,\n    \"&:last-child\": {\n      //override rule\n      paddingBottom: 2,\n    },\n  },\n  title: {\n    flex: 1,\n  },\n  description: {\n    padding: theme.spacing(0.5, 0, 1),\n  },\n  tokenId: {\n    fontSize: \"8px\",\n  },\n  mediaContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"transparent\",\n    margin: theme.spacing(0, 2),\n    \"& > img, & > video\": {\n      border: \"1px solid #ffb347\",\n    },\n  },\n  silverMediaBorder: {\n    \"& > img, & > video\": {\n      borderColor: \"#D7DDE8\",\n    },\n  },\n  // thanks https://cssgradient.io/ and https://htmlcolorcodes.com/color-picker/\n  eth: {\n    // colors from https://en.wikipedia.org/wiki/Ethereum#/media/File:Ethereum-icon-purple.svg\n    backgroundColor: \"rgb(69,74,117)\",\n    background:\n      \"linear-gradient(160deg, rgba(69,74,117,1) 0%, rgba(138,146,178,1) 33%, rgba(69,74,117,1) 66%, rgba(98,104,143,1) 100%)\",\n  },\n  bsc: {\n    // color from binance background rgb(20, 21, 26), 2 and 1 tint lighter\n    backgroundColor: \"#F0B90B\",\n    background:\n      \"linear-gradient(160deg, rgb(20, 21, 26) 0%, #4A4D57 33%, rgb(20, 21, 26) 66%, #2C2F3B 100%)\",\n  },\n  polygon: {\n    // color from polygon logo #8247E5 down to 30 lightness\n    backgroundColor: \"#0F0323\",\n    background:\n      \"linear-gradient(160deg, #0F0323 0%, #250957 33%, #0F0323 66%, #0F0323 100%)\",\n  },\n  solana: {\n    // colors from https://solana.com/branding/new/exchange/exchange-sq-black.svg\n    backgroundColor: \"rgb(153,69,255)\",\n    background:\n      \"linear-gradient(45deg, rgba(153,69,255,1) 0%, rgba(121,98,231,1) 20%, rgba(0,209,140,1) 100%)\",\n  },\n  hidden: {\n    display: \"none\",\n  },\n  skeleton: {\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    borderRadius: 9,\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"absolute\",\n  },\n  wormholeIcon: {\n    height: 48,\n    width: 48,\n    filter: \"contrast(0)\",\n    transition: \"filter 0.5s\",\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    zIndex: 10,\n  },\n  wormholePositioner: {\n    display: \"grid\",\n    placeItems: \"center\",\n    position: \"relative\",\n    height: \"500px\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    margin: `${theme.spacing(1)}px auto`,\n  },\n}));\n\nconst ViewerLoader = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.wormholePositioner}>\n      <Skeleton variant=\"rect\" animation=\"wave\" className={classes.skeleton} />\n      <img src={Wormhole} alt=\"Wormhole\" className={classes.wormholeIcon} />\n    </div>\n  );\n};\n\nexport default function NFTViewer({\n  value,\n  chainId,\n}: {\n  value: NFTParsedTokenAccount;\n  chainId: ChainId;\n}) {\n  const uri = safeIPFS(value.uri || \"\");\n  const [metadata, setMetadata] = useState({\n    uri,\n    image: value.image,\n    animation_url: value.animation_url,\n    nftName: value.nftName,\n    description: value.description,\n    isLoading: !!uri,\n  });\n  const [isMediaLoading, setIsMediaLoading] = useState(false);\n  const onLoad = useCallback(() => {\n    setIsMediaLoading(false);\n  }, []);\n  const isLoading = isMediaLoading || metadata.isLoading;\n  useEffect(() => {\n    setMetadata((m) =>\n      m.uri === uri\n        ? m\n        : {\n            uri,\n            image: value.image,\n            animation_url: value.animation_url,\n            nftName: value.nftName,\n            description: value.description,\n            isLoading: !!uri,\n          }\n    );\n  }, [value, uri]);\n  useEffect(() => {\n    if (uri) {\n      let cancelled = false;\n      (async () => {\n        try {\n          const result = await axios.get(uri);\n          if (!cancelled && result && result.data) {\n            // support returns with nested data (e.g. {status: 10000, result: {data: {...}}})\n            const data = result.data.result?.data || result.data;\n            setMetadata({\n              uri,\n              image:\n                data.image ||\n                data.image_url ||\n                data.big_image ||\n                data.small_image,\n              animation_url: data.animation_url,\n              nftName: data.name,\n              description: data.description,\n              isLoading: false,\n            });\n          } else if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        } catch (e) {\n          if (!cancelled) {\n            setMetadata((m) => ({ ...m, isLoading: false }));\n          }\n        }\n      })();\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [uri]);\n\n  const classes = useStyles();\n  const animLower = metadata.animation_url?.toLowerCase();\n  // const has3DModel = animLower?.endsWith('gltf') || animLower?.endsWith('glb')\n  const hasVideo =\n    !animLower?.startsWith(\"ipfs://\") && // cloudflare ipfs doesn't support streaming video\n    (animLower?.endsWith(\"webm\") ||\n      animLower?.endsWith(\"mp4\") ||\n      animLower?.endsWith(\"mov\") ||\n      animLower?.endsWith(\"m4v\") ||\n      animLower?.endsWith(\"ogv\") ||\n      animLower?.endsWith(\"ogg\"));\n  const hasAudio =\n    animLower?.endsWith(\"mp3\") ||\n    animLower?.endsWith(\"flac\") ||\n    animLower?.endsWith(\"wav\") ||\n    animLower?.endsWith(\"oga\");\n  const hasImage = metadata.image;\n  const copyTokenId = useCopyToClipboard(value.tokenId || \"\");\n  const videoSrc = hasVideo && safeIPFS(metadata.animation_url || \"\");\n  const imageSrc = hasImage && safeIPFS(metadata.image || \"\");\n  const audioSrc = hasAudio && safeIPFS(metadata.animation_url || \"\");\n\n  //set loading when the media src changes\n  useLayoutEffect(() => {\n    if (videoSrc || imageSrc || audioSrc) {\n      setIsMediaLoading(true);\n    } else {\n      setIsMediaLoading(false);\n    }\n  }, [videoSrc, imageSrc, audioSrc]);\n\n  const image = (\n    <img\n      src={imageSrc}\n      alt={metadata.nftName || \"\"}\n      style={{ maxWidth: \"100%\" }}\n      onLoad={onLoad}\n      onError={onLoad}\n    />\n  );\n  const media = (\n    <>\n      {hasVideo ? (\n        <video\n          autoPlay\n          controls\n          loop\n          style={{ maxWidth: \"100%\" }}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        >\n          <source src={videoSrc || \"\"} />\n          {image}\n        </video>\n      ) : hasImage ? (\n        image\n      ) : null}\n      {hasAudio ? (\n        <audio\n          controls\n          src={audioSrc || \"\"}\n          onLoadedData={onLoad}\n          onError={onLoad}\n        />\n      ) : null}\n    </>\n  );\n\n  return (\n    <>\n      <div className={!isLoading ? classes.hidden : \"\"}>\n        <ViewerLoader />\n      </div>\n      <Card\n        className={clsx(classes.card, {\n          [classes.silverBorder]:\n            chainId === CHAIN_ID_SOLANA ||\n            chainId === CHAIN_ID_POLYGON ||\n            chainId === CHAIN_ID_AVAX,\n          [classes.hidden]: isLoading,\n        })}\n        elevation={10}\n      >\n        <div\n          className={clsx(classes.cardInset, {\n            [classes.eth]:\n              chainId === CHAIN_ID_ETH ||\n              chainId === CHAIN_ID_ETHEREUM_ROPSTEN ||\n              chainId === CHAIN_ID_AVAX || //TODO: give avax it's own bg\n              chainId === CHAIN_ID_OASIS, //TODO: give oasis it's own bg\n            [classes.bsc]: chainId === CHAIN_ID_BSC,\n            [classes.solana]: chainId === CHAIN_ID_SOLANA,\n            [classes.polygon]: chainId === CHAIN_ID_POLYGON,\n          })}\n        >\n          <CardContent className={classes.textContent}>\n            {metadata.nftName ? (\n              <Typography className={classes.title}>\n                {metadata.nftName}\n              </Typography>\n            ) : (\n              <div className={classes.title} />\n            )}\n            <SmartAddress\n              chainId={chainId}\n              parsedTokenAccount={value}\n              noGutter\n              noUnderline\n            />\n            <LogoIcon chainId={chainId} />\n          </CardContent>\n          <CardMedia\n            className={clsx(classes.mediaContent, {\n              [classes.silverMediaBorder]:\n                chainId === CHAIN_ID_SOLANA ||\n                chainId === CHAIN_ID_POLYGON ||\n                chainId === CHAIN_ID_OASIS ||\n                chainId === CHAIN_ID_AVAX,\n            })}\n          >\n            {media}\n          </CardMedia>\n          <CardContent className={classes.detailsContent}>\n            {metadata.description ? (\n              <Typography variant=\"body2\" className={classes.description}>\n                {metadata.description}\n              </Typography>\n            ) : null}\n            {value.tokenId ? (\n              <Typography className={classes.tokenId} align=\"right\">\n                <Tooltip title=\"Copy\" arrow>\n                  <span onClick={copyTokenId}>\n                    {value.tokenId.length > 18\n                      ? `#${value.tokenId.substr(0, 16)}...`\n                      : `#${value.tokenId}`}\n                  </span>\n                </Tooltip>\n              </Typography>\n            ) : null}\n          </CardContent>\n        </div>\n      </Card>\n    </>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  Button,\n  CircularProgress,\n  createStyles,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  makeStyles,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { InfoOutlined, Launch } from \"@material-ui/icons\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { AVAILABLE_MARKETS_URL, CHAINS_BY_ID } from \"../../utils/consts\";\nimport { shortenAddress } from \"../../utils/solana\";\nimport NFTViewer from \"./NFTViewer\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    alignCenter: {\n      textAlign: \"center\",\n    },\n    optionContainer: {\n      padding: 0,\n    },\n    optionContent: {\n      padding: theme.spacing(1),\n    },\n    tokenList: {\n      maxHeight: theme.spacing(80), //TODO smarter\n      height: theme.spacing(80),\n      overflow: \"auto\",\n    },\n    dialogContent: {\n      overflowX: \"hidden\",\n    },\n    selectionButtonContainer: {\n      //display: \"flex\",\n      textAlign: \"center\",\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    selectionButton: {\n      maxWidth: \"100%\",\n      width: theme.breakpoints.values.sm,\n    },\n    tokenOverviewContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      \"& div\": {\n        margin: theme.spacing(1),\n        flexBasis: \"25%\",\n        \"&$tokenImageContainer\": {\n          maxWidth: 40,\n        },\n        \"&$tokenMarketsList\": {\n          marginTop: theme.spacing(-0.5),\n          marginLeft: 0,\n          flexBasis: \"100%\",\n        },\n        \"&:last-child\": {\n          textAlign: \"right\",\n        },\n        flexShrink: 1,\n      },\n      flexWrap: \"wrap\",\n    },\n    tokenImageContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: 40,\n    },\n    tokenImage: {\n      maxHeight: \"2.5rem\", //Eyeballing this based off the text size\n    },\n    tokenMarketsList: {\n      order: 1,\n      textAlign: \"left\",\n      width: \"100%\",\n      \"& > .MuiButton-root\": {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n      },\n    },\n    migrationAlert: {\n      width: \"100%\",\n      \"& .MuiAlert-message\": {\n        width: \"100%\",\n      },\n    },\n    flexTitle: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n    grower: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport const balancePretty = (uiString: string) => {\n  const numberString = uiString.split(\".\")[0];\n  const bignum = BigNumber.from(numberString);\n  if (bignum.gte(1000000)) {\n    return numberString.substring(0, numberString.length - 6) + \" M\";\n  } else if (uiString.length > 8) {\n    return uiString.substr(0, 8);\n  } else {\n    return uiString;\n  }\n};\n\nconst noClickThrough = (e: any) => {\n  e.stopPropagation();\n};\n\nexport const BasicAccountRender = (\n  account: MarketParsedTokenAccount,\n  isMigrationEligible: (address: string) => boolean,\n  nft: boolean,\n  displayBalance?: (account: NFTParsedTokenAccount) => boolean\n) => {\n  const { data: marketsData } = useMarketsMap(false);\n  const classes = useStyles();\n  const mintPrettyString = shortenAddress(account.mintKey);\n  const uri = nft ? account.image_256 : account.logo || account.uri;\n  const symbol = account.symbol || \"Unknown\";\n  const name = account.name || \"Unknown\";\n  const tokenId = account.tokenId;\n  const shouldDisplayBalance = !displayBalance || displayBalance(account);\n\n  const nftContent = (\n    <div className={classes.tokenOverviewContainer}>\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography>{symbol}</Typography>\n        <Typography>{name}</Typography>\n      </div>\n      <div>\n        <Typography>{mintPrettyString}</Typography>\n        <Typography style={{ wordBreak: \"break-all\" }}>{tokenId}</Typography>\n      </div>\n    </div>\n  );\n\n  const tokenContent = (\n    <div className={classes.tokenOverviewContainer}>\n      {account.markets ? (\n        <div className={classes.tokenMarketsList}>\n          {account.markets.map((market) =>\n            marketsData?.markets?.[market] ? (\n              <Button\n                key={market}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<Launch />}\n                href={marketsData.markets[market].link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={noClickThrough}\n              >\n                {marketsData.markets[market].name}\n              </Button>\n            ) : null\n          )}\n        </div>\n      ) : null}\n      <div className={classes.tokenImageContainer}>\n        {uri && <img alt=\"\" className={classes.tokenImage} src={uri} />}\n      </div>\n      <div>\n        <Typography variant=\"subtitle1\">{symbol}</Typography>\n      </div>\n      <div>\n        {\n          <Typography variant=\"body1\">\n            {account.isNativeAsset ? \"Native\" : mintPrettyString}\n          </Typography>\n        }\n      </div>\n      <div>\n        {shouldDisplayBalance ? (\n          <>\n            <Typography variant=\"body2\">{\"Balance\"}</Typography>\n            <Typography variant=\"h6\">\n              {balancePretty(account.uiAmountString)}\n            </Typography>\n          </>\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n\n  const migrationRender = (\n    <div className={classes.migrationAlert}>\n      <Alert severity=\"warning\">\n        <Typography variant=\"body2\">\n          This is a legacy asset eligible for migration.\n        </Typography>\n        <div>{tokenContent}</div>\n      </Alert>\n    </div>\n  );\n\n  return nft\n    ? nftContent\n    : isMigrationEligible(account.mintKey)\n    ? migrationRender\n    : tokenContent;\n};\n\ninterface MarketParsedTokenAccount extends NFTParsedTokenAccount {\n  markets?: string[];\n}\n\nexport default function TokenPicker({\n  value,\n  options,\n  RenderOption,\n  onChange,\n  isValidAddress,\n  getAddress,\n  disabled,\n  resetAccounts,\n  nft,\n  chainId,\n  error,\n  showLoader,\n  useTokenId,\n}: {\n  value: NFTParsedTokenAccount | null;\n  options: NFTParsedTokenAccount[];\n  RenderOption: ({\n    account,\n  }: {\n    account: NFTParsedTokenAccount;\n  }) => JSX.Element;\n  onChange: (newValue: NFTParsedTokenAccount | null) => Promise<void>;\n  isValidAddress?: (address: string) => boolean;\n  getAddress?: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount>;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  nft: boolean;\n  chainId: ChainId;\n  error?: string;\n  showLoader?: boolean;\n  useTokenId?: boolean;\n}) {\n  const classes = useStyles();\n  const [holderString, setHolderString] = useState(\"\");\n  const [tokenIdHolderString, setTokenIdHolderString] = useState(\"\");\n  const [loadingError, setLoadingError] = useState(\"\");\n  const [isLocalLoading, setLocalLoading] = useState(false);\n  const [dialogIsOpen, setDialogIsOpen] = useState(false);\n  const [selectionError, setSelectionError] = useState(\"\");\n\n  const targetChain = useSelector(selectTransferTargetChain);\n  const { data: marketsData } = useMarketsMap(true);\n\n  const openDialog = useCallback(() => {\n    setHolderString(\"\");\n    setSelectionError(\"\");\n    setDialogIsOpen(true);\n  }, []);\n\n  const closeDialog = useCallback(() => {\n    setDialogIsOpen(false);\n  }, []);\n\n  const handleSelectOption = useCallback(\n    async (option: NFTParsedTokenAccount) => {\n      setSelectionError(\"\");\n      let newOption = null;\n      try {\n        //Covalent balances tend to be stale, so we make an attempt to correct it at selection time.\n        if (getAddress && !option.isNativeAsset) {\n          newOption = await getAddress(option.mintKey, option.tokenId);\n          newOption = {\n            ...option,\n            ...newOption,\n            // keep logo and uri from covalent / market list / etc (otherwise would be overwritten by undefined)\n            logo: option.logo || newOption.logo,\n            uri: option.uri || newOption.uri,\n          } as NFTParsedTokenAccount;\n        } else {\n          newOption = option;\n        }\n        await onChange(newOption);\n        closeDialog();\n      } catch (e: any) {\n        if (e.message?.includes(\"v1\")) {\n          setSelectionError(e.message);\n        } else {\n          setSelectionError(\n            \"Unable to retrieve required information about this token. Ensure your wallet is connected, then refresh the list.\"\n          );\n        }\n      }\n    },\n    [getAddress, onChange, closeDialog]\n  );\n\n  const resetAccountsWrapper = useCallback(() => {\n    setHolderString(\"\");\n    setTokenIdHolderString(\"\");\n    setSelectionError(\"\");\n    resetAccounts && resetAccounts();\n  }, [resetAccounts]);\n\n  const searchFilter = useCallback(\n    (option: NFTParsedTokenAccount) => {\n      if (!holderString) {\n        return true;\n      }\n      const optionString = (\n        (option.publicKey || \"\") +\n        \" \" +\n        (option.mintKey || \"\") +\n        \" \" +\n        (option.symbol || \"\") +\n        \" \" +\n        (option.name || \" \")\n      ).toLowerCase();\n      const searchString = holderString.toLowerCase();\n      return optionString.includes(searchString);\n    },\n    [holderString]\n  );\n\n  const marketChainTokens = marketsData?.tokens?.[chainId];\n  const featuredMarkets = marketsData?.tokenMarkets?.[chainId]?.[targetChain];\n\n  const featuredOptions = useMemo(() => {\n    // only tokens have featured markets\n    if (!nft && featuredMarkets) {\n      const ownedMarketTokens = options\n        .filter(\n          (option: NFTParsedTokenAccount) => featuredMarkets?.[option.mintKey]\n        )\n        .map(\n          (option) =>\n            ({\n              ...option,\n              markets: featuredMarkets[option.mintKey].markets,\n            } as MarketParsedTokenAccount)\n        );\n      return [\n        ...ownedMarketTokens,\n        ...Object.keys(featuredMarkets)\n          .filter(\n            (mintKey) =>\n              !ownedMarketTokens.find((option) => option.mintKey === mintKey)\n          )\n          .map(\n            (mintKey) =>\n              ({\n                amount: \"0\",\n                decimals: 0,\n                markets: featuredMarkets[mintKey].markets,\n                mintKey,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\", // if we can't look up by address, we can select the market that isn't in the list of holdings, but can't proceed since the balance will be 0\n                symbol: marketChainTokens?.[mintKey]?.symbol,\n                logo: marketChainTokens?.[mintKey]?.logo,\n              } as MarketParsedTokenAccount)\n          ),\n      ].filter(searchFilter);\n    }\n    return [];\n  }, [nft, marketChainTokens, featuredMarkets, options, searchFilter]);\n\n  const nonFeaturedOptions = useMemo(() => {\n    return options.filter(\n      (option: NFTParsedTokenAccount) =>\n        searchFilter(option) &&\n        // only tokens have featured markets\n        (nft || !featuredMarkets?.[option.mintKey])\n    );\n  }, [nft, options, featuredMarkets, searchFilter]);\n\n  const localFind = useCallback(\n    (address: string, tokenIdHolderString: string) => {\n      return options.find(\n        (x) =>\n          x.mintKey === address &&\n          (!tokenIdHolderString || x.tokenId === tokenIdHolderString)\n      );\n    },\n    [options]\n  );\n\n  //This is the effect which allows pasting an address in directly\n  useEffect(() => {\n    if (!isValidAddress || !getAddress) {\n      return;\n    }\n    if (useTokenId && !tokenIdHolderString) {\n      return;\n    }\n    setLoadingError(\"\");\n    let cancelled = false;\n    if (isValidAddress(holderString)) {\n      const option = localFind(holderString, tokenIdHolderString);\n      if (option) {\n        handleSelectOption(option);\n        return () => {\n          cancelled = true;\n        };\n      }\n      setLocalLoading(true);\n      setLoadingError(\"\");\n      getAddress(\n        holderString,\n        useTokenId ? tokenIdHolderString : undefined\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            if (result) {\n              handleSelectOption(result);\n            }\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setLocalLoading(false);\n            setLoadingError(\"Could not find the specified address.\");\n          }\n        }\n      );\n    }\n    return () => (cancelled = true);\n  }, [\n    holderString,\n    isValidAddress,\n    getAddress,\n    handleSelectOption,\n    localFind,\n    tokenIdHolderString,\n    useTokenId,\n  ]);\n\n  //TODO reset button\n  //TODO debounce & save hotloaded options as an option before automatically selecting\n  //TODO sigfigs function on the balance strings\n\n  const localLoader = (\n    <div className={classes.alignCenter}>\n      <CircularProgress />\n      <Typography variant=\"body2\">\n        {showLoader ? \"Loading available tokens\" : \"Searching for results\"}\n      </Typography>\n    </div>\n  );\n\n  const displayLocalError = (\n    <div className={classes.alignCenter}>\n      <Typography variant=\"body2\" color=\"error\">\n        {loadingError || selectionError}\n      </Typography>\n    </div>\n  );\n\n  const dialog = (\n    <Dialog\n      onClose={closeDialog}\n      aria-labelledby=\"simple-dialog-title\"\n      open={dialogIsOpen}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle>\n        <div id=\"simple-dialog-title\" className={classes.flexTitle}>\n          <Typography variant=\"h5\">Select a token</Typography>\n          <div className={classes.grower} />\n          <Tooltip title=\"Reload tokens\">\n            <IconButton onClick={resetAccountsWrapper}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        <Alert severity=\"info\">\n          You should always check for markets and liquidity before sending\n          tokens.{\" \"}\n          <Link\n            href={AVAILABLE_MARKETS_URL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Click here to see available markets for wrapped tokens.\n          </Link>\n        </Alert>\n        <TextField\n          variant=\"outlined\"\n          label=\"Search name or paste address\"\n          value={holderString}\n          onChange={(event) => setHolderString(event.target.value)}\n          fullWidth\n          margin=\"normal\"\n        />\n        {useTokenId ? (\n          <TextField\n            variant=\"outlined\"\n            label=\"Token Id\"\n            value={tokenIdHolderString}\n            onChange={(event) => setTokenIdHolderString(event.target.value)}\n            fullWidth\n            margin=\"normal\"\n          />\n        ) : null}\n        {isLocalLoading || showLoader ? (\n          localLoader\n        ) : loadingError || selectionError ? (\n          displayLocalError\n        ) : (\n          <List component=\"div\" className={classes.tokenList}>\n            {featuredOptions.length ? (\n              <>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Featured {CHAINS_BY_ID[chainId].name} &gt;{\" \"}\n                  {CHAINS_BY_ID[targetChain].name} markets{\" \"}\n                  <Tooltip\n                    title={`Markets for these ${CHAINS_BY_ID[chainId].name} tokens exist for the corresponding tokens on ${CHAINS_BY_ID[targetChain].name}`}\n                  >\n                    <InfoOutlined\n                      fontSize=\"small\"\n                      style={{ verticalAlign: \"text-bottom\" }}\n                    />\n                  </Tooltip>\n                </Typography>\n                {featuredOptions.map((option) => {\n                  return (\n                    <ListItem\n                      component=\"div\"\n                      button\n                      onClick={() => handleSelectOption(option)}\n                      key={\n                        option.publicKey +\n                        option.mintKey +\n                        (option.tokenId || \"\")\n                      }\n                    >\n                      <RenderOption account={option} />\n                    </ListItem>\n                  );\n                })}\n                {nonFeaturedOptions.length ? (\n                  <>\n                    <Divider style={{ marginTop: 8, marginBottom: 16 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Other Assets\n                    </Typography>\n                  </>\n                ) : null}\n              </>\n            ) : null}\n            {nonFeaturedOptions.map((option) => {\n              return (\n                <ListItem\n                  component=\"div\"\n                  button\n                  onClick={() => handleSelectOption(option)}\n                  key={\n                    option.publicKey + option.mintKey + (option.tokenId || \"\")\n                  }\n                >\n                  <RenderOption account={option} />\n                </ListItem>\n              );\n            })}\n            {featuredOptions.length || nonFeaturedOptions.length ? null : (\n              <div className={classes.alignCenter}>\n                <Typography>No results found</Typography>\n              </div>\n            )}\n          </List>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n\n  const selectionChip = (\n    <div className={classes.selectionButtonContainer}>\n      <Button\n        onClick={openDialog}\n        disabled={disabled}\n        variant=\"outlined\"\n        startIcon={<KeyboardArrowDownIcon />}\n        className={classes.selectionButton}\n      >\n        {value ? (\n          <RenderOption account={value} />\n        ) : (\n          <Typography color=\"textSecondary\">Select a token</Typography>\n        )}\n      </Button>\n    </div>\n  );\n\n  return (\n    <>\n      {dialog}\n      {value && nft ? <NFTViewer value={value} chainId={chainId} /> : null}\n      {selectionChip}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  NFTImplementation,\n  TokenImplementation,\n} from \"@certusone/wormhole-sdk\";\nimport { WormholeAbi__factory } from \"@certusone/wormhole-sdk/lib/esm/ethers-contracts/abi\";\nimport { getAddress as getEthAddress } from \"@ethersproject/address\";\nimport React, { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  getMigrationAssetMap,\n  WORMHOLE_V1_ETH_ADDRESS,\n} from \"../../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  ethTokenToParsedTokenAccount,\n  getEthereumNFT,\n  getEthereumToken,\n  isValidEthereumAddress,\n} from \"../../utils/ethereum\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\nconst isWormholev1 = (provider: any, address: string, chainId: ChainId) => {\n  if (chainId !== CHAIN_ID_ETH) {\n    return Promise.resolve(false);\n  }\n  const connection = WormholeAbi__factory.connect(\n    WORMHOLE_V1_ETH_ADDRESS,\n    provider\n  );\n  return connection.isWrappedAsset(address);\n};\n\ntype EthereumSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n  chainId: ChainId;\n  nft?: boolean;\n};\n\nexport default function EvmTokenPicker(\n  props: EthereumSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    tokenAccounts,\n    disabled,\n    resetAccounts,\n    chainId,\n    nft,\n  } = props;\n  const { provider, signerAddress } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(chainId);\n  const selectedTokenAccount: NFTParsedTokenAccount | undefined = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n\n  const shouldDisplayBalance = useCallback(\n    (tokenAccount: NFTParsedTokenAccount) => {\n      const selectedMintMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.mintKey.toLowerCase() ===\n          tokenAccount.mintKey.toLowerCase();\n      //added just in case we start displaying NFT balances again.\n      const selectedTokenIdMatch =\n        selectedTokenAccount &&\n        selectedTokenAccount.tokenId === tokenAccount.tokenId;\n      return !!(\n        tokenAccount.isNativeAsset || //The native asset amount isn't taken from covalent, so can be trusted.\n        (selectedMintMatch && selectedTokenIdMatch)\n      );\n    },\n    [selectedTokenAccount]\n  );\n\n  const isMigrationEligible = useCallback(\n    (address: string) => {\n      const assetMap = getMigrationAssetMap(chainId);\n      return !!assetMap.get(getEthAddress(address));\n    },\n    [chainId]\n  );\n\n  const getAddress: (\n    address: string,\n    tokenId?: string\n  ) => Promise<NFTParsedTokenAccount> = useCallback(\n    async (address: string, tokenId?: string) => {\n      if (provider && signerAddress && isReady) {\n        try {\n          const tokenAccount = await (nft\n            ? getEthereumNFT(address, provider)\n            : getEthereumToken(address, provider));\n          if (!tokenAccount) {\n            return Promise.reject(\"Could not find the specified token.\");\n          }\n          if (nft && !tokenId) {\n            return Promise.reject(\"Token ID is required.\");\n          } else if (nft && tokenId) {\n            return ethNFTToNFTParsedTokenAccount(\n              tokenAccount as NFTImplementation,\n              tokenId,\n              signerAddress\n            );\n          } else {\n            return ethTokenToParsedTokenAccount(\n              tokenAccount as TokenImplementation,\n              signerAddress\n            );\n          }\n        } catch (e) {\n          return Promise.reject(\"Unable to retrive the specific token.\");\n        }\n      } else {\n        return Promise.reject({ error: \"Wallet is not connected.\" });\n      }\n    },\n    [isReady, nft, provider, signerAddress]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      let v1 = false;\n      try {\n        v1 = await isWormholev1(provider, account.mintKey, chainId);\n      } catch (e) {\n        //For now, just swallow this one.\n      }\n      const migration = isMigrationEligible(account.mintKey);\n      if (v1 === true && !migration) {\n        throw new Error(\n          \"Wormhole v1 assets cannot be transferred with this bridge.\"\n        );\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [chainId, onChange, provider, isMigrationEligible]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(\n        account,\n        isMigrationEligible,\n        nft || false,\n        shouldDisplayBalance\n      );\n    },\n    [nft, isMigrationEligible, shouldDisplayBalance]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={tokenAccounts?.data || []}\n      RenderOption={RenderComp}\n      useTokenId={nft}\n      onChange={onChangeWrapper}\n      isValidAddress={isValidEthereumAddress}\n      getAddress={getAddress}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={tokenAccounts?.isFetching}\n      nft={nft || false}\n      chainId={chainId}\n    />\n  );\n}\n","import {\n  createStyles,\n  IconButton,\n  makeStyles,\n  Tooltip,\n} from \"@material-ui/core\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    inlineContentWrapper: {\n      display: \"inline-block\",\n      flexGrow: 1,\n    },\n    flexWrapper: {\n      \"& > *\": {\n        margin: \".5rem\",\n      },\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  })\n);\n\nexport default function RefreshButtonWrapper({\n  children,\n  callback,\n}: {\n  children: JSX.Element;\n  callback: () => any;\n}) {\n  const classes = useStyles();\n\n  const refreshWrapper = (\n    <div className={classes.flexWrapper}>\n      <div className={classes.inlineContentWrapper}>{children}</div>\n      <Tooltip title=\"Reload Tokens\">\n        <IconButton onClick={callback}>\n          <RefreshIcon />\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n\n  return refreshWrapper;\n}\n","import { ParsedTokenAccount } from \"../store/transferSlice\";\n\nexport const sortParsedTokenAccounts = (\n  a: ParsedTokenAccount,\n  b: ParsedTokenAccount\n) =>\n  a.isNativeAsset && !b.isNativeAsset\n    ? -1\n    : !a.isNativeAsset && b.isNativeAsset\n    ? 1\n    : a.symbol && b.symbol\n    ? a.symbol.localeCompare(b.symbol)\n    : a.symbol\n    ? -1\n    : b.symbol\n    ? 1\n    : 0;\n","import { CHAIN_ID_SOLANA } from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport useMetaplexData from \"../../hooks/useMetaplexData\";\nimport useSolanaTokenMap from \"../../hooks/useSolanaTokenMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { selectTransferTargetChain } from \"../../store/selectors\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport {\n  MIGRATION_ASSET_MAP,\n  WORMHOLE_V1_MINT_AUTHORITY,\n} from \"../../utils/consts\";\nimport { ExtractedMintInfo } from \"../../utils/solana\";\nimport { sortParsedTokenAccounts } from \"../../utils/sort\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype SolanaSourceTokenSelectorProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: NFTParsedTokenAccount | null) => void;\n  accounts: DataWrapper<NFTParsedTokenAccount[]> | null | undefined;\n  disabled: boolean;\n  mintAccounts:\n    | DataWrapper<Map<string, ExtractedMintInfo | null> | undefined>\n    | undefined;\n  resetAccounts: (() => void) | undefined;\n  nft?: boolean;\n};\n\nconst isMigrationEligible = (address: string) => {\n  return !!MIGRATION_ASSET_MAP.get(address);\n};\n\nexport default function SolanaSourceTokenSelector(\n  props: SolanaSourceTokenSelectorProps\n) {\n  const {\n    value,\n    onChange,\n    disabled,\n    resetAccounts,\n    nft,\n    accounts,\n    mintAccounts,\n  } = props;\n  const tokenMap = useSolanaTokenMap();\n  const mintAddresses = useMemo(() => {\n    const output: string[] = [];\n    mintAccounts?.data?.forEach(\n      (mintAuth, mintAddress) => mintAddress && output.push(mintAddress)\n    );\n    return output;\n  }, [mintAccounts?.data]);\n  const metaplex = useMetaplexData(mintAddresses);\n  const markets = useMarketsMap(!nft);\n  const targetChain = useSelector(selectTransferTargetChain);\n\n  const memoizedTokenMap: Map<String, TokenInfo> = useMemo(() => {\n    const output = new Map<String, TokenInfo>();\n\n    if (tokenMap.data) {\n      for (const data of tokenMap.data) {\n        if (data && data.address) {\n          output.set(data.address, data);\n        }\n      }\n    }\n\n    return output;\n  }, [tokenMap]);\n\n  const getLogo = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.logo) ||\n        memoizedTokenMap.get(account.mintKey)?.logoURI ||\n        metaplex.data?.get(account.mintKey)?.data?.uri ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getSymbol = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.symbol) ||\n        memoizedTokenMap.get(account.mintKey)?.symbol ||\n        metaplex.data?.get(account.mintKey)?.data?.symbol ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  const getName = useCallback(\n    (account: ParsedTokenAccount) => {\n      return (\n        (account.isNativeAsset && account.name) ||\n        memoizedTokenMap.get(account.mintKey)?.name ||\n        metaplex.data?.get(account.mintKey)?.data?.name ||\n        undefined\n      );\n    },\n    [memoizedTokenMap, metaplex]\n  );\n\n  //This exists to remove NFTs from the list of potential options. It requires reading the metaplex data, so it would be\n  //difficult to do before this point.\n  const filteredOptions = useMemo(() => {\n    const array = accounts?.data || [];\n    const tokenList = array.filter((x) => {\n      const zeroBalance = x.amount === \"0\";\n      if (zeroBalance) {\n        return false;\n      }\n      const isNFT =\n        x.decimals === 0 && metaplex.data?.get(x.mintKey)?.data?.uri;\n      const is721CompatibleNFT =\n        isNFT && mintAccounts?.data?.get(x.mintKey)?.supply === \"1\";\n      return nft ? is721CompatibleNFT : !isNFT;\n    });\n    tokenList.sort(sortParsedTokenAccounts);\n    return tokenList;\n  }, [mintAccounts?.data, metaplex.data, nft, accounts]);\n\n  const accountsWithMetadata = useMemo(() => {\n    return filteredOptions.map((account) => {\n      const logo = getLogo(account);\n      const symbol = getSymbol(account);\n      const name = getName(account);\n\n      const uri = getLogo(account);\n\n      return {\n        ...account,\n        name,\n        symbol,\n        logo,\n        uri,\n      };\n    });\n  }, [filteredOptions, getLogo, getName, getSymbol]);\n\n  const isLoading =\n    accounts?.isFetching || metaplex.isFetching || tokenMap.isFetching;\n\n  const isWormholev1 = useCallback(\n    (address: string) => {\n      //This is a v1 wormhole token on testnet\n      //address = \"4QixXecTZ4zdZGa39KH8gVND5NZ2xcaB12wiBhE4S7rn\";\n\n      //Anything we find in the features market map will be a non-v1 token. This has to short circuit the other checks\n      //As the featured market parsed token accounts are spoofed in by the token picker and lack valid metadata.\n      if (!nft) {\n        const marketsData = markets.data;\n        const featuredMarkets =\n          marketsData?.tokenMarkets?.[CHAIN_ID_SOLANA]?.[targetChain];\n        if (!!featuredMarkets?.[address]) {\n          return false;\n        }\n      }\n\n      if (!props.mintAccounts?.data) {\n        return true; //These should never be null by this point\n      }\n      const mintAuthority = props.mintAccounts.data.get(address)?.mintAuthority;\n\n      if (!mintAuthority) {\n        return true; //We should never fail to pull the mint of an account.\n      }\n\n      if (mintAuthority === WORMHOLE_V1_MINT_AUTHORITY) {\n        return true; //This means the mint was created by the wormhole v1 contract, and we want to disallow its transfer.\n      }\n\n      return false;\n    },\n    [props.mintAccounts, markets.data, nft, targetChain]\n  );\n\n  const onChangeWrapper = useCallback(\n    async (newValue: NFTParsedTokenAccount | null) => {\n      let v1 = false;\n      if (newValue === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      try {\n        v1 = isWormholev1(newValue.mintKey);\n      } catch (e) {\n        //swallow for now\n      }\n\n      if (v1 && !isMigrationEligible(newValue.mintKey)) {\n        throw Error(\n          \"Wormhole v1 assets should not be transferred with this bridge.\"\n        );\n      }\n\n      onChange(newValue);\n      return Promise.resolve();\n    },\n    [isWormholev1, onChange]\n  );\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, isMigrationEligible, nft || false);\n    },\n    [nft]\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={accountsWithMetadata}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      disabled={disabled}\n      resetAccounts={resetAccounts}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={nft || false}\n      chainId={CHAIN_ID_SOLANA}\n    />\n  );\n}\n","import { CHAIN_ID_TERRA, isNativeDenom } from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { createParsedTokenAccount } from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useTerraNativeBalances from \"../../hooks/useTerraNativeBalances\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../../store/nftSlice\";\nimport { ParsedTokenAccount } from \"../../store/transferSlice\";\nimport { SUPPORTED_TERRA_TOKENS, TERRA_HOST } from \"../../utils/consts\";\nimport {\n  formatNativeDenom,\n  getNativeTerraIcon,\n  isValidTerraAddress,\n  NATIVE_TERRA_DECIMALS,\n} from \"../../utils/terra\";\nimport TokenPicker, { BasicAccountRender } from \"./TokenPicker\";\n\ntype TerraTokenPickerProps = {\n  value: ParsedTokenAccount | null;\n  onChange: (newValue: ParsedTokenAccount | null) => void;\n  tokenAccounts: DataWrapper<ParsedTokenAccount[]> | undefined;\n  disabled: boolean;\n  resetAccounts: (() => void) | undefined;\n};\n\nconst returnsFalse = () => false;\n\nexport default function TerraTokenPicker(props: TerraTokenPickerProps) {\n  const { value, onChange, disabled } = props;\n  const { walletAddress } = useIsWalletReady(CHAIN_ID_TERRA);\n  const nativeRefresh = useRef<() => void>(() => {});\n  const { balances, isLoading: nativeIsLoading } = useTerraNativeBalances(\n    walletAddress,\n    nativeRefresh\n  );\n\n  const resetAccountWrapper = useCallback(() => {\n    //we can currently skip calling this as we don't read from sourceParsedTokenAccounts\n    //resetAccounts && resetAccounts();\n    nativeRefresh.current();\n  }, []);\n  const isLoading = nativeIsLoading; // || (tokenMap?.isFetching || false);\n\n  const onChangeWrapper = useCallback(\n    async (account: NFTParsedTokenAccount | null) => {\n      if (account === null) {\n        onChange(null);\n        return Promise.resolve();\n      }\n      onChange(account);\n      return Promise.resolve();\n    },\n    [onChange]\n  );\n\n  const terraTokenArray = useMemo(() => {\n    const balancesItems =\n      balances && walletAddress\n        ? Object.keys(balances).map((denom) =>\n            // ({\n            //   protocol: \"native\",\n            //   symbol: formatNativeDenom(denom),\n            //   token: denom,\n            //   icon: getNativeTerraIcon(formatNativeDenom(denom)),\n            //   balance: balances[denom],\n            // } as TerraTokenMetadata)\n\n            //TODO support non-natives in the SUPPORTED_TERRA_TOKENS\n            //This token account makes a lot of assumptions\n            createParsedTokenAccount(\n              walletAddress,\n              denom,\n              balances[denom], //amount\n              NATIVE_TERRA_DECIMALS, //TODO actually get decimals rather than hardcode\n              0, //uiAmount is unused\n              formatUnits(balances[denom], NATIVE_TERRA_DECIMALS), //uiAmountString\n              formatNativeDenom(denom), // symbol\n              undefined, //name\n              getNativeTerraIcon(formatNativeDenom(denom)), //logo\n              true //is native asset\n            )\n          )\n        : [];\n    return balancesItems.filter((metadata) =>\n      SUPPORTED_TERRA_TOKENS.includes(metadata.mintKey)\n    );\n    // const values = tokenMap.data?.mainnet;\n    // const tokenMapItems = Object.values(values || {}) || [];\n    // return [...balancesItems, ...tokenMapItems];\n  }, [\n    walletAddress,\n    balances,\n    // tokenMap\n  ]);\n\n  //TODO this only supports non-native assets. Native assets come from the hook.\n  //TODO correlate against token list to get metadata\n  const lookupTerraAddress = useCallback(\n    (lookupAsset: string) => {\n      if (!walletAddress) {\n        return Promise.reject(\"Wallet not connected\");\n      }\n      const lcd = new LCDClient(TERRA_HOST);\n      return lcd.wasm\n        .contractQuery(lookupAsset, {\n          token_info: {},\n        })\n        .then((info: any) =>\n          lcd.wasm\n            .contractQuery(lookupAsset, {\n              balance: {\n                address: walletAddress,\n              },\n            })\n            .then((balance: any) => {\n              if (balance && info) {\n                return createParsedTokenAccount(\n                  walletAddress,\n                  lookupAsset,\n                  balance.balance.toString(),\n                  info.decimals,\n                  Number(formatUnits(balance.balance, info.decimals)),\n                  formatUnits(balance.balance, info.decimals),\n                  info.symbol,\n                  info.name\n                );\n              } else {\n                throw new Error(\"Failed to retrieve Terra account.\");\n              }\n            })\n        )\n        .catch(() => {\n          return Promise.reject();\n        });\n    },\n    [walletAddress]\n  );\n\n  const isSearchableAddress = useCallback((address: string) => {\n    return isValidTerraAddress(address) && !isNativeDenom(address);\n  }, []);\n\n  const RenderComp = useCallback(\n    ({ account }: { account: NFTParsedTokenAccount }) => {\n      return BasicAccountRender(account, returnsFalse, false);\n    },\n    []\n  );\n\n  return (\n    <TokenPicker\n      value={value}\n      options={terraTokenArray || []}\n      RenderOption={RenderComp}\n      onChange={onChangeWrapper}\n      isValidAddress={isSearchableAddress}\n      getAddress={lookupTerraAddress}\n      disabled={disabled}\n      resetAccounts={resetAccountWrapper}\n      error={\"\"}\n      showLoader={isLoading}\n      nft={false}\n      chainId={CHAIN_ID_TERRA}\n    />\n  );\n}\n","//import Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetSourceParsedTokens from \"../../hooks/useGetSourceParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  setSourceParsedTokenAccount as setNFTSourceParsedTokenAccount,\n  setSourceWalletAddress as setNFTSourceWalletAddress,\n} from \"../../store/nftSlice\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport {\n  ParsedTokenAccount,\n  setSourceParsedTokenAccount as setTransferSourceParsedTokenAccount,\n  setSourceWalletAddress as setTransferSourceWalletAddress,\n} from \"../../store/transferSlice\";\nimport EvmTokenPicker from \"./EvmTokenPicker\";\nimport RefreshButtonWrapper from \"./RefreshButtonWrapper\";\nimport SolanaTokenPicker from \"./SolanaTokenPicker\";\nimport TerraTokenPicker from \"./TerraTokenPicker\";\n\ntype TokenSelectorProps = {\n  disabled: boolean;\n  nft?: boolean;\n};\n\nexport const TokenSelector = (props: TokenSelectorProps) => {\n  const { disabled, nft } = props;\n  const dispatch = useDispatch();\n\n  const lookupChain = useSelector(\n    nft ? selectNFTSourceChain : selectTransferSourceChain\n  );\n  const sourceParsedTokenAccount = useSelector(\n    nft\n      ? selectNFTSourceParsedTokenAccount\n      : selectTransferSourceParsedTokenAccount\n  );\n  const walletIsReady = useIsWalletReady(lookupChain);\n\n  const setSourceParsedTokenAccount = nft\n    ? setNFTSourceParsedTokenAccount\n    : setTransferSourceParsedTokenAccount;\n  const setSourceWalletAddress = nft\n    ? setNFTSourceWalletAddress\n    : setTransferSourceWalletAddress;\n\n  const handleOnChange = useCallback(\n    (newTokenAccount: ParsedTokenAccount | null) => {\n      if (!newTokenAccount) {\n        dispatch(setSourceParsedTokenAccount(undefined));\n        dispatch(setSourceWalletAddress(undefined));\n      } else if (newTokenAccount !== undefined && walletIsReady.walletAddress) {\n        dispatch(setSourceParsedTokenAccount(newTokenAccount));\n        dispatch(setSourceWalletAddress(walletIsReady.walletAddress));\n      }\n    },\n    [\n      dispatch,\n      walletIsReady,\n      setSourceParsedTokenAccount,\n      setSourceWalletAddress,\n    ]\n  );\n\n  const maps = useGetSourceParsedTokens(nft);\n  const resetAccountWrapper = maps?.resetAccounts || (() => {}); //This should never happen.\n\n  //This is only for errors so bad that we shouldn't even mount the component\n  const fatalError =\n    isEVMChain(lookupChain) &&\n    lookupChain !== CHAIN_ID_TERRA &&\n    maps?.tokenAccounts?.error; //Terra & ETH can proceed because it has advanced mode\n\n  const content = fatalError ? (\n    <RefreshButtonWrapper callback={resetAccountWrapper}>\n      <Typography>{fatalError}</Typography>\n    </RefreshButtonWrapper>\n  ) : lookupChain === CHAIN_ID_SOLANA ? (\n    <SolanaTokenPicker\n      value={sourceParsedTokenAccount || null}\n      onChange={handleOnChange}\n      disabled={disabled}\n      accounts={maps?.tokenAccounts}\n      mintAccounts={maps?.mintAccounts}\n      resetAccounts={maps?.resetAccounts}\n      nft={nft}\n    />\n  ) : isEVMChain(lookupChain) ? (\n    <EvmTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      tokenAccounts={maps?.tokenAccounts}\n      resetAccounts={maps?.resetAccounts}\n      chainId={lookupChain}\n      nft={nft}\n    />\n  ) : lookupChain === CHAIN_ID_TERRA ? (\n    <TerraTokenPicker\n      value={sourceParsedTokenAccount || null}\n      disabled={disabled}\n      onChange={handleOnChange}\n      resetAccounts={maps?.resetAccounts}\n      tokenAccounts={maps?.tokenAccounts}\n    />\n  ) : (\n    <TextField\n      variant=\"outlined\"\n      placeholder=\"Asset\"\n      fullWidth\n      value={\"Not Implemented\"}\n      disabled={true}\n    />\n  );\n\n  return <div>{content}</div>;\n};\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport { incrementStep, setSourceChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsSourceComplete,\n  selectNFTShouldLockFields,\n  selectNFTSourceBalanceString,\n  selectNFTSourceChain,\n  selectNFTSourceError,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const uiAmountString = useSelector(selectNFTSourceBalanceString);\n  const error = useSelector(selectNFTSourceError);\n  const isSourceComplete = useSelector(selectNFTIsSourceComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select an NFT to send through the Wormhole NFT Bridge.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/nft-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              startIcon={<VerifiedUser />}\n            >\n              NFT Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={sourceChain}\n        onChange={handleSourceChange}\n        disabled={shouldLockFields}\n        chains={CHAINS_WITH_NFT_SUPPORT}\n      />\n      {isEVMChain(sourceChain) ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs which implement ERC-721 are supported.\n        </Alert>\n      ) : null}\n      {sourceChain === CHAIN_ID_SOLANA ? (\n        <Alert severity=\"info\" variant=\"outlined\">\n          Only NFTs with a supply of 1 are supported.\n        </Alert>\n      ) : null}\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} nft={true} />\n        </div>\n      ) : null}\n      <LowBalanceWarning chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={!isSourceComplete}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTSourceChain,\n  selectNFTSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectNFTSourceParsedTokenAccount\n  );\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer 1 NFT of</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        <span>from</span>\n        <SmartAddress\n          chainId={sourceChain}\n          address={sourceParsedTokenAccount?.publicKey}\n        />\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n      {sourceParsedTokenAccount ? (\n        <NFTViewer value={sourceParsedTokenAccount} chainId={sourceChain} />\n      ) : null}\n    </>\n  );\n}\n","import {\n  canonicalAddress,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { arrayify, zeroPad } from \"@ethersproject/bytes\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setTargetAddressHex as setNFTTargetAddressHex } from \"../store/nftSlice\";\nimport {\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n  selectTransferTargetParsedTokenAccount,\n} from \"../store/selectors\";\nimport { setTargetAddressHex as setTransferTargetAddressHex } from \"../store/transferSlice\";\n\nfunction useSyncTargetAddress(shouldFire: boolean, nft?: boolean) {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(\n    nft ? selectNFTTargetChain : selectTransferTargetChain\n  );\n  const { signerAddress } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const targetAsset = useSelector(\n    nft ? selectNFTTargetAsset : selectTransferTargetAsset\n  );\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const targetTokenAccountPublicKey = targetParsedTokenAccount?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const setTargetAddressHex = nft\n    ? setNFTTargetAddressHex\n    : setTransferTargetAddressHex;\n  useEffect(() => {\n    if (shouldFire) {\n      let cancelled = false;\n      if (isEVMChain(targetChain) && signerAddress) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(zeroPad(arrayify(signerAddress), 32))\n          )\n        );\n      }\n      // TODO: have the user explicitly select an account on solana\n      else if (\n        !nft && // only support existing, non-derived token accounts for token transfers (nft flow doesn't check balance)\n        targetChain === CHAIN_ID_SOLANA &&\n        targetTokenAccountPublicKey\n      ) {\n        // use the target's TokenAccount if it exists\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(new PublicKey(targetTokenAccountPublicKey).toBytes(), 32)\n            )\n          )\n        );\n      } else if (targetChain === CHAIN_ID_SOLANA && solPK && targetAsset) {\n        // otherwise, use the associated token account (which we create in the case it doesn't exist)\n        (async () => {\n          try {\n            const associatedTokenAccount =\n              await Token.getAssociatedTokenAddress(\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n                TOKEN_PROGRAM_ID,\n                new PublicKey(targetAsset), // this might error\n                solPK\n              );\n            if (!cancelled) {\n              dispatch(\n                setTargetAddressHex(\n                  uint8ArrayToHex(zeroPad(associatedTokenAccount.toBytes(), 32))\n                )\n              );\n            }\n          } catch (e) {\n            if (!cancelled) {\n              dispatch(setTargetAddressHex(undefined));\n            }\n          }\n        })();\n      } else if (\n        targetChain === CHAIN_ID_TERRA &&\n        terraWallet &&\n        terraWallet.walletAddress\n      ) {\n        dispatch(\n          setTargetAddressHex(\n            uint8ArrayToHex(\n              zeroPad(canonicalAddress(terraWallet.walletAddress), 32)\n            )\n          )\n        );\n      } else {\n        dispatch(setTargetAddressHex(undefined));\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    dispatch,\n    shouldFire,\n    targetChain,\n    signerAddress,\n    solPK,\n    targetAsset,\n    targetTokenAccountPublicKey,\n    terraWallet,\n    nft,\n    setTargetAddressHex,\n  ]);\n}\n\nexport default useSyncTargetAddress;\n","import {\n  CHAIN_ID_SOLANA,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport { incrementStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTIsTargetComplete,\n  selectNFTOriginAsset,\n  selectNFTOriginChain,\n  selectNFTOriginTokenId,\n  selectNFTShouldLockFields,\n  selectNFTSourceChain,\n  selectNFTTargetAddressHex,\n  selectNFTTargetAsset,\n  selectNFTTargetChain,\n  selectNFTTargetError,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Target() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectNFTSourceChain);\n  const chains = useMemo(\n    () => CHAINS_WITH_NFT_SUPPORT.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddressHex = useSelector(selectNFTTargetAddressHex);\n  const targetAsset = useSelector(selectNFTTargetAsset);\n  const originChain = useSelector(selectNFTOriginChain);\n  const originAsset = useSelector(selectNFTOriginAsset);\n  const originTokenId = useSelector(selectNFTOriginTokenId);\n  let tokenId;\n  try {\n    tokenId =\n      originChain === CHAIN_ID_SOLANA && originAsset\n        ? BigNumber.from(\n            new PublicKey(hexToUint8Array(originAsset)).toBytes()\n          ).toString()\n        : originTokenId;\n  } catch (e) {\n    tokenId = originTokenId;\n  }\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  const error = useSelector(selectNFTTargetError);\n  const isTargetComplete = useSelector(selectNFTIsTargetComplete);\n  const shouldLockFields = useSelector(selectNFTShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  useSyncTargetAddress(!shouldLockFields, true);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        select\n        fullWidth\n        variant=\"outlined\"\n        value={targetChain}\n        onChange={handleTargetChange}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        className={classes.transferField}\n        value={readableTargetAddress}\n        disabled={true}\n      />\n      {targetAsset !== ethers.constants.AddressZero ? (\n        <>\n          <TextField\n            label=\"Token Address\"\n            fullWidth\n            variant=\"outlined\"\n            className={classes.transferField}\n            value={targetAsset || \"\"}\n            disabled={true}\n          />\n          {isEVMChain(targetChain) ? (\n            <TextField\n              variant=\"outlined\"\n              label=\"TokenId\"\n              fullWidth\n              className={classes.transferField}\n              value={tokenId || \"\"}\n              disabled={true}\n            />\n          ) : null}\n        </>\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your NFT.\n        </Typography>\n        {isEVMChain(targetChain) && (\n          <GasEstimateSummary methodType=\"nft\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      {targetChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={!isTargetComplete} //|| !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={false}\n        error={statusMessage || error}\n      >\n        Next\n      </ButtonWithLoader>\n    </>\n  );\n}\n\nexport default Target;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectNFTTargetAddressHex,\n  selectNFTTargetChain,\n} from \"../../store/selectors\";\nimport { hexToNativeString } from \"@certusone/wormhole-sdk\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const targetAddress = useSelector(selectNFTTargetAddressHex);\n  const targetAddressNative = hexToNativeString(targetAddress, targetChain);\n\n  const explainerContent =\n    targetChain && targetAddressNative ? (\n      <>\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={targetAddressNative} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport { setSourceChain, setStep, setTargetChain } from \"../../store/nftSlice\";\nimport {\n  selectNFTActiveStep,\n  selectNFTIsRedeemComplete,\n  selectNFTIsRedeeming,\n  selectNFTIsSendComplete,\n  selectNFTIsSending,\n} from \"../../store/selectors\";\nimport { CHAINS_WITH_NFT_SUPPORT } from \"../../utils/consts\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction NFT() {\n  useCheckIfWormholeWrapped(true);\n  useFetchTargetAsset(true);\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectNFTActiveStep);\n  const isSending = useSelector(selectNFTIsSending);\n  const isSendComplete = useSelector(selectNFTIsSendComplete);\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const isRedeemComplete = useSelector(selectNFTIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathTargetChain = query.get(\"targetChain\");\n\n  //This effect initializes the state based on the path params\n  useEffect(() => {\n    if (!pathSourceChain && !pathTargetChain) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId | undefined = CHAINS_WITH_NFT_SUPPORT.find(\n        (x) => parseFloat(pathSourceChain || \"\") === x.id\n      )?.id;\n      const targetChain: ChainId | undefined = CHAINS_WITH_NFT_SUPPORT.find(\n        (x) => parseFloat(pathTargetChain || \"\") === x.id\n      )?.id;\n\n      if (sourceChain === targetChain) {\n        return;\n      }\n      if (sourceChain) {\n        dispatch(setSourceChain(sourceChain));\n      }\n      if (targetChain) {\n        dispatch(setTargetChain(targetChain));\n      }\n    } catch (e) {\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathTargetChain, dispatch]);\n\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1. Source\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n        >\n          <StepButton onClick={() => dispatch(setStep(1))} icon={null}>\n            2. Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled icon={null}>\n            3. Send NFT\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3} completed={isRedeemComplete}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete || isRedeemComplete}\n            icon={null}\n          >\n            4. Redeem NFT\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default NFT;\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_OASIS,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport {\n  Button,\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { getMetaplexData } from \"../hooks/useMetaplexData\";\nimport { COLORS } from \"../muiTheme\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BETA_CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport {\n  ethNFTToNFTParsedTokenAccount,\n  getEthereumNFT,\n  isNFT,\n  isValidEthereumAddress,\n} from \"../utils/ethereum\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport NFTViewer from \"./TokenSelectors/NFTViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  originHeader: {\n    marginTop: theme.spacing(4),\n  },\n  viewButtonWrapper: {\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n  loaderWrapper: {\n    margin: theme.spacing(2),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function NFTOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const { provider, signerAddress } = useEthereumProvider();\n  const [lookupChain, setLookupChain] = useState(CHAIN_ID_ETH);\n  const { isReady, statusMessage } = useIsWalletReady(lookupChain);\n  const [lookupAsset, setLookupAsset] = useState(\"\");\n  const [lookupTokenId, setLookupTokenId] = useState(\"\");\n  const [lookupError, setLookupError] = useState(\"\");\n  const [parsedTokenAccount, setParsedTokenAccount] = useState<\n    NFTParsedTokenAccount | undefined\n  >(undefined);\n  const [originInfo, setOriginInfo] = useState<\n    WormholeWrappedNFTInfo | undefined\n  >(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleChainChange = useCallback((event) => {\n    setLookupChain(event.target.value);\n  }, []);\n  const handleAssetChange = useCallback((event) => {\n    setLookupAsset(event.target.value);\n  }, []);\n  const handleTokenIdChange = useCallback((event) => {\n    setLookupTokenId(event.target.value);\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    setLookupError(\"\");\n    setParsedTokenAccount(undefined);\n    setOriginInfo(undefined);\n    if (\n      isReady &&\n      provider &&\n      signerAddress &&\n      isEVMChain(lookupChain) &&\n      lookupAsset &&\n      lookupTokenId\n    ) {\n      if (isValidEthereumAddress(lookupAsset)) {\n        (async () => {\n          setIsLoading(true);\n          try {\n            const token = await getEthereumNFT(lookupAsset, provider);\n            const result = await isNFT(token);\n            if (result) {\n              const newParsedTokenAccount = await ethNFTToNFTParsedTokenAccount(\n                token,\n                lookupTokenId,\n                signerAddress\n              );\n              const info = await getOriginalAssetEth(\n                getNFTBridgeAddressForChain(lookupChain),\n                provider,\n                lookupAsset,\n                lookupTokenId,\n                lookupChain\n              );\n              if (!cancelled) {\n                setIsLoading(false);\n                setParsedTokenAccount(newParsedTokenAccount);\n                setOriginInfo(info);\n              }\n            } else if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          } catch (e) {\n            console.error(e);\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\n                \"This token does not support ERC-165, ERC-721, and ERC-721 metadata\"\n              );\n            }\n          }\n        })();\n      } else {\n        setLookupError(\"Invalid address\");\n      }\n    } else if (lookupChain === CHAIN_ID_SOLANA && lookupAsset) {\n      (async () => {\n        try {\n          setIsLoading(true);\n          const [metadata] = await getMetaplexData([lookupAsset]);\n          if (metadata) {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            const info = await getOriginalAssetSol(\n              connection,\n              SOL_NFT_BRIDGE_ADDRESS,\n              lookupAsset\n            );\n            if (!cancelled) {\n              setIsLoading(false);\n              setParsedTokenAccount({\n                amount: \"0\",\n                decimals: 0,\n                mintKey: lookupAsset,\n                publicKey: \"\",\n                uiAmount: 0,\n                uiAmountString: \"0\",\n                uri: metadata.data.uri,\n              });\n              setOriginInfo(info);\n            }\n          } else {\n            if (!cancelled) {\n              setIsLoading(false);\n              setLookupError(\"Error fetching metadata\");\n            }\n          }\n        } catch (e) {\n          console.error(e);\n          if (!cancelled) {\n            setIsLoading(false);\n            setLookupError(\"Invalid token\");\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    isReady,\n    provider,\n    signerAddress,\n    lookupChain,\n    lookupAsset,\n    lookupTokenId,\n  ]);\n  const readableAddress =\n    originInfo &&\n    originInfo.chainId &&\n    originInfo.assetAddress &&\n    hexToNativeString(\n      uint8ArrayToHex(originInfo.assetAddress),\n      originInfo.chainId\n    );\n  const displayError =\n    (isEVMChain(lookupChain) && statusMessage) || lookupError;\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <HeaderText white>NFT Origin Verifier</HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>\n          <Alert severity=\"info\" variant=\"outlined\">\n            This page allows you to find where a Wormhole-bridged NFT was\n            originally minted so you can verify its authenticity.\n          </Alert>\n          <TextField\n            select\n            variant=\"outlined\"\n            label=\"Chain\"\n            value={lookupChain}\n            onChange={handleChainChange}\n            fullWidth\n            margin=\"normal\"\n          >\n            {CHAINS_WITH_NFT_SUPPORT.filter(({ id }) =>\n              isBeta ? true : !BETA_CHAINS.includes(id)\n            ).map(({ id, name }) => (\n              <MenuItem key={id} value={id}>\n                {name}\n              </MenuItem>\n            ))}\n          </TextField>\n          {isEVMChain(lookupChain) ? (\n            <KeyAndBalance chainId={lookupChain} />\n          ) : null}\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            margin=\"normal\"\n            label=\"Paste an address\"\n            value={lookupAsset}\n            onChange={handleAssetChange}\n          />\n          {isEVMChain(lookupChain) ? (\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              margin=\"normal\"\n              label=\"Paste a tokenId\"\n              value={lookupTokenId}\n              onChange={handleTokenIdChange}\n            />\n          ) : null}\n          {displayError ? (\n            <Typography align=\"center\" color=\"error\">\n              {displayError}\n            </Typography>\n          ) : null}\n          {isLoading ? (\n            <div className={classes.loaderWrapper}>\n              <CircularProgress />\n            </div>\n          ) : null}\n          {parsedTokenAccount ? (\n            <NFTViewer value={parsedTokenAccount} chainId={lookupChain} />\n          ) : null}\n          {originInfo ? (\n            <>\n              <Typography\n                variant=\"h5\"\n                gutterBottom\n                className={classes.originHeader}\n              >\n                Origin Info\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Chain: {CHAINS_BY_ID[originInfo.chainId].name}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Address: {readableAddress}\n              </Typography>\n              {originInfo.chainId === CHAIN_ID_SOLANA ? null : (\n                <Typography variant=\"body2\" gutterBottom>\n                  Token ID: {originInfo.tokenId}\n                </Typography>\n              )}\n              <div className={classes.viewButtonWrapper}>\n                {originInfo.chainId === CHAIN_ID_SOLANA ? (\n                  <Button\n                    href={`https://solscan.io/token/${readableAddress}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Solscan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_BSC ? (\n                  <Button\n                    href={`https://bscscan.com/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on BscScan\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_POLYGON ? (\n                  <Button\n                    href={`https://opensea.io/assets/matic/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_AVAX ? (\n                  <Button\n                    href={`https://snowtrace.io/token/${readableAddress}?a=${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on Snowtrace\n                  </Button>\n                ) : originInfo.chainId === CHAIN_ID_OASIS ? null : (\n                  <Button\n                    href={`https://opensea.io/assets/${readableAddress}/${originInfo.tokenId}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    startIcon={<Launch />}\n                    className={classes.viewButton}\n                    variant=\"outlined\"\n                  >\n                    View on OpenSea\n                  </Button>\n                )}\n              </div>\n            </>\n          ) : null}\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","export type CoinGeckoIdToImageUrl = {\n  [id: string]: string;\n};\n\nexport const COIN_GECKO_IMAGE_URLS: CoinGeckoIdToImageUrl = {\n  \"yearn-finance\":\n    \"https://assets.coingecko.com/coins/images/11849/small/yfi-192x192.png?1598325330\",\n  partneroid:\n    \"https://assets.coingecko.com/coins/images/21381/small/144531867-a8016f41-3b31-4d6f-97a1-372a58d48626.png?1639034184\",\n  metaseer:\n    \"https://assets.coingecko.com/coins/images/17443/small/metas.PNG?1627863142\",\n  only1:\n    \"https://assets.coingecko.com/coins/images/17501/small/like-token.png?1628036165\",\n  floof:\n    \"https://assets.coingecko.com/coins/images/19810/small/FLOOF_logo_200x200.png?1635917291\",\n  \"nole-npc\":\n    \"https://assets.coingecko.com/coins/images/19981/small/1EXEFTo6_400x400.jpg?1640251890\",\n  \"solareum-wallet\":\n    \"https://assets.coingecko.com/coins/images/20958/small/xsb-200.png?1638141904\",\n  \"synthetify-token\":\n    \"https://assets.coingecko.com/coins/images/14835/small/synthetify_token.png?1618611507\",\n  mim: \"https://assets.coingecko.com/coins/images/19927/small/13988.png?1636323160\",\n  raydium:\n    \"https://assets.coingecko.com/coins/images/13928/small/PSigc4ie_400x400.jpg?1612875614\",\n  mixmarvel:\n    \"https://assets.coingecko.com/coins/images/8222/small/8878caf93b1e3b6cfb3b414bda3b5250.png?1613945432\",\n  ariadne:\n    \"https://assets.coingecko.com/coins/images/19401/small/Frame_5_%287%29_%281%29.png?1635176608\",\n  apyswap:\n    \"https://assets.coingecko.com/coins/images/14163/small/apys.png?1635831990\",\n  xhashtag:\n    \"https://assets.coingecko.com/coins/images/20912/small/xtag.png?1637922382\",\n  \"socean-staked-sol\":\n    \"https://assets.coingecko.com/coins/images/18468/small/biOTzfxE_400x400.png?1633662119\",\n  \"bamboo-coin\":\n    \"https://assets.coingecko.com/coins/images/19620/small/FC0hnduacAAHYFC.png?1635496724\",\n  \"waggle-network\":\n    \"https://assets.coingecko.com/coins/images/18696/small/waggle.PNG?1633750177\",\n  hapi: \"https://assets.coingecko.com/coins/images/14298/small/R9i2HjAL_400x400.jpg?1615332438\",\n  sail: \"https://assets.coingecko.com/coins/images/16657/small/SAIL.png?1624608515\",\n  \"lido-staked-sol\":\n    \"https://assets.coingecko.com/coins/images/18369/small/logo_-_2021-09-15T100934.765.png?1631671781\",\n  solrazr:\n    \"https://assets.coingecko.com/coins/images/18390/small/Sol-Razr-Logo-TICKER.png?1631759669\",\n  samoyedcoin:\n    \"https://assets.coingecko.com/coins/images/15051/small/IXeEj5e.png?1619560738\",\n  babytigergold:\n    \"https://assets.coingecko.com/coins/images/22811/small/logo_babytiger.png?1642658264\",\n  \"rope-token\":\n    \"https://assets.coingecko.com/coins/images/14661/small/rope-v6.png?1619606776\",\n  \"usd-coin\":\n    \"https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png?1547042389\",\n  \"grape-2\":\n    \"https://assets.coingecko.com/coins/images/18149/small/fRsuAlcV_400x400.png?1632437325\",\n  \"terra-luna\":\n    \"https://assets.coingecko.com/coins/images/8284/small/luna1557227471663.png?1567147072\",\n  \"tiger-coin\":\n    \"https://assets.coingecko.com/coins/images/22681/small/tigerlogo.png?1642407729\",\n  bitcoin:\n    \"https://assets.coingecko.com/coins/images/1/small/bitcoin.png?1547033579\",\n  \"woof-token\":\n    \"https://assets.coingecko.com/coins/images/18319/small/woof-logo-svg-true-solana-radient-blackinside.png?1637655115\",\n  bilira:\n    \"https://assets.coingecko.com/coins/images/10119/small/JBs9jiXO_400x400.jpg?1642668342\",\n  sushi:\n    \"https://assets.coingecko.com/coins/images/12271/small/512x512_Logo_no_chop.png?1606986688\",\n  \"star-atlas\":\n    \"https://assets.coingecko.com/coins/images/17659/small/Icon_Reverse.png?1628759092\",\n  aurory:\n    \"https://assets.coingecko.com/coins/images/19324/small/logo.png?1635076945\",\n  \"avalanche-2\":\n    \"https://assets.coingecko.com/coins/images/12559/small/coin-round-red.png?1604021818\",\n  ethereum:\n    \"https://assets.coingecko.com/coins/images/279/small/ethereum.png?1595348880\",\n  \"battle-of-guardians-share\":\n    \"https://assets.coingecko.com/coins/images/22285/small/K3hU77wS_400x400.jpg?1641365642\",\n  bitsong:\n    \"https://assets.coingecko.com/coins/images/5041/small/logo_-_2021-01-10T210801.390.png?1610284134\",\n  \"blocto-token\":\n    \"https://assets.coingecko.com/coins/images/18657/small/BLT_token.png?1633082645\",\n  \"wrapped-usdt\":\n    \"https://assets.coingecko.com/coins/images/19507/small/wusdt.png?1635315186\",\n  renbtc:\n    \"https://assets.coingecko.com/coins/images/11370/small/Bitcoin.jpg?1628072791\",\n  \"gari-network\":\n    \"https://assets.coingecko.com/coins/images/22615/small/gari.png?1642313087\",\n  chainlink:\n    \"https://assets.coingecko.com/coins/images/877/small/chainlink-new-logo.png?1547034700\",\n  cashcow:\n    \"https://assets.coingecko.com/coins/images/19388/small/cropped-cropped-CashCowToken_08.png?1635148053\",\n  \"3x-long-ethereum-token\":\n    \"https://assets.coingecko.com/coins/images/10163/small/683JEXMN_400x400_%281%29.png?1576504568\",\n  defil:\n    \"https://assets.coingecko.com/coins/images/17708/small/defillogo200200.png?1629080381\",\n  tether:\n    \"https://assets.coingecko.com/coins/images/325/small/Tether-logo.png?1598003707\",\n  \"ptokens-btc\":\n    \"https://assets.coingecko.com/coins/images/10805/small/J51iIea.png?1583891599\",\n  cropperfinance:\n    \"https://assets.coingecko.com/coins/images/17883/small/copperfinance.PNG?1629708744\",\n  aldrin:\n    \"https://assets.coingecko.com/coins/images/16849/small/Aldrin.png?1629959768\",\n  \"woo-network\":\n    \"https://assets.coingecko.com/coins/images/12921/small/w2UiemF__400x400.jpg?1603670367\",\n  bonfida:\n    \"https://assets.coingecko.com/coins/images/13395/small/fida-dark.png?1608112224\",\n  victorum:\n    \"https://assets.coingecko.com/coins/images/17391/small/Victorum-logo200X200.png?1627525058\",\n  \"bull-coin\":\n    \"https://assets.coingecko.com/coins/images/15975/small/bull_ms.94cd70ff.png?1622525834\",\n  \"twirl-governance-token\":\n    \"https://assets.coingecko.com/coins/images/16725/small/Yn1ebvX.png?1624850650\",\n  monkeyball:\n    \"https://assets.coingecko.com/coins/images/20841/small/monkeyball.png?1639023123\",\n  sypool:\n    \"https://assets.coingecko.com/coins/images/18518/small/sypool.PNG?1632268218\",\n  \"foxy-equilibrium\":\n    \"https://assets.coingecko.com/coins/images/17303/small/cmc200x200.png?1627268759\",\n  \"squirrel-finance\":\n    \"https://assets.coingecko.com/coins/images/12415/small/transparent_logo200.png?1599690422\",\n  genopets:\n    \"https://assets.coingecko.com/coins/images/20360/small/gene-token.png?1636945172\",\n  goosefx:\n    \"https://assets.coingecko.com/coins/images/19793/small/0Kjm9f4.png?1635906737\",\n  \"solape-token\":\n    \"https://assets.coingecko.com/coins/images/16930/small/128px-coin.png?1625753550\",\n  \"galaxy-war\":\n    \"https://assets.coingecko.com/coins/images/22166/small/e2x7gMJ4_400x400.jpg?1641166277\",\n  \"1safu\":\n    \"https://assets.coingecko.com/coins/images/22792/small/145941796-8f7716f4-66bc-4a38-9ad5-441525c3b5b2.png?1642581127\",\n  \"solpad-finance\":\n    \"https://assets.coingecko.com/coins/images/16368/small/solpad.PNG?1623820231\",\n  dexlab:\n    \"https://assets.coingecko.com/coins/images/17276/small/4_Secondary_GradientSymbol_DarkLogo.png?1643018984\",\n  \"solanasail-governance-token\":\n    \"https://assets.coingecko.com/coins/images/17658/small/logo_GSAIL.png?1628758657\",\n  \"parasol-finance\":\n    \"https://assets.coingecko.com/coins/images/21551/small/icon.png?1642584584\",\n  meanfi:\n    \"https://assets.coingecko.com/coins/images/21557/small/89934951.png?1639466364\",\n  marinade:\n    \"https://assets.coingecko.com/coins/images/18867/small/MNDE.png?1643187748\",\n  \"mango-markets\":\n    \"https://assets.coingecko.com/coins/images/14773/small/token-mango.png?1628171237\",\n  blockasset:\n    \"https://assets.coingecko.com/coins/images/21332/small/blockasset.PNG?1638947864\",\n  \"parrot-protocol\":\n    \"https://assets.coingecko.com/coins/images/18443/small/PRT.png?1634698095\",\n  tudabirds:\n    \"https://assets.coingecko.com/coins/images/22839/small/_TOvRxfx_400x400.jpg?1642745695\",\n  serum:\n    \"https://assets.coingecko.com/coins/images/11970/small/serum-logo.png?1597121577\",\n  \"sunny-aggregator\":\n    \"https://assets.coingecko.com/coins/images/18039/small/90dbe787-8e5f-473c-b923-fe138a7a30ea.png?1630314924\",\n  saber:\n    \"https://assets.coingecko.com/coins/images/17162/small/oYs_YFz8_400x400.jpg?1626678457\",\n  \"wrapped-solana\":\n    \"https://assets.coingecko.com/coins/images/21629/small/solana.jpg?1639626543\",\n  \"step-finance\":\n    \"https://assets.coingecko.com/coins/images/14988/small/step.png?1619274762\",\n  zoints:\n    \"https://assets.coingecko.com/coins/images/20376/small/logo_-_2021-11-15T121641.242.png?1636949811\",\n  allbridge:\n    \"https://assets.coingecko.com/coins/images/18690/small/abr.png?1640742053\",\n  \"solchicks-token\":\n    \"https://assets.coingecko.com/coins/images/20978/small/chicks.png?1638162821\",\n  aave: \"https://assets.coingecko.com/coins/images/12645/small/AAVE.png?1601374110\",\n  kin: \"https://assets.coingecko.com/coins/images/959/small/kin.png?1586917032\",\n  msol: \"https://assets.coingecko.com/coins/images/17752/small/mSOL.png?1644541955\",\n  orca: \"https://assets.coingecko.com/coins/images/17547/small/Orca_Logo.png?1628781615\",\n  solanium:\n    \"https://assets.coingecko.com/coins/images/15816/small/token-icon.png?1621981387\",\n  \"tiki-token\":\n    \"https://assets.coingecko.com/coins/images/16427/small/60cbd8fd912298ca60e1fd7e_logo_TIKI_200_square.png?1623995319\",\n  \"coin-discovery\":\n    \"https://assets.coingecko.com/coins/images/18839/small/IdvWAhot_400x400.jpg?1633572605\",\n  \"huobi-btc\":\n    \"https://assets.coingecko.com/coins/images/12407/small/Unknown-5.png?1599624896\",\n  rai: \"https://assets.coingecko.com/coins/images/14004/small/RAI-logo-coin.png?1613592334\",\n  \"coin-capsule\":\n    \"https://assets.coingecko.com/coins/images/15921/small/e55393fa-7b4d-40f5-9f36-9a8a6bdcb570.png?1622430581\",\n  \"wrapped-ecomi\":\n    \"https://assets.coingecko.com/coins/images/14675/small/ecomi.jpg?1617689100\",\n  tomoe:\n    \"https://assets.coingecko.com/coins/images/12646/small/tomoe_logo.png?1601377449\",\n  math: \"https://assets.coingecko.com/coins/images/11335/small/2020-05-19-token-200.png?1589940590\",\n  \"spell-token\":\n    \"https://assets.coingecko.com/coins/images/15861/small/abracadabra-3.png?1622544862\",\n  \"mirror-protocol\":\n    \"https://assets.coingecko.com/coins/images/13295/small/mirror_logo_transparent.png?1611554658\",\n  \"governance-ohm\":\n    \"https://assets.coingecko.com/coins/images/21129/small/token_wsOHM_logo.png?1638764900\",\n  wasder:\n    \"https://assets.coingecko.com/coins/images/15374/small/wasderlogo200x200.png?1620691729\",\n  \"basic-attention-token\":\n    \"https://assets.coingecko.com/coins/images/677/small/basic-attention-token.png?1547034427\",\n  decentraland:\n    \"https://assets.coingecko.com/coins/images/878/small/decentraland-mana.png?1550108745\",\n  \"1inch\":\n    \"https://assets.coingecko.com/coins/images/13469/small/1inch-token.png?1608803028\",\n  gala: \"https://assets.coingecko.com/coins/images/12493/small/GALA-COINGECKO.png?1600233435\",\n  audius:\n    \"https://assets.coingecko.com/coins/images/12913/small/AudiusCoinLogo_2x.png?1603425727\",\n  ageur:\n    \"https://assets.coingecko.com/coins/images/19479/small/agEUR.png?1635283566\",\n  usdk: \"https://assets.coingecko.com/coins/images/8824/small/usdk.png?1563418517\",\n  bancor:\n    \"https://assets.coingecko.com/coins/images/736/small/bancor-bnt.png?1628822309\",\n  uniswap:\n    \"https://assets.coingecko.com/coins/images/12504/small/uniswap-uni.png?1600306604\",\n  ovr: \"https://assets.coingecko.com/coins/images/13429/small/ovr_logo.png?1608518911\",\n  augur:\n    \"https://assets.coingecko.com/coins/images/309/small/REP.png?1596339859\",\n  \"wrapped-bitcoin\":\n    \"https://assets.coingecko.com/coins/images/7598/small/wrapped_bitcoin_wbtc.png?1548822744\",\n  jpyc: \"https://assets.coingecko.com/coins/images/17277/small/WoZ8rruL_400x400.png?1627016492\",\n  \"ufo-gaming\":\n    \"https://assets.coingecko.com/coins/images/16801/small/ufo.png?1644048038\",\n  \"dds-store\":\n    \"https://assets.coingecko.com/coins/images/13946/small/11qbAbzb_400x400.png?1613172588\",\n  \"hlth-token\":\n    \"https://assets.coingecko.com/coins/images/18637/small/hlth.png?1639728357\",\n  aleph:\n    \"https://assets.coingecko.com/coins/images/11676/small/Monochram-aleph.png?1608483725\",\n  hex: \"https://assets.coingecko.com/coins/images/10103/small/HEX-logo.png?1575942673\",\n  \"cream-2\":\n    \"https://assets.coingecko.com/coins/images/11976/small/Cream.png?1596593418\",\n  throne:\n    \"https://assets.coingecko.com/coins/images/16965/small/aXhD3i_g_400x400.jpg?1625804145\",\n  \"angle-protocol\":\n    \"https://assets.coingecko.com/coins/images/19060/small/ANGLE_Token_Logo.png?1635281291\",\n  rune: \"https://assets.coingecko.com/coins/images/15606/small/rune-200x200.png?1621315121\",\n  \"akita-inu\":\n    \"https://assets.coingecko.com/coins/images/14115/small/logo_%282%29.png?1644913173\",\n  ramp: \"https://assets.coingecko.com/coins/images/12837/small/RAMP-Logo-v2-1000pxsq.png?1617952606\",\n  \"frax-share\":\n    \"https://assets.coingecko.com/coins/images/13423/small/frax_share.png?1608478989\",\n  chiliz:\n    \"https://assets.coingecko.com/coins/images/8834/small/Chiliz.png?1561970540\",\n  parsiq:\n    \"https://assets.coingecko.com/coins/images/11973/small/DsNgK0O.png?1596590280\",\n  \"elite-swap\":\n    \"https://assets.coingecko.com/coins/images/13715/small/logo_-_2021-01-20T105016.992.png?1611111027\",\n  kleekai:\n    \"https://assets.coingecko.com/coins/images/15548/small/Klee-Kai-Logo.png?1628258448\",\n  olympus:\n    \"https://assets.coingecko.com/coins/images/14483/small/token_OHM_%281%29.png?1628311611\",\n  \"the-sandbox\":\n    \"https://assets.coingecko.com/coins/images/12129/small/sandbox_logo.jpg?1597397942\",\n  opendao:\n    \"https://assets.coingecko.com/coins/images/21956/small/fo42wXI6_400x400.jpg?1640373810\",\n  chain:\n    \"https://assets.coingecko.com/coins/images/19678/small/Chain_icon.png?1635741399\",\n  civic:\n    \"https://assets.coingecko.com/coins/images/788/small/Civic-logo-blue.png?1636393120\",\n  \"hot-cross\":\n    \"https://assets.coingecko.com/coins/images/15706/small/Hotcross.png?1632197570\",\n  \"pax-gold\":\n    \"https://assets.coingecko.com/coins/images/9519/small/paxg.PNG?1568542565\",\n  \"gemma-extending-tech\":\n    \"https://assets.coingecko.com/coins/images/12226/small/200.png?1643188059\",\n  \"the-4th-pillar\":\n    \"https://assets.coingecko.com/coins/images/3434/small/four-ticker-2021-256x256.png?1617702287\",\n  ridotto:\n    \"https://assets.coingecko.com/coins/images/18671/small/200x200_%2832%29.png?1632875527\",\n  chronobank:\n    \"https://assets.coingecko.com/coins/images/604/small/time-32x32.png?1627130666\",\n  hxro: \"https://assets.coingecko.com/coins/images/7805/small/Hxro_Profile_Transparent.png?1622443308\",\n  fantom:\n    \"https://assets.coingecko.com/coins/images/4001/small/Fantom.png?1558015016\",\n  \"binance-usd\":\n    \"https://assets.coingecko.com/coins/images/9576/small/BUSD.png?1568947766\",\n  \"ftx-token\":\n    \"https://assets.coingecko.com/coins/images/9026/small/F.png?1609051564\",\n  vlaunch:\n    \"https://assets.coingecko.com/coins/images/20838/small/vlaunch_22.png?1637738535\",\n  contentos:\n    \"https://assets.coingecko.com/coins/images/8379/small/4036.png?1561085375\",\n  \"lido-dao\":\n    \"https://assets.coingecko.com/coins/images/13573/small/Lido_DAO.png?1609873644\",\n  \"jokermanor-metaverse\":\n    \"https://assets.coingecko.com/coins/images/20556/small/14732.png?1637208904\",\n  \"pancake-games\":\n    \"https://assets.coingecko.com/coins/images/20217/small/6oc-L2UC_400x400.png?1636671365\",\n  launchpool:\n    \"https://assets.coingecko.com/coins/images/14041/small/dGUvV0HQ_400x400.jpg?1613976219\",\n  pixelverse:\n    \"https://assets.coingecko.com/coins/images/19934/small/pixelverse.PNG?1636325521\",\n  \"poolz-finance\":\n    \"https://assets.coingecko.com/coins/images/13679/small/poolz_logo.png?1610806091\",\n  dai: \"https://assets.coingecko.com/coins/images/9956/small/4943.png?1636636734\",\n  million:\n    \"https://assets.coingecko.com/coins/images/16825/small/logo200x200.png?1625834139\",\n  gene: \"https://assets.coingecko.com/coins/images/14145/small/logo.a60a0c80_%281%29.png?1614653629\",\n  \"render-token\":\n    \"https://assets.coingecko.com/coins/images/11636/small/rndr.png?1638840934\",\n  \"nord-finance\":\n    \"https://assets.coingecko.com/coins/images/13630/small/nord.jpg?1610465136\",\n  \"genaro-network\":\n    \"https://assets.coingecko.com/coins/images/1361/small/genaro-network.png?1547035387\",\n  \"bird-money\":\n    \"https://assets.coingecko.com/coins/images/13260/small/favicon-180x180.png?1611546646\",\n  \"anchor-beth-token\":\n    \"https://assets.coingecko.com/coins/images/21002/small/bETH.png?1638187691\",\n  xsgd: \"https://assets.coingecko.com/coins/images/12832/small/StraitsX_Singapore_Dollar_%28XSGD%29_Token_Logo.png?1633936813\",\n  \"orion-money\":\n    \"https://assets.coingecko.com/coins/images/18630/small/YtrqPIWc.png?1632710781\",\n  xdefi:\n    \"https://assets.coingecko.com/coins/images/19524/small/xdefi.png?1637917251\",\n  \"metaverse-index\":\n    \"https://assets.coingecko.com/coins/images/14684/small/MVI_logo.png?1617776444\",\n  \"dogelon-mars\":\n    \"https://assets.coingecko.com/coins/images/14962/small/6GxcPRo3_400x400.jpg?1619157413\",\n  \"xcad-network\":\n    \"https://assets.coingecko.com/coins/images/15857/small/xcad.PNG?1622164789\",\n  sarcophagus:\n    \"https://assets.coingecko.com/coins/images/15091/small/E2S2-CcUcAAyNxD.jpeg?1622519884\",\n  xsigma:\n    \"https://assets.coingecko.com/coins/images/14090/small/logo_128.png?1619775781\",\n  hedget:\n    \"https://assets.coingecko.com/coins/images/12453/small/Hedget.png?1599944809\",\n  constitutiondao:\n    \"https://assets.coingecko.com/coins/images/20612/small/GN_UVm3d_400x400.jpg?1637294355\",\n  \"matic-network\":\n    \"https://assets.coingecko.com/coins/images/4713/small/matic-token-icon.png?1624446912\",\n  \"wrapped-steth\":\n    \"https://assets.coingecko.com/coins/images/18834/small/wstETH.png?1633565443\",\n  polkastarter:\n    \"https://assets.coingecko.com/coins/images/12648/small/polkastarter.png?1609813702\",\n  frax: \"https://assets.coingecko.com/coins/images/13422/small/frax_logo.png?1608476506\",\n  upbots:\n    \"https://assets.coingecko.com/coins/images/12476/small/UBXT.png?1600132967\",\n  \"keep-network\":\n    \"https://assets.coingecko.com/coins/images/3373/small/IuNzUb5b_400x400.jpg?1589526336\",\n  \"reserve-rights-token\":\n    \"https://assets.coingecko.com/coins/images/8365/small/rsr.png?1637983320\",\n  \"swag-finance\":\n    \"https://assets.coingecko.com/coins/images/12805/small/photo_2020-10-14_23.17.02.jpeg?1602688642\",\n  opium:\n    \"https://assets.coingecko.com/coins/images/13758/small/opium-token-black_%281%29.png?1611767960\",\n  akropolis:\n    \"https://assets.coingecko.com/coins/images/3328/small/Akropolis.png?1547037929\",\n  swipe:\n    \"https://assets.coingecko.com/coins/images/9368/small/swipe.png?1566792311\",\n  dydx: \"https://assets.coingecko.com/coins/images/17500/small/hjnIm9bV.jpg?1628009360\",\n  \"shiba-inu\":\n    \"https://assets.coingecko.com/coins/images/11939/small/shiba.png?1622619446\",\n  \"magic-internet-money\":\n    \"https://assets.coingecko.com/coins/images/16786/small/mimlogopng.png?1624979612\",\n  artem:\n    \"https://assets.coingecko.com/coins/images/21998/small/ARTM_Logo_MAIN_%281%29.png?1644469331\",\n  \"binance-wrapped-btc\":\n    \"https://assets.coingecko.com/coins/images/14867/small/binance-btc_32.png?1618814666\",\n  gaj: \"https://assets.coingecko.com/coins/images/15257/small/logo200x200.png?1629887093\",\n  quiztok:\n    \"https://assets.coingecko.com/coins/images/8208/small/QTCON.png?1587543372\",\n  \"bxmi-token\":\n    \"https://assets.coingecko.com/coins/images/20859/small/1QE9Pge.png?1637803118\",\n  \"redfox-labs-2\":\n    \"https://assets.coingecko.com/coins/images/12956/small/rfox.png?1642926902\",\n  \"wrapped-ust\":\n    \"https://assets.coingecko.com/coins/images/15462/small/ust.png?1620910058\",\n  lunachow:\n    \"https://assets.coingecko.com/coins/images/18805/small/J-MwYfhD_400x400.jpg?1633475157\",\n  terrausd:\n    \"https://assets.coingecko.com/coins/images/12681/small/UST.png?1601612407\",\n  \"celsius-degree-token\":\n    \"https://assets.coingecko.com/coins/images/3263/small/CEL_logo.png?1609598753\",\n  \"my-neighbor-alice\":\n    \"https://assets.coingecko.com/coins/images/14375/small/alice_logo.jpg?1615782968\",\n  \"yield-optimization-platform\":\n    \"https://assets.coingecko.com/coins/images/13678/small/J7zykPx.jpg?1610802162\",\n  \"staked-ether\":\n    \"https://assets.coingecko.com/coins/images/13442/small/steth_logo.png?1608607546\",\n  \"lua-token\":\n    \"https://assets.coingecko.com/coins/images/12627/small/Screenshot_2020-09-28_at_6.24.59_PM.jpg?1601288721\",\n  \"amy-finance\":\n    \"https://assets.coingecko.com/coins/images/18719/small/9oSy6bTl_400x400.png?1633127387\",\n  binancecoin:\n    \"https://assets.coingecko.com/coins/images/825/small/bnb-icon2_2x.png?1644979850\",\n  \"axie-infinity\":\n    \"https://assets.coingecko.com/coins/images/13029/small/axie_infinity_logo.png?1604471082\",\n  \"ethernity-chain\":\n    \"https://assets.coingecko.com/coins/images/14238/small/ethernity_logo.png?1615189750\",\n  \"perpetual-protocol\":\n    \"https://assets.coingecko.com/coins/images/12381/small/60d18e06844a844ad75901a9_mark_only_03.png?1628674771\",\n  \"compound-governance-token\":\n    \"https://assets.coingecko.com/coins/images/10775/small/COMP.png?1592625425\",\n  weth: \"https://assets.coingecko.com/coins/images/2518/small/weth.png?1628852295\",\n  \"ethereum-name-service\":\n    \"https://assets.coingecko.com/coins/images/19785/small/acatxTm8_400x400.jpg?1635850140\",\n  erc20:\n    \"https://assets.coingecko.com/coins/images/1141/small/0c213e0a1ee44bd8a3c952ffc5bc5a45.png?1628771346\",\n  \"chain-games\":\n    \"https://assets.coingecko.com/coins/images/12257/small/chain-logo-centered-500x500.png?1599617244\",\n  \"interest-bearing-bitcoin\":\n    \"https://assets.coingecko.com/coins/images/15500/small/ibbtc.png?1621077589\",\n  \"free-novak\":\n    \"https://assets.coingecko.com/coins/images/23370/small/logo_%282%29.png?1643955421\",\n  \"the-graph\":\n    \"https://assets.coingecko.com/coins/images/13397/small/Graph_Token.png?1608145566\",\n  \"vega-protocol\":\n    \"https://assets.coingecko.com/coins/images/15870/small/vega.PNG?1622178218\",\n  \"smooth-love-potion\":\n    \"https://assets.coingecko.com/coins/images/10366/small/SLP.png?1578640057\",\n  torg: \"https://assets.coingecko.com/coins/images/17596/small/TORG_Logo_200x200.png?1628586056\",\n  \"terra-virtua-kolect\":\n    \"https://assets.coingecko.com/coins/images/13330/small/CoinGLogo.png?1607507042\",\n  \"wrapped-terra\":\n    \"https://assets.coingecko.com/coins/images/13628/small/wluna.png?1610448334\",\n  \"zam-io\":\n    \"https://assets.coingecko.com/coins/images/19522/small/zam.png?1635324134\",\n  covalent:\n    \"https://assets.coingecko.com/coins/images/14168/small/covalent-cqt.png?1624545218\",\n  ampleforth:\n    \"https://assets.coingecko.com/coins/images/4708/small/Ampleforth.png?1561684250\",\n  \"shield-finance\":\n    \"https://assets.coingecko.com/coins/images/15813/small/3FYKlPka_400x400.png?1621980007\",\n  cindicator:\n    \"https://assets.coingecko.com/coins/images/1006/small/cindicator.png?1547034913\",\n  \"curve-dao-token\":\n    \"https://assets.coingecko.com/coins/images/12124/small/Curve.png?1597369484\",\n  \"safe-coin\":\n    \"https://assets.coingecko.com/coins/images/4938/small/safe-coin-logo.png?1547040363\",\n  adapad:\n    \"https://assets.coingecko.com/coins/images/18273/small/EhSqPTtG_400x400.jpg?1631181091\",\n  \"crowny-token\":\n    \"https://assets.coingecko.com/coins/images/14958/small/crowny-icon-rounded_2x.png?1619147225\",\n  \"gera-coin\":\n    \"https://assets.coingecko.com/coins/images/13686/small/GeraCoin_Logo-icon-1000px.png?1610919942\",\n  husd: \"https://assets.coingecko.com/coins/images/9567/small/HUSD.jpg?1568889385\",\n  \"feisty-doge-nft\":\n    \"https://assets.coingecko.com/coins/images/17834/small/doge-fractionalized.png?1629390495\",\n  curate:\n    \"https://assets.coingecko.com/coins/images/13327/small/400x400_%281%29_%283%29_%282%29.png?1613998208\",\n  banana:\n    \"https://assets.coingecko.com/coins/images/17521/small/bananaa.png?1628091607\",\n  \"injective-protocol\":\n    \"https://assets.coingecko.com/coins/images/12882/small/Secondary_Symbol.png?1628233237\",\n  pillar:\n    \"https://assets.coingecko.com/coins/images/809/small/v2logo-1.png?1624906282\",\n  bitspawn:\n    \"https://assets.coingecko.com/coins/images/16513/small/token_logo.png?1631603192\",\n  defire:\n    \"https://assets.coingecko.com/coins/images/15722/small/defire.PNG?1621635373\",\n  nftlaunch:\n    \"https://assets.coingecko.com/coins/images/18140/small/nftl.PNG?1630652662\",\n  pontoon:\n    \"https://assets.coingecko.com/coins/images/19575/small/pontoon.PNG?1635467899\",\n  chronologic:\n    \"https://assets.coingecko.com/coins/images/951/small/Chronologic-network.png?1547034815\",\n  everid:\n    \"https://assets.coingecko.com/coins/images/5209/small/Everest.jpg?1628042930\",\n  botxcoin:\n    \"https://assets.coingecko.com/coins/images/6827/small/botx.jpg?1548317786\",\n  \"ice-token\":\n    \"https://assets.coingecko.com/coins/images/14586/small/ice.png?1617188825\",\n  charli3:\n    \"https://assets.coingecko.com/coins/images/15052/small/Charli3-Profile-Icon-1.png?1642643567\",\n  \"rally-2\":\n    \"https://assets.coingecko.com/coins/images/12843/small/image.png?1611212077\",\n  enjincoin:\n    \"https://assets.coingecko.com/coins/images/1102/small/enjin-coin-logo.png?1547035078\",\n  \"frontier-token\":\n    \"https://assets.coingecko.com/coins/images/12479/small/frontier_logo.png?1600145472\",\n  essentia:\n    \"https://assets.coingecko.com/coins/images/2483/small/Essentia-token.jpg?1547036604\",\n  orbs: \"https://assets.coingecko.com/coins/images/4630/small/Orbs.jpg?1547039896\",\n  \"nexus-governance-token\":\n    \"https://assets.coingecko.com/coins/images/19080/small/aK3V5I56_400x400.jpg?1634304970\",\n  playnity:\n    \"https://assets.coingecko.com/coins/images/21479/small/ply.png?1639651574\",\n  starterra:\n    \"https://assets.coingecko.com/coins/images/17715/small/starterra-logo.png?1629084125\",\n  \"mirrored-tesla\":\n    \"https://assets.coingecko.com/coins/images/13644/small/mirror_logo_transparent.png?1611565294\",\n  \"anchor-protocol\":\n    \"https://assets.coingecko.com/coins/images/14420/small/anchor_protocol_logo.jpg?1615965420\",\n  \"mirrored-amazon\":\n    \"https://assets.coingecko.com/coins/images/13646/small/mirror_logo_transparent.png?1611565645\",\n  bitlocus:\n    \"https://assets.coingecko.com/coins/images/20913/small/btl.png?1637922710\",\n  \"mirrored-spdr-s-p-500\":\n    \"https://assets.coingecko.com/coins/images/21088/small/mir.png?1638323591\",\n  \"mirrored-airbnb\":\n    \"https://assets.coingecko.com/coins/images/14022/small/mirror_logo_transparent.png?1613719600\",\n  anchorust:\n    \"https://assets.coingecko.com/coins/images/21097/small/aust.png?1638324579\",\n  \"mirrored-netflix\":\n    \"https://assets.coingecko.com/coins/images/13643/small/mirror_logo_transparent.png?1611565277\",\n  \"pylon-protocol\":\n    \"https://assets.coingecko.com/coins/images/16859/small/pylon_logo.png?1625466331\",\n  \"mirrored-apple\":\n    \"https://assets.coingecko.com/coins/images/13514/small/mirror_logo_transparent.png?1611564758\",\n  secret:\n    \"https://assets.coingecko.com/coins/images/11871/small/Secret.png?1595520186\",\n  \"ethereum-meta\":\n    \"https://assets.coingecko.com/coins/images/6586/small/ethereum-meta.png?1548125409\",\n  cake: \"https://assets.coingecko.com/coins/images/21639/small/cake.png?1639630973\",\n  \"radio-caca\":\n    \"https://assets.coingecko.com/coins/images/17841/small/ez44_BSs_400x400.jpg?1629464170\",\n  \"polychain-monsters\":\n    \"https://assets.coingecko.com/coins/images/14604/small/polkamon.png?1617238350\",\n  \"panda-dao\":\n    \"https://assets.coingecko.com/coins/images/14295/small/logo_Panda_Dao.png?1617277854\",\n  lasereyes:\n    \"https://assets.coingecko.com/coins/images/22597/small/lsr.png?1643524878\",\n  \"wall-street-bets-dapp\":\n    \"https://assets.coingecko.com/coins/images/15093/small/Pe1mrDu.png?1629882480\",\n  \"binance-eth\":\n    \"https://assets.coingecko.com/coins/images/13804/small/Binnace.png?1611997829\",\n  soldoge:\n    \"https://assets.coingecko.com/coins/images/19746/small/2L4aX1r.png?1635822424\",\n  \"odin-protocol\":\n    \"https://assets.coingecko.com/coins/images/14934/small/ODIN_iso_black.png?1619076975\",\n  recharge:\n    \"https://assets.coingecko.com/coins/images/18120/small/thecharge.PNG?1630559768\",\n  mysterium:\n    \"https://assets.coingecko.com/coins/images/757/small/mysterium.png?1547034503\",\n  \"plant-vs-undead-token\":\n    \"https://assets.coingecko.com/coins/images/17461/small/token-200x200.png?1627883446\",\n  insurace:\n    \"https://assets.coingecko.com/coins/images/14226/small/insur.png?1615124622\",\n  cardano:\n    \"https://assets.coingecko.com/coins/images/975/small/cardano.png?1547034860\",\n  echoin:\n    \"https://assets.coingecko.com/coins/images/9354/small/L32_KzNQ_400x400.jpg?1566513096\",\n  solana:\n    \"https://assets.coingecko.com/coins/images/4128/small/solana.png?1640133422\",\n  litecoin:\n    \"https://assets.coingecko.com/coins/images/2/small/litecoin.png?1547033580\",\n  wolfsafepoorpeople:\n    \"https://assets.coingecko.com/coins/images/17090/small/wspplogo.png?1626187594\",\n  \"spongebob-square\":\n    \"https://assets.coingecko.com/coins/images/22772/small/Spnge.png?1642576286\",\n  \"globaltrustfund-token\":\n    \"https://assets.coingecko.com/coins/images/11817/small/gtf.png?1594679456\",\n  \"trust-wallet-token\":\n    \"https://assets.coingecko.com/coins/images/11085/small/Trust.png?1588062702\",\n  \"crypto-fight-club\":\n    \"https://assets.coingecko.com/coins/images/21695/small/zGwwAgL.png?1639721544\",\n  ztcoin:\n    \"https://assets.coingecko.com/coins/images/6566/small/ztcoin.jpg?1547042777\",\n  wraith:\n    \"https://assets.coingecko.com/coins/images/18099/small/LOGOTRANS-1.png?1630475109\",\n  investin:\n    \"https://assets.coingecko.com/coins/images/15588/small/ivn_logo.png?1621267247\",\n  psyoptions:\n    \"https://assets.coingecko.com/coins/images/22784/small/download.png?1642580392\",\n  polkadot:\n    \"https://assets.coingecko.com/coins/images/12171/small/polkadot.png?1639712644\",\n  \"binance-bitcoin\":\n    \"https://assets.coingecko.com/coins/images/14108/small/Binance-bitcoin.png?1617332330\",\n  shirtum:\n    \"https://assets.coingecko.com/coins/images/16955/small/4fWlpC0.png?1625794164\",\n  \"planet-finance\":\n    \"https://assets.coingecko.com/coins/images/15710/small/aqua-icon.png?1621583770\",\n  \"musk-metaverse\":\n    \"https://assets.coingecko.com/coins/images/21822/small/Logo-Symbol-kh-ng-n-n.png?1640075758\",\n  \"oly-sport\":\n    \"https://assets.coingecko.com/coins/images/19930/small/oly_sport.PNG?1636323685\",\n  \"wrapped-avax\":\n    \"https://assets.coingecko.com/coins/images/15075/small/wrapped-avax.png?1629873618\",\n  safemoon:\n    \"https://assets.coingecko.com/coins/images/14362/small/174x174-white.png?1617174846\",\n  hashpanda:\n    \"https://assets.coingecko.com/coins/images/15903/small/logo_-_2021-05-31T060013.983.png?1622412025\",\n  benqi:\n    \"https://assets.coingecko.com/coins/images/16362/small/GergDDN3_400x400.jpg?1644984441\",\n  \"vent-finance\":\n    \"https://assets.coingecko.com/coins/images/17925/small/Artboard_29.png?1629804982\",\n  gemguardian:\n    \"https://assets.coingecko.com/coins/images/18614/small/gemg.PNG?1632697389\",\n  nuls: \"https://assets.coingecko.com/coins/images/1053/small/Nuls.png?1556868153\",\n  openocean:\n    \"https://assets.coingecko.com/coins/images/17014/small/ooe_log.png?1626074195\",\n  synchrony:\n    \"https://assets.coingecko.com/coins/images/19308/small/SYNCHRONY-LOGO.png?1634973091\",\n  biswap:\n    \"https://assets.coingecko.com/coins/images/16845/small/biswap.png?1625388985\",\n  iotex:\n    \"https://assets.coingecko.com/coins/images/3334/small/iotex-logo.png?1547037941\",\n  \"dogemon-go\":\n    \"https://assets.coingecko.com/coins/images/17480/small/dogemongo.PNG?1627950869\",\n  nothing:\n    \"https://assets.coingecko.com/coins/images/16090/small/Gecko-200x200.png?1624544349\",\n  coin98:\n    \"https://assets.coingecko.com/coins/images/17117/small/logo.png?1626412904\",\n  \"numbers-protocol\":\n    \"https://assets.coingecko.com/coins/images/20495/small/5J3RAUO2_400x400.jpg?1637131666\",\n  maticverse:\n    \"https://assets.coingecko.com/coins/images/18403/small/A0782-F05-535-C-45-C8-BE4-F-FEBB4-B8-B5933.jpg?1631792934\",\n  dogecoin:\n    \"https://assets.coingecko.com/coins/images/5/small/dogecoin.png?1547792256\",\n  wbnb: \"https://assets.coingecko.com/coins/images/12591/small/binance-coin-logo.png?1600947313\",\n  idefiyieldprotocol:\n    \"https://assets.coingecko.com/coins/images/21976/small/i-DYP-Logo-1.png?1640570294\",\n  catzcoin:\n    \"https://assets.coingecko.com/coins/images/15519/small/MX0hFr7.jpeg?1621118815\",\n  \"lucky-lion\":\n    \"https://assets.coingecko.com/coins/images/18712/small/lucky-token-200px.png?1633079262\",\n  infinitup:\n    \"https://assets.coingecko.com/coins/images/18890/small/fc_qo2M7_400x400.jpg?1633749805\",\n  \"baby-doge-coin\":\n    \"https://assets.coingecko.com/coins/images/16125/small/Baby_Doge.png?1623044048\",\n  \"safuyield-protocol\":\n    \"https://assets.coingecko.com/coins/images/17021/small/safuyield.png?1626098281\",\n  \"biconomy-exchange-token\":\n    \"https://assets.coingecko.com/coins/images/18198/small/mGky0OOh_400x400.jpg?1630965301\",\n  \"green-shiba-inu\":\n    \"https://assets.coingecko.com/coins/images/15649/small/inu-logo-new-200x200.png?1625578449\",\n  \"beefy-finance\":\n    \"https://assets.coingecko.com/coins/images/12704/small/token.png?1601876182\",\n  \"orion-protocol\":\n    \"https://assets.coingecko.com/coins/images/11841/small/orion_logo.png?1594943318\",\n  catecoin:\n    \"https://assets.coingecko.com/coins/images/15364/small/logo.png?1620647627\",\n  rougecoin:\n    \"https://assets.coingecko.com/coins/images/14621/small/rougecoin.png?1617265377\",\n  \"token-pocket\":\n    \"https://assets.coingecko.com/coins/images/7603/small/_E6sbg1g_400x400.jpg?1548828066\",\n  starlaunch:\n    \"https://assets.coingecko.com/coins/images/20109/small/OP3eksDQ_400x400.png?1636513478\",\n  ontology:\n    \"https://assets.coingecko.com/coins/images/3447/small/ONT.png?1583481820\",\n  chi: \"https://assets.coingecko.com/coins/images/20130/small/sIuRXww.png?1636528063\",\n  wmatic:\n    \"https://assets.coingecko.com/coins/images/14073/small/matic.png?1628852392\",\n  \"aave-polygon-usdc\":\n    \"https://assets.coingecko.com/coins/images/17249/small/amUSDC_2x.png?1626941306\",\n  \"data-economy-index\":\n    \"https://assets.coingecko.com/coins/images/18500/small/data_32.png?1632209427\",\n  ispolink:\n    \"https://assets.coingecko.com/coins/images/15283/small/isolink.PNG?1620352267\",\n  celo: \"https://assets.coingecko.com/coins/images/11090/small/icon-celo-CELO-color-500.png?1592293590\",\n  \"saitama-inu\":\n    \"https://assets.coingecko.com/coins/images/16353/small/Capture.PNG?1632126703\",\n  \"true-usd\":\n    \"https://assets.coingecko.com/coins/images/3449/small/tusd.png?1618395665\",\n  \"eagonswap-token\":\n    \"https://assets.coingecko.com/coins/images/20431/small/IMG-20210912-WA0003.jpg?1637035180\",\n  easyfi:\n    \"https://assets.coingecko.com/coins/images/12742/small/Logo_Icon.png?1624471467\",\n  streamr:\n    \"https://assets.coingecko.com/coins/images/17869/small/DATA_new_symbol_3x.png?1629692324\",\n  \"internet-node-token\":\n    \"https://assets.coingecko.com/coins/images/2519/small/int-logo-red-transparent_200x200.png?1617251612\",\n  \"0xmonero\":\n    \"https://assets.coingecko.com/coins/images/11035/small/0xmnr.PNG?1587357680\",\n  one: \"https://assets.coingecko.com/coins/images/4960/small/Screenshot_39.png?1561103318\",\n  \"gaia-everworld\":\n    \"https://assets.coingecko.com/coins/images/19629/small/gaia_icon_new.png?1637559277\",\n  quick:\n    \"https://assets.coingecko.com/coins/images/13970/small/1_pOU6pBMEmiL-ZJVb0CYRjQ.png?1613386659\",\n  \"tixl-new\":\n    \"https://assets.coingecko.com/coins/images/12432/small/Tixl-Logo-200-transparent.png?1610248504\",\n  \"hakka-finance\":\n    \"https://assets.coingecko.com/coins/images/12163/small/Hakka-icon.png?1597746776\",\n  \"aurora-dao\":\n    \"https://assets.coingecko.com/coins/images/2565/small/logomark-purple-286x286.png?1638362736\",\n  mimatic:\n    \"https://assets.coingecko.com/coins/images/15264/small/mimatic-red.png?1620281018\",\n  sifchain:\n    \"https://assets.coingecko.com/coins/images/14044/small/EROWAN.png?1614656300\",\n  \"polygon-ecosystem-index\":\n    \"https://assets.coingecko.com/coins/images/19270/small/amun-peco.png?1634868167\",\n  \"iron-titanium-token\":\n    \"https://assets.coingecko.com/coins/images/16031/small/titan.png?1636080284\",\n  boozedoge:\n    \"https://assets.coingecko.com/coins/images/18852/small/Booze-Logo-CMC.png?1633592459\",\n  banano:\n    \"https://assets.coingecko.com/coins/images/6226/small/banano-transparent.png?1619589798\",\n  tryhards:\n    \"https://assets.coingecko.com/coins/images/18624/small/Q22nU_z4_400x400.jpg?1632702444\",\n  \"dragons-quick\":\n    \"https://assets.coingecko.com/coins/images/15185/small/quickswap.png?1620044811\",\n  \"wrapped-memory\":\n    \"https://assets.coingecko.com/coins/images/22392/small/wmemo.png?1641792100\",\n  joe: \"https://assets.coingecko.com/coins/images/17569/small/joe_200x200.png?1628497750\",\n  livepeer:\n    \"https://assets.coingecko.com/coins/images/7137/small/logo-circle-green.png?1619593365\",\n  \"celer-network\":\n    \"https://assets.coingecko.com/coins/images/4379/small/Celr.png?1554705437\",\n};\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  receiveDataWrapper,\n} from \"../store/helpers\";\nimport { COIN_GECKO_IMAGE_URLS } from \"../utils/coinGecko\";\nimport { CHAINS_BY_ID, TVL_URL } from \"../utils/consts\";\n\nexport type TVL = {\n  logo?: string;\n  symbol?: string;\n  name?: string;\n  amount: string;\n  totalValue?: number;\n  quotePrice?: number;\n  assetAddress: string;\n  originChainId: ChainId;\n  originChain: string;\n  decimals?: number;\n};\n\ninterface LockedAsset {\n  Symbol: string;\n  Name: string;\n  Address: string;\n  CoinGeckoId: string;\n  Amount: number;\n  Notional: number;\n  TokenPrice: number;\n}\n\ninterface LockedAssets {\n  [tokenAddress: string]: LockedAsset;\n}\n\ninterface ChainsAssets {\n  [chainId: string]: LockedAssets;\n}\n\ninterface NotionalTvl {\n  Last24HoursChange: ChainsAssets;\n  AllTime: ChainsAssets;\n}\n\nconst createTVLArray = (notionalTvl: NotionalTvl) => {\n  const tvl: TVL[] = [];\n  for (const [chainId, chainAssets] of Object.entries(notionalTvl.AllTime)) {\n    if (chainId === \"*\") continue;\n    const originChainId = +chainId as ChainId;\n    const originChain = CHAINS_BY_ID[originChainId].name;\n    for (const [tokenAddress, lockedAsset] of Object.entries(chainAssets)) {\n      if (tokenAddress === \"*\") continue;\n      tvl.push({\n        logo: COIN_GECKO_IMAGE_URLS[lockedAsset.CoinGeckoId],\n        symbol: lockedAsset.Symbol,\n        name: lockedAsset.Name,\n        amount: lockedAsset.Amount.toString(),\n        totalValue: lockedAsset.Notional,\n        quotePrice: lockedAsset.TokenPrice,\n        assetAddress: tokenAddress,\n        originChainId,\n        originChain,\n      });\n    }\n  }\n  return tvl;\n};\n\nconst useTVL = () => {\n  const [tvl, setTvl] = useState<DataWrapper<TVL[]>>(fetchDataWrapper());\n\n  useEffect(() => {\n    let cancelled = false;\n    axios\n      .get<NotionalTvl>(TVL_URL)\n      .then((response) => {\n        if (!cancelled) {\n          setTvl(receiveDataWrapper(createTVLArray(response.data)));\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        if (!cancelled) {\n          setTvl(errorDataWrapper(error));\n        }\n      });\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return tvl;\n};\n\nexport default useTVL;\n","import React from \"react\";\n\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst TablePaginationActions = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n};\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nexport default TablePaginationActions;\n","import { IconButton } from \"@material-ui/core\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport {\n  AddCircleOutline,\n  KeyboardArrowDown,\n  KeyboardArrowRight,\n  RemoveCircleOutline,\n} from \"@material-ui/icons\";\nimport React from \"react\";\nimport {\n  useExpanded,\n  useGlobalFilter,\n  useGroupBy,\n  usePagination,\n  useSortBy,\n  useTable,\n} from \"react-table\";\nimport TablePaginationActions from \"./TablePaginationActions\";\n\nconst stopProp = (e) => {\n  e.stopPropagation();\n};\n\nconst EnhancedTable = ({ columns, data, skipPageReset, initialState = {} }) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    rows,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      autoResetPage: !skipPageReset,\n      initialState,\n    },\n    useGlobalFilter,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination\n  );\n\n  const handlePageChange = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (event) => {\n    setPageSize(Number(event.target.value));\n  };\n\n  // Render the UI for your table\n  return (\n    <>\n      <TableContainer>\n        <MaUTable {...getTableProps()}>\n          <TableHead>\n            {headerGroups.map((headerGroup) => (\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <TableCell\n                    {...(column.id === \"selection\"\n                      ? column.getHeaderProps()\n                      : column.getHeaderProps(column.getSortByToggleProps()))}\n                    align={\n                      // TODO: better way to get column?\n                      columns.find((c) => c.Header === column.Header)?.align ||\n                      \"left\"\n                    }\n                  >\n                    {column.id !== \"selection\" ? (\n                      <TableSortLabel\n                        active={column.isSorted}\n                        // react-table has a unsorted state which is not treated here\n                        direction={column.isSortedDesc ? \"desc\" : \"asc\"}\n                      >\n                        {column.render(\"Header\")}\n                      </TableSortLabel>\n                    ) : (\n                      column.render(\"Header\")\n                    )}\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span onClick={stopProp}>\n                        <IconButton\n                          size=\"small\"\n                          {...column.getGroupByToggleProps()}\n                        >\n                          {column.isGrouped ? (\n                            <RemoveCircleOutline fontSize=\"inherit\" />\n                          ) : (\n                            <AddCircleOutline fontSize=\"inherit\" />\n                          )}\n                        </IconButton>\n                      </span>\n                    ) : null}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableHead>\n          <TableBody>\n            {page.map((row, i) => {\n              prepareRow(row);\n              return (\n                <TableRow {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <TableCell\n                        {...cell.getCellProps()}\n                        align={cell.column.align || \"left\"}\n                      >\n                        {cell.isGrouped ? (\n                          // If it's a grouped cell, add an expander and row count\n                          <>\n                            <IconButton\n                              size=\"small\"\n                              {...row.getToggleRowExpandedProps()}\n                            >\n                              {row.isExpanded ? (\n                                <KeyboardArrowDown fontSize=\"inherit\" />\n                              ) : (\n                                <KeyboardArrowRight fontSize=\"inherit\" />\n                              )}\n                            </IconButton>{\" \"}\n                            {cell.render(\"Cell\")} ({row.subRows.length})\n                          </>\n                        ) : cell.isAggregated ? (\n                          // If the cell is aggregated, use the Aggregated\n                          // renderer for cell\n                          cell.render(\"Aggregated\")\n                        ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                          // Otherwise, just render the regular cell\n                          cell.render(\"Cell\")\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </MaUTable>\n      </TableContainer>\n      <TablePagination\n        component=\"div\"\n        rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: rows.length }]}\n        count={rows.length}\n        rowsPerPage={pageSize}\n        page={pageIndex}\n        SelectProps={{\n          inputProps: { \"aria-label\": \"rows per page\" },\n          native: true,\n        }}\n        onPageChange={handlePageChange}\n        onRowsPerPageChange={handleRowsPerPageChange}\n        ActionsComponent={TablePaginationActions}\n      />\n    </>\n  );\n};\n\nexport default EnhancedTable;\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { COLORS } from \"../../muiTheme\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOL_CUSTODY_ADDRESS,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(8),\n  },\n}));\n\nconst CustodyAddresses: React.FC<any> = () => {\n  const classes = useStyles();\n  const data = useMemo(() => {\n    return [\n      {\n        chainName: \"Ethereum\",\n        chainId: CHAIN_ID_ETH,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_ETH),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_ETH),\n      },\n      {\n        chainName: \"Solana\",\n        chainId: CHAIN_ID_SOLANA,\n        tokenAddress: SOL_CUSTODY_ADDRESS,\n        nftAddress: SOL_NFT_CUSTODY_ADDRESS,\n      },\n      {\n        chainName: \"Binance Smart Chain\",\n        chainId: CHAIN_ID_BSC,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_BSC),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_BSC),\n      },\n      {\n        chainName: \"Terra\",\n        chainId: CHAIN_ID_TERRA,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_TERRA),\n        nftAddress: null,\n      },\n      {\n        chainName: \"Polygon\",\n        chainId: CHAIN_ID_POLYGON,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_POLYGON),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_POLYGON),\n      },\n      {\n        chainName: \"Avalanche\",\n        chainId: CHAIN_ID_AVAX,\n        tokenAddress: getTokenBridgeAddressForChain(CHAIN_ID_AVAX),\n        nftAddress: getNFTBridgeAddressForChain(CHAIN_ID_AVAX),\n      },\n    ];\n  }, []);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      {\n        Header: \"Token Address\",\n        id: \"tokenAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.tokenAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.tokenAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n      {\n        Header: \"NFT Address\",\n        id: \"nftAddress\",\n        accessor: \"address\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nftAddress && value.row?.original?.chainId ? (\n            <SmartAddress\n              chainId={value.row?.original?.chainId}\n              address={value.row?.original?.nftAddress}\n            />\n          ) : (\n            \"\"\n          ),\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h4\">Custody Addresses</Typography>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          These are the custody addresses which hold collateralized assets for\n          the token bridge.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{}}\n    />\n  );\n\n  return (\n    <>\n      {header}\n      <Paper className={classes.mainPaper}>{table}</Paper>\n    </>\n  );\n};\n\nexport default CustodyAddresses;\n","import { ChainId, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type EvmMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst ERC20_BASIC_ABI = [\n  \"function name() view returns (string name)\",\n  \"function symbol() view returns (string symbol)\",\n  \"function decimals() view returns (uint8 decimals)\",\n];\n\nconst handleError = () => {\n  return undefined;\n};\n\nconst fetchSingleMetadata = async (\n  address: string,\n  provider: Provider\n): Promise<EvmMetadata> => {\n  const contract = new ethers.Contract(address, ERC20_BASIC_ABI, provider);\n  const [name, symbol, decimals] = await Promise.all([\n    contract.name().catch(handleError),\n    contract.symbol().catch(handleError),\n    contract.decimals().catch(handleError),\n  ]);\n  return { tokenName: name, symbol, decimals };\n};\n\nconst fetchEthMetadata = async (addresses: string[], provider: Provider) => {\n  const promises: Promise<EvmMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, provider));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, EvmMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nfunction useEvmMetadata(\n  addresses: string[],\n  chainId: ChainId\n): DataWrapper<Map<string, EvmMetadata>> {\n  const { isReady } = useIsWalletReady(chainId, false);\n  const { provider } = useEthereumProvider();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, EvmMetadata> | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (addresses.length && provider && isReady && isEVMChain(chainId)) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchEthMetadata(addresses, provider).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses, provider, isReady, chainId]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n}\n\nexport default useEvmMetadata;\n","import { LCDClient } from \"@terra-money/terra.js\";\nimport { useLayoutEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { TERRA_HOST } from \"../utils/consts\";\n\nexport type TerraMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n};\n\nconst fetchSingleMetadata = async (address: string, lcd: LCDClient) =>\n  lcd.wasm\n    .contractQuery(address, {\n      token_info: {},\n    })\n    .then(\n      ({ symbol, name: tokenName, decimals }: any) =>\n        ({\n          symbol,\n          tokenName,\n          decimals,\n        } as TerraMetadata)\n    );\n\nconst fetchTerraMetadata = async (addresses: string[]) => {\n  const lcd = new LCDClient(TERRA_HOST);\n  const promises: Promise<TerraMetadata>[] = [];\n  addresses.forEach((address) => {\n    promises.push(fetchSingleMetadata(address, lcd));\n  });\n  const resultsArray = await Promise.all(promises);\n  const output = new Map<string, TerraMetadata>();\n  addresses.forEach((address, index) => {\n    output.set(address, resultsArray[index]);\n  });\n\n  return output;\n};\n\nconst useTerraMetadata = (\n  addresses: string[]\n): DataWrapper<Map<string, TerraMetadata>> => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [data, setData] = useState<Map<string, TerraMetadata> | null>(null);\n\n  useLayoutEffect(() => {\n    let cancelled = false;\n    if (addresses.length) {\n      setIsFetching(true);\n      setError(\"\");\n      setData(null);\n      fetchTerraMetadata(addresses).then(\n        (results) => {\n          if (!cancelled) {\n            setData(results);\n            setIsFetching(false);\n          }\n        },\n        () => {\n          if (!cancelled) {\n            setError(\"Could not retrieve contract metadata\");\n            setIsFetching(false);\n          }\n        }\n      );\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [addresses]);\n\n  return useMemo(\n    () => ({\n      data,\n      isFetching,\n      error,\n      receivedAt: null,\n    }),\n    [data, isFetching, error]\n  );\n};\n\nexport default useTerraMetadata;\n","import { Dispatch } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { selectTerraTokenMap } from \"../store/selectors\";\nimport {\n  errorTerraTokenMap,\n  fetchTerraTokenMap,\n  receiveTerraTokenMap,\n} from \"../store/tokenSlice\";\nimport { TERRA_TOKEN_METADATA_URL } from \"../utils/consts\";\n\nexport type TerraTokenMetadata = {\n  protocol: string;\n  symbol: string;\n  token: string;\n  icon: string;\n  name?: string;\n  balance?: string; // populated by native tokens, could move to a type that extends this\n};\n\nexport type TerraTokenMap = {\n  mainnet: {\n    [address: string]: TerraTokenMetadata;\n  };\n};\n\nconst useTerraTokenMap = (shouldFire: boolean): DataWrapper<TerraTokenMap> => {\n  const terraTokenMap = useSelector(selectTerraTokenMap);\n  const dispatch = useDispatch();\n  const internalShouldFire =\n    shouldFire &&\n    (terraTokenMap.data === undefined ||\n      (terraTokenMap.data === null && !terraTokenMap.isFetching));\n\n  useEffect(() => {\n    if (internalShouldFire) {\n      getTerraTokenMap(dispatch);\n    }\n  }, [internalShouldFire, dispatch]);\n\n  return terraTokenMap;\n};\n\nconst getTerraTokenMap = (dispatch: Dispatch) => {\n  dispatch(fetchTerraTokenMap());\n  axios.get(TERRA_TOKEN_METADATA_URL).then(\n    (response) => {\n      dispatch(receiveTerraTokenMap(response.data as TerraTokenMap));\n    },\n    (error) => {\n      dispatch(errorTerraTokenMap(\"Failed to retrieve the Terra Token List.\"));\n    }\n  );\n};\n\nexport default useTerraTokenMap;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useMemo } from \"react\";\nimport { DataWrapper, getEmptyDataWrapper } from \"../store/helpers\";\nimport { logoOverrides } from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useEvmMetadata, { EvmMetadata } from \"./useEvmMetadata\";\nimport useMetaplexData from \"./useMetaplexData\";\nimport useSolanaTokenMap from \"./useSolanaTokenMap\";\nimport useTerraMetadata, { TerraMetadata } from \"./useTerraMetadata\";\nimport useTerraTokenMap, { TerraTokenMap } from \"./useTerraTokenMap\";\n\nexport type GenericMetadata = {\n  symbol?: string;\n  logo?: string;\n  tokenName?: string;\n  decimals?: number;\n  //TODO more items\n  raw?: any;\n};\n\nconst constructSolanaMetadata = (\n  addresses: string[],\n  solanaTokenMap: DataWrapper<TokenInfo[]>,\n  metaplexData: DataWrapper<Map<string, Metadata | undefined> | undefined>\n) => {\n  const isFetching = solanaTokenMap.isFetching || metaplexData?.isFetching;\n  const error = solanaTokenMap.error || metaplexData?.isFetching;\n  const receivedAt = solanaTokenMap.receivedAt && metaplexData?.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metaplex = metaplexData?.data?.get(address);\n    const tokenInfo = solanaTokenMap.data?.find((x) => x.address === address);\n    //Both this and the token picker, at present, give priority to the tokenmap\n    const obj = {\n      symbol: metaplex?.data?.symbol || tokenInfo?.symbol || undefined,\n      logo: tokenInfo?.logoURI || undefined, //TODO is URI on metaplex actually the logo? If not, where is it?\n      tokenName: metaplex?.data?.name || tokenInfo?.name || undefined,\n      decimals: tokenInfo?.decimals || undefined, //TODO decimals are actually on the mint, not the metaplex account.\n      raw: metaplex,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructTerraMetadata = (\n  addresses: string[],\n  tokenMap: DataWrapper<TerraTokenMap>,\n  terraMetadata: DataWrapper<Map<string, TerraMetadata>>\n) => {\n  const isFetching = tokenMap.isFetching || terraMetadata.isFetching;\n  const error = tokenMap.error || terraMetadata.error;\n  const receivedAt = tokenMap.receivedAt && terraMetadata.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const metadata = terraMetadata.data?.get(address);\n    const tokenInfo = tokenMap.data?.mainnet[address];\n    const obj = {\n      symbol: tokenInfo?.symbol || metadata?.symbol || undefined,\n      logo: tokenInfo?.icon || metadata?.logo || undefined,\n      tokenName: tokenInfo?.name || metadata?.tokenName || undefined,\n      decimals: metadata?.decimals || undefined,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nconst constructEthMetadata = (\n  addresses: string[],\n  metadataMap: DataWrapper<Map<string, EvmMetadata> | null>\n) => {\n  const isFetching = metadataMap.isFetching;\n  const error = metadataMap.error;\n  const receivedAt = metadataMap.receivedAt;\n  const data = new Map<string, GenericMetadata>();\n  addresses.forEach((address) => {\n    const meta = metadataMap.data?.get(address);\n    const obj = {\n      symbol: meta?.symbol || undefined,\n      logo: logoOverrides.get(address) || meta?.logo || undefined,\n      tokenName: meta?.tokenName || undefined,\n      decimals: meta?.decimals,\n    };\n    data.set(address, obj);\n  });\n\n  return {\n    isFetching,\n    error,\n    receivedAt,\n    data,\n  };\n};\n\nexport default function useMetadata(\n  chainId: ChainId,\n  addresses: string[]\n): DataWrapper<Map<string, GenericMetadata>> {\n  const terraTokenMap = useTerraTokenMap(chainId === CHAIN_ID_TERRA);\n  const solanaTokenMap = useSolanaTokenMap();\n\n  const solanaAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_SOLANA ? addresses : [];\n  }, [chainId, addresses]);\n  const terraAddresses = useMemo(() => {\n    return chainId === CHAIN_ID_TERRA ? addresses : [];\n  }, [chainId, addresses]);\n  const ethereumAddresses = useMemo(() => {\n    return isEVMChain(chainId) ? addresses : [];\n  }, [chainId, addresses]);\n\n  const metaplexData = useMetaplexData(solanaAddresses);\n  const terraMetadata = useTerraMetadata(terraAddresses);\n  const ethMetadata = useEvmMetadata(ethereumAddresses, chainId);\n\n  const output: DataWrapper<Map<string, GenericMetadata>> = useMemo(\n    () =>\n      chainId === CHAIN_ID_SOLANA\n        ? constructSolanaMetadata(solanaAddresses, solanaTokenMap, metaplexData)\n        : isEVMChain(chainId)\n        ? constructEthMetadata(ethereumAddresses, ethMetadata)\n        : chainId === CHAIN_ID_TERRA\n        ? constructTerraMetadata(terraAddresses, terraTokenMap, terraMetadata)\n        : getEmptyDataWrapper(),\n    [\n      chainId,\n      solanaAddresses,\n      solanaTokenMap,\n      metaplexData,\n      ethereumAddresses,\n      ethMetadata,\n      terraAddresses,\n      terraMetadata,\n      terraTokenMap,\n    ]\n  );\n\n  return output;\n}\n","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport { NFTParsedTokenAccount } from \"../store/nftSlice\";\nimport {\n  BSC_NFT_BRIDGE_ADDRESS,\n  COVALENT_GET_TOKENS_URL,\n  ETH_NFT_BRIDGE_ADDRESS,\n  getNFTBridgeAddressForChain,\n  POLYGON_NFT_BRIDGE_ADDRESS,\n  SOLANA_HOST,\n  SOL_NFT_CUSTODY_ADDRESS,\n} from \"../utils/consts\";\nimport { Metadata } from \"../utils/metaplex\";\nimport useMetadata, { GenericMetadata } from \"./useMetadata\";\n\nexport type NFTTVL = NFTParsedTokenAccount & { chainId: ChainId };\n\nconst calcEvmTVL = (covalentReport: any, chainId: ChainId): NFTTVL[] => {\n  const output: NFTTVL[] = [];\n  if (!covalentReport?.data?.items?.length) {\n    return [];\n  }\n\n  covalentReport.data.items.forEach((item: any) => {\n    //TODO remove non nfts\n    if (item.balance > 0 && item.contract_address && item.nft_data) {\n      item.nft_data.forEach((nftData: any) => {\n        if (nftData.token_id) {\n          output.push({\n            amount: item.balance,\n            mintKey: item.contract_address,\n            tokenId: nftData.token_id,\n            publicKey: getNFTBridgeAddressForChain(chainId),\n            decimals: 0,\n            uiAmount: 0,\n            uiAmountString: item.balance.toString(),\n            chainId: chainId,\n            uri: nftData.token_url,\n            animation_url: nftData.external_data?.animation_url,\n            external_url: nftData.external_data?.external_url,\n            image: nftData.external_data?.image,\n            image_256: nftData.external_data?.image_256,\n            nftName: nftData.external_data?.name,\n            description: nftData.external_data?.description,\n          });\n        }\n      });\n    }\n  });\n\n  return output;\n};\nconst calcSolanaTVL = (\n  accounts:\n    | { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n    | undefined,\n  metaData: DataWrapper<Map<string, GenericMetadata>>\n) => {\n  const output: NFTTVL[] = [];\n  if (\n    !accounts ||\n    !accounts.length ||\n    metaData.isFetching ||\n    metaData.error ||\n    !metaData.data\n  ) {\n    return output;\n  }\n\n  accounts.forEach((item) => {\n    const genericMetadata = metaData.data?.get(\n      item.account.data.parsed?.info?.mint?.toString()\n    );\n    const raw: Metadata | undefined = genericMetadata?.raw;\n\n    if (\n      item.account.data.parsed?.info?.tokenAmount?.uiAmount > 0 &&\n      item.account.data.parsed?.info?.tokenAmount?.decimals === 0\n    ) {\n      output.push({\n        amount: item.account.data.parsed?.info?.tokenAmount?.amount,\n        mintKey: item.account.data.parsed?.info?.mint,\n        publicKey: getNFTBridgeAddressForChain(CHAIN_ID_SOLANA),\n        decimals: 0,\n        uiAmount: 0,\n        uiAmountString:\n          item.account.data.parsed?.info?.tokenAmount?.uiAmountString,\n        chainId: CHAIN_ID_SOLANA,\n        uri: raw?.data?.uri,\n        symbol: raw?.data?.symbol,\n        // external_url: nftData.external_data?.external_url,\n        // image: nftData.external_data?.image,\n        // image_256: nftData.external_data?.image_256,\n        // nftName: nftData.external_data?.name,\n        // description: nftData.external_data?.description,\n      });\n    }\n  });\n\n  return output;\n};\n\nconst useNFTTVL = (): DataWrapper<NFTTVL[]> => {\n  const [ethCovalentData, setEthCovalentData] = useState(undefined);\n  const [ethCovalentIsLoading, setEthCovalentIsLoading] = useState(false);\n  const [ethCovalentError, setEthCovalentError] = useState(\"\");\n\n  const [bscCovalentData, setBscCovalentData] = useState(undefined);\n  const [bscCovalentIsLoading, setBscCovalentIsLoading] = useState(false);\n  const [bscCovalentError, setBscCovalentError] = useState(\"\");\n\n  const [polygonCovalentData, setPolygonCovalentData] = useState(undefined);\n  const [polygonCovalentIsLoading, setPolygonCovalentIsLoading] =\n    useState(false);\n  const [polygonCovalentError, setPolygonCovalentError] = useState(\"\");\n\n  const [avaxCovalentData, setAvaxCovalentData] = useState(undefined);\n  const [avaxCovalentIsLoading, setAvaxCovalentIsLoading] = useState(false);\n  const [avaxCovalentError, setAvaxCovalentError] = useState(\"\");\n\n  const [solanaCustodyTokens, setSolanaCustodyTokens] = useState<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[] | undefined\n  >(undefined);\n  const [solanaCustodyTokensLoading, setSolanaCustodyTokensLoading] =\n    useState(false);\n  const [solanaCustodyTokensError, setSolanaCustodyTokensError] = useState(\"\");\n  const mintAddresses = useMemo(() => {\n    const addresses: string[] = [];\n    solanaCustodyTokens?.forEach((item) => {\n      const mintKey = item.account.data.parsed?.info?.mint?.toString();\n      if (mintKey) {\n        addresses.push(mintKey);\n      }\n    });\n    return addresses;\n  }, [solanaCustodyTokens]);\n\n  const solanaMetadata = useMetadata(CHAIN_ID_SOLANA, mintAddresses);\n\n  const solanaTVL = useMemo(\n    () => calcSolanaTVL(solanaCustodyTokens, solanaMetadata),\n    [solanaCustodyTokens, solanaMetadata]\n  );\n  const ethTVL = useMemo(\n    () => calcEvmTVL(ethCovalentData, CHAIN_ID_ETH),\n    [ethCovalentData]\n  );\n  const bscTVL = useMemo(\n    () => calcEvmTVL(bscCovalentData, CHAIN_ID_BSC),\n    [bscCovalentData]\n  );\n\n  const polygonTVL = useMemo(\n    () => calcEvmTVL(polygonCovalentData, CHAIN_ID_POLYGON),\n    [polygonCovalentData]\n  );\n\n  const avaxTVL = useMemo(\n    () => calcEvmTVL(avaxCovalentData, CHAIN_ID_AVAX),\n    [avaxCovalentData]\n  );\n\n  useEffect(() => {\n    let cancelled = false;\n    setEthCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_ETH,\n          ETH_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setEthCovalentData(results.data);\n            setEthCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setEthCovalentError(\"Unable to retrieve Ethereum TVL.\");\n            setEthCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setBscCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_BSC,\n          BSC_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setBscCovalentData(results.data);\n            setBscCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setBscCovalentError(\"Unable to retrieve BSC TVL.\");\n            setBscCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setPolygonCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_POLYGON,\n          POLYGON_NFT_BRIDGE_ADDRESS,\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setPolygonCovalentData(results.data);\n            setPolygonCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setPolygonCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setPolygonCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setAvaxCovalentIsLoading(true);\n    axios\n      .get(\n        COVALENT_GET_TOKENS_URL(\n          CHAIN_ID_AVAX,\n          getNFTBridgeAddressForChain(CHAIN_ID_AVAX),\n          true,\n          false\n        )\n      )\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setAvaxCovalentData(results.data);\n            setAvaxCovalentIsLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setAvaxCovalentError(\"Unable to retrieve Polygon TVL.\");\n            setAvaxCovalentIsLoading(false);\n          }\n        }\n      );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    setSolanaCustodyTokensLoading(true);\n    connection\n      .getParsedTokenAccountsByOwner(new PublicKey(SOL_NFT_CUSTODY_ADDRESS), {\n        programId: TOKEN_PROGRAM_ID,\n      })\n      .then(\n        (results) => {\n          if (!cancelled) {\n            setSolanaCustodyTokens(results.value);\n            setSolanaCustodyTokensLoading(false);\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setSolanaCustodyTokensLoading(false);\n            setSolanaCustodyTokensError(\n              \"Unable to retrieve Solana locked tokens.\"\n            );\n          }\n        }\n      );\n  }, []);\n\n  return useMemo(() => {\n    const tvlArray = [\n      ...ethTVL,\n      ...bscTVL,\n      ...polygonTVL,\n      ...avaxTVL,\n      ...solanaTVL,\n    ];\n\n    return {\n      isFetching:\n        ethCovalentIsLoading ||\n        bscCovalentIsLoading ||\n        polygonCovalentIsLoading ||\n        avaxCovalentIsLoading ||\n        solanaCustodyTokensLoading,\n      error:\n        ethCovalentError ||\n        bscCovalentError ||\n        polygonCovalentError ||\n        avaxCovalentError ||\n        solanaCustodyTokensError,\n      receivedAt: null,\n      data: tvlArray,\n    };\n  }, [\n    ethCovalentError,\n    ethCovalentIsLoading,\n    bscCovalentError,\n    bscCovalentIsLoading,\n    polygonTVL,\n    polygonCovalentError,\n    polygonCovalentIsLoading,\n    ethTVL,\n    bscTVL,\n    solanaTVL,\n    solanaCustodyTokensError,\n    solanaCustodyTokensLoading,\n    avaxTVL,\n    avaxCovalentIsLoading,\n    avaxCovalentError,\n  ]);\n};\n\nexport default useNFTTVL;\n","export const DENY_LIST = [\n  \"D9cX654dGb4GFzqq3RY7rhZbRkQqUkfggDZdnYxqv97g\",\n  \"0xfeA43A080297B02F2eBB88a27Cb0FA6DB1b33B1d\",\n  \"GUSNP2z7nXjMpmYWeFbS819VwHb5tp7VoGbC6iGHtXmE\",\n  \"ERfkrhhgBB6zRo3x4XAcQKjhxu1JdX1PBfdj1RbHsfc7\",\n  \"f8DrFDG8dd6kV34WdjoEZd9vZin2pJAck8eMFUXZv1G\",\n  \"0x72b6dc1003e154ac71c76d3795a3829cfd5e33b9\",\n];\n\nexport const ALLOW_LIST: string[] = [\n  \"0x915bcb55faf663429fcc1efeb4e346703a91e4b2\",\n  \"0xf642d8a98845a25844d3911fa1da1d70587c0acc\",\n  \"0x1c60841b70821dca733c9b1a26dbe1a33338bd43\",\n  \"0x5603172654f37b509d74c6fe3a3fc087104100d9\",\n  \"0x60f80121c31a0d46b5279700f9df786054aa5ee5\",\n  \"0xd136ad9eb0a53633156972e3f746ab10d6dced7d\",\n  \"0x68d5d4ff0274dd95760e300ef16b81c5eed09842\",\n  \"0x4961db588dd962abb20927aa38fa33e5225b3be2\",\n  \"0x2e956ed3d7337f4ed4316a6e8f2edf74bf84bb54\",\n  \"0xb411d36e034d87558c3f96636dd7f7b62e093a1e\",\n  \"0x7592e2f251a7f7da27211625d652092769f43a60\",\n  \"0x21b999ec13828edefa243675c64324298c03b831\",\n  \"0xad5f6cdda157694439ef9f6dd409424321c74628\",\n  \"0x9cf63efbe189091b7e3d364c7f6cfbe06997872b\",\n  \"0x7581f8e289f00591818f6c467939da7f9ab5a777\",\n  \"0x93b1077d163365e05c9421e8f72547e2fe1e0a5b\",\n  \"0x85d39cea74b0baba54d7fd0df42dd3e6e39b1625\",\n  \"0x2fb5b875a85713cba312c097d16838c242cadaec\",\n  \"0x1e988ba4692e52bc50b375bcc8585b95c48aad77\",\n  \"0x0ae3c3a1504e41a6877de1b854c000ec64894bea\",\n  \"0xc6904fb685b4dfbdb98a5b70e40863cd9aef33dc\",\n  \"0xd58434f33a20661f186ff67626ea6bdf41b80bca\",\n  \"0x9bb7da8f68f15ece32fe323246e7a1abac6d895d\",\n  \"0xb7f7f6c52f2e2fdb1963eab30438024864c313f6\",\n  \"0x2a281305a50627a22ec3e7d82ae656adfee6d964\",\n  \"0x346868f7e783e8206335bb14f74ba59a87c44f35\",\n  \"0x549d38f104ac46d856c1b2bf2a20d170efdb2a8d\",\n  \"0x138ff21a21dfc06fbfccf15f2d9fd290a660e152\",\n  \"0x15533781a650f0c34f587cdb60965cdfd16ff624\",\n  \"0xaae71bbbaa359be0d81d5cbc9b1e88a8b7c58a94\",\n  \"0x4721d66937b16274fac603509e9d61c5372ff220\",\n  \"0x72dcccb74cade0aca67739fe0a7956c5dead4a8a\",\n  \"0x07fe07226a376e8b74e4da2094537843fdf16318\",\n  \"0x1ddb2c0897daf18632662e71fdd2dbdc0eb3a9ec\",\n  \"0x2d956093d27621ec0c4628b77eaeac6c734da02c\",\n  \"0x312b151a0e87785649ed835d946c2b0de5745c30\",\n  \"0x32afc8dc2ff4af284fa5341954050f917357a5f1\",\n  \"0x4ba782b05c7d580ab6b896c6a63b8e5de53738b3\",\n  \"0x5bc94e9347f3b9be8415bdfd24af16666704e44f\",\n  \"0x5ddff6f22ee5df31403b9de994b4c70c8755a8ac\",\n  \"0x61f4a37676700f6e9bcbaeb05ff6c2f701c1c702\",\n  \"0xcb1f79791088d0f4397c35ec241f91c3727a6dba\",\n  \"0xd279d7e46f73961812c4853e065d0096a2657a71\",\n  \"0xd901b0618ce2b7f61457ced5621bea4820954ce4\",\n  \"0xdf7952b35f24acf7fc0487d01c8d5690a60dba07\",\n  \"0xf5db804101d8600c26598a1ba465166c33cdaa4b\",\n  \"0x299b6f57922533e1dd9edb8fe76ef632fb2b081e\",\n  \"0x36a8377e2bb3ec7d6b0f1675e243e542eb6a4764\",\n  \"0x4173eff368153f1f1c87be05226ebca9e5f5748b\",\n  \"0x684cd10b02cdade20f1858c6315052d66d1eafc2\",\n  \"0x7227e371540cf7b8e512544ba6871472031f3335\",\n  \"0xd317cfff093c08a43062b39075e51ac2060317f2\",\n  \"FxN1Q3vzdUmkx3qVgsnLiQtRWfYK1MAejEjret9dY68E\",\n  \"4V8LnMchSg7LpgNNJxGrcJaheeW5eSiJKRuocxf4YvXn\",\n  \"9ayoVUQVpHRcDyrdJ1dDUmkxtY74SYgEo7fMRSbW7GQ6\",\n  \"83ENiVFRQvVLAsP2gp4pW9EDphsiorgXaZjSuaWwjQEq\",\n  \"2nVCGdoR6xehmoPfTAof7xSvdnGaEKhvXi48BeaXbxNW\",\n  \"3mUeDoxSzSpBudaWVygwszkVSHUkeJ7q4C5DGjhi9twL\",\n  \"J1JLJjYotfACqTQ8g1vWUW9BHRSkJ3NxTqJiukf3aTmn\",\n  \"CECj5imCnAv7avNjSETanhRMxWz5yR2ZN5jfFqAijzmK\",\n  \"GHVaMJPwJYrqDaHCGLksvsfGoNaS6NVHL5wc31osASYZ\",\n  \"85d8VHCBpER7NeT8Quzcos7iGoZouLkaZNfqfQ5VN3kP\",\n  \"EBDEioh6L5UZxuyPPZ9gY3H6fsRqmPEvSXL2EKv588qz\",\n  \"BZM9yMv9CXZDYV2JGNWSdNJc6xWGfEHY4vUWX9rc4W4n\",\n  \"4cc5svLcu1xyYCGcfwDop64ZMs6WJiCY6JrKF711GDLu\",\n  \"8cWC1faRe7fkTMu5wAVQoSbkYChJUNTTCneLhZprqMBj\",\n  \"F14j998PJo8CdNU4aS7vEWqm8duNuZAZ6bgrAJhJHPNw\",\n  \"DZUjZ8p3QtuSnozqFsuHYTjPFCWkgkgWhD7b71AvbKEC\",\n  \"AtjDYmFmnjhh8VMJHAEY3CYMdWCPEDzJzxjjTrMrcY4K\",\n  \"GwBPGaMyR8cDKVuGgFUdLqevDkMbKNNKRerhvqJD6hL3\",\n  \"B3fYjDpfJ9q7YJfnrjeFgALaiLn5DaobPje3VQZ8zk4a\",\n  \"3KeSd9UcWFWq7DQnUWT9tXkgb54yUUCynLzJZkaMoqEX\",\n  \"XUhiSfF7NN3s8T4gZByoae7sKKuLfffkgF14G6PYHPH\",\n  \"2BLYg54F2ejko6Dz6gDPDDGUMxFPHe4v6oNTsshRnS9S\",\n  \"HEr369zRti7fShFufrxg7zpmGsRcWey8XNoGdr6bfFHp\",\n  \"997VfMfoCp6uh8ZjJZeSm7yDEP9x2iJVPqrLk2M6XBx4\",\n  \"BuUUVQeiCNoChQ2CRAgVuXCS56ZF5m8AtGen8LtcjdTv\",\n  \"DHUFjTnK94Yx9MybaosFxFFa4pmvxoo2toHxDXZisthU\",\n  \"73nxe85cw4XqQ2o5znPCZDVXL5zf3wpM59boCqnhRzqz\",\n  \"BbMsktYU3XDZNTB2jNU75RZPak2pu75jDRudHtjbLBMD\",\n  \"2K8p6q9KVkDBcedrXpVgAkr4AH9BAZf2BvvXkQvgC3L1\",\n  \"G1k5umwEmgziVLAetgmuGRw6sBRodRCGviRNT5HW3CK6\",\n  \"2XNvSJhJjpXBbvmhrnbx3BNMTC3JhAmyC11nkmWkTtuM\",\n  \"FBoetbUNf5GVJfnCXDf5uo9HMVwmvuSYBMmEVKTKDFd3\",\n  \"8TgS1Z1H3YM2qer6wQfVgfs1zrrkEhN8jwqZwEkuaoQs\",\n  \"2P2hiNdVyn6BhC4zhGiT1Ct2Jm47F8eShfkwwEDeerCu\",\n  \"8nTjurPHAGSttLJHhfPws5wqnPF2ogNg2BWGyJV9Tpt\",\n  \"gJbDs6Mp78jMV2vuwZei6oRaPfVQycYxvZXkc8emKoi\",\n  \"55VXhAfPKEG5LhQyakH3eUrxy3zrC6pryQSPy5SMDpRW\",\n  \"FKxYYQNyigzTfyig4Gyvxkcq9wFb4FEQPq9KvNLoMQ2R\",\n  \"9fhR7uHDtJEWBzE9hiwCemggMiKiZGzMmMS22mG3DNuN\",\n  \"Cjduv1s4nUkt8i7syFr8yjUvYa5GiNASVKPnNorPSjyo\",\n  \"5Gak12U6pxnyh8akeDY4jdaUBJ6FziEVSTDFDSX97acs\",\n  \"8Urs8EzwgvNSyRXgSVkuBAD4B5odLfKih6rTn75YnXes\",\n  \"Ft4y4KR1Vf45js7RBWbuT7nTFaZmty11sCTGcfJ4fAsx\",\n  \"4iKnL1CTvA3yrcchB17vz3yBSmaj2aLvhxPhtBEXvtdd\",\n  \"2KfyLN3iyBHYGajiHzEj75aZqeNM22FA9jh8QaKQbwD2\",\n  \"5tBZ5feptkoEWiGhisi1y81gzYg3PAJ9v5QbY6uJ4P9a\",\n  \"AJnfVpnmtN3oo5jMT1Rxr9VQdVxLUuF6U35oSFRMtten\",\n  \"8TEPXUw4vtZuy2xizHfDcccCfsNMxpADrEBw9FJXe3tJ\",\n  \"CVsnX3yUwQoe2WappLEhBbu4vxZAE6Bym33UkKuYgKqf\",\n  \"8TxaeiYDUhVL6cJVxHeS5Gx6UpE3G4zsQJMaejHttb5x\",\n  \"5usxCLasTHRAJqC2kzqboAzQQA4jibxWPCbb3Xtc5r7z\",\n  \"FsBzFoC4YYeAvdRX1d4AmYcwtZbcp3ctGs137AsGzLRe\",\n  \"CYPz33SnBXkCf1SfsN5yWk5jRCU7r4m4m236K7LYQYUn\",\n  \"DmGzNiorJqWac5cNejfUkk3vxYPkbarsB29y3ZdZ2chi\",\n  \"6Z551xuQRipV5tfiLawgALuufBtMYRhHiL8Mco1uoQHp\",\n  \"8QFELiySN2tQutqamND7v557BpuE3Nu4h5KLxnaLa92K\",\n  \"HciHdyzYoCuhFCgYCvCYsXssJuxkHhE68anbgBvqsa4Y\",\n  \"AsVWRy4KfRErkcyif5ZXXvVdTeeWLKJaLo5ZKAfYxuFe\",\n  \"DNKy4mE6onmzDYYGd4vP9BuJByDoPYdoFKvHUtveCarn\",\n  \"EBms1LbV3o6h4eCTAzyZ4xoBmJ1T4SuhQLLguCJ88LBA\",\n  \"7xaMEDQ1gTJhXTZ1LYgoMBEeGXiZNmY3QhPxcnBKjkcS\",\n  \"71hXBp4hbpYrVSsKMuFACF5UJMBasCmPybpN3dyNdFxJ\",\n  \"EstAdgD62RLLPCsLVgJWxxQAeQAJ8iX7Yid9EJp99CQ7\",\n  \"HHodYwygcTYuxBNrQx1aLwfQLkJaAMcioXvMs7LNK6Jf\",\n  \"AkydeQuFwTsWj8YrmKdhV4TE1w5Nc9DF5ipgfNGs2k8q\",\n  \"AmJ52MAQXAjtFkFdAYkLWKZU3zp2BDryLcbQQ1hMSBcp\",\n  \"BQHvhpAwZr83joHaEJrKUY4Lij4ZXqKgi9MzeBeiatbX\",\n  \"7oEGhi9YJECDHvfbp41spBwGU1pEfgS5mHo8cXGwfxug\",\n  \"364ue6kuFJM6reWX7Lz8LwCxA7TeVbWuMXBFrv1EZYWS\",\n  \"88R54Zx8TLM4roQPTrHSpA5BfLFQVu5CcH9DyxWmfxDV\",\n  \"F11NLrf3w5WuR8kyPFfgpdG9qMM7QoS9JdkMyFu9B6z\",\n  \"DzgpaoTtvcxmfAuceZR3Q4xAJjjHCcFURJ4orMiAP1oB\",\n  \"8iNwAG4LCFoxZWmpAPq2AUXmdBAeeGNgxUZnRNJ2oaxZ\",\n  \"Jzv1Tp99guHWs4WxmcSV3ty3UHhqwv312Wb7A59Cm6B\",\n  \"HqTSsezCJ49VjpcRvGtN4WbLHgywkpqrQZAPPR4sid7P\",\n  \"7b9xH9DZ5EjehncbST6Cw2cVVVmJccYsoYa7CmVxV74w\",\n  \"FE5zmTuD1zaaDheJf8HxDJS8HFVHaFTHbeonxqrBMYhm\",\n  \"JD9NiPVbSHGAanmxnXCcmYaXfa56rWwzvB6TVAXkirYS\",\n  \"F2kkKqoUr8gCfjXTUknLQZ8TEvedkNA5s6Ne6XS4CPQf\",\n  \"38QnWX1xq83uspnp9nY6cEhdcRcx1dw5VJwxudZ7ugDM\",\n  \"Gzkr9pHFCQ3WqkyRMZobPSXZNheFQKYrjJCVs1Xmhj6R\",\n  \"jfLuStusES8VBAHqFSBB9XXX5vQjjWxZGyEYdDRS2yz\",\n  \"9dFPAaubJzhHFpsc8s4qbSepMFEKecaQYHrUKQMRoZcs\",\n  \"6yCBHAmvBAZkFSXi7u8Sj7n9pNPuDFrGahNnLxpAk9YJ\",\n  \"A2SgMawSkCjdhQpBypwRpCSryAPa6B65dRetu3YGX4ay\",\n  \"9wPZRx3jrYQ2U3AwrxRJ8dQXFgVt8Qc5BxjD2reAD81\",\n  \"C6FGVFzzwGqxEGnEqQva4zZ6tdVXHDY4KsPuDFMKQipA\",\n  \"28awX2aLeyDik4aYtLe3xgvx5rnA9PeJrUmEepbps1XU\",\n  \"7B3esUC5uCw3yLcpvU91q3poeVENLpyfLU7SCZxy7YnF\",\n  \"5qoDyfChkPokzd5BXGcbNmqFYwF3dYerLfnN2ujxTCjU\",\n  \"5K5hobUAQLYTiKMGqJBJauZWbQJHLnjmwfbYRu3Kdt59\",\n  \"pavej29HVNfxHEkDxR9fE8zgCozmFuCFFCk7u9dUfci\",\n  \"4hKuAuo8dXgkRLfz78qNHNGs188epLoVmcKPKuDDKFNj\",\n  \"AzX2c2bFMeZcnj1Y6DokKAacDnsRzAo6pyVJmMiVUuVQ\",\n  \"D6uV9j31HV2yv6Cg6uuJuAeSMVdJ7PpVrzRtm1d5N3pV\",\n  \"2VNQusXvHEjMBTkY4gYUUhvdkCMc9DADSSxbdS7sJ1CK\",\n  \"Cug1VKTudanAUbUMh4sw1bicJgcfXqs8x4tjHHPtqkEA\",\n  \"HQnijpcihTRLRaQpywJfo4cM5pZHBffvTATFiomE8g8u\",\n  \"73kJkeEFQYPxT3cHDRG8iiyvUhmSBY2Nc33JpB6DFK2R\",\n  \"4rZifPfY8DdPkWv4mqvctLgcGaBScBQHMCPguZQC28C4\",\n  \"GZivmjaWrg2Va9seuxY4D7SGPP8WnKsKwwc5a87hMAgn\",\n  \"9rMUmiujvmthZoVBaFff2Jf8YW2cX4SzWDK2nritZXK3\",\n  \"CkAD1HLVnqhfMeCXzKuEuhjFd4FmTXRtCVe535jJKVH2\",\n  \"8tfmWiyX4efiXb3P9ti4GfCZZ5FNcwbRZgzfA688K9tC\",\n  \"HXrkcTcRNF6EnvfFaXMpqbSeik7fgbn9DLraBaNmRD5u\",\n  \"59j1gA2ANhYkzvvCZauoisnpfnVk6UbycFHMNBij2jy\",\n  \"5Dot4FyLAdx9LkxrmG4zi6nrRQQcPZjvBAjZ5VmvYWpp\",\n  \"BbL5V1TJuLnMonChPVAfP3uarM5G2XKCfcEaTxzXEqPK\",\n  \"4hmEUPcgHimQ1vNrr3WNGYb1RezmRLD6fVv9TVwAU9yj\",\n  \"Gnmnh3LNaaQ1UmnQMkdGTH7ja2aTHQyxkS7tCfYkxvtD\",\n  \"9BUEx9ULoTQhs3QVzyQvSecxfbTPV8PcuHkHeuRE8LF8\",\n  \"6UF8mqUg1aGakkW2yS4oRPiX1YNBJiqxcoyN9u6pBYo9\",\n  \"7vEHTQ9mmy7T7fkhns3fBFrWqRhXPTZUPgn64QxVirhY\",\n  \"71HGRqeeDwcXJs9CxzPyTurLNdwYwsBBb17CmxoW4VTD\",\n  \"5v2fhVgjH2Xv2v78ysSZWvhZ5wu8ycD4pJE6LRBbaf1G\",\n  \"7rjPaxZ5p5jzZFhEZwVFCsLwvxppmJ8nmsrgxmRMeKMq\",\n  \"7JHruL5Baoqj66RniPDpB1SiKz8jegNuiKLxcvCDVYCa\",\n  \"3xA3wJk9YpgwxNuSc9GHQ6E1Wt8zeKC5oK8yQLg2JzrF\",\n  \"3c7r6ZtTDxN1fxc1ixM8Ay26hTyfnucs3yx42vVH4LM3\",\n  \"4jsaQWBKn3aSpZbwboxiNRRiagY2xdkoSomfoBRDrdcs\",\n  \"B9txgFSjNXjFQv5VTCu2vhMyCEWnyp9UQWpeZzTLdeKP\",\n  \"96GjikTDDt1FuznnmwE9rzKi2i7gZ3gYwW7g2daW8s2r\",\n  \"C4otrRtEHVeeTkkmMy6WkLkMEbtK49BUgkfYXMNiJhGq\",\n  \"Dtesdhkc5WFDHvjy7JzrpSL7xbN7DHsQhrK5i8vgzogi\",\n  \"Cf2fzzcUhBqtXokdEEg4HVuc4dNmgrsz2J8QsvPwMnFU\",\n  \"DoqovGZ86RjsFZd3TGaLDwaU8mXmw3C195BfV31UuG85\",\n  \"Au3h7j9twciHo6YQ9vznx97rC1D82dcqdBgBqkzwKMGm\",\n  \"93N68g43aiDTJTTQdJL5djSBytTCSqL62woXubFrX2vJ\",\n  \"6WwzhMYbAWem22ZcVcS2NohsccjmrWZbq1aHDySABTZ2\",\n  \"DGkYVSFoq5cafZJZboHPuzdrKtVYrm4R5oS18nEuZaGu\",\n  \"8MLm9nLqLsDQgoN7nHkUoeu2oqe8J3cuZKc2KCX8Zde2\",\n  \"9Zn1R4fdAHZSrq6hrXdQWdRVJhAUEtpU9gT26KRgRjCb\",\n  \"6j53Ln8GvosfZXar1WCNrmURVxjR8GV9Es2HE6fTvkz9\",\n  \"9Kevoh8H31NQV8kB89aocRTrkt2UGqbs7Ani73WkACrf\",\n  \"8MTsYKzp4qNEFXzM6nWhRk759qqSMbur5DXjbWwDNFCj\",\n  \"CcCVqUaMsKNcQwWHHA3H5yydjcspcD3LhBYP9aYrmweK\",\n  \"FCiSbFdcZSpx1YZFfUCV56KQ34C8CJY9A3JrnMGopNip\",\n  \"5R5cr6dq3v25Z4Cq7qM2dG4hxN5gbY5eUKzETRnBYXUf\",\n  \"DeQDKoAuR1BYvspX8dHehyua3VRuCmD2zbEvZ97NLjas\",\n  \"C6nyuPc5wZLB1c3rFvchbF4aLZBn4yujtDyeqsJDhXSL\",\n  \"7vzFUmX9qZiznTikem4Eu2v2aa1BkqDsuT3gvYLq2rRT\",\n  \"Nf2WRYpG8hquo3BsvioYxKZmDECvuS7HmDhHrpQrdYv\",\n  \"Fz5jKMiXi5SN4TqQ12fYm49QFxJkeLoyYEZWVwRwyBCC\",\n  \"FCs3xYBoo55HenGpeNETpuWjuPfzegHhDQFzEuu3HWuM\",\n  \"CC56nm4aRSd7RzcnrX9VH5VXnfj5Bq1XLGRxXy9oDm2p\",\n  \"BLJg1tgRZdzPxXhJngtbCnuJ8PtsVpFjFcoUby2NXxjH\",\n  \"4Y3Lfzeh9m45GomuKpqjj6bVRLpNnn7wyosPzRyx8bQW\",\n  \"8GCrwThSdG2JUXwwisFtwEs5gkGGxjNKQYArRtq6bEPc\",\n  \"78wF4F64K31GbbC9jhi3me4kSqznGtf6KHFLTUTkrEjB\",\n  \"Cy57RjcnLmWhY2ccjEwcFu6SvoySbq6mevDhY54DxVLh\",\n  \"FVTRVzRagRDQj7Lp2n1GyRJ85TNSErhYk4xf283Svnrn\",\n  \"rMH5QQxx9WNZYeCgTEr7TogXT1rnATDaibWcvibHxRp\",\n  \"ENFgBr93NsoG9QHUTHbfEobWtnFmV1fEsAuiaNq1Qxiv\",\n  \"454LshEu93z3auzq2cMbA7PsSw9v8zhuvQRGkfP6eGMx\",\n  \"aHe1GAdAVgijtp55eUmPe6DdUYonRVw6Xdq1QpTmVeM\",\n  \"4BG5Yo4o2nHGDgA1AqH94oUk2CouLuGCSK7ZjqHQaT2J\",\n  \"CCDKm4AEVxeeNVdYNM7X8CBQmtNpySEhBvp1yQ93jjdY\",\n  \"27XFvenPT5LpkJ8FVJdHf3CPaARqgCWm1EsSRt2HrDcH\",\n  \"DqH8Q3e5Bts3rCsC6UpTP18Hf1fD7dfGaP71uR6HpxRg\",\n  \"FPfgDLbWDjSx1FnEdeM5DWqJNpRqv5oDqpmvW18Ef5QQ\",\n  \"6u1TPKaTboYQ8gU7DF7AgEp5cP9N3FTuxxsu5oWi5uJ5\",\n  \"CCg1C49hNR91425PeS1HatXobQkAniJ775N6pjWAiqp2\",\n  \"ENxmdaEsTWXkufsTLngp3sZ89dFZWNoke7F95aVE67Kz\",\n  \"39h7MdBeuMFvcBz5FKGQBqnqR7BSAfp4ob8qLphLc4yo\",\n  \"CRGEVCx5HrRjsbX71RM8acuydKHiXwRwWysF9BJvYTG9\",\n  \"3mzktRHfhxjPirgHF9sjbXf2kwW1RZSudaRpyc478BAA\",\n  \"9J7F9nx2UyVYPuTk21ni2jxprgBpzfMpN7HxJqgKUWxd\",\n  \"3K8NyBHkMdWX672bqqtJC5mZASvqCHtZXPRMhKz8iP2x\",\n  \"65sAs4U5puLv3UC8f5y1DVCGAhpMtTRUoKpMdUMFY1sY\",\n  \"Dxb5mPASvxsoDRhHZEu2arYRqvYByYgyvrtUYxnFJsGg\",\n  \"GF2hTcNvU7HFj5682KBVpffoS223aVhYaaCcM9ngxehs\",\n  \"BBF6JkFMRLMqW5F4Ri8VUNnAK5T2n9MLmRhtuXQNJmZh\",\n  \"8x8J5MGViuLTtxwjwnrLM29USZqx7TcbGvqdaNfA1m8X\",\n  \"U4Babgbjm7ciqth5XDJppzVk7WhGnHNZUGvPL2ox8HB\",\n  \"3Y9f4MxYEvjWfiBJexTSnRQcKVD8e1aSUs4Z6FZYj5K1\",\n  \"CZZ5B1Az9kW2nyRHM5mABS2NWuStoHCPcfh75KFo2UsN\",\n  \"tRKmpQWu48phJXR7W4d2skG9W4nvb5cb976bkGQYAuN\",\n  \"3iAabhw1Rdu2HimbzT9gDCDcuod7TmBtcZwFWxGQyFfQ\",\n  \"5TTRcMNMwhiGUZ8JtTnqB6sW3g6P4fAFhWLsV2kJWEsg\",\n  \"8B8VaqcxunjTnbq4mGhPW3C2eHuByWVBRjqKthwX2aRQ\",\n  \"9hi9yukj5ZjtD2Z73zRLca8kARChJmgEaMtYefx454Q3\",\n  \"DTrqt4Wb1H16hdrLwEfFkNVwGYWPqnghb3pREEZejhtS\",\n  \"EitHiKHGWWadEhZahZLHURVoxPqAUofKLEXfYU9NsvMp\",\n  \"4ZscrWACeLLYrsFLQjX16bdjCqLy6vkKuHa2w3fsakDe\",\n  \"FuPR7rUMzphpQ3YhmENUJUt5gvtDpJDbUqSa6FA82U6p\",\n  \"2o9C56tqnc54QF54MxGn38DNNEa9vAMow3bc5VMqogMV\",\n  \"Ffgr3YTKvhWkdv2pSW2F5VEVvLQvnatje1ookcuJpBAF\",\n  \"J9rKCnTuERL9G95FmFQnYDeLVYrNa7pQBiL13oqGgH3t\",\n  \"5FJeEJR8576YxXFdGRAu4NBBFcyfmtjsZrXHSsnzNPdS\",\n  \"779kNT4696bMaAkeAHxezAuniTrVjfvrp3vABvhdPGWs\",\n  \"4fA5U4w4DfmNojhKKBCVHeAY5VQ4dYpx5uFQSsrknSFA\",\n  \"BU2oyceVSZXYzxURwhAvfULBSe59v22LQfuYgS585L1g\",\n  \"3BApsMpiSaHfF2a59aW9XAPfGQ8WMaQd7Q1F9rTbhGqv\",\n  \"5oWeivCzcQrcmueDbUAfPQRfjGeDqkVDxErchHUz8NCh\",\n  \"2rrZbBRpt5o7GKnTHusTqRANsj1vs5t4WC9CQPt2cujb\",\n  \"CbN1vKsz99qbQidVR5RfBLmrxPoYbJguEAnsFi5BN5WU\",\n  \"CTwRHSdPNGucwLuLqUMSc5ddJbnSN7GjKFYfm91wJHVo\",\n  \"6NKWLHZENHKvditMFu7z97qJypmJTsz1PbjFVpsmrXMY\",\n  \"5D2kc7J4RNcMzfoAQz1E4NWjLS7GzTnJKvTV3HiospCZ\",\n  \"9hrjJvaYETxp6VcRRX4yzT8jtH6gzoVtFUqdaCksisx4\",\n  \"2kUMSNYvpWXqrpSV2L1GV5UWYH3CFXF7F9QbGkgv9kNw\",\n  \"8nRkgYkufaLQVtuaaPGwrKJBSS7tu55YWx3EiRufD9uU\",\n  \"7aLAz1NE2hx7adjrgDs87GT49gwTkmW2n8gHSRJUVzHa\",\n  \"G2kuL2iKEdYmZBnM1a8rA5j5si4AqySJUq3ujPaJxkDk\",\n  \"FQJUJSHQACz7WLHVM7iS2dKnZVWwFHTuwUdtByLMxXF8\",\n  \"AhtJTzNB7zwLB7RxqbYcpAKBeEfxYrczz12Nn4FgVb2y\",\n  \"7zEHcoELyPvmipqXL297edddhxLfx25UGTvY8dMrZqzT\",\n  \"38mqzHtHLmUMCZyuZKEQB8Zkg2fGkToYw4gVwPC3NoH3\",\n  \"3kL3aPezAbZxzamMurWvjMpXkVQgLAgrh9wT1CeS3CnK\",\n  \"EB7hzkjRjV3AFCfQDuPK8joneM6dW2a96rJCHvc7p1fW\",\n  \"AVbSKg271GmzqrtPmU5fRza9uR2HGLhTy3yiM1mMPTpw\",\n  \"CoVJmrq8KeRZGAcKa6h6mueQsFotVkibehWeKGCZBXe\",\n  \"5bwpMvAA65frL4A1B3nYQcQjLHGUzHhkHX5FV4CVi1s8\",\n  \"Kyi9YmFqBARjW8KwS192hyrfzwyQbCR6utt5yr6hoNg\",\n  \"ESrJ2tXdmkGv81FNJmJcezunQLz3fP6WFzfmZd6d4FPn\",\n  \"8qMsDP7hFWZAKGA2taL7u8rERH4te4D4i8cxzHKtAMcA\",\n  \"5c1ymadNzqM9cE8K8gqDguNYg2jWnGcNBV5S3tGGdhM2\",\n  \"Gx4Y9M67BPsAViveoBcm4JocVh82S7pZsaXc4PH9EibE\",\n  \"5Xb7BoMNP19cXPgLdzrAkJCarznkYAfpmyyCvynJam7K\",\n  \"EZH44QW2BzUijN79rrngRUoGHCJGWitabxkVkT82XpeA\",\n];\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport useNFTTVL from \"../../hooks/useNFTTVL\";\nimport {\n  BETA_CHAINS,\n  CHAINS_WITH_NFT_SUPPORT,\n  getNFTBridgeAddressForChain,\n} from \"../../utils/consts\";\nimport NFTViewer from \"../TokenSelectors/NFTViewer\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport {\n  //DENY_LIST,\n  ALLOW_LIST,\n} from \"./nftLists\";\nimport { COLORS } from \"../../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  tableBox: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    flexWrap: \"wrap\",\n  },\n  randomButton: {\n    margin: \"0px auto 8px\",\n    display: \"block\",\n  },\n  randomNftContainer: {\n    minHeight: \"550px\",\n    maxWidth: \"100%\",\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n  tableContainer: {\n    flexGrow: 1,\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst NFTStats: React.FC<any> = () => {\n  const classes = useStyles();\n  const nftTVL = useNFTTVL();\n\n  //Disable this to quickly turn off\n  //TODO also change what data is fetched off this\n  const enableRandomNFT = true;\n\n  const [randomNumber, setRandomNumber] = useState<number | null>(null);\n  const randomNft = useMemo(\n    () =>\n      (randomNumber !== null && nftTVL.data && nftTVL.data[randomNumber]) ||\n      null,\n    [randomNumber, nftTVL.data]\n  );\n  const genRandomNumber = useCallback(() => {\n    if (!nftTVL || !nftTVL.data || !nftTVL.data?.length || nftTVL.isFetching) {\n      setRandomNumber(null);\n    } else {\n      let found = false;\n      let nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n\n      while (!found) {\n        if (!nftTVL.data) {\n          return null;\n        }\n        const item = nftTVL?.data[nextNumber]?.mintKey?.toLowerCase() || null;\n        if (ALLOW_LIST.find((x) => x.toLowerCase() === item)) {\n          found = true;\n        } else {\n          nextNumber = Math.floor(Math.random() * nftTVL.data.length);\n        }\n      }\n\n      setRandomNumber(nextNumber);\n    }\n  }, [nftTVL]);\n  useEffect(() => {\n    genRandomNumber();\n  }, [nftTVL.isFetching, genRandomNumber]);\n\n  const data = useMemo(() => {\n    const output: any[] = [];\n    if (nftTVL.data && !nftTVL.isFetching) {\n      CHAINS_WITH_NFT_SUPPORT.filter(\n        (chain) => !BETA_CHAINS.find((x) => x === chain.id)\n      ).forEach((chain) => {\n        output.push({\n          nfts: nftTVL?.data?.filter((x) => x.chainId === chain.id),\n          chainName: chain.name,\n          chainId: chain.id,\n          chainLogo: chain.logo,\n          contractAddress: getNFTBridgeAddressForChain(chain.id),\n        });\n      });\n    }\n\n    return output;\n  }, [nftTVL]);\n\n  //Generate allow list\n  // useEffect(() => {\n  //   const output: string[] = [];\n  //   if (nftTVL.data) {\n  //     nftTVL.data.forEach((item) => {\n  //       if (\n  //         !DENY_LIST.find((x) => x.toLowerCase() === item.mintKey.toLowerCase())\n  //       ) {\n  //         if (!output.includes(item.mintKey)) {\n  //           output.push(item.mintKey);\n  //         }\n  //       }\n  //     });\n  //   }\n  //   console.log(JSON.stringify(output));\n  // }, [nftTVL.data]);\n\n  const tvlColumns = useMemo(() => {\n    return [\n      { Header: \"Chain\", accessor: \"chainName\", disableGroupBy: true },\n      // {\n      //   Header: \"Address\",\n      //   accessor: \"contractAddress\",\n      //   disableGroupBy: true,\n      //   Cell: (value: any) =>\n      //     value.row?.original?.contractAddress &&\n      //     value.row?.original?.chainId ? (\n      //       <SmartAddress\n      //         chainId={value.row?.original?.chainId}\n      //         address={value.row?.original?.contractAddress}\n      //       />\n      //     ) : (\n      //       \"\"\n      //     ),\n      // },\n      {\n        Header: \"NFTs Locked\",\n        id: \"nftCount\",\n        accessor: \"nftCount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.nfts?.length !== undefined\n            ? numeral(value.row?.original?.nfts?.length).format(\"0 a\")\n            : \"\",\n      },\n    ];\n  }, []);\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div className={classes.explainerContainer}>\n        <Typography variant=\"h4\">Total NFTs Locked</Typography>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          These NFTs are currently locked by the NFT Bridge contracts.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n      {!nftTVL.isFetching ? (\n        <div\n          className={clsx(classes.explainerContainer, classes.totalContainer)}\n        >\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"div\"\n            noWrap\n          >\n            {\"Total \"}\n          </Typography>\n          <Typography\n            variant=\"h3\"\n            component=\"div\"\n            noWrap\n            className={classes.totalValue}\n          >\n            {nftTVL.data?.length || \"0\"}\n          </Typography>\n        </div>\n      ) : null}\n    </div>\n  );\n\n  const table = (\n    <MuiReactTable\n      columns={tvlColumns}\n      data={data || []}\n      skipPageReset={false}\n      initialState={{ sortBy: [{ id: \"nftCount\", desc: true }] }}\n    />\n  );\n\n  const randomNFTContent =\n    enableRandomNFT && randomNft ? (\n      <div className={classes.randomNftContainer}>\n        <Button\n          className={classes.randomButton}\n          variant=\"outlined\"\n          onClick={genRandomNumber}\n        >\n          Load Random Wormhole NFT\n        </Button>\n        <NFTViewer chainId={randomNft.chainId} value={randomNft} />\n      </div>\n    ) : null;\n\n  // const allNfts =\n  //   nftTVL?.data?.map((thing) => (\n  //     <NFTViewer chainId={thing.chainId} value={thing} />\n  //   )) || [];\n\n  return (\n    <>\n      {header}\n      <Paper className={classes.mainPaper}>\n        {nftTVL.isFetching ? (\n          <CircularProgress className={classes.alignCenter} />\n        ) : (\n          <div className={classes.tableBox}>\n            <div className={classes.tableContainer}>{table}</div>\n            {randomNFTContent}\n          </div>\n        )}\n        {/* {allNfts} */}\n      </Paper>\n    </>\n  );\n};\n\nexport default NFTStats;\n","import axios from \"axios\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  RECENT_TRANSACTIONS_WORMHOLE,\n  TOTAL_TRANSACTIONS_WORMHOLE,\n  VAA_EMITTER_ADDRESSES,\n} from \"../utils/consts\";\n\nexport type TransactionCount = {\n  totalAllTime: number;\n  total48h: number;\n  mostRecent: any; //This will be a signedVAA\n};\n\nconst mergeResults = (totals: any, recents: any): TransactionCount | null => {\n  let totalAllTime = 0;\n  let total48h = 0;\n  const lastDays = Object.values(totals?.DailyTotals || {});\n  const lastTwoDays: any = lastDays.slice(lastDays.length - 2);\n  VAA_EMITTER_ADDRESSES.forEach((address: string) => {\n    let totalAll = (totals?.TotalCount && totals.TotalCount[address]) || 0;\n    let total48 =\n      lastTwoDays.length === 2\n        ? (lastTwoDays[0][address] || 0) + (lastTwoDays[1][address] || 0)\n        : 0;\n\n    totalAllTime += totalAll;\n    total48h += total48;\n  });\n\n  return {\n    totalAllTime,\n    total48h,\n    mostRecent: null,\n  };\n};\n\nconst useTransactionCount = (): DataWrapper<TransactionCount> => {\n  const [totals, setTotals] = useState(null);\n  const [recents, setRecents] = useState(null);\n\n  const [loadingTotals, setLoadingTotals] = useState(false);\n  const [loadingRecents, setLoadingRecents] = useState(false);\n\n  const [totalsError, setTotalsError] = useState(\"\");\n  const [recentsError, setRecentsError] = useState(\"\");\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingTotals(true);\n    axios.get(TOTAL_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setTotals(results.data);\n          setLoadingTotals(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setTotalsError(\"Unable to retrieve transaction totals.\");\n          setLoadingTotals(false);\n        }\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    let cancelled = false;\n    setLoadingRecents(true);\n    axios.get(RECENT_TRANSACTIONS_WORMHOLE).then(\n      (results) => {\n        if (!cancelled) {\n          setRecents(results.data);\n          setLoadingRecents(false);\n        }\n      },\n      (error) => {\n        if (!cancelled) {\n          setRecentsError(\"Unable to retrieve recent transactions.\");\n          setLoadingRecents(false);\n        }\n      }\n    );\n  }, []);\n\n  return useMemo(() => {\n    const data = mergeResults(totals, recents);\n    return {\n      isFetching: loadingRecents || loadingTotals,\n      error: totalsError || recentsError,\n      receivedAt: null,\n      data: data,\n    };\n  }, [\n    totals,\n    recents,\n    loadingRecents,\n    loadingTotals,\n    recentsError,\n    totalsError,\n  ]);\n};\n\nexport default useTransactionCount;\n","import {\n  CircularProgress,\n  Link,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport useTransactionCount from \"../../hooks/useTransactionCount\";\nimport { COLORS } from \"../../muiTheme\";\nimport { WORMHOLE_EXPLORER_BASE } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n    textAlign: \"center\",\n  },\n  totalsBox: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    width: \"100%\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n  },\n  totalContainer: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    textAlign: \"center\",\n    marginBottom: theme.spacing(2),\n  },\n  totalValue: {\n    fontWeight: 600,\n  },\n  typog: {\n    marginTop: theme.spacing(3),\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(8),\n  },\n}));\n\nconst TransactionMetrics: React.FC<any> = () => {\n  const transactionCount = useTransactionCount();\n  const classes = useStyles();\n  const isFetching = transactionCount.isFetching;\n\n  const header = (\n    <div className={classes.flexBox}>\n      <div>\n        <Typography variant=\"h4\">Transaction Count</Typography>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n          This is how many transactions the Token Bridge has processed.\n        </Typography>\n      </div>\n      <div className={classes.grower} />\n    </div>\n  );\n\n  const content = (\n    <div className={classes.totalsBox}>\n      <div className={classes.totalContainer}>\n        <Typography variant=\"subtitle2\" component=\"div\" noWrap>\n          {\"Last 48 Hours\"}\n        </Typography>\n        <Typography\n          variant=\"h2\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {numeral(transactionCount.data?.total48h || 0).format(\"0,0\")}\n        </Typography>\n      </div>\n      <div className={classes.totalContainer}>\n        <Typography variant=\"subtitle2\" component=\"div\" noWrap>\n          {\"All Time\"}\n        </Typography>\n        <Typography\n          variant=\"h2\"\n          component=\"div\"\n          noWrap\n          className={classes.totalValue}\n        >\n          {numeral(transactionCount.data?.totalAllTime || 0).format(\"0,0\")}\n        </Typography>\n      </div>\n    </div>\n  );\n\n  const networkExplorer = (\n    <Typography\n      variant=\"subtitle1\"\n      className={clsx(classes.alignCenter, classes.typog)}\n    >\n      To see metrics for the entire Wormhole Network (not just this bridge),\n      check out the{\" \"}\n      <Link href={WORMHOLE_EXPLORER_BASE} target=\"_blank\">\n        Wormhole Network Explorer\n      </Link>\n    </Typography>\n  );\n\n  return (\n    <>\n      {header}\n      <Paper className={classes.mainPaper}>\n        {isFetching ? (\n          <CircularProgress className={classes.alignCenter} />\n        ) : (\n          <>\n            {content}\n            {networkExplorer}\n          </>\n        )}\n      </Paper>\n    </>\n  );\n};\n\nexport default TransactionMetrics;\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { formatUnits, parseUnits } from \"@ethersproject/units\";\nimport {\n  CircularProgress,\n  Container,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport numeral from \"numeral\";\nimport { useMemo } from \"react\";\nimport useTVL from \"../../hooks/useTVL\";\nimport { COLORS } from \"../../muiTheme\";\nimport HeaderText from \"../HeaderText\";\nimport SmartAddress from \"../SmartAddress\";\nimport { balancePretty } from \"../TokenSelectors/TokenPicker\";\nimport CustodyAddresses from \"./CustodyAddresses\";\nimport NFTStats from \"./NFTStats\";\nimport MuiReactTable from \"./tableComponents/MuiReactTable\";\nimport TransactionMetrics from \"./TransactionMetrics\";\n\nconst useStyles = makeStyles((theme) => ({\n  logoPositioner: {\n    height: \"30px\",\n    width: \"30px\",\n    maxWidth: \"30px\",\n    marginRight: theme.spacing(1),\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  logo: {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n  },\n  tokenContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    padding: \"2rem\",\n    \"& > h, & > p \": {\n      margin: \".5rem\",\n    },\n    marginBottom: theme.spacing(8),\n  },\n  flexBox: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    marginBottom: theme.spacing(4),\n    textAlign: \"left\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n      alignItems: \"unset\",\n    },\n  },\n  grower: {\n    flexGrow: 1,\n  },\n  explainerContainer: {},\n  totalContainer: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n    paddingBottom: 1, // line up with left text bottom\n    [theme.breakpoints.down(\"sm\")]: {\n      marginTop: theme.spacing(1),\n    },\n  },\n  totalValue: {\n    marginLeft: theme.spacing(0.5),\n    marginBottom: \"-.125em\", // line up number with label\n  },\n  alignCenter: {\n    margin: \"0 auto\",\n    display: \"block\",\n  },\n}));\n\nconst StatsRoot: React.FC<any> = () => {\n  const classes = useStyles();\n  const tvl = useTVL();\n\n  const sortTokens = useMemo(() => {\n    return (rowA: any, rowB: any) => {\n      if (rowA.isGrouped && rowB.isGrouped) {\n        return rowA.values.assetAddress > rowB.values.assetAddress ? 1 : -1;\n      } else if (rowA.isGrouped && !rowB.isGrouped) {\n        return 1;\n      } else if (!rowA.isGrouped && rowB.isGrouped) {\n        return -1;\n      } else if (rowA.original.symbol && !rowB.original.symbol) {\n        return 1;\n      } else if (rowB.original.symbol && !rowA.original.symbol) {\n        return -1;\n      } else if (rowA.original.symbol && rowB.original.symbol) {\n        return rowA.original.symbol > rowB.original.symbol ? 1 : -1;\n      } else {\n        return rowA.original.assetAddress > rowB.original.assetAddress ? 1 : -1;\n      }\n    };\n  }, []);\n  const tvlColumns = useMemo(() => {\n    return [\n      {\n        Header: \"Token\",\n        id: \"assetAddress\",\n        sortType: sortTokens,\n        disableGroupBy: true,\n        accessor: (value: any) => ({\n          chainId: value.originChainId,\n          symbol: value.symbol,\n          name: value.name,\n          logo: value.logo,\n          assetAddress: value.assetAddress,\n        }),\n        aggregate: (leafValues: any) => leafValues.length,\n        Aggregated: ({ value }: { value: any }) =>\n          `${value} Token${value === 1 ? \"\" : \"s\"}`,\n        Cell: (value: any) => (\n          <div className={classes.tokenContainer}>\n            <div className={classes.logoPositioner}>\n              {value.row?.original?.logo ? (\n                <img\n                  src={value.row?.original?.logo}\n                  alt=\"\"\n                  className={classes.logo}\n                />\n              ) : null}\n            </div>\n            <SmartAddress\n              chainId={value.row?.original?.originChainId}\n              address={value.row?.original?.assetAddress}\n              symbol={value.row?.original?.symbol}\n              tokenName={value.row?.original?.name}\n            />\n          </div>\n        ),\n      },\n      { Header: \"Chain\", accessor: \"originChain\" },\n      {\n        Header: \"Amount\",\n        accessor: \"amount\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.amount !== undefined\n            ? numeral(value.row?.original?.amount).format(\"0,0.00\")\n            : \"\",\n      },\n      {\n        Header: \"Total Value (USD)\",\n        id: \"totalValue\",\n        accessor: \"totalValue\",\n        align: \"right\",\n        disableGroupBy: true,\n        aggregate: (leafValues: any) =>\n          balancePretty(\n            formatUnits(\n              leafValues.reduce(\n                (p: BigNumber, v: number | null | undefined) =>\n                  v ? p.add(parseUnits(v.toFixed(18).toString(), 18)) : p,\n                BigNumber.from(0)\n              ),\n              18\n            )\n          ),\n        Aggregated: ({ value }: { value: any }) => value,\n        Cell: (value: any) =>\n          value.row?.original?.totalValue !== undefined\n            ? numeral(value.row?.original?.totalValue).format(\"0.0 a\")\n            : \"\",\n      },\n      {\n        Header: \"Unit Price (USD)\",\n        accessor: \"quotePrice\",\n        align: \"right\",\n        disableGroupBy: true,\n        Cell: (value: any) =>\n          value.row?.original?.quotePrice !== undefined\n            ? numeral(value.row?.original?.quotePrice).format(\"0,0.00\")\n            : \"\",\n      },\n    ];\n  }, [\n    classes.logo,\n    classes.tokenContainer,\n    classes.logoPositioner,\n    sortTokens,\n  ]);\n  const tvlString = useMemo(() => {\n    if (!tvl.data) {\n      return \"\";\n    } else {\n      let sum = 0;\n      tvl.data.forEach((val) => {\n        if (val.totalValue) sum += val.totalValue;\n      });\n      return numeral(sum)\n        .format(sum >= 1000000000 ? \"0.000 a\" : \"0 a\")\n        .toUpperCase();\n    }\n  }, [tvl.data]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Container maxWidth=\"md\">\n        <HeaderText white>Rock Hard Stats</HeaderText>\n      </Container>\n      <div className={classes.flexBox}>\n        <div className={classes.explainerContainer}>\n          <Typography variant=\"h4\">Total Value Locked</Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            These assets are currently locked by the Token Bridge contracts.\n          </Typography>\n        </div>\n        <div className={classes.grower} />\n        {!tvl.isFetching ? (\n          <div\n            className={clsx(classes.explainerContainer, classes.totalContainer)}\n          >\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              component=\"div\"\n              noWrap\n            >\n              {\"Total (USD)\"}\n            </Typography>\n            <Typography\n              variant=\"h3\"\n              component=\"div\"\n              noWrap\n              className={classes.totalValue}\n            >\n              {tvlString}\n            </Typography>\n          </div>\n        ) : null}\n      </div>\n      <Paper className={classes.mainPaper}>\n        {!tvl.isFetching ? (\n          <MuiReactTable\n            columns={tvlColumns}\n            data={tvl.data}\n            skipPageReset={false}\n            initialState={{ sortBy: [{ id: \"totalValue\", desc: true }] }}\n          />\n        ) : (\n          <CircularProgress className={classes.alignCenter} />\n        )}\n      </Paper>\n      <TransactionMetrics />\n      <CustodyAddresses />\n      <NFTStats />\n    </Container>\n  );\n};\n\nexport default StatsRoot;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getOriginalAssetEth,\n  getOriginalAssetSol,\n  getOriginalAssetTerra,\n  hexToNativeString,\n  isEVMChain,\n  uint8ArrayToHex,\n  uint8ArrayToNative,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  getOriginalAssetEth as getOriginalAssetEthNFT,\n  getOriginalAssetSol as getOriginalAssetSolNFT,\n  WormholeWrappedNFTInfo,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  Provider,\n  useEthereumProvider,\n} from \"../contexts/EthereumProviderContext\";\nimport { DataWrapper } from \"../store/helpers\";\nimport {\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOLANA_SYSTEM_PROGRAM_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\nexport type OriginalAssetInfo = {\n  originChain: ChainId | null;\n  originAddress: string | null;\n  originTokenId: string | null;\n};\n\nexport async function getOriginalAssetToken(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  provider?: Web3Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider) {\n      promise = await getOriginalAssetEth(\n        getTokenBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = await getOriginalAssetSol(\n        connection,\n        SOL_TOKEN_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    } else if (foreignChain === CHAIN_ID_TERRA) {\n      const lcd = new LCDClient(TERRA_HOST);\n      promise = await getOriginalAssetTerra(lcd, foreignNativeStringAddress);\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\nexport async function getOriginalAssetNFT(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  tokenId?: string,\n  provider?: Provider\n) {\n  let promise = null;\n  try {\n    if (isEVMChain(foreignChain) && provider && tokenId) {\n      promise = getOriginalAssetEthNFT(\n        getNFTBridgeAddressForChain(foreignChain),\n        provider,\n        foreignNativeStringAddress,\n        tokenId,\n        foreignChain\n      );\n    } else if (foreignChain === CHAIN_ID_SOLANA) {\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      promise = getOriginalAssetSolNFT(\n        connection,\n        SOL_NFT_BRIDGE_ADDRESS,\n        foreignNativeStringAddress\n      );\n    }\n  } catch (e) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  if (!promise) {\n    promise = Promise.reject(\"Invalid foreign arguments.\");\n  }\n  return promise;\n}\n\n//TODO refactor useCheckIfWormholeWrapped to use this function, and probably move to SDK\nexport async function getOriginalAsset(\n  foreignChain: ChainId,\n  foreignNativeStringAddress: string,\n  nft: boolean,\n  tokenId?: string,\n  provider?: Provider\n): Promise<WormholeWrappedNFTInfo> {\n  const result = nft\n    ? await getOriginalAssetNFT(\n        foreignChain,\n        foreignNativeStringAddress,\n        tokenId,\n        provider\n      )\n    : await getOriginalAssetToken(\n        foreignChain,\n        foreignNativeStringAddress,\n        provider\n      );\n\n  if (\n    isEVMChain(result.chainId) &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      ethers.constants.AddressZero\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n  if (\n    result.chainId === CHAIN_ID_SOLANA &&\n    uint8ArrayToNative(result.assetAddress, result.chainId) ===\n      SOLANA_SYSTEM_PROGRAM_ADDRESS\n  ) {\n    throw new Error(\"Unable to find address.\");\n  }\n\n  return result;\n}\n\n//This potentially returns the same chain as the foreign chain, in the case where the asset is native\nfunction useOriginalAsset(\n  foreignChain: ChainId,\n  foreignAddress: string,\n  nft: boolean,\n  tokenId?: string\n): DataWrapper<OriginalAssetInfo> {\n  const { provider } = useEthereumProvider();\n  const { isReady } = useIsWalletReady(foreignChain, false);\n  const [originAddress, setOriginAddress] = useState<string | null>(null);\n  const [originTokenId, setOriginTokenId] = useState<string | null>(null);\n  const [originChain, setOriginChain] = useState<ChainId | null>(null);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [previousArgs, setPreviousArgs] = useState<{\n    foreignChain: ChainId;\n    foreignAddress: string;\n    nft: boolean;\n    tokenId?: string;\n  } | null>(null);\n  const argsEqual =\n    !!previousArgs &&\n    previousArgs.foreignChain === foreignChain &&\n    previousArgs.foreignAddress === foreignAddress &&\n    previousArgs.nft === nft &&\n    previousArgs.tokenId === tokenId;\n  const setArgs = useCallback(\n    () => setPreviousArgs({ foreignChain, foreignAddress, nft, tokenId }),\n    [foreignChain, foreignAddress, nft, tokenId]\n  );\n\n  const argumentError = useMemo(\n    () =>\n      !foreignChain ||\n      !foreignAddress ||\n      (isEVMChain(foreignChain) && !isReady) ||\n      (isEVMChain(foreignChain) && nft && !tokenId) ||\n      argsEqual,\n    [isReady, nft, tokenId, argsEqual, foreignChain, foreignAddress]\n  );\n\n  useEffect(() => {\n    if (!argsEqual) {\n      setError(\"\");\n      setOriginAddress(null);\n      setOriginTokenId(null);\n      setOriginChain(null);\n      setPreviousArgs(null);\n    }\n    if (argumentError) {\n      return;\n    }\n    let cancelled = false;\n    setIsLoading(true);\n\n    getOriginalAsset(foreignChain, foreignAddress, nft, tokenId, provider)\n      .then((result) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setArgs();\n          setOriginAddress(\n            hexToNativeString(\n              uint8ArrayToHex(result.assetAddress),\n              result.chainId\n            ) || null\n          );\n          setOriginTokenId(result.tokenId || null);\n          setOriginChain(result.chainId);\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          setIsLoading(false);\n          setError(\"Unable to determine original asset.\");\n        }\n      });\n  }, [\n    foreignChain,\n    foreignAddress,\n    nft,\n    provider,\n    setArgs,\n    argumentError,\n    tokenId,\n    argsEqual,\n  ]);\n\n  const output: DataWrapper<OriginalAssetInfo> = useMemo(\n    () => ({\n      error: error,\n      isFetching: isLoading,\n      data:\n        originChain || originAddress || originTokenId\n          ? { originChain, originAddress, originTokenId }\n          : null,\n      receivedAt: null,\n    }),\n    [isLoading, originAddress, originChain, originTokenId, error]\n  );\n\n  return output;\n}\n\nexport default useOriginalAsset;\n","import { Button } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  setSourceAsset,\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/attestSlice\";\nimport {\n  selectAttestSignedVAAHex,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { ChainId, hexToNativeString } from \"@certusone/wormhole-sdk\";\n\nexport function RegisterNowButtonCore({\n  originChain,\n  originAsset,\n  targetChain,\n}: {\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  targetChain: ChainId;\n}) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  // user might be in the middle of a different attest\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const canSwitch = originChain && originAsset && !signedVAAHex;\n  const handleClick = useCallback(() => {\n    const nativeAsset =\n      originChain && hexToNativeString(originAsset, originChain);\n    if (originChain && originAsset && nativeAsset && canSwitch) {\n      dispatch(setSourceChain(originChain));\n      dispatch(setSourceAsset(nativeAsset));\n      dispatch(setTargetChain(targetChain));\n      dispatch(setStep(2));\n      history.push(\"/register\");\n    }\n  }, [dispatch, canSwitch, originChain, originAsset, targetChain, history]);\n  if (!canSwitch) return null;\n  return (\n    <Button\n      variant=\"outlined\"\n      size=\"small\"\n      style={{ display: \"block\", margin: \"4px auto 0px\" }}\n      onClick={handleClick}\n    >\n      Register Now\n    </Button>\n  );\n}\n\nexport default function RegisterNowButton() {\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  return (\n    <RegisterNowButtonCore\n      originChain={originChain}\n      originAsset={originAsset}\n      targetChain={targetChain}\n    />\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  nativeToHexString,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Card,\n  CircularProgress,\n  Container,\n  makeStyles,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport useFetchForeignAsset, {\n  ForeignAssetInfo,\n} from \"../hooks/useFetchForeignAsset\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport useMetadata from \"../hooks/useMetadata\";\nimport useOriginalAsset, { OriginalAssetInfo } from \"../hooks/useOriginalAsset\";\nimport { COLORS } from \"../muiTheme\";\nimport { BETA_CHAINS, CHAINS, CHAINS_BY_ID } from \"../utils/consts\";\nimport HeaderText from \"./HeaderText\";\nimport KeyAndBalance from \"./KeyAndBalance\";\nimport SmartAddress from \"./SmartAddress\";\nimport { RegisterNowButtonCore } from \"./Transfer/RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexBox: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      margin: theme.spacing(2),\n    },\n  },\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  spacer: {\n    height: theme.spacing(3),\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  arrowIcon: {\n    margin: \"0 auto\",\n    fontSize: \"70px\",\n  },\n  resultContainer: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction PrimaryAssetInfomation({\n  lookupChain,\n  lookupAsset,\n  originChain,\n  originAsset,\n  showLoader,\n}: {\n  lookupChain: ChainId;\n  lookupAsset: string;\n  originChain: ChainId;\n  originAsset: string;\n  showLoader: boolean;\n}) {\n  const classes = useStyles();\n  const tokenArray = useMemo(() => [originAsset], [originAsset]);\n  const metadata = useMetadata(originChain, tokenArray);\n  const nativeContent = (\n    <div>\n      <Typography>{`This is not a Wormhole wrapped token.`}</Typography>\n    </div>\n  );\n  const wrapped = (\n    <div>\n      <Typography>{`This is wrapped by Wormhole! Here is the original token: `}</Typography>\n      <div className={classes.flexBox}>\n        <Typography>{`Chain: ${CHAINS_BY_ID[originChain].name}`}</Typography>\n        <div>\n          <Typography component=\"div\">\n            {\"Token: \"}\n            <SmartAddress\n              address={originAsset}\n              chainId={originChain}\n              symbol={metadata.data?.get(originAsset)?.symbol}\n              tokenName={metadata.data?.get(originAsset)?.tokenName}\n            />\n          </Typography>\n        </div>\n      </div>\n    </div>\n  );\n  return lookupChain === originChain ? nativeContent : wrapped;\n}\n\nfunction SecondaryAssetInformation({\n  chainId,\n  foreignAssetInfo,\n  originAssetInfo,\n}: {\n  chainId: ChainId;\n  foreignAssetInfo?: ForeignAssetInfo;\n  originAssetInfo?: OriginalAssetInfo;\n}) {\n  const classes = useStyles();\n  const tokenArray: string[] = useMemo(() => {\n    //Saved to a variable to help typescript cope\n    const originAddress = originAssetInfo?.originAddress;\n    return originAddress && chainId === originAssetInfo?.originChain\n      ? [originAddress]\n      : foreignAssetInfo?.address\n      ? [foreignAssetInfo?.address]\n      : [];\n  }, [foreignAssetInfo, originAssetInfo, chainId]);\n  const metadata = useMetadata(chainId, tokenArray);\n  //TODO when this is the origin chain\n  return !originAssetInfo ? null : chainId === originAssetInfo.originChain ? (\n    <div>\n      <Typography>{`Transferring to ${CHAINS_BY_ID[chainId].name} will unwrap the token:`}</Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={originAssetInfo.originAddress || undefined}\n          symbol={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(originAssetInfo.originAddress || \"\")\n              ?.tokenName || undefined\n          }\n        />\n      </div>\n    </div>\n  ) : !foreignAssetInfo ? null : foreignAssetInfo.doesExist === false ? (\n    <div>\n      <Typography>{`This token has not yet been registered on ${CHAINS_BY_ID[chainId].name}`}</Typography>\n      <RegisterNowButtonCore\n        originChain={originAssetInfo?.originChain || undefined}\n        originAsset={\n          nativeToHexString(\n            originAssetInfo?.originAddress || undefined,\n            originAssetInfo?.originChain || CHAIN_ID_SOLANA // this should exist\n          ) || undefined\n        }\n        targetChain={chainId}\n      />\n    </div>\n  ) : (\n    <div>\n      <Typography>When bridged, this asset becomes: </Typography>\n      <div className={classes.resultContainer}>\n        <SmartAddress\n          chainId={chainId}\n          address={foreignAssetInfo.address || undefined}\n          symbol={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.symbol ||\n            undefined\n          }\n          tokenName={\n            metadata.data?.get(foreignAssetInfo.address || \"\")?.tokenName ||\n            undefined\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function TokenOriginVerifier() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n\n  const [primaryLookupChain, setPrimaryLookupChain] = useState(CHAIN_ID_SOLANA);\n  const [primaryLookupAsset, setPrimaryLookupAsset] = useState(\"\");\n\n  const [secondaryLookupChain, setSecondaryLookupChain] =\n    useState(CHAIN_ID_TERRA);\n\n  const primaryLookupChainOptions = useMemo(\n    () => (isBeta ? CHAINS.filter((x) => !BETA_CHAINS.includes(x.id)) : CHAINS),\n    [isBeta]\n  );\n  const secondaryLookupChainOptions = useMemo(\n    () =>\n      isBeta\n        ? CHAINS.filter(\n            (x) => !BETA_CHAINS.includes(x.id) && x.id !== primaryLookupChain\n          )\n        : CHAINS.filter((x) => x.id !== primaryLookupChain),\n    [isBeta, primaryLookupChain]\n  );\n\n  const handlePrimaryLookupChainChange = useCallback(\n    (e) => {\n      setPrimaryLookupChain(e.target.value);\n      if (secondaryLookupChain === e.target.value) {\n        setSecondaryLookupChain(\n          e.target.value === CHAIN_ID_SOLANA ? CHAIN_ID_TERRA : CHAIN_ID_SOLANA\n        );\n      }\n      setPrimaryLookupAsset(\"\");\n    },\n    [secondaryLookupChain]\n  );\n  const handleSecondaryLookupChainChange = useCallback((e) => {\n    setSecondaryLookupChain(e.target.value);\n  }, []);\n  const handlePrimaryLookupAssetChange = useCallback((event) => {\n    setPrimaryLookupAsset(event.target.value);\n  }, []);\n\n  const originInfo = useOriginalAsset(\n    primaryLookupChain,\n    primaryLookupAsset,\n    false\n  );\n  const foreignAssetInfo = useFetchForeignAsset(\n    originInfo.data?.originChain || 1,\n    originInfo.data?.originAddress || \"\",\n    secondaryLookupChain\n  );\n\n  const primaryWalletIsActive = !originInfo.data;\n  const secondaryWalletIsActive = !primaryWalletIsActive;\n\n  const primaryWallet = useIsWalletReady(\n    primaryLookupChain,\n    primaryWalletIsActive\n  );\n  const secondaryWallet = useIsWalletReady(\n    secondaryLookupChain,\n    secondaryWalletIsActive\n  );\n\n  const primaryWalletError =\n    isEVMChain(primaryLookupChain) &&\n    primaryLookupAsset &&\n    !originInfo.data &&\n    !originInfo.error &&\n    (!primaryWallet.isReady ? primaryWallet.statusMessage : \"\");\n  const originError = originInfo.error;\n  const primaryError = primaryWalletError || originError;\n\n  const secondaryWalletError =\n    isEVMChain(secondaryLookupChain) &&\n    originInfo.data?.originAddress &&\n    originInfo.data?.originChain &&\n    !foreignAssetInfo.data &&\n    (!secondaryWallet.isReady ? secondaryWallet.statusMessage : \"\");\n  const foreignError = foreignAssetInfo.error;\n  const secondaryError = secondaryWalletError || foreignError;\n\n  const primaryContent = (\n    <>\n      <Typography variant=\"h5\">Source Information</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Enter a token from any supported chain to get started.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Chain\"\n        value={primaryLookupChain}\n        onChange={handlePrimaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {primaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        label=\"Paste an address\"\n        value={primaryLookupAsset}\n        onChange={handlePrimaryLookupAssetChange}\n      />\n      <div className={classes.centered}>\n        {isEVMChain(primaryLookupChain) ? (\n          <KeyAndBalance chainId={primaryLookupChain} />\n        ) : null}\n        {primaryError ? (\n          <Typography color=\"error\">{primaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {originInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <PrimaryAssetInfomation\n            lookupAsset={primaryLookupAsset}\n            lookupChain={primaryLookupChain}\n            originChain={originInfo.data.originChain}\n            originAsset={originInfo.data.originAddress}\n            showLoader={originInfo.isFetching}\n          />\n        ) : null}\n      </div>\n    </>\n  );\n\n  const secondaryContent = originInfo.data ? (\n    <>\n      <Typography variant=\"h5\">Bridge Results</Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\">\n        Select a chain to see the result of bridging this token.\n      </Typography>\n      <div className={classes.spacer} />\n      <TextField\n        select\n        variant=\"outlined\"\n        label=\"Other Chain\"\n        value={secondaryLookupChain}\n        onChange={handleSecondaryLookupChainChange}\n        fullWidth\n        margin=\"normal\"\n      >\n        {secondaryLookupChainOptions.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </TextField>\n      <div className={classes.centered}>\n        {isEVMChain(secondaryLookupChain) ? (\n          <KeyAndBalance chainId={secondaryLookupChain} />\n        ) : null}\n        {secondaryError ? (\n          <Typography color=\"error\">{secondaryError}</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        {foreignAssetInfo.isFetching ? (\n          <CircularProgress />\n        ) : originInfo.data?.originChain && originInfo.data.originAddress ? (\n          <SecondaryAssetInformation\n            foreignAssetInfo={foreignAssetInfo.data || undefined}\n            originAssetInfo={originInfo.data || undefined}\n            chainId={secondaryLookupChain}\n          />\n        ) : null}\n      </div>\n    </>\n  ) : null;\n\n  const content = (\n    <div>\n      <Container maxWidth=\"md\" className={classes.centered}>\n        <HeaderText white>Token Origin Verifier</HeaderText>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Card className={classes.mainCard}>{primaryContent}</Card>\n        {secondaryContent ? (\n          <>\n            <div className={classes.centered}>\n              <ArrowDropDownIcon className={classes.arrowIcon} />\n            </div>\n            <Card className={classes.mainCard}>{secondaryContent}</Card>\n          </>\n        ) : null}\n      </Container>\n    </div>\n  );\n\n  return content;\n}\n","import { isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../../contexts/EthereumProviderContext\";\nimport {\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { getEvmChainId } from \"../../utils/consts\";\nimport {\n  ethTokenToParsedTokenAccount,\n  getEthereumToken,\n} from \"../../utils/ethereum\";\n\nconst useStyles = makeStyles((theme) => ({\n  addButton: {\n    display: \"block\",\n    margin: `${theme.spacing(1)}px auto 0px`,\n  },\n}));\n\nexport default function AddToMetamask() {\n  const classes = useStyles();\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const handleClick = useCallback(() => {\n    if (provider && targetAsset && signerAddress && hasCorrectEvmNetwork) {\n      (async () => {\n        try {\n          const token = await getEthereumToken(targetAsset, provider);\n          const { symbol, decimals } = await ethTokenToParsedTokenAccount(\n            token,\n            signerAddress\n          );\n          const ethereum = (await detectEthereumProvider()) as any;\n          ethereum.request({\n            method: \"wallet_watchAsset\",\n            params: {\n              type: \"ERC20\", // In the future, other standards will be supported\n              options: {\n                address: targetAsset, // The address of the token contract\n                symbol: (\n                  symbol ||\n                  sourceParsedTokenAccount?.symbol ||\n                  \"wh\"\n                ).substr(0, 5), // A ticker symbol or shorthand, up to 5 characters\n                decimals, // The number of token decimals\n                // image: string; // A string url of the token logo\n              },\n            },\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      })();\n    }\n  }, [\n    provider,\n    targetAsset,\n    signerAddress,\n    hasCorrectEvmNetwork,\n    sourceParsedTokenAccount,\n  ]);\n  return provider &&\n    signerAddress &&\n    targetAsset &&\n    isEVMChain(targetChain) &&\n    hasCorrectEvmNetwork ? (\n    <Button\n      onClick={handleClick}\n      size=\"small\"\n      variant=\"outlined\"\n      className={classes.addButton}\n    >\n      Add to Metamask\n    </Button>\n  ) : null;\n}\n","import {\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_OASIS,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  WSOL_ADDRESS,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Checkbox,\n  FormControlLabel,\n  Link,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetIsTransferCompleted from \"../../hooks/useGetIsTransferCompleted\";\nimport { useHandleRedeem } from \"../../hooks/useHandleRedeem\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferIsRecovery,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport {\n  getHowToAddTokensToWalletUrl,\n  ROPSTEN_WETH_ADDRESS,\n  WAVAX_ADDRESS,\n  WBNB_ADDRESS,\n  WETH_ADDRESS,\n  WMATIC_ADDRESS,\n  WROSE_ADDRESS,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport SmartAddress from \"../SmartAddress\";\nimport { SolanaCreateAssociatedAddressAlternate } from \"../SolanaCreateAssociatedAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport AddToMetamask from \"./AddToMetamask\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nconst useStyles = makeStyles((theme) => ({\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction Redeem() {\n  const { handleClick, handleNativeClick, disabled, showLoader } =\n    useHandleRedeem();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const isRecovery = useSelector(selectTransferIsRecovery);\n  const { isTransferCompletedLoading, isTransferCompleted } =\n    useGetIsTransferCompleted(true);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { isReady, statusMessage } = useIsWalletReady(targetChain);\n  //TODO better check, probably involving a hook & the VAA\n  const isEthNative =\n    targetChain === CHAIN_ID_ETH &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WETH_ADDRESS.toLowerCase();\n  const isEthRopstenNative =\n    targetChain === CHAIN_ID_ETHEREUM_ROPSTEN &&\n    targetAsset &&\n    targetAsset.toLowerCase() === ROPSTEN_WETH_ADDRESS.toLowerCase();\n  const isBscNative =\n    targetChain === CHAIN_ID_BSC &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WBNB_ADDRESS.toLowerCase();\n  const isPolygonNative =\n    targetChain === CHAIN_ID_POLYGON &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WMATIC_ADDRESS.toLowerCase();\n  const isAvaxNative =\n    targetChain === CHAIN_ID_AVAX &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WAVAX_ADDRESS.toLowerCase();\n  const isOasisNative =\n    targetChain === CHAIN_ID_OASIS &&\n    targetAsset &&\n    targetAsset.toLowerCase() === WROSE_ADDRESS.toLowerCase();\n  const isSolNative =\n    targetChain === CHAIN_ID_SOLANA &&\n    targetAsset &&\n    targetAsset === WSOL_ADDRESS;\n  const isNativeEligible =\n    isEthNative ||\n    isEthRopstenNative ||\n    isBscNative ||\n    isPolygonNative ||\n    isAvaxNative ||\n    isOasisNative ||\n    isSolNative;\n  const [useNativeRedeem, setUseNativeRedeem] = useState(true);\n  const toggleNativeRedeem = useCallback(() => {\n    setUseNativeRedeem(!useNativeRedeem);\n  }, [useNativeRedeem]);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n  const howToAddTokensUrl = getHowToAddTokensToWalletUrl(targetChain);\n\n  return (\n    <>\n      <StepDescription>Receive the tokens on the target chain</StepDescription>\n      <KeyAndBalance chainId={targetChain} />\n      {targetChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      {isNativeEligible && (\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={useNativeRedeem}\n              onChange={toggleNativeRedeem}\n              color=\"primary\"\n            />\n          }\n          label=\"Automatically unwrap to native currency\"\n        />\n      )}\n      {targetChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      {targetChain === CHAIN_ID_SOLANA ? (\n        <SolanaCreateAssociatedAddressAlternate />\n      ) : null}\n\n      <ButtonWithLoader\n        //TODO disable when the associated token account is confirmed to not exist\n        disabled={\n          !isReady ||\n          disabled ||\n          (isRecovery && (isTransferCompletedLoading || isTransferCompleted))\n        }\n        onClick={\n          isNativeEligible && useNativeRedeem ? handleNativeClick : handleClick\n        }\n        showLoader={showLoader || (isRecovery && isTransferCompletedLoading)}\n        error={statusMessage}\n      >\n        Redeem\n      </ButtonWithLoader>\n      <WaitingForWalletMessage />\n\n      {isRecovery && isReady && isTransferCompleted ? (\n        <>\n          <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n            These tokens have already been redeemed.{\" \"}\n            {!isEVMChain(targetChain) && howToAddTokensUrl ? (\n              <Link\n                href={howToAddTokensUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Click here to see how to add them to your wallet.\n              </Link>\n            ) : null}\n          </Alert>\n          {targetAsset ? (\n            <>\n              <span>Token Address:</span>\n              <SmartAddress\n                chainId={targetChain}\n                address={targetAsset || undefined}\n              />\n            </>\n          ) : null}\n          {isEVMChain(targetChain) ? <AddToMetamask /> : null}\n          <ButtonWithLoader onClick={handleResetClick}>\n            Transfer More Tokens!\n          </ButtonWithLoader>\n        </>\n      ) : null}\n    </>\n  );\n}\n\nexport default Redeem;\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getIsTransferCompletedEth,\n  getIsTransferCompletedSolana,\n  getIsTransferCompletedTerra,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport {\n  selectTransferIsRecovery,\n  selectTransferTargetAddressHex,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  getEvmChainId,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  TERRA_GAS_PRICES_URL,\n  TERRA_HOST,\n} from \"../utils/consts\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport useIsWalletReady from \"./useIsWalletReady\";\n\n/**\n * @param recoveryOnly Only fire when in recovery mode\n */\nexport default function useGetIsTransferCompleted(recoveryOnly: boolean): {\n  isTransferCompletedLoading: boolean;\n  isTransferCompleted: boolean;\n} {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTransferCompleted, setIsTransferCompleted] = useState(false);\n\n  const isRecovery = useSelector(selectTransferIsRecovery);\n  const targetAddress = useSelector(selectTransferTargetAddressHex);\n  const targetChain = useSelector(selectTransferTargetChain);\n\n  const { isReady } = useIsWalletReady(targetChain, false);\n  const { provider, chainId: evmChainId } = useEthereumProvider();\n  const signedVAA = useTransferSignedVAA();\n\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const shouldFire = !recoveryOnly || isRecovery;\n\n  useEffect(() => {\n    if (!shouldFire) {\n      return;\n    }\n\n    let cancelled = false;\n    let transferCompleted = false;\n    if (targetChain && targetAddress && signedVAA && isReady) {\n      if (isEVMChain(targetChain) && hasCorrectEvmNetwork && provider) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            transferCompleted = await getIsTransferCompletedEth(\n              getTokenBridgeAddressForChain(targetChain),\n              provider,\n              signedVAA\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_SOLANA) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const connection = new Connection(SOLANA_HOST, \"confirmed\");\n            transferCompleted = await getIsTransferCompletedSolana(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              connection\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      } else if (targetChain === CHAIN_ID_TERRA) {\n        setIsLoading(true);\n        (async () => {\n          try {\n            const lcdClient = new LCDClient(TERRA_HOST);\n            transferCompleted = await getIsTransferCompletedTerra(\n              getTokenBridgeAddressForChain(targetChain),\n              signedVAA,\n              lcdClient,\n              TERRA_GAS_PRICES_URL\n            );\n          } catch (error) {\n            console.error(error);\n          }\n          if (!cancelled) {\n            setIsTransferCompleted(transferCompleted);\n            setIsLoading(false);\n          }\n        })();\n      }\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    shouldFire,\n    hasCorrectEvmNetwork,\n    targetChain,\n    targetAddress,\n    signedVAA,\n    isReady,\n    provider,\n  ]);\n\n  return { isTransferCompletedLoading: isLoading, isTransferCompleted };\n}\n","import { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { Launch } from \"@material-ui/icons\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { useSelector } from \"react-redux\";\nimport useMarketsMap from \"../../hooks/useMarketsMap\";\nimport { DataWrapper } from \"../../store/helpers\";\nimport {\n  selectSolanaTokenMap,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { JUPITER_SWAP_BASE_URL } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    marginTop: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(0.5, 0.5),\n  },\n}));\n\nfunction getJupiterSwapUrl(\n  link: string,\n  targetAsset: string,\n  tokenMap: DataWrapper<TokenInfo[]>\n) {\n  if (!tokenMap.error && !tokenMap.isFetching && tokenMap.data) {\n    const tokenInfo = tokenMap.data.find((value) => {\n      return value.address === targetAsset;\n    });\n    if (tokenInfo) {\n      const sourceSymbol = tokenInfo.symbol;\n      if (sourceSymbol) {\n        const targetSymbol = sourceSymbol === \"UST\" ? \"SOL\" : \"UST\";\n        return `${JUPITER_SWAP_BASE_URL}/${sourceSymbol}-${targetSymbol}`;\n      }\n    }\n  }\n  return link;\n}\n\nexport default function FeaturedMarkets() {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const solanaTokenMap = useSelector(selectSolanaTokenMap);\n  const { data: marketsData } = useMarketsMap(true);\n  const classes = useStyles();\n\n  if (\n    !sourceAsset ||\n    !targetAsset ||\n    !marketsData ||\n    !marketsData.markets ||\n    !marketsData.tokenMarkets\n  ) {\n    return null;\n  }\n\n  const tokenMarkets =\n    marketsData.tokenMarkets[sourceChain]?.[targetChain]?.[sourceAsset];\n  if (!tokenMarkets) {\n    return null;\n  }\n\n  const tokenMarketButtons = [];\n  for (const market of tokenMarkets.markets) {\n    const marketInfo = marketsData.markets[market];\n    if (marketInfo) {\n      const url =\n        market === \"jupiter\"\n          ? getJupiterSwapUrl(marketInfo.link, sourceAsset, solanaTokenMap)\n          : marketInfo.link;\n      tokenMarketButtons.push(\n        <Button\n          key={market}\n          size=\"small\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          startIcon={<Launch />}\n          href={url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={classes.button}\n        >\n          {marketInfo.name}\n        </Button>\n      );\n    }\n  }\n\n  return tokenMarketButtons.length ? (\n    <div style={{ textAlign: \"center\" }}>\n      <Typography\n        variant=\"subtitle2\"\n        gutterBottom\n        className={classes.description}\n      >\n        Featured markets\n      </Typography>\n      {tokenMarketButtons}\n    </div>\n  ) : null;\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectTransferRedeemTx,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport { reset } from \"../../store/transferSlice\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ShowTx from \"../ShowTx\";\nimport AddToMetamask from \"./AddToMetamask\";\nimport FeaturedMarkets from \"./FeaturedMarkets\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function RedeemPreview() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const redeemTx = useSelector(selectTransferRedeemTx);\n  const handleResetClick = useCallback(() => {\n    dispatch(reset());\n  }, [dispatch]);\n\n  const explainerString =\n    \"Success! The redeem transaction was submitted. The tokens will become available once the transaction confirms.\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {redeemTx ? <ShowTx chainId={targetChain} tx={redeemTx} /> : null}\n      <AddToMetamask />\n      <FeaturedMarkets />\n      <ButtonWithLoader onClick={handleResetClick}>\n        Transfer More Tokens!\n      </ButtonWithLoader>\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToUint8Array,\n  isEVMChain,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  transferFromEth,\n  transferFromEthNative,\n  transferFromSolana,\n  transferFromTerra,\n  transferNativeSol,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { parseUnits, zeroPad } from \"ethers/lib/utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTerraFeeDenom,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n  selectTransferIsTargetComplete,\n  selectTransferOriginAsset,\n  selectTransferOriginChain,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport {\n  setIsSending,\n  setSignedVAAHex,\n  setTransferTx,\n} from \"../store/transferSlice\";\nimport {\n  getBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport useTransferTargetAddressHex from \"./useTransferTargetAddress\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  tokenAddress: string,\n  decimals: number,\n  amount: string,\n  recipientChain: ChainId,\n  recipientAddress: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals);\n    const receipt = isNative\n      ? await transferFromEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        )\n      : await transferFromEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          tokenAddress,\n          amountParsed,\n          recipientChain,\n          recipientAddress\n        );\n    dispatch(\n      setTransferTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      getTokenBridgeAddressForChain(chainId)\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString()\n    );\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  fromAddress: string,\n  mintAddress: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  isNative: boolean,\n  originAddressStr?: string,\n  originChain?: ChainId\n) {\n  dispatch(setIsSending(true));\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const amountParsed = parseUnits(amount, decimals).toBigInt();\n    const originAddress = originAddressStr\n      ? zeroPad(hexToUint8Array(originAddressStr), 32)\n      : undefined;\n    const promise = isNative\n      ? transferNativeSol(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          amountParsed,\n          targetAddress,\n          targetChain\n        )\n      : transferFromSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          fromAddress,\n          mintAddress,\n          amountParsed,\n          targetAddress,\n          targetChain,\n          originAddress,\n          originChain\n        );\n    const transaction = await promise;\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const info = await connection.getTransaction(txid);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    dispatch(setTransferTx({ id: txid, block: info.slot }));\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence\n    );\n\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  asset: string,\n  amount: string,\n  decimals: number,\n  targetChain: ChainId,\n  targetAddress: Uint8Array,\n  feeDenom: string\n) {\n  dispatch(setIsSending(true));\n  try {\n    const amountParsed = parseUnits(amount, decimals).toString();\n    const msgs = await transferFromTerra(\n      wallet.terraAddress,\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      asset,\n      amountParsed,\n      targetChain,\n      targetAddress\n    );\n\n    const result = await postWithFees(\n      wallet,\n      msgs,\n      \"Wormhole - Initiate Transfer\",\n      [feeDenom]\n    );\n\n    const info = await waitForTerraExecution(result);\n    dispatch(setTransferTx({ id: info.txhash, block: info.height }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"info\">Fetching VAA</Alert>,\n    });\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Fetched Signed VAA</Alert>,\n    });\n    dispatch(setSignedVAAHex(uint8ArrayToHex(vaaBytes)));\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsSending(false));\n  }\n}\n\nexport function useHandleTransfer() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const originChain = useSelector(selectTransferOriginChain);\n  const originAsset = useSelector(selectTransferOriginAsset);\n  const amount = useSelector(selectTransferAmount);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddress = useTransferTargetAddressHex();\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const { signer } = useEthereumProvider();\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceTokenPublicKey = sourceParsedTokenAccount?.publicKey;\n  const decimals = sourceParsedTokenAccount?.decimals;\n  const isNative = sourceParsedTokenAccount?.isNativeAsset || false;\n  const disabled = !isTargetComplete || isSending || isSendComplete;\n  const handleTransferClick = useCallback(() => {\n    // TODO: we should separate state for transaction vs fetching vaa\n    if (\n      isEVMChain(sourceChain) &&\n      !!signer &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        sourceAsset,\n        decimals,\n        amount,\n        targetChain,\n        targetAddress,\n        isNative,\n        sourceChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!sourceAsset &&\n      !!sourceTokenPublicKey &&\n      !!targetAddress &&\n      decimals !== undefined\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        sourceTokenPublicKey,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        isNative,\n        originAsset,\n        originChain\n      );\n    } else if (\n      sourceChain === CHAIN_ID_TERRA &&\n      !!terraWallet &&\n      !!sourceAsset &&\n      decimals !== undefined &&\n      !!targetAddress\n    ) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        sourceAsset,\n        amount,\n        decimals,\n        targetChain,\n        targetAddress,\n        terraFeeDenom\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    sourceChain,\n    signer,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    sourceTokenPublicKey,\n    sourceAsset,\n    amount,\n    decimals,\n    targetChain,\n    targetAddress,\n    originAsset,\n    originChain,\n    isNative,\n    terraFeeDenom,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleTransferClick,\n      disabled,\n      showLoader: isSending,\n    }),\n    [handleTransferClick, disabled, isSending]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferTargetAddressHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferTargetAddressHex() {\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAddress = useMemo(\n    () => (targetAddressHex ? hexToUint8Array(targetAddressHex) : undefined),\n    [targetAddressHex]\n  );\n  return targetAddress;\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  isNativeDenom,\n  TokenImplementation__factory,\n} from \"@certusone/wormhole-sdk\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport {\n  selectTransferTargetAsset,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setTargetParsedTokenAccount } from \"../store/transferSlice\";\nimport { getEvmChainId, SOLANA_HOST, TERRA_HOST } from \"../utils/consts\";\nimport { NATIVE_TERRA_DECIMALS } from \"../utils/terra\";\nimport { createParsedTokenAccount } from \"./useGetSourceParsedTokenAccounts\";\nimport useMetadata from \"./useMetadata\";\n\nfunction useGetTargetParsedTokenAccounts() {\n  const dispatch = useDispatch();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetAssetArrayed = useMemo(\n    () => (targetAsset ? [targetAsset] : []),\n    [targetAsset]\n  );\n  const metadata = useMetadata(targetChain, targetAssetArrayed);\n  const tokenName =\n    (targetAsset && metadata.data?.get(targetAsset)?.tokenName) || undefined;\n  const symbol =\n    (targetAsset && metadata.data?.get(targetAsset)?.symbol) || undefined;\n  const logo =\n    (targetAsset && metadata.data?.get(targetAsset)?.logo) || undefined;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasCorrectEvmNetwork = evmChainId === getEvmChainId(targetChain);\n  const hasResolvedMetadata = metadata.data || metadata.error;\n  useEffect(() => {\n    // targetParsedTokenAccount is cleared on setTargetAsset, but we need to clear it on wallet changes too\n    dispatch(setTargetParsedTokenAccount(undefined));\n    if (!targetAsset || !hasResolvedMetadata) {\n      return;\n    }\n    let cancelled = false;\n\n    if (targetChain === CHAIN_ID_TERRA && terraWallet) {\n      const lcd = new LCDClient(TERRA_HOST);\n      if (isNativeDenom(targetAsset)) {\n        lcd.bank\n          .balance(terraWallet.walletAddress)\n          .then(([coins]) => {\n            const balance = coins.get(targetAsset)?.amount?.toString();\n            if (balance && !cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    \"\",\n                    \"\",\n                    balance,\n                    NATIVE_TERRA_DECIMALS,\n                    Number(formatUnits(balance, NATIVE_TERRA_DECIMALS)),\n                    formatUnits(balance, NATIVE_TERRA_DECIMALS),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          })\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      } else {\n        lcd.wasm\n          .contractQuery(targetAsset, {\n            token_info: {},\n          })\n          .then((info: any) =>\n            lcd.wasm\n              .contractQuery(targetAsset, {\n                balance: {\n                  address: terraWallet.walletAddress,\n                },\n              })\n              .then((balance: any) => {\n                if (balance && info && !cancelled) {\n                  dispatch(\n                    setTargetParsedTokenAccount(\n                      createParsedTokenAccount(\n                        \"\",\n                        \"\",\n                        balance.balance.toString(),\n                        info.decimals,\n                        Number(formatUnits(balance.balance, info.decimals)),\n                        formatUnits(balance.balance, info.decimals),\n                        symbol,\n                        tokenName,\n                        logo\n                      )\n                    )\n                  );\n                }\n              })\n          )\n          .catch(() => {\n            if (!cancelled) {\n              // TODO: error state\n            }\n          });\n      }\n    }\n    if (targetChain === CHAIN_ID_SOLANA && solPK) {\n      let mint;\n      try {\n        mint = new PublicKey(targetAsset);\n      } catch (e) {\n        return;\n      }\n      const connection = new Connection(SOLANA_HOST, \"confirmed\");\n      connection\n        .getParsedTokenAccountsByOwner(solPK, { mint })\n        .then(({ value }) => {\n          if (!cancelled) {\n            if (value.length) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  createParsedTokenAccount(\n                    value[0].pubkey.toString(),\n                    value[0].account.data.parsed?.info?.mint,\n                    value[0].account.data.parsed?.info?.tokenAmount?.amount,\n                    value[0].account.data.parsed?.info?.tokenAmount?.decimals,\n                    value[0].account.data.parsed?.info?.tokenAmount?.uiAmount,\n                    value[0].account.data.parsed?.info?.tokenAmount\n                      ?.uiAmountString,\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            } else {\n              // TODO: error state\n            }\n          }\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    if (\n      isEVMChain(targetChain) &&\n      provider &&\n      signerAddress &&\n      hasCorrectEvmNetwork\n    ) {\n      const token = TokenImplementation__factory.connect(targetAsset, provider);\n      token\n        .decimals()\n        .then((decimals) => {\n          token.balanceOf(signerAddress).then((n) => {\n            if (!cancelled) {\n              dispatch(\n                setTargetParsedTokenAccount(\n                  // TODO: verify accuracy\n                  createParsedTokenAccount(\n                    signerAddress,\n                    token.address,\n                    n.toString(),\n                    decimals,\n                    Number(formatUnits(n, decimals)),\n                    formatUnits(n, decimals),\n                    symbol,\n                    tokenName,\n                    logo\n                  )\n                )\n              );\n            }\n          });\n        })\n        .catch(() => {\n          if (!cancelled) {\n            // TODO: error state\n          }\n        });\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [\n    dispatch,\n    targetAsset,\n    targetChain,\n    provider,\n    signerAddress,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    hasCorrectEvmNetwork,\n    hasResolvedMetadata,\n    symbol,\n    tokenName,\n    logo,\n  ]);\n}\n\nexport default useGetTargetParsedTokenAccounts;\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  hexToNativeString,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useGetTargetParsedTokenAccounts from \"../../hooks/useGetTargetParsedTokenAccounts\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport useSyncTargetAddress from \"../../hooks/useSyncTargetAddress\";\nimport { GasEstimateSummary } from \"../../hooks/useTransactionFees\";\nimport {\n  selectTransferAmount,\n  selectTransferIsTargetComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceChain,\n  selectTransferTargetAddressHex,\n  selectTransferTargetAsset,\n  selectTransferTargetAssetWrapper,\n  selectTransferTargetBalanceString,\n  selectTransferTargetChain,\n  selectTransferTargetError,\n  selectTransferTargetParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { incrementStep, setTargetChain } from \"../../store/transferSlice\";\nimport { CHAINS, CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaCreateAssociatedAddress, {\n  useAssociatedAccountExistsState,\n} from \"../SolanaCreateAssociatedAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport RegisterNowButton from \"./RegisterNowButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport const useTargetInfo = () => {\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetAddressHex = useSelector(selectTransferTargetAddressHex);\n  const targetAsset = useSelector(selectTransferTargetAsset);\n  const targetParsedTokenAccount = useSelector(\n    selectTransferTargetParsedTokenAccount\n  );\n  const tokenName = targetParsedTokenAccount?.name;\n  const symbol = targetParsedTokenAccount?.symbol;\n  const logo = targetParsedTokenAccount?.logo;\n  const readableTargetAddress =\n    hexToNativeString(targetAddressHex, targetChain) || \"\";\n  return useMemo(\n    () => ({\n      targetChain,\n      targetAsset,\n      tokenName,\n      symbol,\n      logo,\n      readableTargetAddress,\n    }),\n    [targetChain, targetAsset, tokenName, symbol, logo, readableTargetAddress]\n  );\n};\n\nfunction Target() {\n  useGetTargetParsedTokenAccounts();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const chains = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const { error: targetAssetError, data } = useSelector(\n    selectTransferTargetAssetWrapper\n  );\n  const {\n    targetChain,\n    targetAsset,\n    tokenName,\n    symbol,\n    logo,\n    readableTargetAddress,\n  } = useTargetInfo();\n  const uiAmountString = useSelector(selectTransferTargetBalanceString);\n  const transferAmount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferTargetError);\n  const isTargetComplete = useSelector(selectTransferIsTargetComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { statusMessage } = useIsWalletReady(targetChain);\n  const isLoading = !statusMessage && !targetAssetError && !data;\n  const { associatedAccountExists, setAssociatedAccountExists } =\n    useAssociatedAccountExistsState(\n      targetChain,\n      targetAsset,\n      readableTargetAddress\n    );\n  useSyncTargetAddress(!shouldLockFields);\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n  return (\n    <>\n      <StepDescription>Select a recipient chain and address.</StepDescription>\n      <ChainSelect\n        variant=\"outlined\"\n        select\n        fullWidth\n        value={targetChain}\n        onChange={handleTargetChange}\n        disabled={true}\n        chains={chains}\n      />\n      <KeyAndBalance chainId={targetChain} />\n      {readableTargetAddress ? (\n        <>\n          {targetAsset ? (\n            <div className={classes.transferField}>\n              <Typography variant=\"subtitle2\">Bridged tokens:</Typography>\n              <Typography component=\"div\">\n                <SmartAddress\n                  chainId={targetChain}\n                  address={targetAsset}\n                  symbol={symbol}\n                  tokenName={tokenName}\n                  logo={logo}\n                  variant=\"h6\"\n                />\n                {`(Amount: ${transferAmount})`}\n              </Typography>\n            </div>\n          ) : null}\n          <div className={classes.transferField}>\n            <Typography variant=\"subtitle2\">Sent to:</Typography>\n            <Typography component=\"div\">\n              <SmartAddress\n                chainId={targetChain}\n                address={readableTargetAddress}\n                variant=\"h6\"\n              />\n              {`(Current balance: ${uiAmountString || \"0\"})`}\n            </Typography>\n          </div>\n        </>\n      ) : null}\n      {targetChain === CHAIN_ID_SOLANA && targetAsset ? (\n        <SolanaCreateAssociatedAddress\n          mintAddress={targetAsset}\n          readableTargetAddress={readableTargetAddress}\n          associatedAccountExists={associatedAccountExists}\n          setAssociatedAccountExists={setAssociatedAccountExists}\n        />\n      ) : null}\n      <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n        <Typography>\n          You will have to pay transaction fees on{\" \"}\n          {CHAINS_BY_ID[targetChain].name} to redeem your tokens.\n        </Typography>\n        {(isEVMChain(targetChain) || targetChain === CHAIN_ID_TERRA) && (\n          <GasEstimateSummary methodType=\"transfer\" chainId={targetChain} />\n        )}\n      </Alert>\n      <LowBalanceWarning chainId={targetChain} />\n      {targetChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      <ButtonWithLoader\n        disabled={!isTargetComplete || !associatedAccountExists}\n        onClick={handleNextClick}\n        showLoader={isLoading}\n        error={\n          statusMessage || (isLoading ? undefined : error || targetAssetError)\n        }\n      >\n        Next\n      </ButtonWithLoader>\n      {!statusMessage && data && !data.doesExist ? <RegisterNowButton /> : null}\n    </>\n  );\n}\n\nexport default Target;\n","import { ChainId, CHAIN_ID_ETH, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { Box, Link, makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport {\n  AVAILABLE_MARKETS_URL,\n  CHAINS_BY_ID,\n  MULTI_CHAIN_TOKENS,\n} from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    textAlign: \"center\",\n  },\n  line: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction WormholeWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"info\" variant=\"outlined\" className={classes.alert}>\n      <Typography component=\"div\" className={classes.line}>\n        The tokens you will receive are{\" \"}\n        <Box fontWeight={900} display=\"inline\">\n          Wormhole Wrapped Tokens\n        </Box>{\" \"}\n        and will need to be exchanged for native assets.\n      </Typography>\n      <Typography component=\"div\">\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction MultichainWarning({\n  symbol,\n  targetChain,\n}: {\n  symbol: string;\n  targetChain: ChainId;\n}) {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography\n        variant=\"h6\"\n        className={classes.line}\n      >{`You will not receive native ${symbol} on ${CHAINS_BY_ID[targetChain].name}`}</Typography>\n      <Typography\n        className={classes.line}\n      >{`To receive native ${symbol}, you will have to perform a swap with the wrapped tokens once you are done bridging.`}</Typography>\n      <Typography>\n        <Link\n          href={AVAILABLE_MARKETS_URL}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here to see available markets for wrapped tokens.\n        </Link>\n      </Typography>\n    </Alert>\n  );\n}\n\nfunction RewardsWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      Lido stETH rewards can only be received on Ethereum. Use the value\n      accruing wrapper token wstETH instead.\n    </Alert>\n  );\n}\n\nexport default function TokenWarning({\n  sourceChain,\n  sourceAsset,\n  originChain,\n  targetChain,\n  targetAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (\n    !(originChain && targetChain && targetAsset && sourceChain && sourceAsset)\n  ) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const isWormholeWrapped = originChain !== targetChain;\n  const multichainSymbol =\n    MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress] || undefined;\n  const isMultiChain = !!multichainSymbol;\n  const isRewardsToken =\n    searchableAddress === \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\" &&\n    sourceChain === CHAIN_ID_ETH;\n\n  const showMultiChainWarning = isMultiChain && isWormholeWrapped;\n  const showWrappedWarning = !isMultiChain && isWormholeWrapped; //Multichain warning is more important\n  const showRewardsWarning = isRewardsToken;\n\n  return (\n    <>\n      {showMultiChainWarning ? (\n        <MultichainWarning\n          symbol={multichainSymbol || \"tokens\"}\n          targetChain={targetChain}\n        />\n      ) : null}\n      {showWrappedWarning ? <WormholeWrappedWarning /> : null}\n      {showRewardsWarning ? <RewardsWarning /> : null}\n    </>\n  );\n}\n","import { CHAIN_ID_SOLANA, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowDownward } from \"@material-ui/icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferOriginChain,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID, MULTI_CHAIN_TOKENS } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport { useTargetInfo } from \"./Target\";\nimport TokenWarning from \"./TokenWarning\";\n\nfunction SendConfirmationContent({\n  open,\n  onClose,\n  onClick,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onClick: () => void;\n}) {\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const { targetChain, targetAsset, symbol, tokenName, logo } = useTargetInfo();\n  const originChain = useSelector(selectTransferOriginChain);\n\n  //TODO this check is essentially duplicated.\n  const deservesTimeout = useMemo(() => {\n    if (originChain && sourceParsedTokenAccount?.mintKey) {\n      const searchableAddress = isEVMChain(originChain)\n        ? sourceParsedTokenAccount.mintKey.toLowerCase()\n        : sourceParsedTokenAccount.mintKey;\n      return (\n        originChain !== targetChain &&\n        !!MULTI_CHAIN_TOKENS[sourceChain]?.[searchableAddress]\n      );\n    } else {\n      return false;\n    }\n  }, [originChain, targetChain, sourceChain, sourceParsedTokenAccount]);\n  const timeoutDuration = 5;\n\n  const [countdown, setCountdown] = useState(\n    deservesTimeout ? timeoutDuration : 0\n  );\n\n  useEffect(() => {\n    if (!deservesTimeout || countdown === 0) {\n      return;\n    }\n    let cancelled = false;\n\n    setInterval(() => {\n      if (!cancelled) {\n        setCountdown((state) => state - 1);\n      }\n    }, 1000);\n\n    return () => {\n      cancelled = true;\n    };\n  }, [deservesTimeout, countdown]);\n\n  useEffect(() => {\n    if (open && deservesTimeout) {\n      //Countdown starts on mount, but we actually want it to start on open\n      setCountdown(timeoutDuration);\n    }\n  }, [open, deservesTimeout]);\n\n  const sendConfirmationContent = (\n    <>\n      <DialogTitle>Are you sure?</DialogTitle>\n      <DialogContent>\n        {targetAsset ? (\n          <div style={{ textAlign: \"center\", marginBottom: 16 }}>\n            <Typography variant=\"subtitle1\" style={{ marginBottom: 8 }}>\n              You are about to perform this transfer:\n            </Typography>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={sourceChain}\n              parsedTokenAccount={sourceParsedTokenAccount}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[sourceChain].name}\n              </Typography>\n            </div>\n            <div style={{ paddingTop: 4 }}>\n              <ArrowDownward fontSize=\"inherit\" />\n            </div>\n            <SmartAddress\n              variant=\"h6\"\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n            <div>\n              <Typography variant=\"caption\">\n                {CHAINS_BY_ID[targetChain].name}\n              </Typography>\n            </div>\n          </div>\n        ) : null}\n        <TokenWarning\n          sourceAsset={sourceParsedTokenAccount?.mintKey}\n          sourceChain={sourceChain}\n          originChain={originChain}\n          targetAsset={targetAsset ?? undefined}\n          targetChain={targetChain}\n        />\n        {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClick}\n          size={\"medium\"}\n          disabled={!!countdown}\n        >\n          {!!countdown ? countdown.toString() : \"Confirm\"}\n        </Button>\n      </DialogActions>\n    </>\n  );\n\n  return sendConfirmationContent;\n}\n\nexport default function SendConfirmationDialog({\n  open,\n  onClick,\n  onClose,\n}: {\n  open: boolean;\n  onClick: () => void;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <SendConfirmationContent\n        open={open}\n        onClose={onClose}\n        onClick={onClick}\n      />\n    </Dialog>\n  );\n}\n","import {\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { ethers } from \"ethers\";\nimport { parseUnits } from \"ethers/lib/utils\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport useAllowance from \"../../hooks/useAllowance\";\nimport { useHandleTransfer } from \"../../hooks/useHandleTransfer\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferIsSendComplete,\n  selectTransferSourceAsset,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetError,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport ShowTx from \"../ShowTx\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport TerraFeeDenomPicker from \"../TerraFeeDenomPicker\";\nimport TransactionProgress from \"../TransactionProgress\";\nimport SendConfirmationDialog from \"./SendConfirmationDialog\";\nimport WaitingForWalletMessage from \"./WaitingForWalletMessage\";\n\nfunction Send() {\n  const { handleClick, disabled, showLoader } = useHandleTransfer();\n  const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n  const handleTransferClick = useCallback(() => {\n    setIsConfirmOpen(true);\n  }, []);\n  const handleConfirmClick = useCallback(() => {\n    handleClick();\n    setIsConfirmOpen(false);\n  }, [handleClick]);\n  const handleConfirmClose = useCallback(() => {\n    setIsConfirmOpen(false);\n  }, []);\n\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceAsset = useSelector(selectTransferSourceAsset);\n  const sourceAmount = useSelector(selectTransferAmount);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceDecimals = sourceParsedTokenAccount?.decimals;\n  const sourceIsNative = sourceParsedTokenAccount?.isNativeAsset;\n  const sourceAmountParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    sourceAmount &&\n    parseUnits(sourceAmount, sourceDecimals).toBigInt();\n  const oneParsed =\n    sourceDecimals !== undefined &&\n    sourceDecimals !== null &&\n    parseUnits(\"1\", sourceDecimals).toBigInt();\n  const transferTx = useSelector(selectTransferTransferTx);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n\n  const error = useSelector(selectTransferTargetError);\n  const [allowanceError, setAllowanceError] = useState(\"\");\n  const { isReady, statusMessage, walletAddress } =\n    useIsWalletReady(sourceChain);\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  //The chain ID compare is handled implicitly, as the isWalletReady hook should report !isReady if the wallet is on the wrong chain.\n  const isWrongWallet =\n    sourceWalletAddress &&\n    walletAddress &&\n    sourceWalletAddress !== walletAddress;\n  const [shouldApproveUnlimited, setShouldApproveUnlimited] = useState(false);\n  const toggleShouldApproveUnlimited = useCallback(\n    () => setShouldApproveUnlimited(!shouldApproveUnlimited),\n    [shouldApproveUnlimited]\n  );\n\n  const {\n    sufficientAllowance,\n    isAllowanceFetching,\n    isApproveProcessing,\n    approveAmount,\n  } = useAllowance(\n    sourceChain,\n    sourceAsset,\n    sourceAmountParsed || undefined,\n    sourceIsNative\n  );\n\n  const approveButtonNeeded = isEVMChain(sourceChain) && !sufficientAllowance;\n  const notOne = shouldApproveUnlimited || sourceAmountParsed !== oneParsed;\n  const isDisabled =\n    !isReady ||\n    isWrongWallet ||\n    disabled ||\n    isAllowanceFetching ||\n    isApproveProcessing;\n  const errorMessage = isWrongWallet\n    ? \"A different wallet is connected than in Step 1.\"\n    : statusMessage || error || allowanceError || undefined;\n\n  const approveExactAmount = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(BigInt(sourceAmountParsed)).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount, sourceAmountParsed]);\n  const approveUnlimited = useMemo(() => {\n    return () => {\n      setAllowanceError(\"\");\n      approveAmount(ethers.constants.MaxUint256.toBigInt()).then(\n        () => {\n          setAllowanceError(\"\");\n        },\n        (error) => setAllowanceError(\"Failed to approve the token transfer.\")\n      );\n    };\n  }, [approveAmount]);\n\n  return (\n    <>\n      <StepDescription>\n        Transfer the tokens to the Wormhole Token Bridge.\n      </StepDescription>\n      <KeyAndBalance chainId={sourceChain} />\n      {sourceChain === CHAIN_ID_TERRA && (\n        <TerraFeeDenomPicker disabled={disabled} />\n      )}\n      <Alert severity=\"info\" variant=\"outlined\">\n        This will initiate the transfer on {CHAINS_BY_ID[sourceChain].name} and\n        wait for finalization. If you navigate away from this page before\n        completing Step 4, you will have to perform the recovery workflow to\n        complete the transfer.\n      </Alert>\n      {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n      {approveButtonNeeded ? (\n        <>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={shouldApproveUnlimited}\n                onChange={toggleShouldApproveUnlimited}\n                color=\"primary\"\n              />\n            }\n            label=\"Approve Unlimited Tokens\"\n          />\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={\n              shouldApproveUnlimited ? approveUnlimited : approveExactAmount\n            }\n            showLoader={isAllowanceFetching || isApproveProcessing}\n            error={errorMessage}\n          >\n            {\"Approve \" +\n              (shouldApproveUnlimited ? \"Unlimited\" : sourceAmount) +\n              ` Token${notOne ? \"s\" : \"\"}`}\n          </ButtonWithLoader>\n        </>\n      ) : (\n        <>\n          <ButtonWithLoader\n            disabled={isDisabled}\n            onClick={handleTransferClick}\n            showLoader={showLoader}\n            error={errorMessage}\n          >\n            Transfer\n          </ButtonWithLoader>\n          <SendConfirmationDialog\n            open={isConfirmOpen}\n            onClick={handleConfirmClick}\n            onClose={handleConfirmClose}\n          />\n        </>\n      )}\n      <WaitingForWalletMessage />\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n      <TransactionProgress\n        chainId={sourceChain}\n        tx={transferTx}\n        isSendComplete={isSendComplete}\n      />\n    </>\n  );\n}\n\nexport default Send;\n","import {\n  approveEth,\n  ChainId,\n  getAllowanceEth,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { BigNumber } from \"ethers\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { selectTransferIsApproving } from \"../store/selectors\";\nimport { setIsApproving } from \"../store/transferSlice\";\nimport { getTokenBridgeAddressForChain } from \"../utils/consts\";\n\nexport default function useAllowance(\n  chainId: ChainId,\n  tokenAddress?: string,\n  transferAmount?: BigInt,\n  sourceIsNative?: boolean\n) {\n  const dispatch = useDispatch();\n  const [allowance, setAllowance] = useState<BigInt | null>(null);\n  const [isAllowanceFetching, setIsAllowanceFetching] = useState(false);\n  const isApproveProcessing = useSelector(selectTransferIsApproving);\n  const { signer } = useEthereumProvider();\n  const sufficientAllowance =\n    !isEVMChain(chainId) ||\n    sourceIsNative ||\n    (allowance && transferAmount && allowance >= transferAmount);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (isEVMChain(chainId) && tokenAddress && signer && !isApproveProcessing) {\n      setIsAllowanceFetching(true);\n      getAllowanceEth(\n        getTokenBridgeAddressForChain(chainId),\n        tokenAddress,\n        signer\n      ).then(\n        (result) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            setAllowance(result.toBigInt());\n          }\n        },\n        (error) => {\n          if (!cancelled) {\n            setIsAllowanceFetching(false);\n            //setError(\"Unable to retrieve allowance\"); //TODO set an error\n          }\n        }\n      );\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [chainId, tokenAddress, signer, isApproveProcessing]);\n\n  const approveAmount: (amount: BigInt) => Promise<any> = useMemo(() => {\n    return !isEVMChain(chainId) || !tokenAddress || !signer\n      ? (amount: BigInt) => {\n          return Promise.resolve();\n        }\n      : (amount: BigInt) => {\n          dispatch(setIsApproving(true));\n          return approveEth(\n            getTokenBridgeAddressForChain(chainId),\n            tokenAddress,\n            signer,\n            BigNumber.from(amount)\n          ).then(\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.resolve();\n            },\n            () => {\n              dispatch(setIsApproving(false));\n              return Promise.reject();\n            }\n          );\n        };\n  }, [chainId, tokenAddress, signer, dispatch]);\n\n  return useMemo(\n    () => ({\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    }),\n    [\n      sufficientAllowance,\n      approveAmount,\n      isAllowanceFetching,\n      isApproveProcessing,\n    ]\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectTransferSourceChain,\n  selectTransferTransferTx,\n} from \"../../store/selectors\";\nimport ShowTx from \"../ShowTx\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n  tx: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  viewButton: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default function SendPreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const transferTx = useSelector(selectTransferTransferTx);\n\n  const explainerString = \"The tokens have entered the bridge!\";\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerString}\n      </Typography>\n      {transferTx ? <ShowTx chainId={sourceChain} tx={transferTx} /> : null}\n    </>\n  );\n}\n","import { IconButton } from \"@material-ui/core\";\nimport { ArrowForward, SwapHoriz } from \"@material-ui/icons\";\nimport { useState } from \"react\";\n\nexport default function ChainSelectArrow({\n  onClick,\n  disabled,\n}: {\n  onClick: () => void;\n  disabled: boolean;\n}) {\n  const [showSwap, setShowSwap] = useState(false);\n\n  return (\n    <IconButton\n      onClick={onClick}\n      onMouseEnter={() => {\n        setShowSwap(true);\n      }}\n      onMouseLeave={() => {\n        setShowSwap(false);\n      }}\n      disabled={disabled}\n    >\n      {showSwap ? <SwapHoriz /> : <ArrowForward />}\n    </IconButton>\n  );\n}\n","import { ChainId, CHAIN_ID_POLYGON, isEVMChain } from \"@certusone/wormhole-sdk\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { POLYGON_TERRA_WRAPPED_TOKENS } from \"../../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  alert: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction PolygonTerraWrappedWarning() {\n  const classes = useStyles();\n  return (\n    <Alert severity=\"warning\" variant=\"outlined\" className={classes.alert}>\n      <Typography variant=\"body1\">\n        This is a Shuttle-wrapped asset from Polygon! Transferring it will\n        result in a double wrapped (Wormhole-wrapped Shuttle-wrapped) asset,\n        which has no liquid markets.\n      </Typography>\n    </Alert>\n  );\n}\n\nexport default function SoureAssetWarning({\n  sourceChain,\n  sourceAsset,\n}: {\n  sourceChain?: ChainId;\n  sourceAsset?: string;\n  originChain?: ChainId;\n  targetChain?: ChainId;\n  targetAsset?: string;\n}) {\n  if (!(sourceChain && sourceAsset)) {\n    return null;\n  }\n\n  const searchableAddress = isEVMChain(sourceChain)\n    ? sourceAsset.toLowerCase()\n    : sourceAsset;\n  const showPolygonTerraWrappedWarning =\n    sourceChain === CHAIN_ID_POLYGON &&\n    POLYGON_TERRA_WRAPPED_TOKENS.includes(searchableAddress);\n\n  return (\n    <>\n      {showPolygonTerraWrappedWarning ? <PolygonTerraWrappedWarning /> : null}\n    </>\n  );\n}\n","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\nimport { VerifiedUser } from \"@material-ui/icons\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport useIsWalletReady from \"../../hooks/useIsWalletReady\";\nimport {\n  selectTransferAmount,\n  selectTransferIsSourceComplete,\n  selectTransferShouldLockFields,\n  selectTransferSourceBalanceString,\n  selectTransferSourceChain,\n  selectTransferSourceError,\n  selectTransferSourceParsedTokenAccount,\n  selectTransferTargetChain,\n} from \"../../store/selectors\";\nimport {\n  incrementStep,\n  setAmount,\n  setSourceChain,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport {\n  BSC_MIGRATION_ASSET_MAP,\n  CHAINS,\n  ETH_MIGRATION_ASSET_MAP,\n  MIGRATION_ASSET_MAP,\n} from \"../../utils/consts\";\nimport ButtonWithLoader from \"../ButtonWithLoader\";\nimport ChainSelect from \"../ChainSelect\";\nimport ChainSelectArrow from \"../ChainSelectArrow\";\nimport KeyAndBalance from \"../KeyAndBalance\";\nimport LowBalanceWarning from \"../LowBalanceWarning\";\nimport NumberTextField from \"../NumberTextField\";\nimport SolanaTPSWarning from \"../SolanaTPSWarning\";\nimport StepDescription from \"../StepDescription\";\nimport { TokenSelector } from \"../TokenSelectors/SourceTokenSelector\";\nimport SourceAssetWarning from \"./SourceAssetWarning\";\n\nconst useStyles = makeStyles((theme) => ({\n  chainSelectWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDirection: \"column\",\n    },\n  },\n  chainSelectContainer: {\n    flexBasis: \"100%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n  chainSelectArrow: {\n    position: \"relative\",\n    top: \"12px\",\n    [theme.breakpoints.down(\"sm\")]: { transform: \"rotate(90deg)\" },\n  },\n  transferField: {\n    marginTop: theme.spacing(5),\n  },\n}));\n\nfunction Source() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const targetChain = useSelector(selectTransferTargetChain);\n  const targetChainOptions = useMemo(\n    () => CHAINS.filter((c) => c.id !== sourceChain),\n    [sourceChain]\n  );\n  const parsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const hasParsedTokenAccount = !!parsedTokenAccount;\n  const isSolanaMigration =\n    sourceChain === CHAIN_ID_SOLANA &&\n    !!parsedTokenAccount &&\n    !!MIGRATION_ASSET_MAP.get(parsedTokenAccount.mintKey);\n  const isEthereumMigration =\n    sourceChain === CHAIN_ID_ETH &&\n    !!parsedTokenAccount &&\n    !!ETH_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isBscMigration =\n    sourceChain === CHAIN_ID_BSC &&\n    !!parsedTokenAccount &&\n    !!BSC_MIGRATION_ASSET_MAP.get(getAddress(parsedTokenAccount.mintKey));\n  const isMigrationAsset =\n    isSolanaMigration || isEthereumMigration || isBscMigration;\n  const uiAmountString = useSelector(selectTransferSourceBalanceString);\n  const amount = useSelector(selectTransferAmount);\n  const error = useSelector(selectTransferSourceError);\n  const isSourceComplete = useSelector(selectTransferIsSourceComplete);\n  const shouldLockFields = useSelector(selectTransferShouldLockFields);\n  const { isReady, statusMessage } = useIsWalletReady(sourceChain);\n  const handleMigrationClick = useCallback(() => {\n    if (sourceChain === CHAIN_ID_SOLANA) {\n      history.push(\n        `/migrate/Solana/${parsedTokenAccount?.mintKey}/${parsedTokenAccount?.publicKey}`\n      );\n    } else if (sourceChain === CHAIN_ID_ETH) {\n      history.push(`/migrate/Ethereum/${parsedTokenAccount?.mintKey}`);\n    } else if (sourceChain === CHAIN_ID_BSC) {\n      history.push(`/migrate/BinanceSmartChain/${parsedTokenAccount?.mintKey}`);\n    }\n  }, [history, parsedTokenAccount, sourceChain]);\n  const handleSourceChange = useCallback(\n    (event) => {\n      dispatch(setSourceChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleTargetChange = useCallback(\n    (event) => {\n      dispatch(setTargetChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAmountChange = useCallback(\n    (event) => {\n      dispatch(setAmount(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleMaxClick = useCallback(() => {\n    if (uiAmountString) {\n      dispatch(setAmount(uiAmountString));\n    }\n  }, [dispatch, uiAmountString]);\n  const handleNextClick = useCallback(() => {\n    dispatch(incrementStep());\n  }, [dispatch]);\n\n  return (\n    <>\n      <StepDescription>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          Select tokens to send through the Portal.\n          <div style={{ flexGrow: 1 }} />\n          <div>\n            <Button\n              component={Link}\n              to=\"/token-origin-verifier\"\n              size=\"small\"\n              variant=\"outlined\"\n              startIcon={<VerifiedUser />}\n            >\n              Token Origin Verifier\n            </Button>\n          </div>\n        </div>\n      </StepDescription>\n      <div className={classes.chainSelectWrapper}>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Source</Typography>\n          <ChainSelect\n            select\n            variant=\"outlined\"\n            fullWidth\n            value={sourceChain}\n            onChange={handleSourceChange}\n            disabled={shouldLockFields}\n            chains={CHAINS}\n          />\n        </div>\n        <div className={classes.chainSelectArrow}>\n          <ChainSelectArrow\n            onClick={() => {\n              dispatch(setSourceChain(targetChain));\n            }}\n            disabled={shouldLockFields}\n          />\n        </div>\n        <div className={classes.chainSelectContainer}>\n          <Typography variant=\"caption\">Target</Typography>\n          <ChainSelect\n            variant=\"outlined\"\n            select\n            fullWidth\n            value={targetChain}\n            onChange={handleTargetChange}\n            disabled={shouldLockFields}\n            chains={targetChainOptions}\n          />\n        </div>\n      </div>\n      <KeyAndBalance chainId={sourceChain} />\n      {isReady || uiAmountString ? (\n        <div className={classes.transferField}>\n          <TokenSelector disabled={shouldLockFields} />\n        </div>\n      ) : null}\n      {isMigrationAsset ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={handleMigrationClick}\n        >\n          Go to Migration Page\n        </Button>\n      ) : (\n        <>\n          <LowBalanceWarning chainId={sourceChain} />\n          {sourceChain === CHAIN_ID_SOLANA && <SolanaTPSWarning />}\n          <SourceAssetWarning\n            sourceChain={sourceChain}\n            sourceAsset={parsedTokenAccount?.mintKey}\n          />\n          {hasParsedTokenAccount ? (\n            <NumberTextField\n              variant=\"outlined\"\n              label=\"Amount\"\n              fullWidth\n              className={classes.transferField}\n              value={amount}\n              onChange={handleAmountChange}\n              disabled={shouldLockFields}\n              onMaxClick={\n                uiAmountString && !parsedTokenAccount.isNativeAsset\n                  ? handleMaxClick\n                  : undefined\n              }\n            />\n          ) : null}\n          <ButtonWithLoader\n            disabled={!isSourceComplete}\n            onClick={handleNextClick}\n            showLoader={false}\n            error={statusMessage || error}\n          >\n            Next\n          </ButtonWithLoader>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Source;\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectSourceWalletAddress,\n  selectTransferAmount,\n  selectTransferSourceChain,\n  selectTransferSourceParsedTokenAccount,\n} from \"../../store/selectors\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function SourcePreview() {\n  const classes = useStyles();\n  const sourceChain = useSelector(selectTransferSourceChain);\n  const sourceParsedTokenAccount = useSelector(\n    selectTransferSourceParsedTokenAccount\n  );\n  const sourceWalletAddress = useSelector(selectSourceWalletAddress);\n  const sourceAmount = useSelector(selectTransferAmount);\n\n  const explainerContent =\n    sourceChain && sourceParsedTokenAccount ? (\n      <>\n        <span>You will transfer {sourceAmount}</span>\n        <SmartAddress\n          chainId={sourceChain}\n          parsedTokenAccount={sourceParsedTokenAccount}\n        />\n        {sourceWalletAddress ? (\n          <>\n            <span>from</span>\n            <SmartAddress chainId={sourceChain} address={sourceWalletAddress} />\n          </>\n        ) : null}\n        <span>on {CHAINS_BY_ID[sourceChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle2\"\n        className={classes.description}\n      >\n        {explainerContent}\n      </Typography>\n    </>\n  );\n}\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport SmartAddress from \"../SmartAddress\";\nimport { useTargetInfo } from \"./Target\";\n\nconst useStyles = makeStyles((theme) => ({\n  description: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function TargetPreview() {\n  const classes = useStyles();\n  const {\n    targetChain,\n    readableTargetAddress,\n    targetAsset,\n    symbol,\n    tokenName,\n    logo,\n  } = useTargetInfo();\n\n  const explainerContent =\n    targetChain && readableTargetAddress ? (\n      <>\n        {targetAsset ? (\n          <>\n            <span>and receive</span>\n            <SmartAddress\n              chainId={targetChain}\n              address={targetAsset}\n              symbol={symbol}\n              tokenName={tokenName}\n              logo={logo}\n            />\n          </>\n        ) : null}\n        <span>to</span>\n        <SmartAddress chainId={targetChain} address={readableTargetAddress} />\n        <span>on {CHAINS_BY_ID[targetChain].name}</span>\n      </>\n    ) : (\n      \"\"\n    );\n\n  return (\n    <Typography\n      component=\"div\"\n      variant=\"subtitle2\"\n      className={classes.description}\n    >\n      {explainerContent}\n    </Typography>\n  );\n}\n","import { ChainId } from \"@certusone/wormhole-sdk\";\nimport {\n  Container,\n  Step,\n  StepButton,\n  StepContent,\n  Stepper,\n} from \"@material-ui/core\";\nimport { useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport useCheckIfWormholeWrapped from \"../../hooks/useCheckIfWormholeWrapped\";\nimport useFetchTargetAsset from \"../../hooks/useFetchTargetAsset\";\nimport {\n  selectTransferActiveStep,\n  selectTransferIsRedeemComplete,\n  selectTransferIsRedeeming,\n  selectTransferIsSendComplete,\n  selectTransferIsSending,\n} from \"../../store/selectors\";\nimport {\n  setSourceChain,\n  setStep,\n  setTargetChain,\n} from \"../../store/transferSlice\";\nimport { CHAINS_BY_ID } from \"../../utils/consts\";\nimport Redeem from \"./Redeem\";\nimport RedeemPreview from \"./RedeemPreview\";\nimport Send from \"./Send\";\nimport SendPreview from \"./SendPreview\";\nimport Source from \"./Source\";\nimport SourcePreview from \"./SourcePreview\";\nimport Target from \"./Target\";\nimport TargetPreview from \"./TargetPreview\";\n\nfunction Transfer() {\n  useCheckIfWormholeWrapped();\n  useFetchTargetAsset();\n  const dispatch = useDispatch();\n  const activeStep = useSelector(selectTransferActiveStep);\n  const isSending = useSelector(selectTransferIsSending);\n  const isSendComplete = useSelector(selectTransferIsSendComplete);\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const isRedeemComplete = useSelector(selectTransferIsRedeemComplete);\n  const preventNavigation =\n    (isSending || isSendComplete || isRedeeming) && !isRedeemComplete;\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathTargetChain = query.get(\"targetChain\");\n\n  //This effect initializes the state based on the path params\n  useEffect(() => {\n    if (!pathSourceChain && !pathTargetChain) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathSourceChain || \"\") as ChainId]?.id;\n      const targetChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathTargetChain || \"\") as ChainId]?.id;\n\n      if (sourceChain === targetChain) {\n        return;\n      }\n      if (sourceChain) {\n        dispatch(setSourceChain(sourceChain));\n      }\n      if (targetChain) {\n        dispatch(setTargetChain(targetChain));\n      }\n    } catch (e) {\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathTargetChain, dispatch]);\n\n  useEffect(() => {\n    if (preventNavigation) {\n      window.onbeforeunload = () => true;\n      return () => {\n        window.onbeforeunload = null;\n      };\n    }\n  }, [preventNavigation]);\n  return (\n    <Container maxWidth=\"md\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step\n          expanded={activeStep >= 0}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton onClick={() => dispatch(setStep(0))} icon={null}>\n            1. Source\n          </StepButton>\n          <StepContent>\n            {activeStep === 0 ? <Source /> : <SourcePreview />}\n          </StepContent>\n        </Step>\n        <Step\n          expanded={activeStep >= 1}\n          disabled={preventNavigation || isRedeemComplete}\n        >\n          <StepButton\n            disabled={preventNavigation || isRedeemComplete || activeStep === 0}\n            onClick={() => dispatch(setStep(1))}\n            icon={null}\n          >\n            2. Target\n          </StepButton>\n          <StepContent>\n            {activeStep === 1 ? <Target /> : <TargetPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 2} disabled={isSendComplete}>\n          <StepButton disabled icon={null}>\n            3. Send tokens\n          </StepButton>\n          <StepContent>\n            {activeStep === 2 ? <Send /> : <SendPreview />}\n          </StepContent>\n        </Step>\n        <Step expanded={activeStep >= 3} completed={isRedeemComplete}>\n          <StepButton\n            onClick={() => dispatch(setStep(3))}\n            disabled={!isSendComplete || isRedeemComplete}\n            icon={null}\n          >\n            4. Redeem tokens\n          </StepButton>\n          <StepContent>\n            {isRedeemComplete ? <RedeemPreview /> : <Redeem />}\n          </StepContent>\n        </Step>\n      </Stepper>\n    </Container>\n  );\n}\n\nexport default Transfer;\n","import { useCallback, useState } from \"react\";\nimport { MsgExecuteContract } from \"@terra-money/terra.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport {\n  SUPPORTED_TERRA_TOKENS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport TerraWalletKey from \"./TerraWalletKey\";\nimport {\n  Container,\n  FormControl,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport { postWithFees, waitForTerraExecution } from \"../utils/terra\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport { useSnackbar } from \"notistack\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\nimport { selectTerraFeeDenom } from \"../store/selectors\";\nimport TerraFeeDenomPicker from \"./TerraFeeDenomPicker\";\nimport HeaderText from \"./HeaderText\";\nimport { COLORS } from \"../muiTheme\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n    textAlign: \"center\",\n  },\n  mainPaper: {\n    backgroundColor: COLORS.whiteWithTransparency,\n    textAlign: \"center\",\n    padding: \"2rem\",\n    \"& > h, p \": {\n      margin: \".5rem\",\n    },\n  },\n}));\n\nconst withdraw = async (\n  wallet: ConnectedWallet,\n  token: string,\n  feeDenom: string\n) => {\n  const withdraw = new MsgExecuteContract(\n    wallet.walletAddress,\n    TERRA_TOKEN_BRIDGE_ADDRESS,\n    {\n      withdraw_tokens: {\n        asset: {\n          native_token: {\n            denom: token,\n          },\n        },\n      },\n    },\n    {}\n  );\n  const txResult = await postWithFees(\n    wallet,\n    [withdraw],\n    \"Wormhole - Withdraw Tokens\",\n    [feeDenom]\n  );\n  await waitForTerraExecution(txResult);\n};\n\nexport default function WithdrawTokensTerra() {\n  const wallet = useConnectedWallet();\n  const [token, setToken] = useState(SUPPORTED_TERRA_TOKENS[0]);\n  const [isLoading, setIsLoading] = useState(false);\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const feeDenom = useSelector(selectTerraFeeDenom);\n\n  const handleClick = useCallback(() => {\n    if (wallet) {\n      (async () => {\n        setIsLoading(true);\n        try {\n          await withdraw(wallet, token, feeDenom);\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"success\">Transaction confirmed.</Alert>,\n          });\n        } catch (e) {\n          enqueueSnackbar(null, {\n            content: <Alert severity=\"error\">Error withdrawing tokens.</Alert>,\n          });\n          console.error(e);\n        }\n        setIsLoading(false);\n      })();\n    }\n  }, [wallet, token, enqueueSnackbar, feeDenom]);\n\n  return (\n    <Container maxWidth=\"md\">\n      <HeaderText white>Withdraw Tokens</HeaderText>\n      <Paper className={classes.mainPaper}>\n        <Typography style={{ textAlign: \"center\" }}>\n          Withdraw tokens from the Terra token bridge\n        </Typography>\n        <TerraWalletKey />\n        <FormControl className={classes.formControl}>\n          <InputLabel>Token</InputLabel>\n          <Select\n            value={token}\n            onChange={(event) => {\n              setToken(event.target.value as string);\n            }}\n          >\n            {SUPPORTED_TERRA_TOKENS.map((name) => (\n              <MenuItem key={name} value={name}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n          <TerraFeeDenomPicker disabled={isLoading} />\n          <ButtonWithLoader\n            onClick={handleClick}\n            disabled={!wallet || isLoading}\n            showLoader={isLoading}\n          >\n            Withdraw\n          </ButtonWithLoader>\n        </FormControl>\n      </Paper>\n    </Container>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/portal_logo.8670c923.svg\";","export default __webpack_public_path__ + \"static/media/Header.e4315398.png\";","import {\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  AppBar,\n  Container,\n  Hidden,\n  IconButton,\n  Link,\n  makeStyles,\n  Tab,\n  Tabs,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { HelpOutline } from \"@material-ui/icons\";\nimport { useCallback } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport {\n  Link as RouterLink,\n  NavLink,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Attest from \"./components/Attest\";\nimport Footer from \"./components/Footer\";\nimport HeaderText from \"./components/HeaderText\";\nimport Migration from \"./components/Migration\";\nimport EvmQuickMigrate from \"./components/Migration/EvmQuickMigrate\";\nimport SolanaQuickMigrate from \"./components/Migration/SolanaQuickMigrate\";\nimport NFT from \"./components/NFT\";\nimport NFTOriginVerifier from \"./components/NFTOriginVerifier\";\nimport Recovery from \"./components/Recovery\";\nimport Stats from \"./components/Stats\";\nimport TokenOriginVerifier from \"./components/TokenOriginVerifier\";\nimport Transfer from \"./components/Transfer\";\nimport WithdrawTokensTerra from \"./components/WithdrawTokensTerra\";\nimport { useBetaContext } from \"./contexts/BetaContext\";\nimport Portal from \"./icons/portal_logo.svg\";\nimport Header from \"./images/Header.png\";\nimport { CLUSTER } from \"./utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    background: \"transparent\",\n    marginTop: theme.spacing(2),\n    \"& > .MuiToolbar-root\": {\n      margin: \"auto\",\n      width: \"100%\",\n      maxWidth: 1440,\n    },\n  },\n  spacer: {\n    flex: 1,\n    width: \"100vw\",\n  },\n  link: {\n    ...theme.typography.body2,\n    fontWeight: 600,\n    color: \"black\",\n    marginLeft: theme.spacing(4),\n    textUnderlineOffset: \"6px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      marginLeft: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: theme.spacing(1),\n    },\n    \"&.active\": {\n      textDecoration: \"underline\",\n    },\n  },\n  bg: {\n    // background:\n    //   \"linear-gradient(160deg, rgba(69,74,117,.1) 0%, rgba(138,146,178,.1) 33%, rgba(69,74,117,.1) 66%, rgba(98,104,143,.1) 100%), linear-gradient(45deg, rgba(153,69,255,.1) 0%, rgba(121,98,231,.1) 20%, rgba(0,209,140,.1) 100%)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n  },\n  content: {\n    margin: theme.spacing(2, 0),\n    [theme.breakpoints.up(\"md\")]: {\n      margin: theme.spacing(4, 0),\n    },\n  },\n  headerImage: {\n    position: \"absolute\",\n    zIndex: -1,\n    top: 0,\n    background: `url(${Header})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"top -500px center\",\n    backgroundSize: \"2070px 1155px\",\n    width: \"100%\",\n    height: 1155,\n  },\n  brandLink: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    \"&:hover\": {\n      textDecoration: \"none\",\n    },\n  },\n  iconButton: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      marginRight: theme.spacing(2.5),\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      marginRight: theme.spacing(1),\n    },\n  },\n  betaBanner: {\n    backgroundColor: \"rgba(0,0,0,0.75)\",\n    padding: theme.spacing(1, 0),\n  },\n  wormholeIcon: {\n    height: 68,\n    \"&:hover\": {\n      filter: \"contrast(1)\",\n    },\n    verticalAlign: \"middle\",\n    marginRight: theme.spacing(1),\n    display: \"inline-block\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const { push } = useHistory();\n  const { pathname } = useLocation();\n  const handleTabChange = useCallback(\n    (event, value) => {\n      push(value);\n    },\n    [push]\n  );\n  return (\n    <div className={classes.bg}>\n      <AppBar\n        position=\"static\"\n        color=\"inherit\"\n        className={classes.appBar}\n        elevation={0}\n      >\n        <Toolbar>\n          <Link\n            component={RouterLink}\n            to=\"/transfer\"\n            className={classes.brandLink}\n          >\n            <img src={Portal} alt=\"Portal\" className={classes.wormholeIcon} />\n          </Link>\n          <div className={classes.spacer} />\n          <Hidden implementation=\"css\" xsDown>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <Link\n                component={NavLink}\n                to=\"/transfer\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                Bridge\n              </Link>\n              <Link\n                href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                FAQ\n              </Link>\n              <Link\n                component={NavLink}\n                to=\"/stats\"\n                size=\"small\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                Stats\n              </Link>\n              <Link\n                href=\"https://wormholenetwork.com/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                color=\"inherit\"\n                className={classes.link}\n              >\n                Wormhole\n              </Link>\n            </div>\n          </Hidden>\n          <Hidden implementation=\"css\" smUp>\n            <Tooltip title=\"View the FAQ\">\n              <IconButton\n                href=\"https://docs.wormholenetwork.com/wormhole/faqs\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                size=\"small\"\n                className={classes.link}\n              >\n                <HelpOutline />\n              </IconButton>\n            </Tooltip>\n          </Hidden>\n        </Toolbar>\n      </AppBar>\n      {CLUSTER === \"mainnet\" ? null : (\n        <AppBar position=\"static\" className={classes.betaBanner} elevation={0}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You are using the {CLUSTER} build of this app.\n          </Typography>\n        </AppBar>\n      )}\n      {isBeta ? (\n        <AppBar position=\"static\" className={classes.betaBanner} elevation={0}>\n          <Typography style={{ textAlign: \"center\" }}>\n            Caution! You have enabled the beta. Enter the secret code again to\n            disable.\n          </Typography>\n        </AppBar>\n      ) : null}\n      <div className={classes.content}>\n        <div className={classes.headerImage} />\n        {[\"/transfer\", \"/nft\", \"/redeem\"].includes(pathname) ? (\n          <Container maxWidth=\"md\" style={{ paddingBottom: 24 }}>\n            <HeaderText\n              white\n              subtitle={\n                <>\n                  <Typography>\n                    Portal is a bridge that offers unlimited transfers across\n                    chains for tokens and NFTs wrapped by Wormhole.\n                  </Typography>\n                  <Typography>\n                    Unlike many other bridges, you avoid double wrapping and\n                    never have to retrace your steps.\n                  </Typography>\n                </>\n              }\n            >\n              Portal Token Bridge\n            </HeaderText>\n            <Tabs\n              value={pathname}\n              variant=\"fullWidth\"\n              onChange={handleTabChange}\n              indicatorColor=\"primary\"\n            >\n              <Tab label=\"Tokens\" value=\"/transfer\" />\n              <Tab label=\"NFTs\" value=\"/nft\" />\n              <Tab label=\"Redeem\" value=\"/redeem\" to=\"/redeem\" />\n            </Tabs>\n          </Container>\n        ) : null}\n        <Switch>\n          <Route exact path=\"/transfer\">\n            <Transfer />\n          </Route>\n          <Route exact path=\"/nft\">\n            <NFT />\n          </Route>\n          <Route exact path=\"/redeem\">\n            <Recovery />\n          </Route>\n          <Route exact path=\"/nft-origin-verifier\">\n            <NFTOriginVerifier />\n          </Route>\n          <Route exact path=\"/token-origin-verifier\">\n            <TokenOriginVerifier />\n          </Route>\n          <Route exact path=\"/register\">\n            <Attest />\n          </Route>\n          <Route exact path=\"/migrate/Solana/:legacyAsset/:fromTokenAccount\">\n            <Migration chainId={CHAIN_ID_SOLANA} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/:legacyAsset/\">\n            <Migration chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Ethereum/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_ETH} />\n          </Route>\n          <Route exact path=\"/migrate/BinanceSmartChain/\">\n            <EvmQuickMigrate chainId={CHAIN_ID_BSC} />\n          </Route>\n          <Route exact path=\"/migrate/Solana/\">\n            <SolanaQuickMigrate />\n          </Route>\n          <Route exact path=\"/stats\">\n            <Stats />\n          </Route>\n          <Route exact path=\"/withdraw-tokens-terra\">\n            <WithdrawTokensTerra />\n          </Route>\n          <Route>\n            <Redirect to=\"/transfer\" />\n          </Route>\n        </Switch>\n      </div>\n      <div className={classes.spacer} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { makeStyles } from \"@material-ui/core\";\n// import { useRouteMatch } from \"react-router\";\n\nconst useStyles = makeStyles((theme) => ({\n  holeOuterContainer: {\n    maxWidth: \"100%\",\n    width: \"100%\",\n    position: \"relative\",\n  },\n  holeInnerContainer: {\n    position: \"absolute\",\n    zIndex: -1,\n    left: \"50%\",\n    transform: \"translate(-50%, 0)\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  holeImage: {\n    width: \"max(1200px, 100vw)\",\n    maxWidth: \"1600px\",\n  },\n  blurred: {\n    filter: \"blur(2px)\",\n    opacity: \".9\",\n  },\n}));\n\nconst BackgroundImage = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.holeOuterContainer}>\n      <div className={classes.holeInnerContainer}></div>\n    </div>\n  );\n};\n\nexport default BackgroundImage;\n","import { NetworkInfo, WalletProvider } from \"@terra-money/wallet-provider\";\nimport { ReactChildren } from \"react\";\nimport { CLUSTER } from \"../utils/consts\";\n\nconst mainnet: NetworkInfo = {\n  name: \"mainnet\",\n  chainID: \"columbus-5\",\n  lcd: \"https://lcd.terra.dev\",\n};\n\nconst testnet: NetworkInfo = {\n  name: \"testnet\",\n  chainID: \"bombay-12\",\n  lcd: \"https://bombay-lcd.terra.dev\",\n};\n\nconst walletConnectChainIds: Record<number, NetworkInfo> = {\n  0: testnet,\n  1: mainnet,\n};\n\nexport const TerraWalletProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  return (\n    <WalletProvider\n      defaultNetwork={CLUSTER === \"testnet\" ? testnet : mainnet}\n      walletConnectChainIds={walletConnectChainIds}\n    >\n      {children}\n    </WalletProvider>\n  );\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Typography variant=\"h5\" style={{ textAlign: \"center\", marginTop: 24 }}>\n          An unexpected error has occurred. Please refresh the page.\n        </Typography>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport attestReducer from \"./attestSlice\";\nimport nftReducer from \"./nftSlice\";\nimport transferReducer from \"./transferSlice\";\nimport tokenReducer from \"./tokenSlice\";\nimport feeReducer from \"./feeSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    attest: attestReducer,\n    nft: nftReducer,\n    transfer: transferReducer,\n    tokens: tokenReducer,\n    fee: feeReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { CssBaseline } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { SnackbarProvider } from \"notistack\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport BackgroundImage from \"./components/BackgroundImage\";\nimport { BetaContextProvider } from \"./contexts/BetaContext\";\nimport { EthereumProviderProvider } from \"./contexts/EthereumProviderContext\";\nimport { SolanaWalletProvider } from \"./contexts/SolanaWalletContext.tsx\";\nimport { TerraWalletProvider } from \"./contexts/TerraWalletContext.tsx\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { theme } from \"./muiTheme\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <ErrorBoundary>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <ErrorBoundary>\n          <SnackbarProvider maxSnack={3}>\n            <BetaContextProvider>\n              <SolanaWalletProvider>\n                <EthereumProviderProvider>\n                  <TerraWalletProvider>\n                    <HashRouter>\n                      <BackgroundImage />\n                      <App />\n                    </HashRouter>\n                  </TerraWalletProvider>\n                </EthereumProviderProvider>\n              </SolanaWalletProvider>\n            </BetaContextProvider>\n          </SnackbarProvider>\n        </ErrorBoundary>\n      </ThemeProvider>\n    </Provider>\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n","import {\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  MenuItem,\n  OutlinedTextFieldProps,\n  TextField,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { useMemo } from \"react\";\nimport { useBetaContext } from \"../contexts/BetaContext\";\nimport { BETA_CHAINS, ChainInfo } from \"../utils/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  select: {\n    \"& .MuiSelect-root\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n  listItemIcon: {\n    minWidth: 40,\n  },\n  icon: {\n    height: 24,\n    maxWidth: 24,\n  },\n}));\n\nconst createChainMenuItem = ({ id, name, logo }: ChainInfo, classes: any) => (\n  <MenuItem key={id} value={id}>\n    <ListItemIcon className={classes.listItemIcon}>\n      <img src={logo} alt={name} className={classes.icon} />\n    </ListItemIcon>\n    <ListItemText>{name}</ListItemText>\n  </MenuItem>\n);\n\ninterface ChainSelectProps extends OutlinedTextFieldProps {\n  chains: ChainInfo[];\n}\n\nexport default function ChainSelect({ chains, ...rest }: ChainSelectProps) {\n  const classes = useStyles();\n  const isBeta = useBetaContext();\n  const filteredChains = useMemo(\n    () =>\n      chains.filter(({ id }) => (isBeta ? true : !BETA_CHAINS.includes(id))),\n    [chains, isBeta]\n  );\n  return (\n    <TextField {...rest} className={clsx(classes.select, rest.className)}>\n      {filteredChains.map((chain) => createChainMenuItem(chain, classes))}\n    </TextField>\n  );\n}\n","import { ChainId, getSignedVAA } from \"@certusone/wormhole-sdk\";\nimport { WORMHOLE_RPC_HOSTS } from \"./consts\";\n\nexport let CURRENT_WORMHOLE_RPC_HOST = -1;\n\nexport const getNextRpcHost = () =>\n  ++CURRENT_WORMHOLE_RPC_HOST % WORMHOLE_RPC_HOSTS.length;\n\nexport async function getSignedVAAWithRetry(\n  emitterChain: ChainId,\n  emitterAddress: string,\n  sequence: string,\n  retryAttempts?: number\n) {\n  let result;\n  let attempts = 0;\n  while (!result) {\n    attempts++;\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      result = await getSignedVAA(\n        WORMHOLE_RPC_HOSTS[getNextRpcHost()],\n        emitterChain,\n        emitterAddress,\n        sequence\n      );\n    } catch (e) {\n      if (retryAttempts !== undefined && attempts > retryAttempts) {\n        throw e;\n      }\n    }\n  }\n  return result;\n}\n","import React, { ReactChildren, useContext, useEffect, useState } from \"react\";\n\nconst BetaContext = React.createContext<boolean>(false);\n\nexport const BetaContextProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [isBetaEnabled, setIsBetaEnabled] = useState(false);\n\n  useEffect(() => {\n    let userEntered = [];\n    const secretSequence = [\n      \"38\",\n      \"38\",\n      \"40\",\n      \"40\",\n      \"37\",\n      \"39\",\n      \"37\",\n      \"39\",\n      \"66\",\n      \"65\",\n    ];\n    const secretListener = (event: KeyboardEvent) => {\n      const k = event.keyCode.toString();\n      if (k === secretSequence[userEntered.length]) {\n        userEntered.push(k);\n        if (userEntered.length === secretSequence.length) {\n          userEntered = [];\n          setIsBetaEnabled((prev) => !prev);\n        }\n      } else {\n        userEntered = [];\n      }\n    };\n    window.addEventListener(\"keydown\", secretListener);\n    return () => {\n      window.removeEventListener(\"keydown\", secretListener);\n    };\n  }, []);\n\n  return (\n    <BetaContext.Provider value={isBetaEnabled}>\n      {children}\n    </BetaContext.Provider>\n  );\n};\n\nexport const useBetaContext = () => {\n  return useContext(BetaContext);\n};\n","export default __webpack_public_path__ + \"static/media/eth.364436c5.svg\";","export default __webpack_public_path__ + \"static/media/avax.234db155.svg\";","export default __webpack_public_path__ + \"static/media/oasis-network-rose-logo.c910dc42.svg\";","export default __webpack_public_path__ + \"static/media/polygon.97ff139c.svg\";","import { Typography } from \"@material-ui/core\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst EthereumSignerKey = () => {\n  const { connect, disconnect, signerAddress, providerError } =\n    useEthereumProvider();\n  return (\n    <>\n      <ToggleConnectedButton\n        connect={connect}\n        disconnect={disconnect}\n        connected={!!signerAddress}\n        pk={signerAddress || \"\"}\n      />\n      {providerError ? (\n        <Typography variant=\"body2\" color=\"error\">\n          {providerError}\n        </Typography>\n      ) : null}\n    </>\n  );\n};\n\nexport default EthereumSignerKey;\n","import { makeStyles } from \"@material-ui/core\";\nimport DisconnectIcon from \"@material-ui/icons/LinkOff\";\nimport {\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-material-ui\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: \"center\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  disconnectButton: {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst SolanaWalletKey = () => {\n  const classes = useStyles();\n  const wallet = useSolanaWallet();\n  return (\n    <div className={classes.root}>\n      <WalletMultiButton />\n      {wallet && (\n        <WalletDisconnectButton\n          startIcon={<DisconnectIcon />}\n          className={classes.disconnectButton}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SolanaWalletKey;\n","export default __webpack_public_path__ + \"static/media/bsc.2e866e3f.svg\";","export default __webpack_public_path__ + \"static/media/solana.fa522d66.svg\";","import { PublicKey, AccountInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { deserializeUnchecked } from \"borsh\";\nimport { BinaryReader, BinaryWriter } from \"borsh\";\nconst base58: any = require(\"bs58\");\n\n// eslint-disable-next-line\nexport const METADATA_REPLACE = new RegExp(\"\\u0000\", \"g\");\nexport const EDITION_MARKER_BIT_SIZE = 248;\nexport const METADATA_PREFIX = \"metadata\";\nexport const EDITION = \"edition\";\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = \"\";\n  lamports: number = 0;\n\n  get data() {\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== \"string\") {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nexport const MEMO_ID = new PublicKey(\n  \"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"\n);\n\nexport const METADATA_PROGRAM_ID =\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\" as StringPublicKey;\n\nexport const VAULT_ID =\n  \"vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn\" as StringPublicKey;\n\nexport const AUCTION_ID =\n  \"auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8\" as StringPublicKey;\n\nexport const METAPLEX_ID =\n  \"p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98\" as StringPublicKey;\n\nexport const SYSTEM = new PublicKey(\"11111111111111111111111111111111\");\n\nexport const getStoreID = async (storeOwnerAddress?: string) => {\n  if (!storeOwnerAddress) {\n    return undefined;\n  }\n\n  const programs = await findProgramAddress(\n    [\n      Buffer.from(\"metaplex\"),\n      toPublicKey(METAPLEX_ID).toBuffer(),\n      toPublicKey(storeOwnerAddress).toBuffer(),\n    ],\n    toPublicKey(METAPLEX_ID)\n  );\n  const storeAddress = programs[0];\n\n  return storeAddress;\n};\n\nexport const setProgramIds = async (store?: string) => {\n  STORE = store ? toPublicKey(store) : undefined;\n};\n\nlet STORE: PublicKey | undefined;\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    metadata: METADATA_PROGRAM_ID,\n    memo: MEMO_ID,\n    vault: VAULT_ID,\n    auction: AUCTION_ID,\n    metaplex: METAPLEX_ID,\n    store: STORE,\n  };\n};\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n) => {\n  const key =\n    \"pda-\" +\n    seeds.reduce((agg, item) => agg + item.toString(\"hex\"), \"\") +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\nexport type StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nexport async function getEdition(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  const PROGRAM_IDS = programIds();\n\n  return (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        toPublicKey(PROGRAM_IDS.metadata).toBuffer(),\n        toPublicKey(tokenMint).toBuffer(),\n        Buffer.from(EDITION),\n      ],\n      toPublicKey(PROGRAM_IDS.metadata)\n    )\n  )[0];\n}\n\nclass CreateMetadataArgs {\n  instruction: number = 0;\n  data: Data;\n  isMutable: boolean;\n\n  constructor(args: { data: Data; isMutable: boolean }) {\n    this.data = args.data;\n    this.isMutable = args.isMutable;\n  }\n}\nclass UpdateMetadataArgs {\n  instruction: number = 1;\n  data: Data | null;\n  // Not used by this app, just required for instruction\n  updateAuthority: StringPublicKey | null;\n  primarySaleHappened: boolean | null;\n  constructor(args: {\n    data?: Data;\n    updateAuthority?: string;\n    primarySaleHappened: boolean | null;\n  }) {\n    this.data = args.data ? args.data : null;\n    this.updateAuthority = args.updateAuthority ? args.updateAuthority : null;\n    this.primarySaleHappened = args.primarySaleHappened;\n  }\n}\n\nexport class Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nexport class Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nexport class Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n\n  public async init() {\n    const edition = await getEdition(this.mint);\n    this.edition = edition;\n    this.masterEdition = edition;\n  }\n}\n\nexport class Edition {\n  key: MetadataKey;\n  /// Points at MasterEdition struct\n  parent: StringPublicKey;\n  /// Starting at 0 for master record, this is incremented for each edition minted.\n  edition: BN;\n\n  constructor(args: {\n    key: MetadataKey;\n    parent: StringPublicKey;\n    edition: BN;\n  }) {\n    this.key = MetadataKey.EditionV1;\n    this.parent = args.parent;\n    this.edition = args.edition;\n  }\n}\n\nexport class MasterEditionV1 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n  /// Can be used to mint tokens that give one-time permission to mint a single limited edition.\n  printingMint: StringPublicKey;\n  /// If you don't know how many printing tokens you are going to need, but you do know\n  /// you are going to need some amount in the future, you can use a token from this mint.\n  /// Coming back to token metadata with one of these tokens allows you to mint (one time)\n  /// any number of printing tokens you want. This is used for instance by Auction Manager\n  /// with participation NFTs, where we dont know how many people will bid and need participation\n  /// printing tokens to redeem, so we give it ONE of these tokens to use after the auction is over,\n  /// because when the auction begins we just dont know how many printing tokens we will need,\n  /// but at the end we will. At the end it then burns this token with token-metadata to\n  /// get the printing tokens it needs to give to bidders. Each bidder then redeems a printing token\n  /// to get their limited editions.\n  oneTimePrintingAuthorizationMint: StringPublicKey;\n\n  constructor(args: {\n    key: MetadataKey;\n    supply: BN;\n    maxSupply?: BN;\n    printingMint: StringPublicKey;\n    oneTimePrintingAuthorizationMint: StringPublicKey;\n  }) {\n    this.key = MetadataKey.MasterEditionV1;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n    this.printingMint = args.printingMint;\n    this.oneTimePrintingAuthorizationMint =\n      args.oneTimePrintingAuthorizationMint;\n  }\n}\n\nexport class MasterEditionV2 {\n  key: MetadataKey;\n  supply: BN;\n  maxSupply?: BN;\n\n  constructor(args: { key: MetadataKey; supply: BN; maxSupply?: BN }) {\n    this.key = MetadataKey.MasterEditionV2;\n    this.supply = args.supply;\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass CreateMasterEditionArgs {\n  instruction: number = 10;\n  maxSupply: BN | null;\n  constructor(args: { maxSupply: BN | null }) {\n    this.maxSupply = args.maxSupply;\n  }\n}\n\nclass MintPrintingTokensArgs {\n  instruction: number = 9;\n  supply: BN;\n\n  constructor(args: { supply: BN }) {\n    this.supply = args.supply;\n  }\n}\n\nexport class EditionMarker {\n  key: MetadataKey;\n  ledger: number[];\n\n  constructor(args: { key: MetadataKey; ledger: number[] }) {\n    this.key = MetadataKey.EditionMarker;\n    this.ledger = args.ledger;\n  }\n\n  editionTaken(edition: number) {\n    const editionOffset = edition % EDITION_MARKER_BIT_SIZE;\n    const indexOffset = Math.floor(editionOffset / 8);\n\n    if (indexOffset > 30) {\n      throw Error(\"bad index for edition\");\n    }\n\n    const positionInBitsetFromRight = 7 - (editionOffset % 8);\n\n    const mask = Math.pow(2, positionInBitsetFromRight);\n\n    const appliedMask = this.ledger[indexOffset] & mask;\n\n    // eslint-disable-next-line\n    return appliedMask != 0;\n  }\n}\n\nexport const METADATA_SCHEMA = new Map<any, any>([\n  [\n    CreateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", Data],\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    UpdateMetadataArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"data\", { kind: \"option\", type: Data }],\n        [\"updateAuthority\", { kind: \"option\", type: \"pubkeyAsString\" }],\n        [\"primarySaleHappened\", { kind: \"option\", type: \"u8\" }],\n      ],\n    },\n  ],\n\n  [\n    CreateMasterEditionArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    MintPrintingTokensArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"supply\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV1,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n        [\"printingMint\", \"pubkeyAsString\"],\n        [\"oneTimePrintingAuthorizationMint\", \"pubkeyAsString\"],\n      ],\n    },\n  ],\n  [\n    MasterEditionV2,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"supply\", \"u64\"],\n        [\"maxSupply\", { kind: \"option\", type: \"u64\" }],\n      ],\n    },\n  ],\n  [\n    Edition,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"parent\", \"pubkeyAsString\"],\n        [\"edition\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n  [\n    EditionMarker,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"ledger\", [31]],\n      ],\n    },\n  ],\n]);\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n\nexport const decodeMetadata = (buffer: Buffer): Metadata => {\n  const metadata = deserializeUnchecked(\n    METADATA_SCHEMA,\n    Metadata,\n    buffer\n  ) as Metadata;\n  metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, \"\");\n  metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, \"\");\n  metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, \"\");\n  return metadata;\n};\n\nexport const getMetadataAddress = async (\n  mintKey: string\n): Promise<[PublicKey, number]> => {\n  const seeds = [\n    Buffer.from(\"metadata\"),\n    new PublicKey(METADATA_PROGRAM_ID).toBuffer(),\n    new PublicKey(mintKey).toBuffer(),\n  ];\n  return PublicKey.findProgramAddress(\n    seeds,\n    new PublicKey(METADATA_PROGRAM_ID)\n  );\n};\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface ParsedTokenAccount {\n  publicKey: string;\n  mintKey: string;\n  amount: string;\n  decimals: number;\n  uiAmount: number;\n  uiAmountString: string;\n  symbol?: string;\n  name?: string;\n  logo?: string;\n  isNativeAsset?: boolean;\n}\n\nexport interface Transaction {\n  id: string;\n  block: number;\n}\n\nexport interface TransferState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: ParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<ParsedTokenAccount[]>;\n  amount: string;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  targetParsedTokenAccount: ParsedTokenAccount | undefined;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isApproving: boolean;\n  isRecovery: boolean;\n}\n\nconst initialState: TransferState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  amount: \"\",\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  targetParsedTokenAccount: undefined,\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isApproving: false,\n  isRecovery: false,\n};\n\nexport const transferSlice = createSlice({\n  name: \"transfer\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<ParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setAmount: (state, action: PayloadAction<string>) => {\n      state.amount = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n      state.targetParsedTokenAccount = undefined;\n    },\n    setTargetParsedTokenAccount: (\n      state,\n      action: PayloadAction<ParsedTokenAccount | undefined>\n    ) => {\n      state.targetParsedTokenAccount = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    setIsApproving: (state, action: PayloadAction<boolean>) => {\n      state.isApproving = action.payload;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string;\n          amount: string;\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetParsedTokenAccount = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.amount = action.payload.parsedPayload.amount;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setAmount,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTargetParsedTokenAccount,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  setIsApproving,\n  reset,\n  setRecoveryVaa,\n} = transferSlice.actions;\n\nexport default transferSlice.reducer;\n","import { Button, makeStyles, Tooltip } from \"@material-ui/core\";\nimport { LinkOff } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    display: \"flex\",\n    margin: `${theme.spacing(1)}px auto`,\n    width: \"100%\",\n    maxWidth: 400,\n  },\n}));\n\nconst ToggleConnectedButton = ({\n  connect,\n  disconnect,\n  connected,\n  pk,\n}: {\n  connect(): any;\n  disconnect(): any;\n  connected: boolean;\n  pk: string;\n}) => {\n  const classes = useStyles();\n  const is0x = pk.startsWith(\"0x\");\n  return connected ? (\n    <Tooltip title={pk}>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"small\"\n        onClick={disconnect}\n        className={classes.button}\n        startIcon={<LinkOff />}\n      >\n        Disconnect {pk.substring(0, is0x ? 6 : 3)}...\n        {pk.substr(pk.length - (is0x ? 4 : 3))}\n      </Button>\n    </Tooltip>\n  ) : (\n    <Button\n      color=\"primary\"\n      variant=\"contained\"\n      size=\"small\"\n      onClick={connect}\n      className={classes.button}\n    >\n      Connect\n    </Button>\n  );\n};\n\nexport default ToggleConnectedButton;\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTransferSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useTransferSignedVAA() {\n  const signedVAAHex = useSelector(selectTransferSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  Dialog,\n  DialogTitle,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { ConnectType, useWallet } from \"@terra-money/wallet-provider\";\nimport { useCallback } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  flexTitle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"& > div\": {\n      flexGrow: 1,\n      marginRight: theme.spacing(4),\n    },\n    \"& > button\": {\n      marginRight: theme.spacing(-1),\n    },\n  },\n  icon: {\n    height: 24,\n    width: 24,\n  },\n}));\n\nconst WalletOptions = ({\n  type,\n  identifier,\n  connect,\n  onClose,\n  icon,\n  name,\n}: {\n  type: ConnectType;\n  identifier: string;\n  connect: (\n    type: ConnectType | undefined,\n    identifier: string | undefined\n  ) => void;\n  onClose: () => void;\n  icon: string;\n  name: string;\n}) => {\n  const classes = useStyles();\n\n  const handleClick = useCallback(() => {\n    connect(type, identifier);\n    onClose();\n  }, [connect, onClose, type, identifier]);\n  return (\n    <ListItem button onClick={handleClick}>\n      <ListItemIcon>\n        <img src={icon} alt={name} className={classes.icon} />\n      </ListItemIcon>\n      <ListItemText>{name}</ListItemText>\n    </ListItem>\n  );\n};\n\nconst TerraConnectWalletDialog = ({\n  isOpen,\n  onClose,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  const { availableConnections, availableInstallations, connect } = useWallet();\n  const classes = useStyles();\n\n  const filteredConnections = availableConnections\n    .filter(({ type }) => type !== ConnectType.READONLY)\n    .map(({ type, name, icon, identifier = \"\" }) => (\n      <WalletOptions\n        type={type}\n        identifier={identifier}\n        connect={connect}\n        onClose={onClose}\n        icon={icon}\n        name={name}\n        key={\"connection-\" + type + identifier}\n      />\n    ));\n\n  const filteredInstallations = availableInstallations\n    .filter(({ type }) => type !== ConnectType.READONLY)\n    .map(({ type, name, icon, url, identifier = \"\" }) => (\n      <ListItem\n        button\n        component=\"a\"\n        key={\"install-\" + type + identifier}\n        href={url}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <ListItemIcon>\n          <img src={icon} alt={name} className={classes.icon} />\n        </ListItemIcon>\n        <ListItemText>{\"Install \" + name}</ListItemText>\n      </ListItem>\n    ));\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>\n        <div className={classes.flexTitle}>\n          <div>Select your wallet</div>\n          <IconButton onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n      <List>\n        {filteredConnections}\n        {filteredInstallations}\n      </List>\n    </Dialog>\n  );\n};\n\nexport default TerraConnectWalletDialog;\n","import { useConnectedWallet, useWallet } from \"@terra-money/wallet-provider\";\nimport { useCallback, useState } from \"react\";\nimport TerraConnectWalletDialog from \"./TerraConnectWalletDialog\";\nimport ToggleConnectedButton from \"./ToggleConnectedButton\";\n\nconst TerraWalletKey = () => {\n  const wallet = useWallet();\n  const connectedWallet = useConnectedWallet();\n\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const connect = useCallback(() => {\n    setIsDialogOpen(true);\n  }, [setIsDialogOpen]);\n\n  const closeDialog = useCallback(() => {\n    setIsDialogOpen(false);\n  }, [setIsDialogOpen]);\n\n  return (\n    <>\n      <ToggleConnectedButton\n        connect={connect}\n        disconnect={wallet.disconnect}\n        connected={!!connectedWallet}\n        pk={connectedWallet?.terraAddress || \"\"}\n      />\n      <TerraConnectWalletDialog isOpen={isDialogOpen} onClose={closeDialog} />\n    </>\n  );\n};\n\nexport default TerraWalletKey;\n","export type DataWrapper<T> = {\n  data: T | null;\n  error: any | null;\n  isFetching: boolean;\n  receivedAt: string | null;\n  //possibly invalidate\n};\n\nexport function getEmptyDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function receiveDataWrapper<T>(data: T): DataWrapper<T> {\n  return {\n    data,\n    error: null,\n    isFetching: false,\n    receivedAt: new Date().toISOString(),\n  };\n}\n\nexport function errorDataWrapper<T>(error: string): DataWrapper<T> {\n  return {\n    data: null,\n    error,\n    isFetching: false,\n    receivedAt: null,\n  };\n}\n\nexport function fetchDataWrapper() {\n  return {\n    data: null,\n    error: null,\n    isFetching: true,\n    receivedAt: null,\n  };\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BigNumber, ethers } from \"ethers\";\nimport React, {\n  ReactChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\n\nexport type Provider = ethers.providers.Web3Provider | undefined;\nexport type Signer = ethers.Signer | undefined;\n\ninterface IEthereumProviderContext {\n  connect(): void;\n  disconnect(): void;\n  provider: Provider;\n  chainId: number | undefined;\n  signer: Signer;\n  signerAddress: string | undefined;\n  providerError: string | null;\n}\n\nconst EthereumProviderContext = React.createContext<IEthereumProviderContext>({\n  connect: () => {},\n  disconnect: () => {},\n  provider: undefined,\n  chainId: undefined,\n  signer: undefined,\n  signerAddress: undefined,\n  providerError: null,\n});\nexport const EthereumProviderProvider = ({\n  children,\n}: {\n  children: ReactChildren;\n}) => {\n  const [providerError, setProviderError] = useState<string | null>(null);\n  const [provider, setProvider] = useState<Provider>(undefined);\n  const [chainId, setChainId] = useState<number | undefined>(undefined);\n  const [signer, setSigner] = useState<Signer>(undefined);\n  const [signerAddress, setSignerAddress] = useState<string | undefined>(\n    undefined\n  );\n  const connect = useCallback(() => {\n    setProviderError(null);\n    detectEthereumProvider()\n      .then((detectedProvider) => {\n        if (detectedProvider) {\n          const provider = new ethers.providers.Web3Provider(\n            // @ts-ignore\n            detectedProvider,\n            \"any\"\n          );\n          provider\n            .send(\"eth_requestAccounts\", [])\n            .then(() => {\n              setProviderError(null);\n              setProvider(provider);\n              provider\n                .getNetwork()\n                .then((network) => {\n                  setChainId(network.chainId);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the network\"\n                  );\n                });\n              const signer = provider.getSigner();\n              setSigner(signer);\n              signer\n                .getAddress()\n                .then((address) => {\n                  setSignerAddress(address);\n                })\n                .catch(() => {\n                  setProviderError(\n                    \"An error occurred while getting the signer address\"\n                  );\n                });\n              // TODO: try using ethers directly\n              // @ts-ignore\n              if (detectedProvider && detectedProvider.on) {\n                // @ts-ignore\n                detectedProvider.on(\"chainChanged\", (chainId) => {\n                  try {\n                    setChainId(BigNumber.from(chainId).toNumber());\n                  } catch (e) {}\n                });\n                // @ts-ignore\n                detectedProvider.on(\"accountsChanged\", (accounts) => {\n                  try {\n                    const signer = provider.getSigner();\n                    setSigner(signer);\n                    signer\n                      .getAddress()\n                      .then((address) => {\n                        setSignerAddress(address);\n                      })\n                      .catch(() => {\n                        setProviderError(\n                          \"An error occurred while getting the signer address\"\n                        );\n                      });\n                  } catch (e) {}\n                });\n              }\n            })\n            .catch(() => {\n              setProviderError(\n                \"An error occurred while requesting eth accounts\"\n              );\n            });\n        } else {\n          setProviderError(\"Please install MetaMask\");\n        }\n      })\n      .catch(() => {\n        setProviderError(\"Please install MetaMask\");\n      });\n  }, []);\n  const disconnect = useCallback(() => {\n    setProviderError(null);\n    setProvider(undefined);\n    setChainId(undefined);\n    setSigner(undefined);\n    setSignerAddress(undefined);\n  }, []);\n  const contextValue = useMemo(\n    () => ({\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    }),\n    [\n      connect,\n      disconnect,\n      provider,\n      chainId,\n      signer,\n      signerAddress,\n      providerError,\n    ]\n  );\n  return (\n    <EthereumProviderContext.Provider value={contextValue}>\n      {children}\n    </EthereumProviderContext.Provider>\n  );\n};\nexport const useEthereumProvider = () => {\n  return useContext(EthereumProviderContext);\n};\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { hexlify, hexStripZeros } from \"@ethersproject/bytes\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useCallback, useMemo } from \"react\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { CLUSTER, getEvmChainId } from \"../utils/consts\";\n\nconst createWalletStatus = (\n  isReady: boolean,\n  statusMessage: string = \"\",\n  forceNetworkSwitch: () => void,\n  walletAddress?: string\n) => ({\n  isReady,\n  statusMessage,\n  forceNetworkSwitch,\n  walletAddress,\n});\n\nfunction useIsWalletReady(\n  chainId: ChainId,\n  enableNetworkAutoswitch: boolean = true\n): {\n  isReady: boolean;\n  statusMessage: string;\n  walletAddress?: string;\n  forceNetworkSwitch: () => void;\n} {\n  const autoSwitch = enableNetworkAutoswitch;\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const terraWallet = useConnectedWallet();\n  const hasTerraWallet = !!terraWallet;\n  const {\n    provider,\n    signerAddress,\n    chainId: evmChainId,\n  } = useEthereumProvider();\n  const hasEthInfo = !!provider && !!signerAddress;\n  const correctEvmNetwork = getEvmChainId(chainId);\n  const hasCorrectEvmNetwork = evmChainId === correctEvmNetwork;\n\n  const forceNetworkSwitch = useCallback(() => {\n    if (provider && correctEvmNetwork) {\n      if (!isEVMChain(chainId)) {\n        return;\n      }\n      try {\n        provider.send(\"wallet_switchEthereumChain\", [\n          { chainId: hexStripZeros(hexlify(correctEvmNetwork)) },\n        ]);\n      } catch (e) {}\n    }\n  }, [provider, correctEvmNetwork, chainId]);\n\n  return useMemo(() => {\n    if (\n      chainId === CHAIN_ID_TERRA &&\n      hasTerraWallet &&\n      terraWallet?.walletAddress\n    ) {\n      // TODO: terraWallet does not update on wallet changes\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        terraWallet.walletAddress\n      );\n    }\n    if (chainId === CHAIN_ID_SOLANA && solPK) {\n      return createWalletStatus(\n        true,\n        undefined,\n        forceNetworkSwitch,\n        solPK.toString()\n      );\n    }\n    if (isEVMChain(chainId) && hasEthInfo && signerAddress) {\n      if (hasCorrectEvmNetwork) {\n        return createWalletStatus(\n          true,\n          undefined,\n          forceNetworkSwitch,\n          signerAddress\n        );\n      } else {\n        if (provider && correctEvmNetwork && autoSwitch) {\n          forceNetworkSwitch();\n        }\n        return createWalletStatus(\n          false,\n          `Wallet is not connected to ${CLUSTER}. Expected Chain ID: ${correctEvmNetwork}`,\n          forceNetworkSwitch,\n          undefined\n        );\n      }\n    }\n\n    return createWalletStatus(\n      false,\n      \"Wallet not connected\",\n      forceNetworkSwitch,\n      undefined\n    );\n  }, [\n    chainId,\n    autoSwitch,\n    forceNetworkSwitch,\n    hasTerraWallet,\n    solPK,\n    hasEthInfo,\n    correctEvmNetwork,\n    hasCorrectEvmNetwork,\n    provider,\n    signerAddress,\n    terraWallet,\n  ]);\n}\n\nexport default useIsWalletReady;\n","export default __webpack_public_path__ + \"static/media/terra.4c802748.svg\";","import {\n  ChainId,\n  CHAIN_ID_AVAX,\n  CHAIN_ID_BSC,\n  CHAIN_ID_ETH,\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_POLYGON,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  CHAIN_ID_OASIS,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport avaxIcon from \"../icons/avax.svg\";\nimport bscIcon from \"../icons/bsc.svg\";\nimport ethIcon from \"../icons/eth.svg\";\nimport oasisIcon from \"../icons/oasis-network-rose-logo.svg\";\nimport polygonIcon from \"../icons/polygon.svg\";\nimport solanaIcon from \"../icons/solana.svg\";\nimport terraIcon from \"../icons/terra.svg\";\n\nexport type Cluster = \"devnet\" | \"testnet\" | \"mainnet\";\nexport const CLUSTER: Cluster =\n  process.env.REACT_APP_CLUSTER === \"mainnet\"\n    ? \"mainnet\"\n    : process.env.REACT_APP_CLUSTER === \"testnet\"\n    ? \"testnet\"\n    : \"devnet\";\nexport interface ChainInfo {\n  id: ChainId;\n  name: string;\n  logo: string;\n}\nexport const CHAINS: ChainInfo[] =\n  CLUSTER === \"mainnet\"\n    ? [\n        {\n          id: CHAIN_ID_AVAX,\n          name: \"Avalanche\",\n          logo: avaxIcon,\n        },\n        {\n          id: CHAIN_ID_OASIS,\n          name: \"Oasis\",\n          logo: oasisIcon,\n        },\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        {\n          id: CHAIN_ID_AVAX,\n          name: \"Avalanche\",\n          logo: avaxIcon,\n        },\n        {\n          id: CHAIN_ID_OASIS,\n          name: \"Oasis\",\n          logo: oasisIcon,\n        },\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum (Goerli)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_ETHEREUM_ROPSTEN,\n          name: \"Ethereum (Ropsten)\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_POLYGON,\n          name: \"Polygon\",\n          logo: polygonIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ]\n    : [\n        {\n          id: CHAIN_ID_BSC,\n          name: \"Binance Smart Chain\",\n          logo: bscIcon,\n        },\n        {\n          id: CHAIN_ID_ETH,\n          name: \"Ethereum\",\n          logo: ethIcon,\n        },\n        {\n          id: CHAIN_ID_SOLANA,\n          name: \"Solana\",\n          logo: solanaIcon,\n        },\n        {\n          id: CHAIN_ID_TERRA,\n          name: \"Terra\",\n          logo: terraIcon,\n        },\n      ];\nexport const BETA_CHAINS: ChainId[] = CLUSTER === \"mainnet\" ? [] : [];\nexport const CHAINS_WITH_NFT_SUPPORT = CHAINS.filter(\n  ({ id }) =>\n    id === CHAIN_ID_AVAX ||\n    id === CHAIN_ID_BSC ||\n    id === CHAIN_ID_ETH ||\n    id === CHAIN_ID_ETHEREUM_ROPSTEN ||\n    id === CHAIN_ID_POLYGON ||\n    id === CHAIN_ID_OASIS ||\n    id === CHAIN_ID_SOLANA\n);\nexport type ChainsById = { [key in ChainId]: ChainInfo };\nexport const CHAINS_BY_ID: ChainsById = CHAINS.reduce((obj, chain) => {\n  obj[chain.id] = chain;\n  return obj;\n}, {} as ChainsById);\n\nexport const COMING_SOON_CHAINS: ChainInfo[] = [];\nexport const getDefaultNativeCurrencySymbol = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? \"SOL\"\n    : chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"ETH\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BNB\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"LUNA\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"MATIC\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"AVAX\"\n    : chainId === CHAIN_ID_OASIS\n    ? \"ROSE\"\n    : \"\";\nexport const getExplorerName = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? \"Etherscan\"\n    : chainId === CHAIN_ID_BSC\n    ? \"BscScan\"\n    : chainId === CHAIN_ID_TERRA\n    ? \"Finder\"\n    : chainId === CHAIN_ID_POLYGON\n    ? \"Polygonscan\"\n    : chainId === CHAIN_ID_AVAX\n    ? \"Snowtrace\"\n    : \"Explorer\";\nexport const WORMHOLE_RPC_HOSTS =\n  CLUSTER === \"mainnet\"\n    ? [\n        \"https://wormhole-v2-mainnet-api.certus.one\",\n        \"https://wormhole.inotel.ro\",\n        \"https://wormhole-v2-mainnet-api.mcf.rocks\",\n        \"https://wormhole-v2-mainnet-api.chainlayer.network\",\n        \"https://wormhole-v2-mainnet-api.staking.fund\",\n        \"https://wormhole-v2-mainnet.01node.com\",\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\"https://wormhole-v2-testnet-api.certus.one\"]\n    : [\"http://localhost:7071\"];\nexport const ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 5 : 1337;\nexport const ROPSTEN_ETH_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 1 : CLUSTER === \"testnet\" ? 3 : 1337;\nexport const BSC_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 56 : CLUSTER === \"testnet\" ? 97 : 1397;\nexport const POLYGON_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 137 : CLUSTER === \"testnet\" ? 80001 : 1381;\nexport const AVAX_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 43114 : CLUSTER === \"testnet\" ? 43113 : 1381;\nexport const OASIS_NETWORK_CHAIN_ID =\n  CLUSTER === \"mainnet\" ? 42262 : CLUSTER === \"testnet\" ? 42261 : 1381;\nexport const getEvmChainId = (chainId: ChainId) =>\n  chainId === CHAIN_ID_ETH\n    ? ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NETWORK_CHAIN_ID\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_NETWORK_CHAIN_ID\n    : undefined;\nexport const SOLANA_HOST = process.env.REACT_APP_SOLANA_API_URL\n  ? process.env.REACT_APP_SOLANA_API_URL\n  : CLUSTER === \"mainnet\"\n  ? clusterApiUrl(\"mainnet-beta\")\n  : CLUSTER === \"testnet\"\n  ? clusterApiUrl(\"devnet\")\n  : \"http://localhost:8899\";\n\nexport const TERRA_HOST =\n  CLUSTER === \"mainnet\"\n    ? {\n        URL: \"https://lcd.terra.dev\",\n        chainID: \"columbus-5\",\n        name: \"mainnet\",\n      }\n    : CLUSTER === \"testnet\"\n    ? {\n        URL: \"https://bombay-lcd.terra.dev\",\n        chainID: \"bombay-12\",\n        name: \"testnet\",\n      }\n    : {\n        URL: \"http://localhost:1317\",\n        chainID: \"columbus-5\",\n        name: \"localterra\",\n      };\nexport const ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x706abc4E45D419950511e474C7B9Ed348A4a716c\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD8E4C2DbDd2e2bd8F1336EA691dBFF6952B1a6eB\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF890982f9310df57d00f659cf4fd87e65adEd8d7\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const BSC_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x68605AD7b15c732a30b1BbC62BE8F2A509D74b4D\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const BSC_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0xcD16E5613EF35599dc82B24Cb45B5A93D779f1EE\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const BSC_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xB6F6D86a8f9879A9c87f643768d9efc38c1Da6E7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9dcF9D205C9De35334D646BeE44b2D2859712A09\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const POLYGON_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7\"\n    : CLUSTER === \"testnet\"\n    ? \"0x0CBE91CF822c73C2315FB05100C2F714765d5c20\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const POLYGON_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x90BBd86a6Fe93D3bc3ed6335935447E75fAb7fCf\"\n    : CLUSTER === \"testnet\"\n    ? \"0x51a02d0dcb5e52F5b92bdAA38FA013C91c7309A9\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const POLYGON_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5a58505a96D1dbf8dF91cB21B54419FC36e93fdE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x377D55a7928c046E18eEbb61977e714d2a76472a\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const AVAX_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x54a8e5f9c4CbA08F9943965859F6c34eAF03E26c\"\n    : CLUSTER === \"testnet\"\n    ? \"0x7bbcE28e64B3F8b84d876Ab298393c38ad7aac4C\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const AVAX_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xf7B6737Ca9c4e08aE573F75A97B73D7a813f5De5\"\n    : CLUSTER === \"testnet\"\n    ? \"0xD601BAf2EEE3C028344471684F6b27E789D9075D\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const AVAX_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x0e082F06FF657D94310cB8cE8B0D9a04541d8052\"\n    : CLUSTER === \"testnet\"\n    ? \"0x61E44E506Ca5659E6c0bba9b678586fA2d729756\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const OASIS_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0xfE8cD454b4A1CA468B57D79c0cc77Ef5B6f64585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc1C338397ffA53a2Eb12A7038b4eeb34791F8aCb\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const OASIS_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x04952D522Ff217f40B5Ef3cbF659EcA7b952a6c1\"\n    : CLUSTER === \"testnet\"\n    ? \"0xC5c25B41AB0b797571620F5204Afa116A44c0ebA\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const OASIS_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x5848C791e09901b40A9Ef749f2a6735b418d7564\"\n    : CLUSTER === \"testnet\"\n    ? \"0x88d8004A9BdbfD9D28090A02010C19897a29605c\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\nexport const SOL_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth\"\n    : CLUSTER === \"testnet\"\n    ? \"3u8hJUVTA4jH1wYAyUur7FFZVQ8H635K3tSHHF4ssjQ5\"\n    : \"Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o\";\nexport const SOL_NFT_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WnFt12ZrnzZrFZkt2xsNsaNWoQribnuQ5B5FrDbwDhD\"\n    : CLUSTER === \"testnet\"\n    ? \"2rHhojZ7hpu1zA91nvZmT8TqWWvMcKmmNBCr2mKTtMq4\"\n    : \"NFTWqJR8YnRVqPDvTJrYuLrQDitTG5AScqbeghi4zSA\";\nexport const SOL_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb\"\n    : CLUSTER === \"testnet\"\n    ? \"DZnkkTmCiFWfYTfT41X3Rd1kDgozqzxWaHqsw6W4x2oe\"\n    : \"B6RHG3mfcckmrYN1UhmJzyS1XX3fZKbkeUcpJe9Sy3FE\";\nexport const ROPSTEN_ETH_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B\"\n    : CLUSTER === \"testnet\"\n    ? \"0x210c5F5e2AF958B4defFe715Dc621b7a3BA888c5\"\n    : \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n);\nexport const ROPSTEN_ETH_NFT_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x6FFd7EdE62328b3Af38FCD61461Bbfc52F5651fE\"\n    : CLUSTER === \"testnet\"\n    ? \"0x2b048Da40f69c8dc386a56705915f8E966fe1eba\"\n    : \"0x26b4afb60d6c903165150c6f0aa14f8016be4aec\"\n);\nexport const ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS = getAddress(\n  CLUSTER === \"mainnet\"\n    ? \"0x3ee18B2214AFF97000D974cf647E7C347E8fa585\"\n    : CLUSTER === \"testnet\"\n    ? \"0xF174F9A837536C449321df1Ca093Bb96948D5386\"\n    : \"0x0290FB167208Af455bB137780163b7B7a9a10C16\"\n);\n\nexport const SOL_CUSTODY_ADDRESS =\n  \"GugU1tP7doLeTw9hQP51xRJyS8Da1fWxuiy2rVrnMD2m\";\nexport const SOL_NFT_CUSTODY_ADDRESS =\n  \"D63bhHo634eXSj4Jq3xgu2fjB5XKc8DFHzDY9iZk7fv1\";\nexport const TERRA_TEST_TOKEN_ADDRESS =\n  \"terra13nkgqrfymug724h8pprpexqj9h629sa3ncw7sh\";\nexport const TERRA_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra1dq03ugtd40zu9hcgdzrsq6z2z4hwhc9tqk2uy5\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pd65m0q9tl3v8znnz5f5ltsfegyzah7g42cx5v\"\n    : \"terra18vd8fpwxzck93qlwghaj6arh4p7c5n896xzem5\";\nexport const TERRA_TOKEN_BRIDGE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"terra10nmmwe8r3g99a9newtqa7a75xfgs2e8z87r2sf\"\n    : CLUSTER === \"testnet\"\n    ? \"terra1pseddrv0yfsn76u4zxrjmtf45kdlmalswdv39a\"\n    : \"terra10pyejy66429refv3g35g2t7am0was7ya7kz2a4\";\n\nexport const getBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_BRIDGE_ADDRESS\n    : \"\";\nexport const getNFTBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_NFT_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_NFT_BRIDGE_ADDRESS\n    : \"\";\nexport const getTokenBridgeAddressForChain = (chainId: ChainId) =>\n  chainId === CHAIN_ID_SOLANA\n    ? SOL_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETH\n    ? ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_BSC\n    ? BSC_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_TERRA\n    ? TERRA_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_POLYGON\n    ? POLYGON_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n    ? ROPSTEN_ETH_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_AVAX\n    ? AVAX_TOKEN_BRIDGE_ADDRESS\n    : chainId === CHAIN_ID_OASIS\n    ? OASIS_TOKEN_BRIDGE_ADDRESS\n    : \"\";\n\nexport const COVALENT_API_KEY = process.env.REACT_APP_COVALENT_API_KEY\n  ? process.env.REACT_APP_COVALENT_API_KEY\n  : \"\";\n\nexport const COVALENT_ETHEREUM = 1; // Covalent only supports mainnet and Kovan\nexport const COVALENT_BSC = CLUSTER === \"devnet\" ? 56 : BSC_NETWORK_CHAIN_ID;\nexport const COVALENT_POLYGON =\n  CLUSTER === \"devnet\" ? 137 : POLYGON_NETWORK_CHAIN_ID;\nexport const COVALENT_AVAX = CLUSTER === \"devnet\" ? 137 : AVAX_NETWORK_CHAIN_ID;\nexport const COVALENT_OASIS = CLUSTER === \"devnet\" ? null : null;\nexport const COVALENT_GET_TOKENS_URL = (\n  chainId: ChainId,\n  walletAddress: string,\n  nft?: boolean,\n  noNftMetadata?: boolean\n) => {\n  const chainNum =\n    chainId === CHAIN_ID_ETH || chainId === CHAIN_ID_ETHEREUM_ROPSTEN\n      ? COVALENT_ETHEREUM\n      : chainId === CHAIN_ID_BSC\n      ? COVALENT_BSC\n      : chainId === CHAIN_ID_POLYGON\n      ? COVALENT_POLYGON\n      : chainId === CHAIN_ID_AVAX\n      ? COVALENT_AVAX\n      : chainId === CHAIN_ID_OASIS\n      ? COVALENT_OASIS\n      : \"\";\n  // https://www.covalenthq.com/docs/api/#get-/v1/{chain_id}/address/{address}/balances_v2/\n  return `https://api.covalenthq.com/v1/${chainNum}/address/${walletAddress}/balances_v2/?key=${COVALENT_API_KEY}${\n    nft ? \"&nft=true\" : \"\"\n  }${noNftMetadata ? \"&no-nft-fetch=true\" : \"\"}`;\n};\nexport const TVL_URL =\n  \"https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-notionaltvl\";\nexport const TERRA_SWAPRATE_URL =\n  \"https://fcd.terra.dev/v1/market/swaprate/uusd\";\n\nexport const WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WETH_DECIMALS = 18;\n\nexport const WBNB_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\n    : CLUSTER === \"testnet\"\n    ? \"0xae13d989dac2f0debff460ac112a837c89baa7cd\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WBNB_DECIMALS = 18;\n\nexport const WMATIC_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\"\n    : CLUSTER === \"testnet\"\n    ? \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WMATIC_DECIMALS = 18;\n\nexport const ROPSTEN_WETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n    : CLUSTER === \"testnet\"\n    ? \"0xc778417e063141139fce010982780140aa0cd5ab\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const ROPSTEN_WETH_DECIMALS = 18;\n\nexport const WAVAX_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7\"\n    : CLUSTER === \"testnet\"\n    ? \"0xd00ae08403b9bbb9124bb305c09058e32c39a48c\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WAVAX_DECIMALS = 18;\n\nexport const WROSE_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0x21C718C22D52d0F3a789b752D4c2fD5908a8A733\"\n    : CLUSTER === \"testnet\"\n    ? \"0x792296e2a15e6Ceb5f5039DecaE7A1f25b00B0B0\"\n    : \"0xDDb64fE46a91D46ee29420539FC25FD07c5FEa3E\";\nexport const WROSE_DECIMALS = 18;\n\nexport const WORMHOLE_V1_ETH_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"\n    : CLUSTER === \"testnet\"\n    ? \"0xdae0Cba01eFc4bfEc1F7Fece73Fe8b8d2Eda65B0\"\n    : \"0xf92cD566Ea4864356C5491c177A430C222d7e678\"; //TODO something that doesn't explode in localhost\nexport const WORMHOLE_V1_SOLANA_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC\"\n    : CLUSTER === \"testnet\"\n    ? \"BrdgiFmZN3BKkcY3danbPYyxPKwb8RhQzpM2VY5L97ED\"\n    : \"\";\n\nexport const TERRA_TOKEN_METADATA_URL =\n  \"https://assets.terra.money/cw20/tokens.json\";\n\nexport const WORMHOLE_V1_MINT_AUTHORITY =\n  CLUSTER === \"mainnet\"\n    ? \"9zyPU1mjgzaVyQsYwKJJ7AhVz5bgx5uc1NPABvAcUXsT\"\n    : CLUSTER === \"testnet\"\n    ? \"BJa7dq3bRP216zaTdw4cdcV71WkPc1HXvmnGeFVDi5DC\"\n    : \"\";\n\n// hardcoded addresses for warnings\nexport const SOLANA_TOKENS_THAT_EXIST_ELSEWHERE = [\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\", //  SRM\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n  \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\", //  KIN\n  \"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5\", // renBTC\n  \"8wv2KAykQstNAj2oW6AHANGBiFKVFhvMiyyzzjhkmGvE\", // renLUNA\n  \"G1a6jxYz3m8DVyMqYnuV7s86wD4fvuXYneWSpLJkmsXj\", // renBCH\n  \"FKJvvVJ242tX7zFtzTmzqoA631LqHh4CdgcN8dcfFSju\", // renDGB\n  \"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU\", // renDOGE\n  \"E99CQ2gFMmbiyK2bwiaFNWUUmwz4r8k2CVEFxwuvQ7ue\", // renZEC\n  \"De2bU64vsXKU9jq4bCjeDxNRGPn8nr3euaTK8jBYmD3J\", // renFIL\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", // USDT\n];\nexport const ETH_TOKENS_THAT_EXIST_ELSEWHERE = [\n  getAddress(\"0x476c5E26a75bd202a9683ffD34359C0CC15be0fF\"), // SRM\n  getAddress(\"0x818fc6c2ec5986bc6e2cbf00939d90556ab12ce5\"), // KIN\n  getAddress(\"0xeb4c2781e4eba804ce9a9803c67d0893436bb27d\"), // renBTC\n  getAddress(\"0x52d87F22192131636F93c5AB18d0127Ea52CB641\"), // renLUNA\n  getAddress(\"0x459086f2376525bdceba5bdda135e4e9d3fef5bf\"), // renBCH\n  getAddress(\"0xe3cb486f3f5c639e98ccbaf57d95369375687f80\"), // renDGB\n  getAddress(\"0x3832d2F059E55934220881F831bE501D180671A7\"), // renDOGE\n  getAddress(\"0x1c5db575e2ff833e46a2e9864c22f4b22e0b37c2\"), // renZEC\n  getAddress(\"0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5\"), // renFIL\n];\nexport const ETH_TOKENS_THAT_CAN_BE_SWAPPED_ON_SOLANA = [\n  getAddress(\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"), // USDC\n  getAddress(\"0xdac17f958d2ee523a2206206994597c13d831ec7\"), // USDT\n];\nexport const BSC_MARKET_WARNINGS = [\n  getAddress(WBNB_ADDRESS),\n  getAddress(\"0xe9e7cea3dedca5984780bafc599bd69add087d56\"), // BUSD\n  getAddress(\"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\"), // USDC\n  getAddress(\"0x55d398326f99059ff775485246999027b3197955\"), // BSC-USD\n];\n\nexport const MIGRATION_PROGRAM_ADDRESS =\n  CLUSTER === \"mainnet\"\n    ? \"whmRZnmyxdr2TkHXcZoFdtvNYRLQ5Jtbkf6ZbGkJjdk\"\n    : CLUSTER === \"testnet\"\n    ? \"\"\n    : \"Ex9bCdVMSfx7EzB3pgSi2R4UHwJAXvTw18rBQm5YQ8gK\";\n\nexport const MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // HUSD\n          \"BybpSTBoZHsmKnfxYG47GDhVPKrnEKX31CScShbrzUhX\",\n          \"7VQo3HFLNH5QqGtM8eC3XQbPkJUu7nS9LeGWjerRh5Sw\",\n        ],\n        [\n          // BUSD\n          \"AJ1W9A9N9dEMdVyoDiam2rV44gnBm2csrPDP7xqcapgX\",\n          \"33fsBLA8djQm82RpHmE3SuVrPGtZBWNYExsEUeKX1HXX\",\n        ],\n        [\n          // HBTC\n          \"8pBc4v9GAwCBNWPB5XKA93APexMGAS4qMr37vNke9Ref\",\n          \"7dVH61ChzgmN9BwG4PkzwRP8PbYwPJ7ZPNF2vamKT2H8\",\n        ],\n        [\n          // DAI\n          \"FYpdBuyAHSbdaAyD1sKkxyLWbAP8uUW9h6uvdhK74ij1\",\n          \"EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o\",\n        ],\n        [\n          // FRAX\n          \"8L8pDf3jutdpdr4m3np68CL9ZroLActrqwxi6s9Ah5xU\",\n          \"FR87nWEUxVgerFGhZM8Y4AggKGLnaXswr1Pd8wZ4kZcp\",\n        ],\n        [\n          // USDK\n          \"2kycGCD8tJbrjJJqWN2Qz5ysN9iB4Bth3Uic4mSB7uak\",\n          \"43m2ewFV5nDepieFjT9EmAQnc1HRtAF247RBpLGFem5F\",\n        ],\n        // [\n        //   // UST\n        //   \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n        //   \"5Un6AdG9GBjxVhTSvvt2x6X6vtN1zrDxkkDpDcShnHfF\",\n        // ],\n        [\n          // UST\n          \"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\",\n          \"9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i\",\n        ],\n        // [\n        //   // Wrapped LUNA\n        //   \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n        //   \"EQTV1LW23Mgtjb5LXSg9NGw1J32oqTV4HCPmHCVSGmqD\",\n        // ],\n        [\n          // Wrapped LUNA\n          \"2Xf2yAXJfg82sWwdLUo2x9mZXy6JCdszdMZkcF1Hf4KV\",\n          \"F6v4wfAdJB8D8p77bMXZgYt8TDKsYxLYxH5AFhUkYx9W\",\n        ],\n        [\n          // FTT\n          \"GbBWwtYTMPis4VHb8MrBbdibPhn28TSrLB53KvUmb7Gi\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // SRM\n          \"2jXy799YnEcRXneFo2GEAB6SDRsAa767HpWmktRr1DaP\",\n          \"xnorPhAzWXUczCP3KjU5yDxmKKZi5cSbxytQ1LgE3kG\",\n        ],\n        [\n          // FTT (Sollet)\n          \"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3\",\n          \"EzfgjvkSwthhgHaceR3LnKXUoRkP6NUhfghdaHAj1tUv\",\n        ],\n        [\n          // WETH (Sollet)\n          \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n          \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n        ],\n        [\n          // UNI (Sollet)\n          \"DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw\",\n          \"8FU95xFJhUUkyyCLU13HSzDLs7oC4QZdXQHL6SCeab36\",\n        ],\n        [\n          // HXRO (Sollet)\n          \"DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc\",\n          \"HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK\",\n        ],\n        [\n          // ALEPH (Sollet)\n          \"CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K\",\n          \"3UCMiSnkcnkPE1pgQ5ggPCBv6dXgVUy16TmMUe1WpG9x\",\n        ],\n        [\n          // TOMOE (Sollet)\n          \"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd\",\n          \"46AiRdka3HYGkhV6r9gyS6Teo9cojfGXfK8oniALYMZx\",\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? [\n        [\n          \"orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L\", //This is not actually a v1 asset\n          \"orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L\",\n        ],\n      ]\n    : [\n        // [\n        //   \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\",\n        //   \"GcdupcwxkmVGM6s9F8bHSjNoznXAb3hRJTioABNYkn31\",\n        // ],\n      ]\n);\n\nexport const ETH_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9\"),\n          getAddress(\"0xe76820F1DB773B1d62a3D22F47259705cC5fA4E6\"),\n        ],\n        [\n          // UST\n          getAddress(\"0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\"),\n          getAddress(\"0xF39C29d8f6851d87c40c83b61078EB7384f7Cb51\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const BSC_MIGRATION_ASSET_MAP = new Map<string, string>(\n  CLUSTER === \"mainnet\"\n    ? [\n        [\n          // LUNA\n          getAddress(\"0xECCF35F941Ab67FfcAA9A1265C2fF88865caA005\"),\n          getAddress(\"0x355A116ef1Cf566B12Ef3a8e409A64e303c53740\"),\n        ],\n        [\n          // UST\n          getAddress(\"0x23396cF899Ca06c4472205fC903bDB4de249D6fC\"),\n          getAddress(\"0x0F98AB919D04a291838B3b075c57181057D4CF75\"),\n        ],\n        [\n          // ORION\n          getAddress(\"0x5530ec23f4ee1521182bd158c09f4ca7efec1ef0\"),\n          getAddress(\"0x084fa354e65b521e6fb9d1602549cf8693cdb4f8\"),\n        ],\n      ]\n    : CLUSTER === \"testnet\"\n    ? []\n    : [\n        // [\n        //   \"0x2D8BE6BF0baA74e0A907016679CaE9190e80dD0A\",\n        //   \"0xFcCeD5E997E7fb1D0594518D3eD57245bB8ed17E\",\n        // ],\n      ]\n);\n\nexport const getMigrationAssetMap = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_BSC) {\n    return BSC_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_ETH) {\n    return ETH_MIGRATION_ASSET_MAP;\n  } else if (chainId === CHAIN_ID_SOLANA) {\n    return MIGRATION_ASSET_MAP;\n  } else {\n    return new Map<string, string>();\n  }\n};\n\nexport const SUPPORTED_TERRA_TOKENS = [\"uluna\", \"uusd\"];\nexport const TERRA_DEFAULT_FEE_DENOM = SUPPORTED_TERRA_TOKENS[0];\n\nexport const TERRA_FCD_BASE =\n  CLUSTER === \"mainnet\"\n    ? \"https://fcd.terra.dev\"\n    : CLUSTER === \"testnet\"\n    ? \"https://bombay-fcd.terra.dev\"\n    : \"http://localhost:3060\";\nexport const TERRA_GAS_PRICES_URL = `${TERRA_FCD_BASE}/v1/txs/gas_prices`;\n\nexport const TOTAL_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-totals?groupBy=address`;\n\nexport const RECENT_TRANSACTIONS_WORMHOLE = `https://europe-west3-wormhole-315720.cloudfunctions.net/mainnet-recent?groupBy=address&numRows=2`;\n\nexport const VAA_EMITTER_ADDRESSES = [\n  `${CHAIN_ID_SOLANA}:ec7372995d5cc8732397fb0ad35c0121e0eaa90d26f828a534cab54391b3a4f5`, //SOLANA TOKEN\n  `${CHAIN_ID_SOLANA}:0def15a24423e1edd1a5ab16f557b9060303ddbab8c803d2ee48f4b78a1cfd6b`, //SOLAN NFT\n  `${CHAIN_ID_ETH}:0000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585`, //ETH token\n  `${CHAIN_ID_ETH}:0000000000000000000000006ffd7ede62328b3af38fcd61461bbfc52f5651fe`, //ETH NFT\n  `${CHAIN_ID_TERRA}:0000000000000000000000007cf7b764e38a0a5e967972c1df77d432510564e2`, //terra\n  `${CHAIN_ID_BSC}:000000000000000000000000b6f6d86a8f9879a9c87f643768d9efc38c1da6e7`, //bsc\n  `${CHAIN_ID_BSC}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //bsc nft\n  `${CHAIN_ID_POLYGON}:0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde`, //Polygon\n  `${CHAIN_ID_POLYGON}:00000000000000000000000090bbd86a6fe93d3bc3ed6335935447e75fab7fcf`, //Polygon nft\n  `${CHAIN_ID_AVAX}:0000000000000000000000000e082f06ff657d94310cb8ce8b0d9a04541d8052`, //AVAX\n  `${CHAIN_ID_AVAX}:000000000000000000000000f7b6737ca9c4e08ae573f75a97b73d7a813f5de5`, //AVAX nft\n  `${CHAIN_ID_OASIS}:0000000000000000000000005848c791e09901b40a9ef749f2a6735b418d7564`, //OASIS\n  `${CHAIN_ID_OASIS}:00000000000000000000000004952D522Ff217f40B5Ef3cbF659EcA7b952a6c1`, //OASIS nft\n];\n\nexport const WORMHOLE_EXPLORER_BASE = \"https://wormholenetwork.com/en/explorer\";\n\nexport type MultiChainInfo = {\n  [key in ChainId]: { [address: string]: string };\n};\nexport const MULTI_CHAIN_TOKENS: MultiChainInfo =\n  //EVM chains should format the addresses to all lowercase\n  CLUSTER === \"mainnet\"\n    ? ({\n        [CHAIN_ID_SOLANA]: {\n          EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: \"USDC\",\n          Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: \"USDT\",\n        },\n        [CHAIN_ID_ETH]: {\n          \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\": \"USDC\",\n          \"0xdac17f958d2ee523a2206206994597c13d831ec7\": \"USDT\",\n        },\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {\n          \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\": \"USDC\",\n          \"0x55d398326f99059ff775485246999027b3197955\": \"USDT\",\n        },\n        [CHAIN_ID_POLYGON]: {\n          \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\": \"USDC\",\n          \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\": \"USDT\",\n        },\n      } as MultiChainInfo)\n    : ({\n        [CHAIN_ID_SOLANA]: {\n          \"2WDq7wSs9zYrpx2kbHDA4RUTRch2CCTP6ZWaH4GNfnQQ\": \"SOLT\",\n        },\n        [CHAIN_ID_ETH]: {},\n        [CHAIN_ID_TERRA]: {},\n        [CHAIN_ID_BSC]: {},\n        [CHAIN_ID_POLYGON]: {},\n      } as MultiChainInfo);\n\nexport const AVAILABLE_MARKETS_URL =\n  \"https://docs.wormholenetwork.com/wormhole/overview-liquid-markets\";\n\nexport const SOLANA_SYSTEM_PROGRAM_ADDRESS = \"11111111111111111111111111111111\";\nexport const FEATURED_MARKETS_JSON_URL =\n  \"https://raw.githubusercontent.com/certusone/wormhole-token-list/main/src/markets.json\";\n\nexport const logoOverrides = new Map<string, string>([\n  [\n    \"0x727f064a78dc734d33eec18d5370aef32ffd46e4\",\n    \"https://orion.money/assets/ORION-LOGO-2.1-GREEN@256x256.png\",\n  ],\n]);\n\nexport const getHowToAddTokensToWalletUrl = (chainId: ChainId) => {\n  if (isEVMChain(chainId)) {\n    return \"https://docs.wormholenetwork.com/wormhole/video-tutorial-how-to-manually-add-tokens-to-your-wallet#1.-metamask-ethereum-polygon-and-bsc\";\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return \"https://docs.wormholenetwork.com/wormhole/video-tutorial-how-to-manually-add-tokens-to-your-wallet#2.-terra-station\";\n  }\n  return \"\";\n};\n\nexport const getHowToAddToTokenListUrl = (chainId: ChainId) => {\n  if (chainId === CHAIN_ID_SOLANA) {\n    return \"https://github.com/solana-labs/token-list\";\n  } else if (chainId === CHAIN_ID_TERRA) {\n    return \"https://github.com/terra-money/assets\";\n  }\n  return \"\";\n};\n\nexport const SOLANA_TOKEN_METADATA_PROGRAM_URL =\n  \"https://github.com/metaplex-foundation/metaplex/tree/master/rust/token-metadata/program\";\nexport const MAX_VAA_UPLOAD_RETRIES_SOLANA = 5;\n\nexport const POLYGON_TERRA_WRAPPED_TOKENS = [\n  \"0x692597b009d13c4049a947cab2239b7d6517875f\", // Wrapped UST Token\n  \"0x24834bbec7e39ef42f4a75eaf8e5b6486d3f0e57\", // Wrapped LUNA Token\n];\n\nexport const JUPITER_SWAP_BASE_URL = \"https://jup.ag/swap\";\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { StateSafeWormholeWrappedInfo } from \"../hooks/useCheckIfWormholeWrapped\";\nimport { ForeignAssetInfo } from \"../hooks/useFetchForeignAsset\";\nimport {\n  DataWrapper,\n  errorDataWrapper,\n  fetchDataWrapper,\n  getEmptyDataWrapper,\n  receiveDataWrapper,\n} from \"./helpers\";\nimport { ParsedTokenAccount, Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\n// these all are optional so NFT could share TokenSelectors\nexport interface NFTParsedTokenAccount extends ParsedTokenAccount {\n  tokenId?: string;\n  uri?: string;\n  animation_url?: string | null;\n  external_url?: string | null;\n  image?: string;\n  image_256?: string;\n  nftName?: string;\n  description?: string;\n}\n\nexport interface NFTState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  isSourceAssetWormholeWrapped: boolean | undefined;\n  originChain: ChainId | undefined;\n  originAsset: string | undefined;\n  originTokenId: string | undefined;\n  sourceWalletAddress: string | undefined;\n  sourceParsedTokenAccount: NFTParsedTokenAccount | undefined;\n  sourceParsedTokenAccounts: DataWrapper<NFTParsedTokenAccount[]>;\n  targetChain: ChainId;\n  targetAddressHex: string | undefined;\n  targetAsset: DataWrapper<ForeignAssetInfo>;\n  transferTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isRedeeming: boolean;\n  redeemTx: Transaction | undefined;\n  isRecovery: boolean;\n}\n\nconst initialState: NFTState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  isSourceAssetWormholeWrapped: false,\n  sourceWalletAddress: undefined,\n  sourceParsedTokenAccount: undefined,\n  sourceParsedTokenAccounts: getEmptyDataWrapper(),\n  originChain: undefined,\n  originAsset: undefined,\n  originTokenId: undefined,\n  targetChain: CHAIN_ID_ETH,\n  targetAddressHex: undefined,\n  targetAsset: getEmptyDataWrapper(),\n  transferTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isRedeeming: false,\n  redeemTx: undefined,\n  isRecovery: false,\n};\n\nexport const nftSlice = createSlice({\n  name: \"nft\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceWormholeWrappedInfo: (\n      state,\n      action: PayloadAction<StateSafeWormholeWrappedInfo>\n    ) => {\n      state.isSourceAssetWormholeWrapped = action.payload.isWrapped;\n      state.originChain = action.payload.chainId;\n      state.originAsset = action.payload.assetAddress;\n      state.originTokenId = action.payload.tokenId;\n    },\n    setSourceWalletAddress: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceWalletAddress = action.payload;\n    },\n    setSourceParsedTokenAccount: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount | undefined>\n    ) => {\n      state.sourceParsedTokenAccount = action.payload;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      state.targetAddressHex = undefined;\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.originChain = undefined;\n      state.originAsset = undefined;\n      state.originTokenId = undefined;\n    },\n    setSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[] | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = action.payload\n        ? receiveDataWrapper(action.payload)\n        : getEmptyDataWrapper();\n    },\n    fetchSourceParsedTokenAccounts: (state) => {\n      state.sourceParsedTokenAccounts = fetchDataWrapper();\n    },\n    errorSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.sourceParsedTokenAccounts = errorDataWrapper(\n        action.payload || \"An unknown error occurred.\"\n      );\n    },\n    receiveSourceParsedTokenAccounts: (\n      state,\n      action: PayloadAction<NFTParsedTokenAccount[]>\n    ) => {\n      state.sourceParsedTokenAccounts = receiveDataWrapper(action.payload);\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      state.targetAddressHex = undefined;\n      // clear targetAsset so that components that fire before useFetchTargetAsset don't get stale data\n      state.targetAsset = getEmptyDataWrapper();\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceParsedTokenAccount = undefined;\n        state.isSourceAssetWormholeWrapped = undefined;\n        state.originChain = undefined;\n        state.originAsset = undefined;\n        state.originTokenId = undefined;\n        state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      }\n    },\n    setTargetAddressHex: (state, action: PayloadAction<string | undefined>) => {\n      state.targetAddressHex = action.payload;\n    },\n    setTargetAsset: (\n      state,\n      action: PayloadAction<DataWrapper<ForeignAssetInfo>>\n    ) => {\n      state.targetAsset = action.payload;\n    },\n    setTransferTx: (state, action: PayloadAction<Transaction>) => {\n      state.transferTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsRedeeming: (state, action: PayloadAction<boolean>) => {\n      state.isRedeeming = action.payload;\n    },\n    setRedeemTx: (state, action: PayloadAction<Transaction>) => {\n      state.redeemTx = action.payload;\n      state.isRedeeming = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n    setRecoveryVaa: (\n      state,\n      action: PayloadAction<{\n        vaa: any;\n        parsedPayload: {\n          targetChain: ChainId;\n          targetAddress: string;\n          originChain: ChainId;\n          originAddress: string; //TODO maximum amount of fields\n        };\n      }>\n    ) => {\n      const prevTargetChain = state.targetChain;\n      state.signedVAAHex = action.payload.vaa;\n      state.targetChain = action.payload.parsedPayload.targetChain;\n      if (state.sourceChain === action.payload.parsedPayload.targetChain) {\n        state.sourceChain = prevTargetChain;\n      }\n      state.sourceParsedTokenAccount = undefined;\n      state.sourceParsedTokenAccounts = getEmptyDataWrapper();\n      state.targetAsset = getEmptyDataWrapper();\n      state.isSourceAssetWormholeWrapped = undefined;\n      state.targetAddressHex = action.payload.parsedPayload.targetAddress;\n      state.originChain = action.payload.parsedPayload.originChain;\n      state.originAsset = action.payload.parsedPayload.originAddress;\n      state.originTokenId = undefined;\n      state.activeStep = 3;\n      state.isRecovery = true;\n    },\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceWormholeWrappedInfo,\n  setSourceWalletAddress,\n  setSourceParsedTokenAccount,\n  setSourceParsedTokenAccounts,\n  receiveSourceParsedTokenAccounts,\n  errorSourceParsedTokenAccounts,\n  fetchSourceParsedTokenAccounts,\n  setTargetChain,\n  setTargetAddressHex,\n  setTargetAsset,\n  setTransferTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsRedeeming,\n  setRedeemTx,\n  reset,\n  setRecoveryVaa,\n} = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","import {\n  Button,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { ReactChild } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    width: \"100%\",\n  },\n  loader: {\n    position: \"absolute\",\n    bottom: 0,\n    left: \"50%\",\n    marginLeft: -12,\n    marginBottom: 6,\n  },\n  error: {\n    marginTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n}));\n\nexport default function ButtonWithLoader({\n  disabled,\n  onClick,\n  showLoader,\n  error,\n  children,\n}: {\n  disabled?: boolean;\n  onClick: () => void;\n  showLoader?: boolean;\n  error?: string;\n  children: ReactChild;\n}) {\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.root}>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          className={classes.button}\n          disabled={disabled}\n          onClick={onClick}\n        >\n          {children}\n        </Button>\n        {showLoader ? (\n          <CircularProgress\n            size={24}\n            color=\"inherit\"\n            className={classes.loader}\n          />\n        ) : null}\n      </div>\n      {error ? (\n        <Typography variant=\"body2\" color=\"error\" className={classes.error}>\n          {error}\n        </Typography>\n      ) : null}\n    </>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_ETH,\n  CHAIN_ID_SOLANA,\n} from \"@certusone/wormhole-sdk\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Transaction } from \"./transferSlice\";\n\nconst LAST_STEP = 3;\n\ntype Steps = 0 | 1 | 2 | 3;\n\nexport interface AttestState {\n  activeStep: Steps;\n  sourceChain: ChainId;\n  sourceAsset: string;\n  targetChain: ChainId;\n  attestTx: Transaction | undefined;\n  signedVAAHex: string | undefined;\n  isSending: boolean;\n  isCreating: boolean;\n  createTx: Transaction | undefined;\n}\n\nconst initialState: AttestState = {\n  activeStep: 0,\n  sourceChain: CHAIN_ID_SOLANA,\n  sourceAsset: \"\",\n  targetChain: CHAIN_ID_ETH,\n  attestTx: undefined,\n  signedVAAHex: undefined,\n  isSending: false,\n  isCreating: false,\n  createTx: undefined,\n};\n\nexport const attestSlice = createSlice({\n  name: \"attest\",\n  initialState,\n  reducers: {\n    incrementStep: (state) => {\n      if (state.activeStep < LAST_STEP) state.activeStep++;\n    },\n    decrementStep: (state) => {\n      if (state.activeStep > 0) state.activeStep--;\n    },\n    setStep: (state, action: PayloadAction<Steps>) => {\n      state.activeStep = action.payload;\n    },\n    setSourceChain: (state, action: PayloadAction<ChainId>) => {\n      const prevSourceChain = state.sourceChain;\n      state.sourceChain = action.payload;\n      state.sourceAsset = \"\";\n      if (state.targetChain === action.payload) {\n        state.targetChain = prevSourceChain;\n      }\n    },\n    setSourceAsset: (state, action: PayloadAction<string>) => {\n      state.sourceAsset = action.payload;\n    },\n    setTargetChain: (state, action: PayloadAction<ChainId>) => {\n      const prevTargetChain = state.targetChain;\n      state.targetChain = action.payload;\n      if (state.sourceChain === action.payload) {\n        state.sourceChain = prevTargetChain;\n        state.activeStep = 0;\n        state.sourceAsset = \"\";\n      }\n    },\n    setAttestTx: (state, action: PayloadAction<Transaction>) => {\n      state.attestTx = action.payload;\n    },\n    setSignedVAAHex: (state, action: PayloadAction<string>) => {\n      state.signedVAAHex = action.payload;\n      state.isSending = false;\n      state.activeStep = 3;\n    },\n    setIsSending: (state, action: PayloadAction<boolean>) => {\n      state.isSending = action.payload;\n    },\n    setIsCreating: (state, action: PayloadAction<boolean>) => {\n      state.isCreating = action.payload;\n    },\n    setCreateTx: (state, action: PayloadAction<Transaction>) => {\n      state.createTx = action.payload;\n      state.isCreating = false;\n    },\n    reset: (state) => ({\n      ...initialState,\n      sourceChain: state.sourceChain,\n      targetChain: state.targetChain,\n    }),\n  },\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  setStep,\n  setSourceChain,\n  setSourceAsset,\n  setTargetChain,\n  setAttestTx,\n  setSignedVAAHex,\n  setIsSending,\n  setIsCreating,\n  setCreateTx,\n  reset,\n} = attestSlice.actions;\n\nexport default attestSlice.reducer;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  createWrappedOnEth,\n  createWrappedOnSolana,\n  createWrappedOnTerra,\n  updateWrappedOnEth,\n  updateWrappedOnTerra,\n  updateWrappedOnSolana,\n  postVaaSolanaWithRetry,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useAttestSignedVAA from \"./useAttestSignedVAA\";\nimport { setCreateTx, setIsCreating } from \"../store/attestSlice\";\nimport {\n  selectAttestIsCreating,\n  selectAttestTargetChain,\n  selectTerraFeeDenom,\n} from \"../store/selectors\";\nimport {\n  getTokenBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const receipt = shouldUpdate\n      ? await updateWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await createWrappedOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setCreateTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, // TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean\n) {\n  dispatch(setIsCreating(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolanaWithRetry(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA),\n      MAX_VAA_UPLOAD_RETRIES_SOLANA\n    );\n    const transaction = shouldUpdate\n      ? await updateWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await createWrappedOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setCreateTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array,\n  shouldUpdate: boolean,\n  feeDenom: string\n) {\n  dispatch(setIsCreating(true));\n  try {\n    const msg = shouldUpdate\n      ? await updateWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        )\n      : await createWrappedOnTerra(\n          TERRA_TOKEN_BRIDGE_ADDRESS,\n          wallet.terraAddress,\n          signedVAA\n        );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Create Wrapped\",\n      [feeDenom]\n    );\n    dispatch(\n      setCreateTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsCreating(false));\n  }\n}\n\nexport function useHandleCreateWrapped(shouldUpdate: boolean) {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectAttestTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const signedVAA = useAttestSignedVAA();\n  const isCreating = useSelector(selectAttestIsCreating);\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const handleCreateClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && !!signedVAA) {\n      evm(\n        dispatch,\n        enqueueSnackbar,\n        signer,\n        signedVAA,\n        targetChain,\n        shouldUpdate\n      );\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      !!signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        shouldUpdate\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && !!signedVAA) {\n      terra(\n        dispatch,\n        enqueueSnackbar,\n        terraWallet,\n        signedVAA,\n        shouldUpdate,\n        terraFeeDenom\n      );\n    } else {\n      // enqueueSnackbar(\n      //   \"Creating wrapped tokens on this chain is not yet supported\",\n      //   {\n      //     variant: \"error\",\n      //   }\n      // );\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    signedVAA,\n    signer,\n    shouldUpdate,\n    terraFeeDenom,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleCreateClick,\n      disabled: !!isCreating,\n      showLoader: !!isCreating,\n    }),\n    [handleCreateClick, isCreating]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectAttestSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useAttestSignedVAA() {\n  const signedVAAHex = useSelector(selectAttestSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  canonicalAddress,\n  isNativeDenom,\n  isNativeTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { LCDClient, isTxError } from \"@terra-money/terra.js\";\nimport { ConnectedWallet, TxResult } from \"@terra-money/wallet-provider\";\nimport axios from \"axios\";\n// import { TerraTokenMetadata } from \"../hooks/useTerraTokenMap\";\nimport { TERRA_GAS_PRICES_URL, TERRA_HOST } from \"./consts\";\n\nexport const NATIVE_TERRA_DECIMALS = 6;\n\nexport const getNativeTerraIcon = (symbol = \"\") =>\n  `https://assets.terra.money/icon/60/${symbol}.png`;\n\n// inspired by https://github.com/terra-money/station/blob/dca7de43958ce075c6e46605622203b9859b0e14/src/lib/utils/format.ts#L38\nexport const formatNativeDenom = (denom = \"\"): string => {\n  const unit = denom.slice(1).toUpperCase();\n  const isValidTerra = isNativeTerra(denom);\n  return denom === \"uluna\"\n    ? \"Luna\"\n    : isValidTerra\n    ? unit.slice(0, 2) + \"T\"\n    : \"\";\n};\n\nexport const formatTerraNativeBalance = (balance = \"\"): string =>\n  formatUnits(balance, 6);\n\nexport async function waitForTerraExecution(transaction: TxResult) {\n  const lcd = new LCDClient(TERRA_HOST);\n  let info;\n  while (!info) {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    try {\n      info = await lcd.tx.txInfo(transaction.result.txhash);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (isTxError(info)) {\n    throw new Error(\n      `Tx ${transaction.result.txhash}: error code ${info.code}: ${info.raw_log}`\n    );\n  }\n  return info;\n}\n\nexport const isValidTerraAddress = (address: string) => {\n  if (isNativeDenom(address)) {\n    return true;\n  }\n  try {\n    const startsWithTerra = address && address.startsWith(\"terra\");\n    const isParseable = canonicalAddress(address);\n    const isLength20 = isParseable.length === 20;\n    return !!(startsWithTerra && isParseable && isLength20);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport async function postWithFees(\n  wallet: ConnectedWallet,\n  msgs: any[],\n  memo: string,\n  feeDenoms: string[]\n) {\n  // don't try/catch, let errors propagate\n  const lcd = new LCDClient(TERRA_HOST);\n  //let gasPrices = await lcd.config.gasPrices //Unsure if the values returned from this are hardcoded or not.\n  //Thus, we are going to pull it directly from the current FCD.\n  const gasPrices = await axios\n    .get(TERRA_GAS_PRICES_URL)\n    .then((result) => result.data);\n\n  const account = await lcd.auth.accountInfo(wallet.walletAddress);\n\n  const feeEstimate = await lcd.tx.estimateFee(\n    [\n      {\n        sequenceNumber: account.getSequenceNumber(),\n        publicKey: account.getPublicKey(),\n      },\n    ],\n    {\n      msgs: [...msgs],\n      memo,\n      feeDenoms,\n      gasPrices,\n    }\n  );\n\n  const result = await wallet.post({\n    msgs: [...msgs],\n    memo,\n    feeDenoms,\n    gasPrices,\n    fee: feeEstimate,\n  });\n\n  return result;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  getClaimAddressSolana,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  postVaaSolanaWithRetry,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  createMetaOnSolana,\n  getForeignAssetSol,\n  isNFTVAASolanaNative,\n  redeemOnEth,\n  redeemOnSolana,\n} from \"@certusone/wormhole-sdk/lib/esm/nft_bridge\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Alert } from \"@material-ui/lab\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/nftSlice\";\nimport { selectNFTIsRedeeming, selectNFTTargetChain } from \"../store/selectors\";\nimport {\n  getNFTBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_NFT_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport { getMetadataAddress } from \"../utils/metaplex\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport useNFTSignedVAA from \"./useNFTSignedVAA\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = await redeemOnEth(\n      getNFTBridgeAddressForChain(chainId),\n      signer,\n      signedVAA\n    );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const claimAddress = await getClaimAddressSolana(\n      SOL_NFT_BRIDGE_ADDRESS,\n      signedVAA\n    );\n    const claimInfo = await connection.getAccountInfo(claimAddress);\n    let txid;\n    if (!claimInfo) {\n      await postVaaSolanaWithRetry(\n        connection,\n        wallet.signTransaction,\n        SOL_BRIDGE_ADDRESS,\n        payerAddress,\n        Buffer.from(signedVAA),\n        MAX_VAA_UPLOAD_RETRIES_SOLANA\n      );\n      // TODO: how do we retry in between these steps\n      const transaction = await redeemOnSolana(\n        connection,\n        SOL_BRIDGE_ADDRESS,\n        SOL_NFT_BRIDGE_ADDRESS,\n        payerAddress,\n        signedVAA\n      );\n      txid = await signSendAndConfirm(wallet, connection, transaction);\n      // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    }\n    const isNative = await isNFTVAASolanaNative(signedVAA);\n    if (!isNative) {\n      const { parse_vaa } = await import(\n        \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n      );\n      const parsedVAA = parse_vaa(signedVAA);\n      const { originChain, originAddress, tokenId } = parseNFTPayload(\n        Buffer.from(new Uint8Array(parsedVAA.payload))\n      );\n      const mintAddress = await getForeignAssetSol(\n        SOL_NFT_BRIDGE_ADDRESS,\n        originChain,\n        hexToUint8Array(originAddress),\n        arrayify(tokenId)\n      );\n      const [metadataAddress] = await getMetadataAddress(mintAddress);\n      const metadata = await connection.getAccountInfo(metadataAddress);\n      if (!metadata) {\n        const transaction = await createMetaOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_NFT_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n        txid = await signSendAndConfirm(wallet, connection, transaction);\n      }\n    }\n    dispatch(setRedeemTx({ id: txid || \"\", block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleNFTRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectNFTTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const signedVAA = useNFTSignedVAA();\n  const isRedeeming = useSelector(selectNFTIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA\n      );\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n  ]);\n  return useMemo(\n    () => ({\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming]\n  );\n}\n","import { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectNFTSignedVAAHex } from \"../store/selectors\";\nimport { hexToUint8Array } from \"@certusone/wormhole-sdk\";\n\nexport default function useNFTSignedVAA() {\n  const signedVAAHex = useSelector(selectNFTSignedVAAHex);\n  const signedVAA = useMemo(\n    () => (signedVAAHex ? hexToUint8Array(signedVAAHex) : undefined),\n    [signedVAAHex]\n  );\n  return signedVAA;\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  getEmitterAddressEth,\n  getEmitterAddressSolana,\n  getEmitterAddressTerra,\n  hexToNativeString,\n  hexToUint8Array,\n  isEVMChain,\n  parseNFTPayload,\n  parseSequenceFromLogEth,\n  parseSequenceFromLogSolana,\n  parseSequenceFromLogTerra,\n  parseTransferPayload,\n  uint8ArrayToHex,\n} from \"@certusone/wormhole-sdk\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Card,\n  CircularProgress,\n  Container,\n  Divider,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Connection } from \"@solana/web3.js\";\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { ethers } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport useIsWalletReady from \"../hooks/useIsWalletReady\";\nimport { COLORS } from \"../muiTheme\";\nimport { setRecoveryVaa as setRecoveryNFTVaa } from \"../store/nftSlice\";\nimport { setRecoveryVaa } from \"../store/transferSlice\";\nimport {\n  CHAINS,\n  CHAINS_BY_ID,\n  CHAINS_WITH_NFT_SUPPORT,\n  getBridgeAddressForChain,\n  getNFTBridgeAddressForChain,\n  getTokenBridgeAddressForChain,\n  SOLANA_HOST,\n  SOL_NFT_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_HOST,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n  WORMHOLE_RPC_HOSTS,\n} from \"../utils/consts\";\nimport { getSignedVAAWithRetry } from \"../utils/getSignedVAAWithRetry\";\nimport parseError from \"../utils/parseError\";\nimport ButtonWithLoader from \"./ButtonWithLoader\";\nimport ChainSelect from \"./ChainSelect\";\nimport KeyAndBalance from \"./KeyAndBalance\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainCard: {\n    padding: \"32px 32px 16px\",\n    backgroundColor: COLORS.whiteWithTransparency,\n  },\n  advancedContainer: {\n    padding: theme.spacing(2, 0),\n  },\n}));\n\nasync function evm(\n  provider: ethers.providers.Web3Provider,\n  tx: string,\n  enqueueSnackbar: any,\n  chainId: ChainId,\n  nft: boolean\n) {\n  try {\n    const receipt = await provider.getTransactionReceipt(tx);\n    const sequence = parseSequenceFromLogEth(\n      receipt,\n      getBridgeAddressForChain(chainId)\n    );\n    const emitterAddress = getEmitterAddressEth(\n      nft\n        ? getNFTBridgeAddressForChain(chainId)\n        : getTokenBridgeAddressForChain(chainId)\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      chainId,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function solana(tx: string, enqueueSnackbar: any, nft: boolean) {\n  try {\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    const info = await connection.getTransaction(tx);\n    if (!info) {\n      throw new Error(\"An error occurred while fetching the transaction info\");\n    }\n    const sequence = parseSequenceFromLogSolana(info);\n    const emitterAddress = await getEmitterAddressSolana(\n      nft ? SOL_NFT_BRIDGE_ADDRESS : SOL_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_SOLANA,\n      emitterAddress,\n      sequence.toString(),\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nasync function terra(tx: string, enqueueSnackbar: any) {\n  try {\n    const lcd = new LCDClient(TERRA_HOST);\n    const info = await lcd.tx.txInfo(tx);\n    const sequence = parseSequenceFromLogTerra(info);\n    if (!sequence) {\n      throw new Error(\"Sequence not found\");\n    }\n    const emitterAddress = await getEmitterAddressTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS\n    );\n    const { vaaBytes } = await getSignedVAAWithRetry(\n      CHAIN_ID_TERRA,\n      emitterAddress,\n      sequence,\n      WORMHOLE_RPC_HOSTS.length\n    );\n    return { vaa: uint8ArrayToHex(vaaBytes), error: null };\n  } catch (e) {\n    console.error(e);\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    return { vaa: null, error: parseError(e) };\n  }\n}\n\nexport default function Recovery() {\n  const classes = useStyles();\n  const { push } = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const { provider } = useEthereumProvider();\n  const [type, setType] = useState(\"Token\");\n  const isNFT = type === \"NFT\";\n  const [recoverySourceChain, setRecoverySourceChain] =\n    useState(CHAIN_ID_SOLANA);\n  const [recoverySourceTx, setRecoverySourceTx] = useState(\"\");\n  const [recoverySourceTxIsLoading, setRecoverySourceTxIsLoading] =\n    useState(false);\n  const [recoverySourceTxError, setRecoverySourceTxError] = useState(\"\");\n  const [recoverySignedVAA, setRecoverySignedVAA] = useState(\"\");\n  const [recoveryParsedVAA, setRecoveryParsedVAA] = useState<any>(null);\n  const { isReady, statusMessage } = useIsWalletReady(recoverySourceChain);\n  const walletConnectError =\n    isEVMChain(recoverySourceChain) && !isReady ? statusMessage : \"\";\n  const parsedPayload = useMemo(() => {\n    try {\n      return recoveryParsedVAA?.payload\n        ? isNFT\n          ? parseNFTPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n          : parseTransferPayload(\n              Buffer.from(new Uint8Array(recoveryParsedVAA.payload))\n            )\n        : null;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }, [recoveryParsedVAA, isNFT]);\n\n  const { search } = useLocation();\n  const query = useMemo(() => new URLSearchParams(search), [search]);\n  const pathSourceChain = query.get(\"sourceChain\");\n  const pathSourceTransaction = query.get(\"transactionId\");\n\n  //This effect initializes the state based on the path params.\n  useEffect(() => {\n    if (!pathSourceChain && !pathSourceTransaction) {\n      return;\n    }\n    try {\n      const sourceChain: ChainId =\n        CHAINS_BY_ID[parseFloat(pathSourceChain || \"\") as ChainId]?.id;\n\n      if (sourceChain) {\n        setRecoverySourceChain(sourceChain);\n      }\n      if (pathSourceTransaction) {\n        setRecoverySourceTx(pathSourceTransaction);\n      }\n    } catch (e) {\n      console.error(e);\n      console.error(\"Invalid path params specified.\");\n    }\n  }, [pathSourceChain, pathSourceTransaction]);\n\n  useEffect(() => {\n    if (recoverySourceTx && (!isEVMChain(recoverySourceChain) || isReady)) {\n      let cancelled = false;\n      if (isEVMChain(recoverySourceChain) && provider) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await evm(\n            provider,\n            recoverySourceTx,\n            enqueueSnackbar,\n            recoverySourceChain,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_SOLANA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await solana(\n            recoverySourceTx,\n            enqueueSnackbar,\n            isNFT\n          );\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      } else if (recoverySourceChain === CHAIN_ID_TERRA) {\n        setRecoverySourceTxError(\"\");\n        setRecoverySourceTxIsLoading(true);\n        (async () => {\n          const { vaa, error } = await terra(recoverySourceTx, enqueueSnackbar);\n          if (!cancelled) {\n            setRecoverySourceTxIsLoading(false);\n            if (vaa) {\n              setRecoverySignedVAA(vaa);\n            }\n            if (error) {\n              setRecoverySourceTxError(error);\n            }\n          }\n        })();\n      }\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [\n    recoverySourceChain,\n    recoverySourceTx,\n    provider,\n    enqueueSnackbar,\n    isNFT,\n    isReady,\n  ]);\n  const handleTypeChange = useCallback((event) => {\n    setRecoverySourceChain((prevChain) =>\n      event.target.value === \"NFT\" &&\n      !CHAINS_WITH_NFT_SUPPORT.find((chain) => chain.id === prevChain)\n        ? CHAIN_ID_SOLANA\n        : prevChain\n    );\n    setType(event.target.value);\n  }, []);\n  const handleSourceChainChange = useCallback((event) => {\n    setRecoverySourceTx(\"\");\n    setRecoverySourceChain(event.target.value);\n  }, []);\n  const handleSourceTxChange = useCallback((event) => {\n    setRecoverySourceTx(event.target.value.trim());\n  }, []);\n  const handleSignedVAAChange = useCallback((event) => {\n    setRecoverySignedVAA(event.target.value.trim());\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n    if (recoverySignedVAA) {\n      (async () => {\n        try {\n          const { parse_vaa } = await import(\n            \"@certusone/wormhole-sdk/lib/esm/solana/core/bridge\"\n          );\n          const parsedVAA = parse_vaa(hexToUint8Array(recoverySignedVAA));\n          if (!cancelled) {\n            setRecoveryParsedVAA(parsedVAA);\n          }\n        } catch (e) {\n          console.log(e);\n          if (!cancelled) {\n            setRecoveryParsedVAA(null);\n          }\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [recoverySignedVAA]);\n  const parsedPayloadTargetChain = parsedPayload?.targetChain;\n  const enableRecovery = recoverySignedVAA && parsedPayloadTargetChain;\n  const handleRecoverClick = useCallback(() => {\n    if (enableRecovery && recoverySignedVAA && parsedPayloadTargetChain) {\n      // TODO: make recovery reducer\n      if (isNFT) {\n        dispatch(\n          setRecoveryNFTVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n            },\n          })\n        );\n        push(\"/nft\");\n      } else {\n        dispatch(\n          setRecoveryVaa({\n            vaa: recoverySignedVAA,\n            parsedPayload: {\n              targetChain: parsedPayload.targetChain,\n              targetAddress: parsedPayload.targetAddress,\n              originChain: parsedPayload.originChain,\n              originAddress: parsedPayload.originAddress,\n              amount:\n                \"amount\" in parsedPayload\n                  ? parsedPayload.amount.toString()\n                  : \"\",\n            },\n          })\n        );\n        push(\"/transfer\");\n      }\n    }\n  }, [\n    dispatch,\n    enableRecovery,\n    recoverySignedVAA,\n    parsedPayloadTargetChain,\n    parsedPayload,\n    isNFT,\n    push,\n  ]);\n  return (\n    <Container maxWidth=\"md\">\n      <Card className={classes.mainCard}>\n        <Alert severity=\"info\" variant=\"outlined\">\n          If you have sent your tokens but have not redeemed them, you may paste\n          in the Source Transaction ID (from Step 3) to resume your transfer.\n        </Alert>\n        <TextField\n          select\n          variant=\"outlined\"\n          label=\"Type\"\n          disabled={!!recoverySignedVAA}\n          value={type}\n          onChange={handleTypeChange}\n          fullWidth\n          margin=\"normal\"\n        >\n          <MenuItem value=\"Token\">Token</MenuItem>\n          <MenuItem value=\"NFT\">NFT</MenuItem>\n        </TextField>\n        <ChainSelect\n          select\n          variant=\"outlined\"\n          label=\"Source Chain\"\n          disabled={!!recoverySignedVAA}\n          value={recoverySourceChain}\n          onChange={handleSourceChainChange}\n          fullWidth\n          margin=\"normal\"\n          chains={isNFT ? CHAINS_WITH_NFT_SUPPORT : CHAINS}\n        />\n        {isEVMChain(recoverySourceChain) ? (\n          <KeyAndBalance chainId={recoverySourceChain} />\n        ) : null}\n        <TextField\n          variant=\"outlined\"\n          label=\"Source Tx (paste here)\"\n          disabled={\n            !!recoverySignedVAA ||\n            recoverySourceTxIsLoading ||\n            !!walletConnectError\n          }\n          value={recoverySourceTx}\n          onChange={handleSourceTxChange}\n          error={!!recoverySourceTxError || !!walletConnectError}\n          helperText={recoverySourceTxError || walletConnectError}\n          fullWidth\n          margin=\"normal\"\n        />\n        <ButtonWithLoader\n          onClick={handleRecoverClick}\n          disabled={!enableRecovery}\n          showLoader={recoverySourceTxIsLoading}\n        >\n          Recover\n        </ButtonWithLoader>\n        <div className={classes.advancedContainer}>\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              Advanced\n            </AccordionSummary>\n            <AccordionDetails>\n              <div>\n                <Box position=\"relative\">\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Signed VAA (Hex)\"\n                    disabled={recoverySourceTxIsLoading}\n                    value={recoverySignedVAA || \"\"}\n                    onChange={handleSignedVAAChange}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                  {recoverySourceTxIsLoading ? (\n                    <Box\n                      position=\"absolute\"\n                      style={{\n                        top: 0,\n                        right: 0,\n                        left: 0,\n                        bottom: 0,\n                        backgroundColor: \"rgba(0,0,0,0.5)\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <CircularProgress />\n                    </Box>\n                  ) : null}\n                </Box>\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Chain\"\n                  disabled\n                  value={recoveryParsedVAA?.emitter_chain || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Emitter Address\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      hexToNativeString(\n                        recoveryParsedVAA.emitter_address,\n                        recoveryParsedVAA.emitter_chain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Sequence\"\n                  disabled\n                  value={recoveryParsedVAA?.sequence || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Timestamp\"\n                  disabled\n                  value={\n                    (recoveryParsedVAA &&\n                      new Date(\n                        recoveryParsedVAA.timestamp * 1000\n                      ).toLocaleString()) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <Box my={4}>\n                  <Divider />\n                </Box>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Chain\"\n                  disabled\n                  value={parsedPayload?.originChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Origin Token Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.originAddress,\n                        parsedPayload.originChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Origin Token ID\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.tokenId || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                ) : null}\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Chain\"\n                  disabled\n                  value={parsedPayload?.targetChain.toString() || \"\"}\n                  fullWidth\n                  margin=\"normal\"\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Target Address\"\n                  disabled\n                  value={\n                    (parsedPayload &&\n                      hexToNativeString(\n                        parsedPayload.targetAddress,\n                        parsedPayload.targetChain\n                      )) ||\n                    \"\"\n                  }\n                  fullWidth\n                  margin=\"normal\"\n                />\n                {isNFT ? null : (\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Amount\"\n                    disabled\n                    // @ts-ignore\n                    value={parsedPayload?.amount.toString() || \"\"}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                )}\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </Card>\n    </Container>\n  );\n}\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n  postVaaSolanaWithRetry,\n  redeemAndUnwrapOnSolana,\n  redeemOnEth,\n  redeemOnEthNative,\n  redeemOnSolana,\n  redeemOnTerra,\n} from \"@certusone/wormhole-sdk\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport {\n  ConnectedWallet,\n  useConnectedWallet,\n} from \"@terra-money/wallet-provider\";\nimport { Signer } from \"ethers\";\nimport { useSnackbar } from \"notistack\";\nimport { useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEthereumProvider } from \"../contexts/EthereumProviderContext\";\nimport { useSolanaWallet } from \"../contexts/SolanaWalletContext\";\nimport useTransferSignedVAA from \"./useTransferSignedVAA\";\nimport {\n  selectTerraFeeDenom,\n  selectTransferIsRedeeming,\n  selectTransferTargetChain,\n} from \"../store/selectors\";\nimport { setIsRedeeming, setRedeemTx } from \"../store/transferSlice\";\nimport {\n  getTokenBridgeAddressForChain,\n  MAX_VAA_UPLOAD_RETRIES_SOLANA,\n  SOLANA_HOST,\n  SOL_BRIDGE_ADDRESS,\n  SOL_TOKEN_BRIDGE_ADDRESS,\n  TERRA_TOKEN_BRIDGE_ADDRESS,\n} from \"../utils/consts\";\nimport parseError from \"../utils/parseError\";\nimport { signSendAndConfirm } from \"../utils/solana\";\nimport { Alert } from \"@material-ui/lab\";\nimport { postWithFees } from \"../utils/terra\";\n\nasync function evm(\n  dispatch: any,\n  enqueueSnackbar: any,\n  signer: Signer,\n  signedVAA: Uint8Array,\n  isNative: boolean,\n  chainId: ChainId\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const receipt = isNative\n      ? await redeemOnEthNative(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        )\n      : await redeemOnEth(\n          getTokenBridgeAddressForChain(chainId),\n          signer,\n          signedVAA\n        );\n    dispatch(\n      setRedeemTx({ id: receipt.transactionHash, block: receipt.blockNumber })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function solana(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: WalletContextState,\n  payerAddress: string, //TODO: we may not need this since we have wallet\n  signedVAA: Uint8Array,\n  isNative: boolean\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    if (!wallet.signTransaction) {\n      throw new Error(\"wallet.signTransaction is undefined\");\n    }\n    const connection = new Connection(SOLANA_HOST, \"confirmed\");\n    await postVaaSolanaWithRetry(\n      connection,\n      wallet.signTransaction,\n      SOL_BRIDGE_ADDRESS,\n      payerAddress,\n      Buffer.from(signedVAA),\n      MAX_VAA_UPLOAD_RETRIES_SOLANA\n    );\n    // TODO: how do we retry in between these steps\n    const transaction = isNative\n      ? await redeemAndUnwrapOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        )\n      : await redeemOnSolana(\n          connection,\n          SOL_BRIDGE_ADDRESS,\n          SOL_TOKEN_BRIDGE_ADDRESS,\n          payerAddress,\n          signedVAA\n        );\n    const txid = await signSendAndConfirm(wallet, connection, transaction);\n    // TODO: didn't want to make an info call we didn't need, can we get the block without it by modifying the above call?\n    dispatch(setRedeemTx({ id: txid, block: 1 }));\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nasync function terra(\n  dispatch: any,\n  enqueueSnackbar: any,\n  wallet: ConnectedWallet,\n  signedVAA: Uint8Array,\n  feeDenom: string\n) {\n  dispatch(setIsRedeeming(true));\n  try {\n    const msg = await redeemOnTerra(\n      TERRA_TOKEN_BRIDGE_ADDRESS,\n      wallet.terraAddress,\n      signedVAA\n    );\n    const result = await postWithFees(\n      wallet,\n      [msg],\n      \"Wormhole - Complete Transfer\",\n      [feeDenom]\n    );\n    dispatch(\n      setRedeemTx({ id: result.result.txhash, block: result.result.height })\n    );\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"success\">Transaction confirmed</Alert>,\n    });\n  } catch (e) {\n    enqueueSnackbar(null, {\n      content: <Alert severity=\"error\">{parseError(e)}</Alert>,\n    });\n    dispatch(setIsRedeeming(false));\n  }\n}\n\nexport function useHandleRedeem() {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const targetChain = useSelector(selectTransferTargetChain);\n  const solanaWallet = useSolanaWallet();\n  const solPK = solanaWallet?.publicKey;\n  const { signer } = useEthereumProvider();\n  const terraWallet = useConnectedWallet();\n  const terraFeeDenom = useSelector(selectTerraFeeDenom);\n  const signedVAA = useTransferSignedVAA();\n  const isRedeeming = useSelector(selectTransferIsRedeeming);\n  const handleRedeemClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, false, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        false\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA, terraFeeDenom);\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    terraFeeDenom,\n  ]);\n\n  const handleRedeemNativeClick = useCallback(() => {\n    if (isEVMChain(targetChain) && !!signer && signedVAA) {\n      evm(dispatch, enqueueSnackbar, signer, signedVAA, true, targetChain);\n    } else if (\n      targetChain === CHAIN_ID_SOLANA &&\n      !!solanaWallet &&\n      !!solPK &&\n      signedVAA\n    ) {\n      solana(\n        dispatch,\n        enqueueSnackbar,\n        solanaWallet,\n        solPK.toString(),\n        signedVAA,\n        true\n      );\n    } else if (targetChain === CHAIN_ID_TERRA && !!terraWallet && signedVAA) {\n      terra(dispatch, enqueueSnackbar, terraWallet, signedVAA, terraFeeDenom); //TODO isNative = true\n    } else {\n    }\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    targetChain,\n    signer,\n    signedVAA,\n    solanaWallet,\n    solPK,\n    terraWallet,\n    terraFeeDenom,\n  ]);\n\n  return useMemo(\n    () => ({\n      handleNativeClick: handleRedeemNativeClick,\n      handleClick: handleRedeemClick,\n      disabled: !!isRedeeming,\n      showLoader: !!isRedeeming,\n    }),\n    [handleRedeemClick, isRedeeming, handleRedeemNativeClick]\n  );\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport {\n  AccountInfo,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nexport async function signSendAndConfirm(\n  wallet: WalletContextState,\n  connection: Connection,\n  transaction: Transaction\n) {\n  if (!wallet.signTransaction) {\n    throw new Error(\"wallet.signTransaction is undefined\");\n  }\n  const signed = await wallet.signTransaction(transaction);\n  const txid = await connection.sendRawTransaction(signed.serialize());\n  await connection.confirmTransaction(txid);\n  return txid;\n}\n\nexport interface ExtractedMintInfo {\n  mintAuthority?: string;\n  supply?: string;\n}\n\nexport function extractMintInfo(\n  account: AccountInfo<Buffer>\n): ExtractedMintInfo {\n  const data = Buffer.from(account.data);\n  const mintInfo = MintLayout.decode(data);\n\n  const uintArray = mintInfo?.mintAuthority;\n  const pubkey = new PublicKey(uintArray);\n  const supply = BigNumber.from(mintInfo?.supply.reverse()).toString();\n  const output = {\n    mintAuthority: pubkey?.toString(),\n    supply: supply.toString(),\n  };\n\n  return output;\n}\n\nexport async function getMultipleAccountsRPC(\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  return getMultipleAccounts(connection, pubkeys, \"confirmed\");\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  pubkeys: PublicKey[],\n  commitment: string\n) => {\n  return (\n    await Promise.all(\n      chunks(pubkeys, 99).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk, commitment)\n      )\n    )\n  ).flat();\n};\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function shortenAddress(address: string) {\n  return address.length > 10\n    ? `${address.slice(0, 4)}...${address.slice(-4)}`\n    : address;\n}\n","import { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { useWallet, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getMathWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport React, { FC, useMemo } from \"react\";\n\nexport const SolanaWalletProvider: FC = (props) => {\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you want to instantiate here will be compiled into your application\n  const wallets = useMemo(() => {\n    return [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      // getTorusWallet({\n      //     options: { clientId: 'Go to https://developer.tor.us and create a client ID' }\n      // }),\n      // getLedgerWallet(),\n      // getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ];\n  }, []);\n\n  return (\n    <WalletProvider wallets={wallets}>\n      <WalletDialogProvider>{props.children}</WalletDialogProvider>\n    </WalletProvider>\n  );\n};\n\nexport const useSolanaWallet = useWallet;\n","import {\n  ChainId,\n  CHAIN_ID_SOLANA,\n  CHAIN_ID_TERRA,\n  isEVMChain,\n} from \"@certusone/wormhole-sdk\";\nimport EthereumSignerKey from \"./EthereumSignerKey\";\nimport SolanaWalletKey from \"./SolanaWalletKey\";\nimport TerraWalletKey from \"./TerraWalletKey\";\n\nfunction KeyAndBalance({ chainId }: { chainId: ChainId }) {\n  if (isEVMChain(chainId)) {\n    return (\n      <>\n        <EthereumSignerKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_SOLANA) {\n    return (\n      <>\n        <SolanaWalletKey />\n      </>\n    );\n  }\n  if (chainId === CHAIN_ID_TERRA) {\n    return (\n      <>\n        <TerraWalletKey />\n      </>\n    );\n  }\n  return null;\n}\n\nexport default KeyAndBalance;\n","const MM_ERR_WITH_INFO_START =\n  \"VM Exception while processing transaction: revert \";\nconst parseError = (e: any) =>\n  e?.data?.message?.startsWith(MM_ERR_WITH_INFO_START)\n    ? e.data.message.replace(MM_ERR_WITH_INFO_START, \"\")\n    : e?.response?.data?.error // terra error\n    ? e.response.data.error\n    : e?.message\n    ? e.message\n    : \"An unknown error occurred\";\nexport default parseError;\n","import { createTheme, responsiveFontSizes } from \"@material-ui/core\";\n\nexport const COLORS = {\n  blue: \"#1975e6\",\n  blueWithTransparency: \"rgba(25, 117, 230, 0.8)\",\n  gray: \"#4e4e54\",\n  green: \"#0ac2af\",\n  greenWithTransparency: \"rgba(10, 194, 175, 0.8)\",\n  lightGreen: \"rgba(51, 242, 223, 1)\",\n  lightBlue: \"#83b9fc\",\n  nearBlack: \"#17153f\",\n  nearBlackWithMinorTransparency: \"rgba(0,0,0,.25)\",\n  red: \"#aa0818\",\n  darkRed: \"#810612\",\n  white: \"#FFFFFF\",\n  whiteWithTransparency: \"rgba(255,255,255,.07)\",\n};\n\nexport const theme = responsiveFontSizes(\n  createTheme({\n    palette: {\n      type: \"dark\",\n      background: {\n        default: COLORS.nearBlack,\n        paper: COLORS.nearBlack,\n      },\n      divider: COLORS.white,\n      text: {\n        primary: COLORS.white,\n      },\n      primary: {\n        main: COLORS.blueWithTransparency, // #0074FF\n        light: COLORS.lightBlue,\n      },\n      secondary: {\n        main: COLORS.greenWithTransparency, // #00EFD8\n        light: COLORS.lightGreen,\n      },\n      error: {\n        main: COLORS.red,\n      },\n    },\n    typography: {\n      fontFamily: \"'Poppins', sans-serif\",\n      fontSize: 13,\n      h1: {\n        fontWeight: \"600\",\n      },\n      h2: {\n        fontWeight: \"200\",\n      },\n      h4: {\n        fontWeight: \"500\",\n      },\n    },\n    overrides: {\n      MuiCssBaseline: {\n        \"@global\": {\n          \"*\": {\n            scrollbarWidth: \"thin\",\n            scrollbarColor: `${COLORS.gray} ${COLORS.nearBlackWithMinorTransparency}`,\n          },\n          \"*::-webkit-scrollbar\": {\n            width: \"8px\",\n            height: \"8px\",\n            backgroundColor: COLORS.nearBlackWithMinorTransparency,\n          },\n          \"*::-webkit-scrollbar-thumb\": {\n            backgroundColor: COLORS.gray,\n            borderRadius: \"4px\",\n          },\n          \"*::-webkit-scrollbar-corner\": {\n            // this hides an annoying white box which appears when both scrollbars are present\n            backgroundColor: \"transparent\",\n          },\n        },\n      },\n      MuiAccordion: {\n        root: {\n          backgroundColor: COLORS.whiteWithTransparency,\n          \"&:before\": {\n            display: \"none\",\n          },\n        },\n        rounded: {\n          \"&:first-child\": {\n            borderTopLeftRadius: \"28px\",\n            borderTopRightRadius: \"28px\",\n          },\n          \"&:last-child\": {\n            borderBottomLeftRadius: \"28px\",\n            borderBottomRightRadius: \"28px\",\n          },\n        },\n      },\n      MuiAlert: {\n        root: {\n          borderRadius: \"8px\",\n          border: \"1px solid\",\n        },\n      },\n      MuiButton: {\n        root: {\n          borderRadius: \"22px\",\n          letterSpacing: \".1em\",\n        },\n        outlinedSizeSmall: {\n          padding: \"6px 9px\",\n          fontSize: \"0.70rem\",\n        },\n      },\n      MuiLink: {\n        root: {\n          color: COLORS.lightBlue,\n        },\n      },\n      MuiPaper: {\n        rounded: {\n          borderRadius: \"28px\",\n          backdropFilter: \"blur(4px)\",\n        },\n      },\n      MuiStepper: {\n        root: {\n          backgroundColor: \"transparent\",\n          padding: 0,\n        },\n      },\n      MuiStep: {\n        root: {\n          backgroundColor: COLORS.whiteWithTransparency,\n          backdropFilter: \"blur(4px)\",\n          borderRadius: \"28px\",\n          padding: \"32px 32px 16px\",\n        },\n      },\n      MuiStepConnector: {\n        lineVertical: {\n          borderLeftWidth: 0,\n        },\n      },\n      MuiStepContent: {\n        root: {\n          borderLeftWidth: 0,\n          marginLeft: 0,\n          paddingLeft: 0,\n        },\n      },\n      MuiStepLabel: {\n        label: {\n          color: COLORS.white,\n          textTransform: \"uppercase\",\n          \"&.MuiStepLabel-active\": {},\n          \"&.MuiStepLabel-completed\": {},\n        },\n      },\n      MuiTabs: {\n        root: {\n          borderBottom: `1px solid ${COLORS.white}`,\n        },\n        indicator: {\n          height: \"100%\",\n          background: \"linear-gradient(20deg, #f44b1b 0%, #eeb430 100%);\",\n          zIndex: -1,\n        },\n      },\n      MuiTab: {\n        root: {\n          color: COLORS.white,\n          fontSize: 18,\n          fontWeight: \"400\",\n          padding: 12,\n          textTransform: \"none\",\n        },\n        textColorInherit: {\n          opacity: 1,\n        },\n      },\n      MuiTableCell: {\n        root: {\n          borderBottom: \"none\",\n        },\n      },\n    },\n  })\n);\n"],"sourceRoot":""}